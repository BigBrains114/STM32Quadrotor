
Drone_Controller_3DOF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093c8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  080094d8  080094d8  000194d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095c8  080095c8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080095c8  080095c8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080095c8  080095c8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080095c8  080095c8  000195c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080095d0  080095d0  000195d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080095d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b0  20000070  08009648  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000620  08009648  00020620  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000215c5  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000386a  00000000  00000000  0004165e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015d0  00000000  00000000  00044ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014d0  00000000  00000000  00046498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c5aa  00000000  00000000  00047968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014463  00000000  00000000  00063f12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099120  00000000  00000000  00078375  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00111495  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a8c  00000000  00000000  001114e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	080094c0 	.word	0x080094c0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	080094c0 	.word	0x080094c0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_d2f>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a94:	bf24      	itt	cs
 8000a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9e:	d90d      	bls.n	8000abc <__aeabi_d2f+0x30>
 8000aa0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab4:	bf08      	it	eq
 8000ab6:	f020 0001 	biceq.w	r0, r0, #1
 8000aba:	4770      	bx	lr
 8000abc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ac0:	d121      	bne.n	8000b06 <__aeabi_d2f+0x7a>
 8000ac2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac6:	bfbc      	itt	lt
 8000ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	4770      	bxlt	lr
 8000ace:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad6:	f1c2 0218 	rsb	r2, r2, #24
 8000ada:	f1c2 0c20 	rsb	ip, r2, #32
 8000ade:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	f040 0001 	orrne.w	r0, r0, #1
 8000aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af8:	ea40 000c 	orr.w	r0, r0, ip
 8000afc:	fa23 f302 	lsr.w	r3, r3, r2
 8000b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b04:	e7cc      	b.n	8000aa0 <__aeabi_d2f+0x14>
 8000b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0a:	d107      	bne.n	8000b1c <__aeabi_d2f+0x90>
 8000b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b10:	bf1e      	ittt	ne
 8000b12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b1a:	4770      	bxne	lr
 8000b1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_frsub>:
 8000b2c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b30:	e002      	b.n	8000b38 <__addsf3>
 8000b32:	bf00      	nop

08000b34 <__aeabi_fsub>:
 8000b34:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b38 <__addsf3>:
 8000b38:	0042      	lsls	r2, r0, #1
 8000b3a:	bf1f      	itttt	ne
 8000b3c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b40:	ea92 0f03 	teqne	r2, r3
 8000b44:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b48:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b4c:	d06a      	beq.n	8000c24 <__addsf3+0xec>
 8000b4e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b52:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b56:	bfc1      	itttt	gt
 8000b58:	18d2      	addgt	r2, r2, r3
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	4048      	eorgt	r0, r1
 8000b5e:	4041      	eorgt	r1, r0
 8000b60:	bfb8      	it	lt
 8000b62:	425b      	neglt	r3, r3
 8000b64:	2b19      	cmp	r3, #25
 8000b66:	bf88      	it	hi
 8000b68:	4770      	bxhi	lr
 8000b6a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b72:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b82:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4249      	negne	r1, r1
 8000b8a:	ea92 0f03 	teq	r2, r3
 8000b8e:	d03f      	beq.n	8000c10 <__addsf3+0xd8>
 8000b90:	f1a2 0201 	sub.w	r2, r2, #1
 8000b94:	fa41 fc03 	asr.w	ip, r1, r3
 8000b98:	eb10 000c 	adds.w	r0, r0, ip
 8000b9c:	f1c3 0320 	rsb	r3, r3, #32
 8000ba0:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba8:	d502      	bpl.n	8000bb0 <__addsf3+0x78>
 8000baa:	4249      	negs	r1, r1
 8000bac:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bb0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb4:	d313      	bcc.n	8000bde <__addsf3+0xa6>
 8000bb6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bba:	d306      	bcc.n	8000bca <__addsf3+0x92>
 8000bbc:	0840      	lsrs	r0, r0, #1
 8000bbe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bc2:	f102 0201 	add.w	r2, r2, #1
 8000bc6:	2afe      	cmp	r2, #254	; 0xfe
 8000bc8:	d251      	bcs.n	8000c6e <__addsf3+0x136>
 8000bca:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bd2:	bf08      	it	eq
 8000bd4:	f020 0001 	biceq.w	r0, r0, #1
 8000bd8:	ea40 0003 	orr.w	r0, r0, r3
 8000bdc:	4770      	bx	lr
 8000bde:	0049      	lsls	r1, r1, #1
 8000be0:	eb40 0000 	adc.w	r0, r0, r0
 8000be4:	3a01      	subs	r2, #1
 8000be6:	bf28      	it	cs
 8000be8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bec:	d2ed      	bcs.n	8000bca <__addsf3+0x92>
 8000bee:	fab0 fc80 	clz	ip, r0
 8000bf2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bfa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfe:	bfaa      	itet	ge
 8000c00:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c04:	4252      	neglt	r2, r2
 8000c06:	4318      	orrge	r0, r3
 8000c08:	bfbc      	itt	lt
 8000c0a:	40d0      	lsrlt	r0, r2
 8000c0c:	4318      	orrlt	r0, r3
 8000c0e:	4770      	bx	lr
 8000c10:	f092 0f00 	teq	r2, #0
 8000c14:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c18:	bf06      	itte	eq
 8000c1a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1e:	3201      	addeq	r2, #1
 8000c20:	3b01      	subne	r3, #1
 8000c22:	e7b5      	b.n	8000b90 <__addsf3+0x58>
 8000c24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c2c:	bf18      	it	ne
 8000c2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c32:	d021      	beq.n	8000c78 <__addsf3+0x140>
 8000c34:	ea92 0f03 	teq	r2, r3
 8000c38:	d004      	beq.n	8000c44 <__addsf3+0x10c>
 8000c3a:	f092 0f00 	teq	r2, #0
 8000c3e:	bf08      	it	eq
 8000c40:	4608      	moveq	r0, r1
 8000c42:	4770      	bx	lr
 8000c44:	ea90 0f01 	teq	r0, r1
 8000c48:	bf1c      	itt	ne
 8000c4a:	2000      	movne	r0, #0
 8000c4c:	4770      	bxne	lr
 8000c4e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c52:	d104      	bne.n	8000c5e <__addsf3+0x126>
 8000c54:	0040      	lsls	r0, r0, #1
 8000c56:	bf28      	it	cs
 8000c58:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c5c:	4770      	bx	lr
 8000c5e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c62:	bf3c      	itt	cc
 8000c64:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c68:	4770      	bxcc	lr
 8000c6a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c76:	4770      	bx	lr
 8000c78:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c7c:	bf16      	itet	ne
 8000c7e:	4608      	movne	r0, r1
 8000c80:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c84:	4601      	movne	r1, r0
 8000c86:	0242      	lsls	r2, r0, #9
 8000c88:	bf06      	itte	eq
 8000c8a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8e:	ea90 0f01 	teqeq	r0, r1
 8000c92:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_ui2f>:
 8000c98:	f04f 0300 	mov.w	r3, #0
 8000c9c:	e004      	b.n	8000ca8 <__aeabi_i2f+0x8>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_i2f>:
 8000ca0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca4:	bf48      	it	mi
 8000ca6:	4240      	negmi	r0, r0
 8000ca8:	ea5f 0c00 	movs.w	ip, r0
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb4:	4601      	mov	r1, r0
 8000cb6:	f04f 0000 	mov.w	r0, #0
 8000cba:	e01c      	b.n	8000cf6 <__aeabi_l2f+0x2a>

08000cbc <__aeabi_ul2f>:
 8000cbc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc0:	bf08      	it	eq
 8000cc2:	4770      	bxeq	lr
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e00a      	b.n	8000ce0 <__aeabi_l2f+0x14>
 8000cca:	bf00      	nop

08000ccc <__aeabi_l2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd8:	d502      	bpl.n	8000ce0 <__aeabi_l2f+0x14>
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	ea5f 0c01 	movs.w	ip, r1
 8000ce4:	bf02      	ittt	eq
 8000ce6:	4684      	moveq	ip, r0
 8000ce8:	4601      	moveq	r1, r0
 8000cea:	2000      	moveq	r0, #0
 8000cec:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cf0:	bf08      	it	eq
 8000cf2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cfa:	fabc f28c 	clz	r2, ip
 8000cfe:	3a08      	subs	r2, #8
 8000d00:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d04:	db10      	blt.n	8000d28 <__aeabi_l2f+0x5c>
 8000d06:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d10:	f1c2 0220 	rsb	r2, r2, #32
 8000d14:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d18:	fa20 f202 	lsr.w	r2, r0, r2
 8000d1c:	eb43 0002 	adc.w	r0, r3, r2
 8000d20:	bf08      	it	eq
 8000d22:	f020 0001 	biceq.w	r0, r0, #1
 8000d26:	4770      	bx	lr
 8000d28:	f102 0220 	add.w	r2, r2, #32
 8000d2c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d30:	f1c2 0220 	rsb	r2, r2, #32
 8000d34:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d38:	fa21 f202 	lsr.w	r2, r1, r2
 8000d3c:	eb43 0002 	adc.w	r0, r3, r2
 8000d40:	bf08      	it	eq
 8000d42:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d46:	4770      	bx	lr

08000d48 <__aeabi_fmul>:
 8000d48:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d4c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d50:	bf1e      	ittt	ne
 8000d52:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d56:	ea92 0f0c 	teqne	r2, ip
 8000d5a:	ea93 0f0c 	teqne	r3, ip
 8000d5e:	d06f      	beq.n	8000e40 <__aeabi_fmul+0xf8>
 8000d60:	441a      	add	r2, r3
 8000d62:	ea80 0c01 	eor.w	ip, r0, r1
 8000d66:	0240      	lsls	r0, r0, #9
 8000d68:	bf18      	it	ne
 8000d6a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6e:	d01e      	beq.n	8000dae <__aeabi_fmul+0x66>
 8000d70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d74:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d78:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d7c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d84:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d88:	bf3e      	ittt	cc
 8000d8a:	0049      	lslcc	r1, r1, #1
 8000d8c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d90:	005b      	lslcc	r3, r3, #1
 8000d92:	ea40 0001 	orr.w	r0, r0, r1
 8000d96:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d9a:	2afd      	cmp	r2, #253	; 0xfd
 8000d9c:	d81d      	bhi.n	8000dda <__aeabi_fmul+0x92>
 8000d9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000da2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da6:	bf08      	it	eq
 8000da8:	f020 0001 	biceq.w	r0, r0, #1
 8000dac:	4770      	bx	lr
 8000dae:	f090 0f00 	teq	r0, #0
 8000db2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db6:	bf08      	it	eq
 8000db8:	0249      	lsleq	r1, r1, #9
 8000dba:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dbe:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dc2:	3a7f      	subs	r2, #127	; 0x7f
 8000dc4:	bfc2      	ittt	gt
 8000dc6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dca:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dce:	4770      	bxgt	lr
 8000dd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd4:	f04f 0300 	mov.w	r3, #0
 8000dd8:	3a01      	subs	r2, #1
 8000dda:	dc5d      	bgt.n	8000e98 <__aeabi_fmul+0x150>
 8000ddc:	f112 0f19 	cmn.w	r2, #25
 8000de0:	bfdc      	itt	le
 8000de2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de6:	4770      	bxle	lr
 8000de8:	f1c2 0200 	rsb	r2, r2, #0
 8000dec:	0041      	lsls	r1, r0, #1
 8000dee:	fa21 f102 	lsr.w	r1, r1, r2
 8000df2:	f1c2 0220 	rsb	r2, r2, #32
 8000df6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dfa:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfe:	f140 0000 	adc.w	r0, r0, #0
 8000e02:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e06:	bf08      	it	eq
 8000e08:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e0c:	4770      	bx	lr
 8000e0e:	f092 0f00 	teq	r2, #0
 8000e12:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e16:	bf02      	ittt	eq
 8000e18:	0040      	lsleq	r0, r0, #1
 8000e1a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1e:	3a01      	subeq	r2, #1
 8000e20:	d0f9      	beq.n	8000e16 <__aeabi_fmul+0xce>
 8000e22:	ea40 000c 	orr.w	r0, r0, ip
 8000e26:	f093 0f00 	teq	r3, #0
 8000e2a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2e:	bf02      	ittt	eq
 8000e30:	0049      	lsleq	r1, r1, #1
 8000e32:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e36:	3b01      	subeq	r3, #1
 8000e38:	d0f9      	beq.n	8000e2e <__aeabi_fmul+0xe6>
 8000e3a:	ea41 010c 	orr.w	r1, r1, ip
 8000e3e:	e78f      	b.n	8000d60 <__aeabi_fmul+0x18>
 8000e40:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e44:	ea92 0f0c 	teq	r2, ip
 8000e48:	bf18      	it	ne
 8000e4a:	ea93 0f0c 	teqne	r3, ip
 8000e4e:	d00a      	beq.n	8000e66 <__aeabi_fmul+0x11e>
 8000e50:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e54:	bf18      	it	ne
 8000e56:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e5a:	d1d8      	bne.n	8000e0e <__aeabi_fmul+0xc6>
 8000e5c:	ea80 0001 	eor.w	r0, r0, r1
 8000e60:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e64:	4770      	bx	lr
 8000e66:	f090 0f00 	teq	r0, #0
 8000e6a:	bf17      	itett	ne
 8000e6c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e70:	4608      	moveq	r0, r1
 8000e72:	f091 0f00 	teqne	r1, #0
 8000e76:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e7a:	d014      	beq.n	8000ea6 <__aeabi_fmul+0x15e>
 8000e7c:	ea92 0f0c 	teq	r2, ip
 8000e80:	d101      	bne.n	8000e86 <__aeabi_fmul+0x13e>
 8000e82:	0242      	lsls	r2, r0, #9
 8000e84:	d10f      	bne.n	8000ea6 <__aeabi_fmul+0x15e>
 8000e86:	ea93 0f0c 	teq	r3, ip
 8000e8a:	d103      	bne.n	8000e94 <__aeabi_fmul+0x14c>
 8000e8c:	024b      	lsls	r3, r1, #9
 8000e8e:	bf18      	it	ne
 8000e90:	4608      	movne	r0, r1
 8000e92:	d108      	bne.n	8000ea6 <__aeabi_fmul+0x15e>
 8000e94:	ea80 0001 	eor.w	r0, r0, r1
 8000e98:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea4:	4770      	bx	lr
 8000ea6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eaa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eae:	4770      	bx	lr

08000eb0 <__aeabi_fdiv>:
 8000eb0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb8:	bf1e      	ittt	ne
 8000eba:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ebe:	ea92 0f0c 	teqne	r2, ip
 8000ec2:	ea93 0f0c 	teqne	r3, ip
 8000ec6:	d069      	beq.n	8000f9c <__aeabi_fdiv+0xec>
 8000ec8:	eba2 0203 	sub.w	r2, r2, r3
 8000ecc:	ea80 0c01 	eor.w	ip, r0, r1
 8000ed0:	0249      	lsls	r1, r1, #9
 8000ed2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed6:	d037      	beq.n	8000f48 <__aeabi_fdiv+0x98>
 8000ed8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000edc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ee0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	bf38      	it	cc
 8000eec:	005b      	lslcc	r3, r3, #1
 8000eee:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ef2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	bf24      	itt	cs
 8000efa:	1a5b      	subcs	r3, r3, r1
 8000efc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f00:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f04:	bf24      	itt	cs
 8000f06:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f0a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f12:	bf24      	itt	cs
 8000f14:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f18:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f1c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f20:	bf24      	itt	cs
 8000f22:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f26:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f2a:	011b      	lsls	r3, r3, #4
 8000f2c:	bf18      	it	ne
 8000f2e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f32:	d1e0      	bne.n	8000ef6 <__aeabi_fdiv+0x46>
 8000f34:	2afd      	cmp	r2, #253	; 0xfd
 8000f36:	f63f af50 	bhi.w	8000dda <__aeabi_fmul+0x92>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f40:	bf08      	it	eq
 8000f42:	f020 0001 	biceq.w	r0, r0, #1
 8000f46:	4770      	bx	lr
 8000f48:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f4c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f50:	327f      	adds	r2, #127	; 0x7f
 8000f52:	bfc2      	ittt	gt
 8000f54:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f58:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f5c:	4770      	bxgt	lr
 8000f5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f62:	f04f 0300 	mov.w	r3, #0
 8000f66:	3a01      	subs	r2, #1
 8000f68:	e737      	b.n	8000dda <__aeabi_fmul+0x92>
 8000f6a:	f092 0f00 	teq	r2, #0
 8000f6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f72:	bf02      	ittt	eq
 8000f74:	0040      	lsleq	r0, r0, #1
 8000f76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f7a:	3a01      	subeq	r2, #1
 8000f7c:	d0f9      	beq.n	8000f72 <__aeabi_fdiv+0xc2>
 8000f7e:	ea40 000c 	orr.w	r0, r0, ip
 8000f82:	f093 0f00 	teq	r3, #0
 8000f86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f8a:	bf02      	ittt	eq
 8000f8c:	0049      	lsleq	r1, r1, #1
 8000f8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f92:	3b01      	subeq	r3, #1
 8000f94:	d0f9      	beq.n	8000f8a <__aeabi_fdiv+0xda>
 8000f96:	ea41 010c 	orr.w	r1, r1, ip
 8000f9a:	e795      	b.n	8000ec8 <__aeabi_fdiv+0x18>
 8000f9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fa0:	ea92 0f0c 	teq	r2, ip
 8000fa4:	d108      	bne.n	8000fb8 <__aeabi_fdiv+0x108>
 8000fa6:	0242      	lsls	r2, r0, #9
 8000fa8:	f47f af7d 	bne.w	8000ea6 <__aeabi_fmul+0x15e>
 8000fac:	ea93 0f0c 	teq	r3, ip
 8000fb0:	f47f af70 	bne.w	8000e94 <__aeabi_fmul+0x14c>
 8000fb4:	4608      	mov	r0, r1
 8000fb6:	e776      	b.n	8000ea6 <__aeabi_fmul+0x15e>
 8000fb8:	ea93 0f0c 	teq	r3, ip
 8000fbc:	d104      	bne.n	8000fc8 <__aeabi_fdiv+0x118>
 8000fbe:	024b      	lsls	r3, r1, #9
 8000fc0:	f43f af4c 	beq.w	8000e5c <__aeabi_fmul+0x114>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e76e      	b.n	8000ea6 <__aeabi_fmul+0x15e>
 8000fc8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fcc:	bf18      	it	ne
 8000fce:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fd2:	d1ca      	bne.n	8000f6a <__aeabi_fdiv+0xba>
 8000fd4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd8:	f47f af5c 	bne.w	8000e94 <__aeabi_fmul+0x14c>
 8000fdc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fe0:	f47f af3c 	bne.w	8000e5c <__aeabi_fmul+0x114>
 8000fe4:	e75f      	b.n	8000ea6 <__aeabi_fmul+0x15e>
 8000fe6:	bf00      	nop

08000fe8 <__gesf2>:
 8000fe8:	f04f 3cff 	mov.w	ip, #4294967295
 8000fec:	e006      	b.n	8000ffc <__cmpsf2+0x4>
 8000fee:	bf00      	nop

08000ff0 <__lesf2>:
 8000ff0:	f04f 0c01 	mov.w	ip, #1
 8000ff4:	e002      	b.n	8000ffc <__cmpsf2+0x4>
 8000ff6:	bf00      	nop

08000ff8 <__cmpsf2>:
 8000ff8:	f04f 0c01 	mov.w	ip, #1
 8000ffc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001000:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001004:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001008:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800100c:	bf18      	it	ne
 800100e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001012:	d011      	beq.n	8001038 <__cmpsf2+0x40>
 8001014:	b001      	add	sp, #4
 8001016:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800101a:	bf18      	it	ne
 800101c:	ea90 0f01 	teqne	r0, r1
 8001020:	bf58      	it	pl
 8001022:	ebb2 0003 	subspl.w	r0, r2, r3
 8001026:	bf88      	it	hi
 8001028:	17c8      	asrhi	r0, r1, #31
 800102a:	bf38      	it	cc
 800102c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001030:	bf18      	it	ne
 8001032:	f040 0001 	orrne.w	r0, r0, #1
 8001036:	4770      	bx	lr
 8001038:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800103c:	d102      	bne.n	8001044 <__cmpsf2+0x4c>
 800103e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001042:	d105      	bne.n	8001050 <__cmpsf2+0x58>
 8001044:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001048:	d1e4      	bne.n	8001014 <__cmpsf2+0x1c>
 800104a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104e:	d0e1      	beq.n	8001014 <__cmpsf2+0x1c>
 8001050:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop

08001058 <__aeabi_cfrcmple>:
 8001058:	4684      	mov	ip, r0
 800105a:	4608      	mov	r0, r1
 800105c:	4661      	mov	r1, ip
 800105e:	e7ff      	b.n	8001060 <__aeabi_cfcmpeq>

08001060 <__aeabi_cfcmpeq>:
 8001060:	b50f      	push	{r0, r1, r2, r3, lr}
 8001062:	f7ff ffc9 	bl	8000ff8 <__cmpsf2>
 8001066:	2800      	cmp	r0, #0
 8001068:	bf48      	it	mi
 800106a:	f110 0f00 	cmnmi.w	r0, #0
 800106e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001070 <__aeabi_fcmpeq>:
 8001070:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001074:	f7ff fff4 	bl	8001060 <__aeabi_cfcmpeq>
 8001078:	bf0c      	ite	eq
 800107a:	2001      	moveq	r0, #1
 800107c:	2000      	movne	r0, #0
 800107e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001082:	bf00      	nop

08001084 <__aeabi_fcmplt>:
 8001084:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001088:	f7ff ffea 	bl	8001060 <__aeabi_cfcmpeq>
 800108c:	bf34      	ite	cc
 800108e:	2001      	movcc	r0, #1
 8001090:	2000      	movcs	r0, #0
 8001092:	f85d fb08 	ldr.w	pc, [sp], #8
 8001096:	bf00      	nop

08001098 <__aeabi_fcmple>:
 8001098:	f84d ed08 	str.w	lr, [sp, #-8]!
 800109c:	f7ff ffe0 	bl	8001060 <__aeabi_cfcmpeq>
 80010a0:	bf94      	ite	ls
 80010a2:	2001      	movls	r0, #1
 80010a4:	2000      	movhi	r0, #0
 80010a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010aa:	bf00      	nop

080010ac <__aeabi_fcmpge>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff ffd2 	bl	8001058 <__aeabi_cfrcmple>
 80010b4:	bf94      	ite	ls
 80010b6:	2001      	movls	r0, #1
 80010b8:	2000      	movhi	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmpgt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffc8 	bl	8001058 <__aeabi_cfrcmple>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmpun>:
 80010d4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010dc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010e0:	d102      	bne.n	80010e8 <__aeabi_fcmpun+0x14>
 80010e2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010e6:	d108      	bne.n	80010fa <__aeabi_fcmpun+0x26>
 80010e8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010ec:	d102      	bne.n	80010f4 <__aeabi_fcmpun+0x20>
 80010ee:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010f2:	d102      	bne.n	80010fa <__aeabi_fcmpun+0x26>
 80010f4:	f04f 0000 	mov.w	r0, #0
 80010f8:	4770      	bx	lr
 80010fa:	f04f 0001 	mov.w	r0, #1
 80010fe:	4770      	bx	lr

08001100 <__aeabi_f2iz>:
 8001100:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001104:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001108:	d30f      	bcc.n	800112a <__aeabi_f2iz+0x2a>
 800110a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800110e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001112:	d90d      	bls.n	8001130 <__aeabi_f2iz+0x30>
 8001114:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001118:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800111c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001120:	fa23 f002 	lsr.w	r0, r3, r2
 8001124:	bf18      	it	ne
 8001126:	4240      	negne	r0, r0
 8001128:	4770      	bx	lr
 800112a:	f04f 0000 	mov.w	r0, #0
 800112e:	4770      	bx	lr
 8001130:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001134:	d101      	bne.n	800113a <__aeabi_f2iz+0x3a>
 8001136:	0242      	lsls	r2, r0, #9
 8001138:	d105      	bne.n	8001146 <__aeabi_f2iz+0x46>
 800113a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800113e:	bf08      	it	eq
 8001140:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001144:	4770      	bx	lr
 8001146:	f04f 0000 	mov.w	r0, #0
 800114a:	4770      	bx	lr

0800114c <_ZSt4asinf>:
  using ::asin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  asin(float __x)
  { return __builtin_asinf(__x); }
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f007 fcf3 	bl	8008b40 <asinf>
 800115a:	4603      	mov	r3, r0
 800115c:	4618      	mov	r0, r3
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f007 fd0d 	bl	8008b8c <sqrtf>
 8001172:	4603      	mov	r3, r0
 8001174:	4618      	mov	r0, r3
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <_ZNSt12_Vector_baseIiSaIiEE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f000 ffdc 	bl	8002142 <_ZNSaIiED1Ev>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4618      	mov	r0, r3
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <_ZNSt12_Vector_baseIiSaIiEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4618      	mov	r0, r3
 80011a0:	f000 ffbf 	bl	8002122 <_ZNSt12_Vector_baseIiSaIiEE12_Vector_implC1Ev>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4618      	mov	r0, r3
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <_ZNSt6vectorIiSaIiEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b082      	sub	sp, #8
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff ffeb 	bl	8001194 <_ZNSt12_Vector_baseIiSaIiEEC1Ev>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4618      	mov	r0, r3
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011cc:	f002 f828 	bl	8003220 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(2000);
 80011d0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80011d4:	f002 f886 	bl	80032e4 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011d8:	f000 f864 	bl	80012a4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011dc:	f000 fb20 	bl	8001820 <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 80011e0:	f000 f8ae 	bl	8001340 <_ZL12MX_I2C1_Initv>
  MX_TIM2_Init();
 80011e4:	f000 f9aa 	bl	800153c <_ZL12MX_TIM2_Initv>
  MX_TIM1_Init();
 80011e8:	f000 f8de 	bl	80013a8 <_ZL12MX_TIM1_Initv>
  MX_USART2_UART_Init();
 80011ec:	f000 faea 	bl	80017c4 <_ZL19MX_USART2_UART_Initv>
  MX_TIM3_Init();
 80011f0:	f000 fa00 	bl	80015f4 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 80011f4:	f000 fa88 	bl	8001708 <_ZL12MX_TIM4_Initv>
  /* USER CODE BEGIN 2 */

  MPU6050_Baslat();
 80011f8:	f000 fb96 	bl	8001928 <_Z14MPU6050_Baslatv>
  //Gyro kalibrasyon hatalarını hesapla.
  gyro_e_x = GyroErr(GYRO_X_ADDR);
 80011fc:	2043      	movs	r0, #67	; 0x43
 80011fe:	f000 fcc7 	bl	8001b90 <_Z7GyroErrh>
 8001202:	4603      	mov	r3, r0
 8001204:	4a1f      	ldr	r2, [pc, #124]	; (8001284 <main+0xbc>)
 8001206:	6013      	str	r3, [r2, #0]

  //Kontrolcü Timer'ı
  HAL_TIM_Base_Start_IT(&htim2);
 8001208:	481f      	ldr	r0, [pc, #124]	; (8001288 <main+0xc0>)
 800120a:	f004 f807 	bl	800521c <HAL_TIM_Base_Start_IT>

  //Micros timer
  HAL_TIM_Base_Start(&htim3);
 800120e:	481f      	ldr	r0, [pc, #124]	; (800128c <main+0xc4>)
 8001210:	f003 ffba 	bl	8005188 <HAL_TIM_Base_Start>


  //PWM çıkış timer'ları
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001214:	2100      	movs	r1, #0
 8001216:	481e      	ldr	r0, [pc, #120]	; (8001290 <main+0xc8>)
 8001218:	f004 f8a2 	bl	8005360 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800121c:	2104      	movs	r1, #4
 800121e:	481c      	ldr	r0, [pc, #112]	; (8001290 <main+0xc8>)
 8001220:	f004 f89e 	bl	8005360 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001224:	2108      	movs	r1, #8
 8001226:	481a      	ldr	r0, [pc, #104]	; (8001290 <main+0xc8>)
 8001228:	f004 f89a 	bl	8005360 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800122c:	210c      	movs	r1, #12
 800122e:	4818      	ldr	r0, [pc, #96]	; (8001290 <main+0xc8>)
 8001230:	f004 f896 	bl	8005360 <HAL_TIM_PWM_Start>

  //PPM Input Capture Kanalları
  //HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8001234:	2104      	movs	r1, #4
 8001236:	4815      	ldr	r0, [pc, #84]	; (800128c <main+0xc4>)
 8001238:	f004 f98c 	bl	8005554 <HAL_TIM_IC_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //micros = __HAL_TIM_GET_COUNTER(&htim3);
	  //sprintf(buf,"%d\r\n",int(roll)); // @suppress("Float formatting support")
	  TelemPack();
 800123c:	f000 fc42 	bl	8001ac4 <_Z9TelemPackv>
	  //sprintf(buf,"%s\n","test");
	  HAL_UART_Transmit(&huart2, (uint8_t*)buf, sizeof(struct telem_pack), 1000);
 8001240:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001244:	2214      	movs	r2, #20
 8001246:	4913      	ldr	r1, [pc, #76]	; (8001294 <main+0xcc>)
 8001248:	4813      	ldr	r0, [pc, #76]	; (8001298 <main+0xd0>)
 800124a:	f005 fac7 	bl	80067dc <HAL_UART_Transmit>
	  Check_Arm();
 800124e:	f000 fb9f 	bl	8001990 <_Z9Check_Armv>
	  Check_Disarm();
 8001252:	f000 fbeb 	bl	8001a2c <_Z12Check_Disarmv>
	  if(armed) {
 8001256:	4b11      	ldr	r3, [pc, #68]	; (800129c <main+0xd4>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d00d      	beq.n	800127a <main+0xb2>
		  if(!motor_start) {
 800125e:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <main+0xd8>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	f083 0301 	eor.w	r3, r3, #1
 8001266:	b2db      	uxtb	r3, r3
 8001268:	2b00      	cmp	r3, #0
 800126a:	d004      	beq.n	8001276 <main+0xae>
			  MotorBaslat();
 800126c:	f000 fd08 	bl	8001c80 <_Z11MotorBaslatv>
			  motor_start = true;
 8001270:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <main+0xd8>)
 8001272:	2201      	movs	r2, #1
 8001274:	701a      	strb	r2, [r3, #0]
		  }

		  PWMYaz();
 8001276:	f000 fcb9 	bl	8001bec <_Z6PWMYazv>
	  }



	  HAL_Delay(100);
 800127a:	2064      	movs	r0, #100	; 0x64
 800127c:	f002 f832 	bl	80032e4 <HAL_Delay>
	  TelemPack();
 8001280:	e7dc      	b.n	800123c <main+0x74>
 8001282:	bf00      	nop
 8001284:	2000024c 	.word	0x2000024c
 8001288:	20000128 	.word	0x20000128
 800128c:	20000170 	.word	0x20000170
 8001290:	200000e0 	.word	0x200000e0
 8001294:	200002bc 	.word	0x200002bc
 8001298:	20000200 	.word	0x20000200
 800129c:	200005f9 	.word	0x200005f9
 80012a0:	200005fa 	.word	0x200005fa

080012a4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b090      	sub	sp, #64	; 0x40
 80012a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012aa:	f107 0318 	add.w	r3, r7, #24
 80012ae:	2228      	movs	r2, #40	; 0x28
 80012b0:	2100      	movs	r1, #0
 80012b2:	4618      	mov	r0, r3
 80012b4:	f007 fff4 	bl	80092a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012b8:	1d3b      	adds	r3, r7, #4
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]
 80012c0:	609a      	str	r2, [r3, #8]
 80012c2:	60da      	str	r2, [r3, #12]
 80012c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012c6:	2301      	movs	r3, #1
 80012c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012d0:	2300      	movs	r3, #0
 80012d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012d4:	2301      	movs	r3, #1
 80012d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012d8:	2302      	movs	r3, #2
 80012da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80012e2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80012e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012e8:	f107 0318 	add.w	r3, r7, #24
 80012ec:	4618      	mov	r0, r3
 80012ee:	f003 fae1 	bl	80048b4 <HAL_RCC_OscConfig>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	bf14      	ite	ne
 80012f8:	2301      	movne	r3, #1
 80012fa:	2300      	moveq	r3, #0
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 8001302:	f000 ff09 	bl	8002118 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001306:	230f      	movs	r3, #15
 8001308:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800130a:	2302      	movs	r3, #2
 800130c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800130e:	2300      	movs	r3, #0
 8001310:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001312:	2300      	movs	r3, #0
 8001314:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	2101      	movs	r1, #1
 800131e:	4618      	mov	r0, r3
 8001320:	f003 fd48 	bl	8004db4 <HAL_RCC_ClockConfig>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	bf14      	ite	ne
 800132a:	2301      	movne	r3, #1
 800132c:	2300      	moveq	r3, #0
 800132e:	b2db      	uxtb	r3, r3
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <_Z18SystemClock_Configv+0x94>
  {
    Error_Handler();
 8001334:	f000 fef0 	bl	8002118 <Error_Handler>
  }
}
 8001338:	bf00      	nop
 800133a:	3740      	adds	r7, #64	; 0x40
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001344:	4b15      	ldr	r3, [pc, #84]	; (800139c <_ZL12MX_I2C1_Initv+0x5c>)
 8001346:	4a16      	ldr	r2, [pc, #88]	; (80013a0 <_ZL12MX_I2C1_Initv+0x60>)
 8001348:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800134a:	4b14      	ldr	r3, [pc, #80]	; (800139c <_ZL12MX_I2C1_Initv+0x5c>)
 800134c:	4a15      	ldr	r2, [pc, #84]	; (80013a4 <_ZL12MX_I2C1_Initv+0x64>)
 800134e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001350:	4b12      	ldr	r3, [pc, #72]	; (800139c <_ZL12MX_I2C1_Initv+0x5c>)
 8001352:	2200      	movs	r2, #0
 8001354:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001356:	4b11      	ldr	r3, [pc, #68]	; (800139c <_ZL12MX_I2C1_Initv+0x5c>)
 8001358:	2200      	movs	r2, #0
 800135a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800135c:	4b0f      	ldr	r3, [pc, #60]	; (800139c <_ZL12MX_I2C1_Initv+0x5c>)
 800135e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001362:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001364:	4b0d      	ldr	r3, [pc, #52]	; (800139c <_ZL12MX_I2C1_Initv+0x5c>)
 8001366:	2200      	movs	r2, #0
 8001368:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800136a:	4b0c      	ldr	r3, [pc, #48]	; (800139c <_ZL12MX_I2C1_Initv+0x5c>)
 800136c:	2200      	movs	r2, #0
 800136e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001370:	4b0a      	ldr	r3, [pc, #40]	; (800139c <_ZL12MX_I2C1_Initv+0x5c>)
 8001372:	2200      	movs	r2, #0
 8001374:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001376:	4b09      	ldr	r3, [pc, #36]	; (800139c <_ZL12MX_I2C1_Initv+0x5c>)
 8001378:	2200      	movs	r2, #0
 800137a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800137c:	4807      	ldr	r0, [pc, #28]	; (800139c <_ZL12MX_I2C1_Initv+0x5c>)
 800137e:	f002 fa99 	bl	80038b4 <HAL_I2C_Init>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	bf14      	ite	ne
 8001388:	2301      	movne	r3, #1
 800138a:	2300      	moveq	r3, #0
 800138c:	b2db      	uxtb	r3, r3
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8001392:	f000 fec1 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	2000008c 	.word	0x2000008c
 80013a0:	40005400 	.word	0x40005400
 80013a4:	00061a80 	.word	0x00061a80

080013a8 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b092      	sub	sp, #72	; 0x48
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
 80013c8:	615a      	str	r2, [r3, #20]
 80013ca:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013cc:	1d3b      	adds	r3, r7, #4
 80013ce:	2220      	movs	r2, #32
 80013d0:	2100      	movs	r1, #0
 80013d2:	4618      	mov	r0, r3
 80013d4:	f007 ff64 	bl	80092a0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013d8:	4b56      	ldr	r3, [pc, #344]	; (8001534 <_ZL12MX_TIM1_Initv+0x18c>)
 80013da:	4a57      	ldr	r2, [pc, #348]	; (8001538 <_ZL12MX_TIM1_Initv+0x190>)
 80013dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32-1;
 80013de:	4b55      	ldr	r3, [pc, #340]	; (8001534 <_ZL12MX_TIM1_Initv+0x18c>)
 80013e0:	221f      	movs	r2, #31
 80013e2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e4:	4b53      	ldr	r3, [pc, #332]	; (8001534 <_ZL12MX_TIM1_Initv+0x18c>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 80013ea:	4b52      	ldr	r3, [pc, #328]	; (8001534 <_ZL12MX_TIM1_Initv+0x18c>)
 80013ec:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80013f0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f2:	4b50      	ldr	r3, [pc, #320]	; (8001534 <_ZL12MX_TIM1_Initv+0x18c>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013f8:	4b4e      	ldr	r3, [pc, #312]	; (8001534 <_ZL12MX_TIM1_Initv+0x18c>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013fe:	4b4d      	ldr	r3, [pc, #308]	; (8001534 <_ZL12MX_TIM1_Initv+0x18c>)
 8001400:	2200      	movs	r2, #0
 8001402:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001404:	484b      	ldr	r0, [pc, #300]	; (8001534 <_ZL12MX_TIM1_Initv+0x18c>)
 8001406:	f003 ff5b 	bl	80052c0 <HAL_TIM_PWM_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	bf14      	ite	ne
 8001410:	2301      	movne	r3, #1
 8001412:	2300      	moveq	r3, #0
 8001414:	b2db      	uxtb	r3, r3
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 800141a:	f000 fe7d 	bl	8002118 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800141e:	2300      	movs	r3, #0
 8001420:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001422:	2300      	movs	r3, #0
 8001424:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001426:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800142a:	4619      	mov	r1, r3
 800142c:	4841      	ldr	r0, [pc, #260]	; (8001534 <_ZL12MX_TIM1_Initv+0x18c>)
 800142e:	f005 f8c7 	bl	80065c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	bf14      	ite	ne
 8001438:	2301      	movne	r3, #1
 800143a:	2300      	moveq	r3, #0
 800143c:	b2db      	uxtb	r3, r3
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 8001442:	f000 fe69 	bl	8002118 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001446:	2360      	movs	r3, #96	; 0x60
 8001448:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800144a:	2300      	movs	r3, #0
 800144c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800144e:	2300      	movs	r3, #0
 8001450:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001452:	2300      	movs	r3, #0
 8001454:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001456:	2300      	movs	r3, #0
 8001458:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800145a:	2300      	movs	r3, #0
 800145c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800145e:	2300      	movs	r3, #0
 8001460:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001462:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001466:	2200      	movs	r2, #0
 8001468:	4619      	mov	r1, r3
 800146a:	4832      	ldr	r0, [pc, #200]	; (8001534 <_ZL12MX_TIM1_Initv+0x18c>)
 800146c:	f004 fb14 	bl	8005a98 <HAL_TIM_PWM_ConfigChannel>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	bf14      	ite	ne
 8001476:	2301      	movne	r3, #1
 8001478:	2300      	moveq	r3, #0
 800147a:	b2db      	uxtb	r3, r3
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <_ZL12MX_TIM1_Initv+0xdc>
  {
    Error_Handler();
 8001480:	f000 fe4a 	bl	8002118 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001484:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001488:	2204      	movs	r2, #4
 800148a:	4619      	mov	r1, r3
 800148c:	4829      	ldr	r0, [pc, #164]	; (8001534 <_ZL12MX_TIM1_Initv+0x18c>)
 800148e:	f004 fb03 	bl	8005a98 <HAL_TIM_PWM_ConfigChannel>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	bf14      	ite	ne
 8001498:	2301      	movne	r3, #1
 800149a:	2300      	moveq	r3, #0
 800149c:	b2db      	uxtb	r3, r3
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <_ZL12MX_TIM1_Initv+0xfe>
  {
    Error_Handler();
 80014a2:	f000 fe39 	bl	8002118 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014aa:	2208      	movs	r2, #8
 80014ac:	4619      	mov	r1, r3
 80014ae:	4821      	ldr	r0, [pc, #132]	; (8001534 <_ZL12MX_TIM1_Initv+0x18c>)
 80014b0:	f004 faf2 	bl	8005a98 <HAL_TIM_PWM_ConfigChannel>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	bf14      	ite	ne
 80014ba:	2301      	movne	r3, #1
 80014bc:	2300      	moveq	r3, #0
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <_ZL12MX_TIM1_Initv+0x120>
  {
    Error_Handler();
 80014c4:	f000 fe28 	bl	8002118 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014cc:	220c      	movs	r2, #12
 80014ce:	4619      	mov	r1, r3
 80014d0:	4818      	ldr	r0, [pc, #96]	; (8001534 <_ZL12MX_TIM1_Initv+0x18c>)
 80014d2:	f004 fae1 	bl	8005a98 <HAL_TIM_PWM_ConfigChannel>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	bf14      	ite	ne
 80014dc:	2301      	movne	r3, #1
 80014de:	2300      	moveq	r3, #0
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <_ZL12MX_TIM1_Initv+0x142>
  {
    Error_Handler();
 80014e6:	f000 fe17 	bl	8002118 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014ea:	2300      	movs	r3, #0
 80014ec:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014ee:	2300      	movs	r3, #0
 80014f0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014f2:	2300      	movs	r3, #0
 80014f4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014fa:	2300      	movs	r3, #0
 80014fc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001502:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001504:	2300      	movs	r3, #0
 8001506:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001508:	1d3b      	adds	r3, r7, #4
 800150a:	4619      	mov	r1, r3
 800150c:	4809      	ldr	r0, [pc, #36]	; (8001534 <_ZL12MX_TIM1_Initv+0x18c>)
 800150e:	f005 f8b5 	bl	800667c <HAL_TIMEx_ConfigBreakDeadTime>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	bf14      	ite	ne
 8001518:	2301      	movne	r3, #1
 800151a:	2300      	moveq	r3, #0
 800151c:	b2db      	uxtb	r3, r3
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <_ZL12MX_TIM1_Initv+0x17e>
  {
    Error_Handler();
 8001522:	f000 fdf9 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001526:	4803      	ldr	r0, [pc, #12]	; (8001534 <_ZL12MX_TIM1_Initv+0x18c>)
 8001528:	f001 fd3c 	bl	8002fa4 <HAL_TIM_MspPostInit>

}
 800152c:	bf00      	nop
 800152e:	3748      	adds	r7, #72	; 0x48
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	200000e0 	.word	0x200000e0
 8001538:	40012c00 	.word	0x40012c00

0800153c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001542:	f107 0308 	add.w	r3, r7, #8
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]
 800154c:	609a      	str	r2, [r3, #8]
 800154e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001550:	463b      	mov	r3, r7
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001558:	4b25      	ldr	r3, [pc, #148]	; (80015f0 <_ZL12MX_TIM2_Initv+0xb4>)
 800155a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800155e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 8001560:	4b23      	ldr	r3, [pc, #140]	; (80015f0 <_ZL12MX_TIM2_Initv+0xb4>)
 8001562:	221f      	movs	r2, #31
 8001564:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001566:	4b22      	ldr	r3, [pc, #136]	; (80015f0 <_ZL12MX_TIM2_Initv+0xb4>)
 8001568:	2200      	movs	r2, #0
 800156a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 800156c:	4b20      	ldr	r3, [pc, #128]	; (80015f0 <_ZL12MX_TIM2_Initv+0xb4>)
 800156e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001572:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001574:	4b1e      	ldr	r3, [pc, #120]	; (80015f0 <_ZL12MX_TIM2_Initv+0xb4>)
 8001576:	2200      	movs	r2, #0
 8001578:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800157a:	4b1d      	ldr	r3, [pc, #116]	; (80015f0 <_ZL12MX_TIM2_Initv+0xb4>)
 800157c:	2200      	movs	r2, #0
 800157e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001580:	481b      	ldr	r0, [pc, #108]	; (80015f0 <_ZL12MX_TIM2_Initv+0xb4>)
 8001582:	f003 fdb1 	bl	80050e8 <HAL_TIM_Base_Init>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	bf14      	ite	ne
 800158c:	2301      	movne	r3, #1
 800158e:	2300      	moveq	r3, #0
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 8001596:	f000 fdbf 	bl	8002118 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800159a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800159e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015a0:	f107 0308 	add.w	r3, r7, #8
 80015a4:	4619      	mov	r1, r3
 80015a6:	4812      	ldr	r0, [pc, #72]	; (80015f0 <_ZL12MX_TIM2_Initv+0xb4>)
 80015a8:	f004 fb34 	bl	8005c14 <HAL_TIM_ConfigClockSource>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	bf14      	ite	ne
 80015b2:	2301      	movne	r3, #1
 80015b4:	2300      	moveq	r3, #0
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 80015bc:	f000 fdac 	bl	8002118 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015c0:	2300      	movs	r3, #0
 80015c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015c4:	2300      	movs	r3, #0
 80015c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015c8:	463b      	mov	r3, r7
 80015ca:	4619      	mov	r1, r3
 80015cc:	4808      	ldr	r0, [pc, #32]	; (80015f0 <_ZL12MX_TIM2_Initv+0xb4>)
 80015ce:	f004 fff7 	bl	80065c0 <HAL_TIMEx_MasterConfigSynchronization>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	bf14      	ite	ne
 80015d8:	2301      	movne	r3, #1
 80015da:	2300      	moveq	r3, #0
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 80015e2:	f000 fd99 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015e6:	bf00      	nop
 80015e8:	3718      	adds	r7, #24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000128 	.word	0x20000128

080015f4 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08a      	sub	sp, #40	; 0x28
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015fa:	f107 0318 	add.w	r3, r7, #24
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	609a      	str	r2, [r3, #8]
 8001606:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001608:	f107 0310 	add.w	r3, r7, #16
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001612:	463b      	mov	r3, r7
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800161e:	4b38      	ldr	r3, [pc, #224]	; (8001700 <_ZL12MX_TIM3_Initv+0x10c>)
 8001620:	4a38      	ldr	r2, [pc, #224]	; (8001704 <_ZL12MX_TIM3_Initv+0x110>)
 8001622:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32-1;
 8001624:	4b36      	ldr	r3, [pc, #216]	; (8001700 <_ZL12MX_TIM3_Initv+0x10c>)
 8001626:	221f      	movs	r2, #31
 8001628:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800162a:	4b35      	ldr	r3, [pc, #212]	; (8001700 <_ZL12MX_TIM3_Initv+0x10c>)
 800162c:	2200      	movs	r2, #0
 800162e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001630:	4b33      	ldr	r3, [pc, #204]	; (8001700 <_ZL12MX_TIM3_Initv+0x10c>)
 8001632:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001636:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001638:	4b31      	ldr	r3, [pc, #196]	; (8001700 <_ZL12MX_TIM3_Initv+0x10c>)
 800163a:	2200      	movs	r2, #0
 800163c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800163e:	4b30      	ldr	r3, [pc, #192]	; (8001700 <_ZL12MX_TIM3_Initv+0x10c>)
 8001640:	2200      	movs	r2, #0
 8001642:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001644:	482e      	ldr	r0, [pc, #184]	; (8001700 <_ZL12MX_TIM3_Initv+0x10c>)
 8001646:	f003 fd4f 	bl	80050e8 <HAL_TIM_Base_Init>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	bf14      	ite	ne
 8001650:	2301      	movne	r3, #1
 8001652:	2300      	moveq	r3, #0
 8001654:	b2db      	uxtb	r3, r3
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <_ZL12MX_TIM3_Initv+0x6a>
  {
    Error_Handler();
 800165a:	f000 fd5d 	bl	8002118 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800165e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001662:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001664:	f107 0318 	add.w	r3, r7, #24
 8001668:	4619      	mov	r1, r3
 800166a:	4825      	ldr	r0, [pc, #148]	; (8001700 <_ZL12MX_TIM3_Initv+0x10c>)
 800166c:	f004 fad2 	bl	8005c14 <HAL_TIM_ConfigClockSource>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	bf14      	ite	ne
 8001676:	2301      	movne	r3, #1
 8001678:	2300      	moveq	r3, #0
 800167a:	b2db      	uxtb	r3, r3
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <_ZL12MX_TIM3_Initv+0x90>
  {
    Error_Handler();
 8001680:	f000 fd4a 	bl	8002118 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001684:	481e      	ldr	r0, [pc, #120]	; (8001700 <_ZL12MX_TIM3_Initv+0x10c>)
 8001686:	f003 ff0d 	bl	80054a4 <HAL_TIM_IC_Init>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	bf14      	ite	ne
 8001690:	2301      	movne	r3, #1
 8001692:	2300      	moveq	r3, #0
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <_ZL12MX_TIM3_Initv+0xaa>
  {
    Error_Handler();
 800169a:	f000 fd3d 	bl	8002118 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800169e:	2300      	movs	r3, #0
 80016a0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016a2:	2300      	movs	r3, #0
 80016a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016a6:	f107 0310 	add.w	r3, r7, #16
 80016aa:	4619      	mov	r1, r3
 80016ac:	4814      	ldr	r0, [pc, #80]	; (8001700 <_ZL12MX_TIM3_Initv+0x10c>)
 80016ae:	f004 ff87 	bl	80065c0 <HAL_TIMEx_MasterConfigSynchronization>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	bf14      	ite	ne
 80016b8:	2301      	movne	r3, #1
 80016ba:	2300      	moveq	r3, #0
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <_ZL12MX_TIM3_Initv+0xd2>
  {
    Error_Handler();
 80016c2:	f000 fd29 	bl	8002118 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80016c6:	2300      	movs	r3, #0
 80016c8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80016ca:	2301      	movs	r3, #1
 80016cc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80016ce:	2300      	movs	r3, #0
 80016d0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80016d2:	2300      	movs	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80016d6:	463b      	mov	r3, r7
 80016d8:	2204      	movs	r2, #4
 80016da:	4619      	mov	r1, r3
 80016dc:	4808      	ldr	r0, [pc, #32]	; (8001700 <_ZL12MX_TIM3_Initv+0x10c>)
 80016de:	f004 f947 	bl	8005970 <HAL_TIM_IC_ConfigChannel>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	bf14      	ite	ne
 80016e8:	2301      	movne	r3, #1
 80016ea:	2300      	moveq	r3, #0
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <_ZL12MX_TIM3_Initv+0x102>
  {
    Error_Handler();
 80016f2:	f000 fd11 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80016f6:	bf00      	nop
 80016f8:	3728      	adds	r7, #40	; 0x28
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000170 	.word	0x20000170
 8001704:	40000400 	.word	0x40000400

08001708 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800170e:	f107 0308 	add.w	r3, r7, #8
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]
 8001718:	609a      	str	r2, [r3, #8]
 800171a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800171c:	463b      	mov	r3, r7
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001724:	4b25      	ldr	r3, [pc, #148]	; (80017bc <_ZL12MX_TIM4_Initv+0xb4>)
 8001726:	4a26      	ldr	r2, [pc, #152]	; (80017c0 <_ZL12MX_TIM4_Initv+0xb8>)
 8001728:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 32000-1;
 800172a:	4b24      	ldr	r3, [pc, #144]	; (80017bc <_ZL12MX_TIM4_Initv+0xb4>)
 800172c:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8001730:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001732:	4b22      	ldr	r3, [pc, #136]	; (80017bc <_ZL12MX_TIM4_Initv+0xb4>)
 8001734:	2200      	movs	r2, #0
 8001736:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001738:	4b20      	ldr	r3, [pc, #128]	; (80017bc <_ZL12MX_TIM4_Initv+0xb4>)
 800173a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800173e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001740:	4b1e      	ldr	r3, [pc, #120]	; (80017bc <_ZL12MX_TIM4_Initv+0xb4>)
 8001742:	2200      	movs	r2, #0
 8001744:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001746:	4b1d      	ldr	r3, [pc, #116]	; (80017bc <_ZL12MX_TIM4_Initv+0xb4>)
 8001748:	2200      	movs	r2, #0
 800174a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800174c:	481b      	ldr	r0, [pc, #108]	; (80017bc <_ZL12MX_TIM4_Initv+0xb4>)
 800174e:	f003 fccb 	bl	80050e8 <HAL_TIM_Base_Init>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	bf14      	ite	ne
 8001758:	2301      	movne	r3, #1
 800175a:	2300      	moveq	r3, #0
 800175c:	b2db      	uxtb	r3, r3
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <_ZL12MX_TIM4_Initv+0x5e>
  {
    Error_Handler();
 8001762:	f000 fcd9 	bl	8002118 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001766:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800176a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800176c:	f107 0308 	add.w	r3, r7, #8
 8001770:	4619      	mov	r1, r3
 8001772:	4812      	ldr	r0, [pc, #72]	; (80017bc <_ZL12MX_TIM4_Initv+0xb4>)
 8001774:	f004 fa4e 	bl	8005c14 <HAL_TIM_ConfigClockSource>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	bf14      	ite	ne
 800177e:	2301      	movne	r3, #1
 8001780:	2300      	moveq	r3, #0
 8001782:	b2db      	uxtb	r3, r3
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <_ZL12MX_TIM4_Initv+0x84>
  {
    Error_Handler();
 8001788:	f000 fcc6 	bl	8002118 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800178c:	2300      	movs	r3, #0
 800178e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001790:	2300      	movs	r3, #0
 8001792:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001794:	463b      	mov	r3, r7
 8001796:	4619      	mov	r1, r3
 8001798:	4808      	ldr	r0, [pc, #32]	; (80017bc <_ZL12MX_TIM4_Initv+0xb4>)
 800179a:	f004 ff11 	bl	80065c0 <HAL_TIMEx_MasterConfigSynchronization>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	bf14      	ite	ne
 80017a4:	2301      	movne	r3, #1
 80017a6:	2300      	moveq	r3, #0
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <_ZL12MX_TIM4_Initv+0xaa>
  {
    Error_Handler();
 80017ae:	f000 fcb3 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80017b2:	bf00      	nop
 80017b4:	3718      	adds	r7, #24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	200001b8 	.word	0x200001b8
 80017c0:	40000800 	.word	0x40000800

080017c4 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017c8:	4b13      	ldr	r3, [pc, #76]	; (8001818 <_ZL19MX_USART2_UART_Initv+0x54>)
 80017ca:	4a14      	ldr	r2, [pc, #80]	; (800181c <_ZL19MX_USART2_UART_Initv+0x58>)
 80017cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80017ce:	4b12      	ldr	r3, [pc, #72]	; (8001818 <_ZL19MX_USART2_UART_Initv+0x54>)
 80017d0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017d6:	4b10      	ldr	r3, [pc, #64]	; (8001818 <_ZL19MX_USART2_UART_Initv+0x54>)
 80017d8:	2200      	movs	r2, #0
 80017da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017dc:	4b0e      	ldr	r3, [pc, #56]	; (8001818 <_ZL19MX_USART2_UART_Initv+0x54>)
 80017de:	2200      	movs	r2, #0
 80017e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017e2:	4b0d      	ldr	r3, [pc, #52]	; (8001818 <_ZL19MX_USART2_UART_Initv+0x54>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017e8:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <_ZL19MX_USART2_UART_Initv+0x54>)
 80017ea:	220c      	movs	r2, #12
 80017ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ee:	4b0a      	ldr	r3, [pc, #40]	; (8001818 <_ZL19MX_USART2_UART_Initv+0x54>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017f4:	4b08      	ldr	r3, [pc, #32]	; (8001818 <_ZL19MX_USART2_UART_Initv+0x54>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017fa:	4807      	ldr	r0, [pc, #28]	; (8001818 <_ZL19MX_USART2_UART_Initv+0x54>)
 80017fc:	f004 ffa1 	bl	8006742 <HAL_UART_Init>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	bf14      	ite	ne
 8001806:	2301      	movne	r3, #1
 8001808:	2300      	moveq	r3, #0
 800180a:	b2db      	uxtb	r3, r3
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8001810:	f000 fc82 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001814:	bf00      	nop
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20000200 	.word	0x20000200
 800181c:	40004400 	.word	0x40004400

08001820 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b088      	sub	sp, #32
 8001824:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001826:	f107 0310 	add.w	r3, r7, #16
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	605a      	str	r2, [r3, #4]
 8001830:	609a      	str	r2, [r3, #8]
 8001832:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001834:	4b38      	ldr	r3, [pc, #224]	; (8001918 <_ZL12MX_GPIO_Initv+0xf8>)
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	4a37      	ldr	r2, [pc, #220]	; (8001918 <_ZL12MX_GPIO_Initv+0xf8>)
 800183a:	f043 0310 	orr.w	r3, r3, #16
 800183e:	6193      	str	r3, [r2, #24]
 8001840:	4b35      	ldr	r3, [pc, #212]	; (8001918 <_ZL12MX_GPIO_Initv+0xf8>)
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	f003 0310 	and.w	r3, r3, #16
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800184c:	4b32      	ldr	r3, [pc, #200]	; (8001918 <_ZL12MX_GPIO_Initv+0xf8>)
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	4a31      	ldr	r2, [pc, #196]	; (8001918 <_ZL12MX_GPIO_Initv+0xf8>)
 8001852:	f043 0320 	orr.w	r3, r3, #32
 8001856:	6193      	str	r3, [r2, #24]
 8001858:	4b2f      	ldr	r3, [pc, #188]	; (8001918 <_ZL12MX_GPIO_Initv+0xf8>)
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	f003 0320 	and.w	r3, r3, #32
 8001860:	60bb      	str	r3, [r7, #8]
 8001862:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001864:	4b2c      	ldr	r3, [pc, #176]	; (8001918 <_ZL12MX_GPIO_Initv+0xf8>)
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	4a2b      	ldr	r2, [pc, #172]	; (8001918 <_ZL12MX_GPIO_Initv+0xf8>)
 800186a:	f043 0304 	orr.w	r3, r3, #4
 800186e:	6193      	str	r3, [r2, #24]
 8001870:	4b29      	ldr	r3, [pc, #164]	; (8001918 <_ZL12MX_GPIO_Initv+0xf8>)
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	f003 0304 	and.w	r3, r3, #4
 8001878:	607b      	str	r3, [r7, #4]
 800187a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800187c:	4b26      	ldr	r3, [pc, #152]	; (8001918 <_ZL12MX_GPIO_Initv+0xf8>)
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	4a25      	ldr	r2, [pc, #148]	; (8001918 <_ZL12MX_GPIO_Initv+0xf8>)
 8001882:	f043 0308 	orr.w	r3, r3, #8
 8001886:	6193      	str	r3, [r2, #24]
 8001888:	4b23      	ldr	r3, [pc, #140]	; (8001918 <_ZL12MX_GPIO_Initv+0xf8>)
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	f003 0308 	and.w	r3, r3, #8
 8001890:	603b      	str	r3, [r7, #0]
 8001892:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001894:	2200      	movs	r2, #0
 8001896:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800189a:	4820      	ldr	r0, [pc, #128]	; (800191c <_ZL12MX_GPIO_Initv+0xfc>)
 800189c:	f001 ffd8 	bl	8003850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80018a0:	2200      	movs	r2, #0
 80018a2:	2102      	movs	r1, #2
 80018a4:	481e      	ldr	r0, [pc, #120]	; (8001920 <_ZL12MX_GPIO_Initv+0x100>)
 80018a6:	f001 ffd3 	bl	8003850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80018aa:	2200      	movs	r2, #0
 80018ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018b0:	481c      	ldr	r0, [pc, #112]	; (8001924 <_ZL12MX_GPIO_Initv+0x104>)
 80018b2:	f001 ffcd 	bl	8003850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80018b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018bc:	2301      	movs	r3, #1
 80018be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c4:	2302      	movs	r3, #2
 80018c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80018c8:	f107 0310 	add.w	r3, r7, #16
 80018cc:	4619      	mov	r1, r3
 80018ce:	4813      	ldr	r0, [pc, #76]	; (800191c <_ZL12MX_GPIO_Initv+0xfc>)
 80018d0:	f001 fe3a 	bl	8003548 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80018d4:	2302      	movs	r3, #2
 80018d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d8:	2301      	movs	r3, #1
 80018da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e0:	2302      	movs	r3, #2
 80018e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e4:	f107 0310 	add.w	r3, r7, #16
 80018e8:	4619      	mov	r1, r3
 80018ea:	480d      	ldr	r0, [pc, #52]	; (8001920 <_ZL12MX_GPIO_Initv+0x100>)
 80018ec:	f001 fe2c 	bl	8003548 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80018f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f6:	2301      	movs	r3, #1
 80018f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fe:	2302      	movs	r3, #2
 8001900:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001902:	f107 0310 	add.w	r3, r7, #16
 8001906:	4619      	mov	r1, r3
 8001908:	4806      	ldr	r0, [pc, #24]	; (8001924 <_ZL12MX_GPIO_Initv+0x104>)
 800190a:	f001 fe1d 	bl	8003548 <HAL_GPIO_Init>

}
 800190e:	bf00      	nop
 8001910:	3720      	adds	r7, #32
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40021000 	.word	0x40021000
 800191c:	40011000 	.word	0x40011000
 8001920:	40010c00 	.word	0x40010c00
 8001924:	40010800 	.word	0x40010800

08001928 <_Z14MPU6050_Baslatv>:

/* USER CODE BEGIN 4 */
void MPU6050_Baslat(void) {
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af04      	add	r7, sp, #16
	uint8_t config = 0x00;
 800192e:	2300      	movs	r3, #0
 8001930:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, MPU6050_POW_REG, 1, &config, 1, 5); //Güç registerını aktif et
 8001932:	2305      	movs	r3, #5
 8001934:	9302      	str	r3, [sp, #8]
 8001936:	2301      	movs	r3, #1
 8001938:	9301      	str	r3, [sp, #4]
 800193a:	1dfb      	adds	r3, r7, #7
 800193c:	9300      	str	r3, [sp, #0]
 800193e:	2301      	movs	r3, #1
 8001940:	226b      	movs	r2, #107	; 0x6b
 8001942:	21d0      	movs	r1, #208	; 0xd0
 8001944:	4811      	ldr	r0, [pc, #68]	; (800198c <_Z14MPU6050_Baslatv+0x64>)
 8001946:	f002 f8f9 	bl	8003b3c <HAL_I2C_Mem_Write>
	config = 0x18;
 800194a:	2318      	movs	r3, #24
 800194c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, GYRO_CONF_REG, 1, &config, 1, 5); //Gyro 250 d/s'ye ayarlandi.
 800194e:	2305      	movs	r3, #5
 8001950:	9302      	str	r3, [sp, #8]
 8001952:	2301      	movs	r3, #1
 8001954:	9301      	str	r3, [sp, #4]
 8001956:	1dfb      	adds	r3, r7, #7
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	2301      	movs	r3, #1
 800195c:	221b      	movs	r2, #27
 800195e:	21d0      	movs	r1, #208	; 0xd0
 8001960:	480a      	ldr	r0, [pc, #40]	; (800198c <_Z14MPU6050_Baslatv+0x64>)
 8001962:	f002 f8eb 	bl	8003b3c <HAL_I2C_Mem_Write>
	config = 0x08;
 8001966:	2308      	movs	r3, #8
 8001968:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, ACC_CONF_REG, 1, &config, 1, 5); //Acc +-8g'ye ayarlandi.
 800196a:	2305      	movs	r3, #5
 800196c:	9302      	str	r3, [sp, #8]
 800196e:	2301      	movs	r3, #1
 8001970:	9301      	str	r3, [sp, #4]
 8001972:	1dfb      	adds	r3, r7, #7
 8001974:	9300      	str	r3, [sp, #0]
 8001976:	2301      	movs	r3, #1
 8001978:	221c      	movs	r2, #28
 800197a:	21d0      	movs	r1, #208	; 0xd0
 800197c:	4803      	ldr	r0, [pc, #12]	; (800198c <_Z14MPU6050_Baslatv+0x64>)
 800197e:	f002 f8dd 	bl	8003b3c <HAL_I2C_Mem_Write>
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	2000008c 	.word	0x2000008c

08001990 <_Z9Check_Armv>:


void Check_Arm() {
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
	if(!armed) {
 8001994:	4b20      	ldr	r3, [pc, #128]	; (8001a18 <_Z9Check_Armv+0x88>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	f083 0301 	eor.w	r3, r3, #1
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d038      	beq.n	8001a14 <_Z9Check_Armv+0x84>
		if((ch[2] < 1100) && (ch[3] > 1700)) {
 80019a2:	4b1e      	ldr	r3, [pc, #120]	; (8001a1c <_Z9Check_Armv+0x8c>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f240 424b 	movw	r2, #1099	; 0x44b
 80019aa:	4293      	cmp	r3, r2
 80019ac:	dc2e      	bgt.n	8001a0c <_Z9Check_Armv+0x7c>
 80019ae:	4b1b      	ldr	r3, [pc, #108]	; (8001a1c <_Z9Check_Armv+0x8c>)
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	f240 62a4 	movw	r2, #1700	; 0x6a4
 80019b6:	4293      	cmp	r3, r2
 80019b8:	dd28      	ble.n	8001a0c <_Z9Check_Armv+0x7c>
				if(!arm_start){
 80019ba:	4b19      	ldr	r3, [pc, #100]	; (8001a20 <_Z9Check_Armv+0x90>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	f083 0301 	eor.w	r3, r3, #1
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d008      	beq.n	80019da <_Z9Check_Armv+0x4a>
					arm_timer = HAL_GetTick();
 80019c8:	f001 fc82 	bl	80032d0 <HAL_GetTick>
 80019cc:	4603      	mov	r3, r0
 80019ce:	461a      	mov	r2, r3
 80019d0:	4b14      	ldr	r3, [pc, #80]	; (8001a24 <_Z9Check_Armv+0x94>)
 80019d2:	601a      	str	r2, [r3, #0]
					arm_start = true;
 80019d4:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <_Z9Check_Armv+0x90>)
 80019d6:	2201      	movs	r2, #1
 80019d8:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GetTick() - arm_timer > 3000) {
 80019da:	f001 fc79 	bl	80032d0 <HAL_GetTick>
 80019de:	4603      	mov	r3, r0
 80019e0:	4a10      	ldr	r2, [pc, #64]	; (8001a24 <_Z9Check_Armv+0x94>)
 80019e2:	6812      	ldr	r2, [r2, #0]
 80019e4:	1a9b      	subs	r3, r3, r2
 80019e6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80019ea:	4293      	cmp	r3, r2
 80019ec:	bf8c      	ite	hi
 80019ee:	2301      	movhi	r3, #1
 80019f0:	2300      	movls	r3, #0
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d00d      	beq.n	8001a14 <_Z9Check_Armv+0x84>
					armed = true;
 80019f8:	4b07      	ldr	r3, [pc, #28]	; (8001a18 <_Z9Check_Armv+0x88>)
 80019fa:	2201      	movs	r2, #1
 80019fc:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 80019fe:	2201      	movs	r2, #1
 8001a00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a04:	4808      	ldr	r0, [pc, #32]	; (8001a28 <_Z9Check_Armv+0x98>)
 8001a06:	f001 ff23 	bl	8003850 <HAL_GPIO_WritePin>
				if(HAL_GetTick() - arm_timer > 3000) {
 8001a0a:	e003      	b.n	8001a14 <_Z9Check_Armv+0x84>
				}

		}

		else {
			arm_start = false;
 8001a0c:	4b04      	ldr	r3, [pc, #16]	; (8001a20 <_Z9Check_Armv+0x90>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	701a      	strb	r2, [r3, #0]
		}
	}

}
 8001a12:	e7ff      	b.n	8001a14 <_Z9Check_Armv+0x84>
 8001a14:	bf00      	nop
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	200005f9 	.word	0x200005f9
 8001a1c:	200005c8 	.word	0x200005c8
 8001a20:	200005f8 	.word	0x200005f8
 8001a24:	200005f0 	.word	0x200005f0
 8001a28:	40010800 	.word	0x40010800

08001a2c <_Z12Check_Disarmv>:

void Check_Disarm() {
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
	if(armed) {
 8001a30:	4b1f      	ldr	r3, [pc, #124]	; (8001ab0 <_Z12Check_Disarmv+0x84>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d038      	beq.n	8001aaa <_Z12Check_Disarmv+0x7e>
		if((ch[2] < 1100) && (ch[3] < 1100)) {
 8001a38:	4b1e      	ldr	r3, [pc, #120]	; (8001ab4 <_Z12Check_Disarmv+0x88>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f240 424b 	movw	r2, #1099	; 0x44b
 8001a40:	4293      	cmp	r3, r2
 8001a42:	dc2e      	bgt.n	8001aa2 <_Z12Check_Disarmv+0x76>
 8001a44:	4b1b      	ldr	r3, [pc, #108]	; (8001ab4 <_Z12Check_Disarmv+0x88>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	f240 424b 	movw	r2, #1099	; 0x44b
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	dc28      	bgt.n	8001aa2 <_Z12Check_Disarmv+0x76>
				if(!disarm_start){
 8001a50:	4b19      	ldr	r3, [pc, #100]	; (8001ab8 <_Z12Check_Disarmv+0x8c>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	f083 0301 	eor.w	r3, r3, #1
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d008      	beq.n	8001a70 <_Z12Check_Disarmv+0x44>
					disarm_timer = HAL_GetTick();
 8001a5e:	f001 fc37 	bl	80032d0 <HAL_GetTick>
 8001a62:	4603      	mov	r3, r0
 8001a64:	461a      	mov	r2, r3
 8001a66:	4b15      	ldr	r3, [pc, #84]	; (8001abc <_Z12Check_Disarmv+0x90>)
 8001a68:	601a      	str	r2, [r3, #0]
					disarm_start = true;
 8001a6a:	4b13      	ldr	r3, [pc, #76]	; (8001ab8 <_Z12Check_Disarmv+0x8c>)
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GetTick() - disarm_timer > 3000) {
 8001a70:	f001 fc2e 	bl	80032d0 <HAL_GetTick>
 8001a74:	4603      	mov	r3, r0
 8001a76:	4a11      	ldr	r2, [pc, #68]	; (8001abc <_Z12Check_Disarmv+0x90>)
 8001a78:	6812      	ldr	r2, [r2, #0]
 8001a7a:	1a9b      	subs	r3, r3, r2
 8001a7c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001a80:	4293      	cmp	r3, r2
 8001a82:	bf8c      	ite	hi
 8001a84:	2301      	movhi	r3, #1
 8001a86:	2300      	movls	r3, #0
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d00d      	beq.n	8001aaa <_Z12Check_Disarmv+0x7e>
					armed = false;
 8001a8e:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <_Z12Check_Disarmv+0x84>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001a94:	2200      	movs	r2, #0
 8001a96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a9a:	4809      	ldr	r0, [pc, #36]	; (8001ac0 <_Z12Check_Disarmv+0x94>)
 8001a9c:	f001 fed8 	bl	8003850 <HAL_GPIO_WritePin>
				if(HAL_GetTick() - disarm_timer > 3000) {
 8001aa0:	e003      	b.n	8001aaa <_Z12Check_Disarmv+0x7e>
				}

		}

		else {
			disarm_start = false;
 8001aa2:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <_Z12Check_Disarmv+0x8c>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001aa8:	e7ff      	b.n	8001aaa <_Z12Check_Disarmv+0x7e>
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	200005f9 	.word	0x200005f9
 8001ab4:	200005c8 	.word	0x200005c8
 8001ab8:	200005fb 	.word	0x200005fb
 8001abc:	200005f4 	.word	0x200005f4
 8001ac0:	40010800 	.word	0x40010800

08001ac4 <_Z9TelemPackv>:

void TelemPack() {
 8001ac4:	b5b0      	push	{r4, r5, r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
	  telem_pack.attitude.roll  = state.angles[0];
 8001ac8:	4b1c      	ldr	r3, [pc, #112]	; (8001b3c <_Z9TelemPackv+0x78>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a1c      	ldr	r2, [pc, #112]	; (8001b40 <_Z9TelemPackv+0x7c>)
 8001ace:	6013      	str	r3, [r2, #0]
	  telem_pack.attitude.pitch = state.angles[1];
 8001ad0:	4b1a      	ldr	r3, [pc, #104]	; (8001b3c <_Z9TelemPackv+0x78>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	4a1a      	ldr	r2, [pc, #104]	; (8001b40 <_Z9TelemPackv+0x7c>)
 8001ad6:	6053      	str	r3, [r2, #4]
	  telem_pack.attitude.yaw   = state.angles[2];
 8001ad8:	4b18      	ldr	r3, [pc, #96]	; (8001b3c <_Z9TelemPackv+0x78>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	4a18      	ldr	r2, [pc, #96]	; (8001b40 <_Z9TelemPackv+0x7c>)
 8001ade:	6093      	str	r3, [r2, #8]

	  telem_pack.pwm.w1 = controller_output[0];
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	4818      	ldr	r0, [pc, #96]	; (8001b44 <_Z9TelemPackv+0x80>)
 8001ae4:	f000 fb52 	bl	800218c <_ZNSt6vectorIiSaIiEEixEj>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	b29a      	uxth	r2, r3
 8001aee:	4b14      	ldr	r3, [pc, #80]	; (8001b40 <_Z9TelemPackv+0x7c>)
 8001af0:	819a      	strh	r2, [r3, #12]
	  telem_pack.pwm.w2 = controller_output[1];
 8001af2:	2101      	movs	r1, #1
 8001af4:	4813      	ldr	r0, [pc, #76]	; (8001b44 <_Z9TelemPackv+0x80>)
 8001af6:	f000 fb49 	bl	800218c <_ZNSt6vectorIiSaIiEEixEj>
 8001afa:	4603      	mov	r3, r0
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <_Z9TelemPackv+0x7c>)
 8001b02:	81da      	strh	r2, [r3, #14]
	  telem_pack.pwm.w3 = controller_output[2];
 8001b04:	2102      	movs	r1, #2
 8001b06:	480f      	ldr	r0, [pc, #60]	; (8001b44 <_Z9TelemPackv+0x80>)
 8001b08:	f000 fb40 	bl	800218c <_ZNSt6vectorIiSaIiEEixEj>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <_Z9TelemPackv+0x7c>)
 8001b14:	821a      	strh	r2, [r3, #16]
	  telem_pack.pwm.w4 = controller_output[3];
 8001b16:	2103      	movs	r1, #3
 8001b18:	480a      	ldr	r0, [pc, #40]	; (8001b44 <_Z9TelemPackv+0x80>)
 8001b1a:	f000 fb37 	bl	800218c <_ZNSt6vectorIiSaIiEEixEj>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <_Z9TelemPackv+0x7c>)
 8001b26:	825a      	strh	r2, [r3, #18]
	  memcpy(buf,&telem_pack,sizeof(telem_pack));
 8001b28:	4a07      	ldr	r2, [pc, #28]	; (8001b48 <_Z9TelemPackv+0x84>)
 8001b2a:	4b05      	ldr	r3, [pc, #20]	; (8001b40 <_Z9TelemPackv+0x7c>)
 8001b2c:	4614      	mov	r4, r2
 8001b2e:	461d      	mov	r5, r3
 8001b30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b34:	682b      	ldr	r3, [r5, #0]
 8001b36:	6023      	str	r3, [r4, #0]
}
 8001b38:	bf00      	nop
 8001b3a:	bdb0      	pop	{r4, r5, r7, pc}
 8001b3c:	20000284 	.word	0x20000284
 8001b40:	200002a8 	.word	0x200002a8
 8001b44:	200005a8 	.word	0x200005a8
 8001b48:	200002bc 	.word	0x200002bc

08001b4c <_Z7GyroOkuh>:

int16_t GyroOku (uint8_t addr) {
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b088      	sub	sp, #32
 8001b50:	af04      	add	r7, sp, #16
 8001b52:	4603      	mov	r3, r0
 8001b54:	71fb      	strb	r3, [r7, #7]
	uint8_t gyro_data[2];
	HAL_I2C_Mem_Read(&hi2c1, (uint16_t)MPU6050 | I2C_READ, addr, 1, gyro_data, 2, 1);
 8001b56:	79fb      	ldrb	r3, [r7, #7]
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	9302      	str	r3, [sp, #8]
 8001b5e:	2302      	movs	r3, #2
 8001b60:	9301      	str	r3, [sp, #4]
 8001b62:	f107 030c 	add.w	r3, r7, #12
 8001b66:	9300      	str	r3, [sp, #0]
 8001b68:	2301      	movs	r3, #1
 8001b6a:	21d1      	movs	r1, #209	; 0xd1
 8001b6c:	4807      	ldr	r0, [pc, #28]	; (8001b8c <_Z7GyroOkuh+0x40>)
 8001b6e:	f002 f8df 	bl	8003d30 <HAL_I2C_Mem_Read>
	int16_t gyro = gyro_data[0]<<8 | gyro_data[1];
 8001b72:	7b3b      	ldrb	r3, [r7, #12]
 8001b74:	021b      	lsls	r3, r3, #8
 8001b76:	b21a      	sxth	r2, r3
 8001b78:	7b7b      	ldrb	r3, [r7, #13]
 8001b7a:	b21b      	sxth	r3, r3
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	81fb      	strh	r3, [r7, #14]
	return gyro;
 8001b80:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3710      	adds	r7, #16
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	2000008c 	.word	0x2000008c

08001b90 <_Z7GyroErrh>:

float GyroErr(uint8_t addr) {
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	71fb      	strb	r3, [r7, #7]
	float GyroXe=0;
 8001b9a:	f04f 0300 	mov.w	r3, #0
 8001b9e:	60fb      	str	r3, [r7, #12]
	//2000 ornek al ve kayma degerini kaydet.
	for (int i=0; i<2000; i++)
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	60bb      	str	r3, [r7, #8]
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001baa:	da12      	bge.n	8001bd2 <_Z7GyroErrh+0x42>
	{
		GyroXe += (float)GyroOku(addr);
 8001bac:	79fb      	ldrb	r3, [r7, #7]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff ffcc 	bl	8001b4c <_Z7GyroOkuh>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff f872 	bl	8000ca0 <__aeabi_i2f>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	68f8      	ldr	r0, [r7, #12]
 8001bc2:	f7fe ffb9 	bl	8000b38 <__addsf3>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2000; i++)
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	60bb      	str	r3, [r7, #8]
 8001bd0:	e7e8      	b.n	8001ba4 <_Z7GyroErrh+0x14>

		} //Haberleşmeyi durdur.
	GyroXe=GyroXe/2000; //Son okunan değeri 2000'e böl.
 8001bd2:	4905      	ldr	r1, [pc, #20]	; (8001be8 <_Z7GyroErrh+0x58>)
 8001bd4:	68f8      	ldr	r0, [r7, #12]
 8001bd6:	f7ff f96b 	bl	8000eb0 <__aeabi_fdiv>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	60fb      	str	r3, [r7, #12]
	return GyroXe;
 8001bde:	68fb      	ldr	r3, [r7, #12]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3710      	adds	r7, #16
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	44fa0000 	.word	0x44fa0000

08001bec <_Z6PWMYazv>:


void PWMYaz() {
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
	  if(ch[EMERGENCY_CH-1] < 1500) {
 8001bf0:	4b20      	ldr	r3, [pc, #128]	; (8001c74 <_Z6PWMYazv+0x88>)
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	f240 52db 	movw	r2, #1499	; 0x5db
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	dc24      	bgt.n	8001c46 <_Z6PWMYazv+0x5a>
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,controller_output[0]);
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	481e      	ldr	r0, [pc, #120]	; (8001c78 <_Z6PWMYazv+0x8c>)
 8001c00:	f000 fac4 	bl	800218c <_ZNSt6vectorIiSaIiEEixEj>
 8001c04:	4603      	mov	r3, r0
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	4b1c      	ldr	r3, [pc, #112]	; (8001c7c <_Z6PWMYazv+0x90>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,controller_output[1]);
 8001c0e:	2101      	movs	r1, #1
 8001c10:	4819      	ldr	r0, [pc, #100]	; (8001c78 <_Z6PWMYazv+0x8c>)
 8001c12:	f000 fabb 	bl	800218c <_ZNSt6vectorIiSaIiEEixEj>
 8001c16:	4603      	mov	r3, r0
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	4b18      	ldr	r3, [pc, #96]	; (8001c7c <_Z6PWMYazv+0x90>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	639a      	str	r2, [r3, #56]	; 0x38
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,controller_output[2]);
 8001c20:	2102      	movs	r1, #2
 8001c22:	4815      	ldr	r0, [pc, #84]	; (8001c78 <_Z6PWMYazv+0x8c>)
 8001c24:	f000 fab2 	bl	800218c <_ZNSt6vectorIiSaIiEEixEj>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	4b13      	ldr	r3, [pc, #76]	; (8001c7c <_Z6PWMYazv+0x90>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	63da      	str	r2, [r3, #60]	; 0x3c
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,controller_output[3]);
 8001c32:	2103      	movs	r1, #3
 8001c34:	4810      	ldr	r0, [pc, #64]	; (8001c78 <_Z6PWMYazv+0x8c>)
 8001c36:	f000 faa9 	bl	800218c <_ZNSt6vectorIiSaIiEEixEj>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	4b0f      	ldr	r3, [pc, #60]	; (8001c7c <_Z6PWMYazv+0x90>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	641a      	str	r2, [r3, #64]	; 0x40
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
	  }
}
 8001c44:	e013      	b.n	8001c6e <_Z6PWMYazv+0x82>
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 8001c46:	4b0d      	ldr	r3, [pc, #52]	; (8001c7c <_Z6PWMYazv+0x90>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c4e:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 8001c50:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <_Z6PWMYazv+0x90>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c58:	639a      	str	r2, [r3, #56]	; 0x38
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
 8001c5a:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <_Z6PWMYazv+0x90>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c62:	63da      	str	r2, [r3, #60]	; 0x3c
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
 8001c64:	4b05      	ldr	r3, [pc, #20]	; (8001c7c <_Z6PWMYazv+0x90>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c6c:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	200005c8 	.word	0x200005c8
 8001c78:	200005a8 	.word	0x200005a8
 8001c7c:	200000e0 	.word	0x200000e0

08001c80 <_Z11MotorBaslatv>:




void MotorBaslat(void) {
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 8001c84:	4b0c      	ldr	r3, [pc, #48]	; (8001cb8 <_Z11MotorBaslatv+0x38>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c8c:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 8001c8e:	4b0a      	ldr	r3, [pc, #40]	; (8001cb8 <_Z11MotorBaslatv+0x38>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c96:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
 8001c98:	4b07      	ldr	r3, [pc, #28]	; (8001cb8 <_Z11MotorBaslatv+0x38>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ca0:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
 8001ca2:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <_Z11MotorBaslatv+0x38>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001caa:	641a      	str	r2, [r3, #64]	; 0x40
	 // Delay(600);
	HAL_Delay(1000);
 8001cac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cb0:	f001 fb18 	bl	80032e4 <HAL_Delay>
}
 8001cb4:	bf00      	nop
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	200000e0 	.word	0x200000e0
 8001cbc:	00000000 	.word	0x00000000

08001cc0 <HAL_TIM_PeriodElapsedCallback>:
		ITM_SendChar((*ptr++));
	}
	return len;
}

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim) {
 8001cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cc2:	b09f      	sub	sp, #124	; 0x7c
 8001cc4:	af12      	add	r7, sp, #72	; 0x48
 8001cc6:	6078      	str	r0, [r7, #4]

	if(htim == &htim2) {
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4aaf      	ldr	r2, [pc, #700]	; (8001f88 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	f040 8146 	bne.w	8001f5e <HAL_TIM_PeriodElapsedCallback+0x29e>


		  gyroX = (GyroOku(GYRO_X_ADDR))/32.8;
 8001cd2:	2043      	movs	r0, #67	; 0x43
 8001cd4:	f7ff ff3a 	bl	8001b4c <_Z7GyroOkuh>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7fe fb8a 	bl	80003f4 <__aeabi_i2d>
 8001ce0:	a3a1      	add	r3, pc, #644	; (adr r3, 8001f68 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce6:	f7fe fd19 	bl	800071c <__aeabi_ddiv>
 8001cea:	4602      	mov	r2, r0
 8001cec:	460b      	mov	r3, r1
 8001cee:	4610      	mov	r0, r2
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	f7fe fecb 	bl	8000a8c <__aeabi_d2f>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	4aa4      	ldr	r2, [pc, #656]	; (8001f8c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001cfa:	6013      	str	r3, [r2, #0]
		  gyroY = (GyroOku(GYRO_Y_ADDR))/32.8;
 8001cfc:	2045      	movs	r0, #69	; 0x45
 8001cfe:	f7ff ff25 	bl	8001b4c <_Z7GyroOkuh>
 8001d02:	4603      	mov	r3, r0
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7fe fb75 	bl	80003f4 <__aeabi_i2d>
 8001d0a:	a397      	add	r3, pc, #604	; (adr r3, 8001f68 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d10:	f7fe fd04 	bl	800071c <__aeabi_ddiv>
 8001d14:	4602      	mov	r2, r0
 8001d16:	460b      	mov	r3, r1
 8001d18:	4610      	mov	r0, r2
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	f7fe feb6 	bl	8000a8c <__aeabi_d2f>
 8001d20:	4603      	mov	r3, r0
 8001d22:	4a9b      	ldr	r2, [pc, #620]	; (8001f90 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001d24:	6013      	str	r3, [r2, #0]
		  gyroZ = (GyroOku(GYRO_Z_ADDR))/32.8;
 8001d26:	2047      	movs	r0, #71	; 0x47
 8001d28:	f7ff ff10 	bl	8001b4c <_Z7GyroOkuh>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7fe fb60 	bl	80003f4 <__aeabi_i2d>
 8001d34:	a38c      	add	r3, pc, #560	; (adr r3, 8001f68 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d3a:	f7fe fcef 	bl	800071c <__aeabi_ddiv>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	460b      	mov	r3, r1
 8001d42:	4610      	mov	r0, r2
 8001d44:	4619      	mov	r1, r3
 8001d46:	f7fe fea1 	bl	8000a8c <__aeabi_d2f>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	4a91      	ldr	r2, [pc, #580]	; (8001f94 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001d4e:	6013      	str	r3, [r2, #0]
		  //gyroX_a_x = (GyroOku(GYRO_X_ADDR)-gyro_e_x)/65.5;
		  //gyroX_a += gyroX_a_x * st;

		  float gyro[3];
		  gyro[0] = gyroX;
 8001d50:	4b8e      	ldr	r3, [pc, #568]	; (8001f8c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	617b      	str	r3, [r7, #20]
		  gyro[1] = gyroY;
 8001d56:	4b8e      	ldr	r3, [pc, #568]	; (8001f90 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	61bb      	str	r3, [r7, #24]
		  gyro[2] = gyroZ;
 8001d5c:	4b8d      	ldr	r3, [pc, #564]	; (8001f94 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	61fb      	str	r3, [r7, #28]

		  //İvmeölçer degerlerini oku
		  accX = GyroOku(ACC_X_ADDR);
 8001d62:	203b      	movs	r0, #59	; 0x3b
 8001d64:	f7ff fef2 	bl	8001b4c <_Z7GyroOkuh>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7fe ff98 	bl	8000ca0 <__aeabi_i2f>
 8001d70:	4603      	mov	r3, r0
 8001d72:	4a89      	ldr	r2, [pc, #548]	; (8001f98 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001d74:	6013      	str	r3, [r2, #0]
		  accY = GyroOku(ACC_Y_ADDR);
 8001d76:	203d      	movs	r0, #61	; 0x3d
 8001d78:	f7ff fee8 	bl	8001b4c <_Z7GyroOkuh>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7fe ff8e 	bl	8000ca0 <__aeabi_i2f>
 8001d84:	4603      	mov	r3, r0
 8001d86:	4a85      	ldr	r2, [pc, #532]	; (8001f9c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001d88:	6013      	str	r3, [r2, #0]
		  accZ = GyroOku(ACC_Z_ADDR);
 8001d8a:	203f      	movs	r0, #63	; 0x3f
 8001d8c:	f7ff fede 	bl	8001b4c <_Z7GyroOkuh>
 8001d90:	4603      	mov	r3, r0
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7fe ff84 	bl	8000ca0 <__aeabi_i2f>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	4a81      	ldr	r2, [pc, #516]	; (8001fa0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001d9c:	6013      	str	r3, [r2, #0]

		  float acc[3];
		  acc[0] = accX;
 8001d9e:	4b7e      	ldr	r3, [pc, #504]	; (8001f98 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	60bb      	str	r3, [r7, #8]
		  acc[1] = accY;
 8001da4:	4b7d      	ldr	r3, [pc, #500]	; (8001f9c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	60fb      	str	r3, [r7, #12]
		  acc[2] = accZ;
 8001daa:	4b7d      	ldr	r3, [pc, #500]	; (8001fa0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	613b      	str	r3, [r7, #16]

		  float acctop=sqrt(accX*accX+accY*accY+accZ*accZ);		//Toplam ivme
 8001db0:	4b79      	ldr	r3, [pc, #484]	; (8001f98 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a78      	ldr	r2, [pc, #480]	; (8001f98 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001db6:	6812      	ldr	r2, [r2, #0]
 8001db8:	4611      	mov	r1, r2
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7fe ffc4 	bl	8000d48 <__aeabi_fmul>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	461c      	mov	r4, r3
 8001dc4:	4b75      	ldr	r3, [pc, #468]	; (8001f9c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a74      	ldr	r2, [pc, #464]	; (8001f9c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001dca:	6812      	ldr	r2, [r2, #0]
 8001dcc:	4611      	mov	r1, r2
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7fe ffba 	bl	8000d48 <__aeabi_fmul>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4620      	mov	r0, r4
 8001dda:	f7fe fead 	bl	8000b38 <__addsf3>
 8001dde:	4603      	mov	r3, r0
 8001de0:	461c      	mov	r4, r3
 8001de2:	4b6f      	ldr	r3, [pc, #444]	; (8001fa0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a6e      	ldr	r2, [pc, #440]	; (8001fa0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001de8:	6812      	ldr	r2, [r2, #0]
 8001dea:	4611      	mov	r1, r2
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7fe ffab 	bl	8000d48 <__aeabi_fmul>
 8001df2:	4603      	mov	r3, r0
 8001df4:	4619      	mov	r1, r3
 8001df6:	4620      	mov	r0, r4
 8001df8:	f7fe fe9e 	bl	8000b38 <__addsf3>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff f9b0 	bl	8001164 <_ZSt4sqrtf>
 8001e04:	62f8      	str	r0, [r7, #44]	; 0x2c
		  pitch_acc=asin(accY/acctop)*57.324;					//İvme ölçerden hesaplanan pitch açısı
 8001e06:	4b65      	ldr	r3, [pc, #404]	; (8001f9c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff f84f 	bl	8000eb0 <__aeabi_fdiv>
 8001e12:	4603      	mov	r3, r0
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff f999 	bl	800114c <_ZSt4asinf>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7fe fafb 	bl	8000418 <__aeabi_f2d>
 8001e22:	a353      	add	r3, pc, #332	; (adr r3, 8001f70 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e28:	f7fe fb4e 	bl	80004c8 <__aeabi_dmul>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	4610      	mov	r0, r2
 8001e32:	4619      	mov	r1, r3
 8001e34:	f7fe fe2a 	bl	8000a8c <__aeabi_d2f>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	4a5a      	ldr	r2, [pc, #360]	; (8001fa4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001e3c:	6013      	str	r3, [r2, #0]

		  EKF.Run(gyro,acc);
 8001e3e:	f107 0208 	add.w	r2, r7, #8
 8001e42:	f107 0314 	add.w	r3, r7, #20
 8001e46:	4619      	mov	r1, r3
 8001e48:	4857      	ldr	r0, [pc, #348]	; (8001fa8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001e4a:	f005 fecb 	bl	8007be4 <_ZN15Kalman_Filtresi3RunEPfS0_>
		  state.angles[0]  	  = EKF.state.angles[0] + ROLL_OFFSET;
 8001e4e:	4b56      	ldr	r3, [pc, #344]	; (8001fa8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001e50:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7fe fadf 	bl	8000418 <__aeabi_f2d>
 8001e5a:	a347      	add	r3, pc, #284	; (adr r3, 8001f78 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e60:	f7fe f97c 	bl	800015c <__adddf3>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	4610      	mov	r0, r2
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	f7fe fe0e 	bl	8000a8c <__aeabi_d2f>
 8001e70:	4603      	mov	r3, r0
 8001e72:	4a4e      	ldr	r2, [pc, #312]	; (8001fac <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001e74:	6013      	str	r3, [r2, #0]
		  state.angles[1] 	  = EKF.state.angles[1] + PITCH_OFFSET;
 8001e76:	4b4c      	ldr	r3, [pc, #304]	; (8001fa8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001e78:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7fe facb 	bl	8000418 <__aeabi_f2d>
 8001e82:	a33f      	add	r3, pc, #252	; (adr r3, 8001f80 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e88:	f7fe f966 	bl	8000158 <__aeabi_dsub>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	460b      	mov	r3, r1
 8001e90:	4610      	mov	r0, r2
 8001e92:	4619      	mov	r1, r3
 8001e94:	f7fe fdfa 	bl	8000a8c <__aeabi_d2f>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	4a44      	ldr	r2, [pc, #272]	; (8001fac <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001e9c:	6053      	str	r3, [r2, #4]
		  state.angles[2]   = 	EKF.state.angles[2];
 8001e9e:	4b42      	ldr	r3, [pc, #264]	; (8001fa8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001ea0:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8001ea4:	4a41      	ldr	r2, [pc, #260]	; (8001fac <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001ea6:	6093      	str	r3, [r2, #8]

		  state.rates[0] = gyroX;
 8001ea8:	4b38      	ldr	r3, [pc, #224]	; (8001f8c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a3f      	ldr	r2, [pc, #252]	; (8001fac <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001eae:	60d3      	str	r3, [r2, #12]
		  state.rates[1] = gyroY;
 8001eb0:	4b37      	ldr	r3, [pc, #220]	; (8001f90 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a3d      	ldr	r2, [pc, #244]	; (8001fac <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001eb6:	6113      	str	r3, [r2, #16]
		  state.rates[2] = gyroZ;
 8001eb8:	4b36      	ldr	r3, [pc, #216]	; (8001f94 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a3b      	ldr	r2, [pc, #236]	; (8001fac <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001ebe:	6153      	str	r3, [r2, #20]
		 // alpha_des = 0;
		 // printf("roll: %d\r\n",int(roll));


		  controller.Run(state, state_des, ch[2]);
 8001ec0:	4b3b      	ldr	r3, [pc, #236]	; (8001fb0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f107 0c20 	add.w	ip, r7, #32
 8001ec8:	4e38      	ldr	r6, [pc, #224]	; (8001fac <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001eca:	9310      	str	r3, [sp, #64]	; 0x40
 8001ecc:	4b39      	ldr	r3, [pc, #228]	; (8001fb4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001ece:	ac07      	add	r4, sp, #28
 8001ed0:	461d      	mov	r5, r3
 8001ed2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ed4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ed6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ed8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001eda:	682b      	ldr	r3, [r5, #0]
 8001edc:	6023      	str	r3, [r4, #0]
 8001ede:	466d      	mov	r5, sp
 8001ee0:	f106 0408 	add.w	r4, r6, #8
 8001ee4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ee6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ee8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001eec:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001ef0:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001ef4:	4930      	ldr	r1, [pc, #192]	; (8001fb8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001ef6:	4660      	mov	r0, ip
 8001ef8:	f004 fea2 	bl	8006c40 <_ZN10Controller3RunE5stateS0_i>
 8001efc:	f107 0320 	add.w	r3, r7, #32
 8001f00:	4618      	mov	r0, r3
 8001f02:	f000 f952 	bl	80021aa <_ZNSt6vectorIdSaIdEED1Ev>
		  controller_output = controller.controller_output_pwm;
 8001f06:	492d      	ldr	r1, [pc, #180]	; (8001fbc <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001f08:	482d      	ldr	r0, [pc, #180]	; (8001fc0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001f0a:	f000 f977 	bl	80021fc <_ZNSt6vectorIiSaIiEEaSERKS1_>
		  w1 = controller_output[0];
 8001f0e:	2100      	movs	r1, #0
 8001f10:	482b      	ldr	r0, [pc, #172]	; (8001fc0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001f12:	f000 f93b 	bl	800218c <_ZNSt6vectorIiSaIiEEixEj>
 8001f16:	4603      	mov	r3, r0
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	b2da      	uxtb	r2, r3
 8001f1c:	4b29      	ldr	r3, [pc, #164]	; (8001fc4 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001f1e:	701a      	strb	r2, [r3, #0]
		  w2 = controller_output[1];
 8001f20:	2101      	movs	r1, #1
 8001f22:	4827      	ldr	r0, [pc, #156]	; (8001fc0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001f24:	f000 f932 	bl	800218c <_ZNSt6vectorIiSaIiEEixEj>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	b2da      	uxtb	r2, r3
 8001f2e:	4b26      	ldr	r3, [pc, #152]	; (8001fc8 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001f30:	701a      	strb	r2, [r3, #0]
		  w3 = controller_output[2];
 8001f32:	2102      	movs	r1, #2
 8001f34:	4822      	ldr	r0, [pc, #136]	; (8001fc0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001f36:	f000 f929 	bl	800218c <_ZNSt6vectorIiSaIiEEixEj>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	4b22      	ldr	r3, [pc, #136]	; (8001fcc <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8001f42:	701a      	strb	r2, [r3, #0]
		  w4 = controller_output[3];
 8001f44:	2103      	movs	r1, #3
 8001f46:	481e      	ldr	r0, [pc, #120]	; (8001fc0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001f48:	f000 f920 	bl	800218c <_ZNSt6vectorIiSaIiEEixEj>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	b2da      	uxtb	r2, r3
 8001f52:	4b1f      	ldr	r3, [pc, #124]	; (8001fd0 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8001f54:	701a      	strb	r2, [r3, #0]

		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8001f56:	2102      	movs	r1, #2
 8001f58:	481e      	ldr	r0, [pc, #120]	; (8001fd4 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8001f5a:	f001 fc91 	bl	8003880 <HAL_GPIO_TogglePin>

		}
	}
 8001f5e:	bf00      	nop
 8001f60:	3734      	adds	r7, #52	; 0x34
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f66:	bf00      	nop
 8001f68:	66666666 	.word	0x66666666
 8001f6c:	40406666 	.word	0x40406666
 8001f70:	d4fdf3b6 	.word	0xd4fdf3b6
 8001f74:	404ca978 	.word	0x404ca978
 8001f78:	cccccccd 	.word	0xcccccccd
 8001f7c:	3fdccccc 	.word	0x3fdccccc
 8001f80:	cccccccd 	.word	0xcccccccd
 8001f84:	4014cccc 	.word	0x4014cccc
 8001f88:	20000128 	.word	0x20000128
 8001f8c:	20000240 	.word	0x20000240
 8001f90:	20000244 	.word	0x20000244
 8001f94:	20000248 	.word	0x20000248
 8001f98:	20000250 	.word	0x20000250
 8001f9c:	20000254 	.word	0x20000254
 8001fa0:	20000258 	.word	0x20000258
 8001fa4:	2000025c 	.word	0x2000025c
 8001fa8:	200002d0 	.word	0x200002d0
 8001fac:	20000284 	.word	0x20000284
 8001fb0:	200005c8 	.word	0x200005c8
 8001fb4:	20000260 	.word	0x20000260
 8001fb8:	20000440 	.word	0x20000440
 8001fbc:	2000059c 	.word	0x2000059c
 8001fc0:	200005a8 	.word	0x200005a8
 8001fc4:	200005b4 	.word	0x200005b4
 8001fc8:	200005b5 	.word	0x200005b5
 8001fcc:	200005b6 	.word	0x200005b6
 8001fd0:	200005b7 	.word	0x200005b7
 8001fd4:	40010c00 	.word	0x40010c00

08001fd8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)

{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]

 if(htim == &htim3) {
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a43      	ldr	r2, [pc, #268]	; (80020f0 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d17f      	bne.n	80020e8 <HAL_TIM_IC_CaptureCallback+0x110>

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)  // if the interrupt source is channel1
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	7f1b      	ldrb	r3, [r3, #28]
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d17b      	bne.n	80020e8 <HAL_TIM_IC_CaptureCallback+0x110>
	{
				IC_Val1 = IC_Val2;
 8001ff0:	4b40      	ldr	r3, [pc, #256]	; (80020f4 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a40      	ldr	r2, [pc, #256]	; (80020f8 <HAL_TIM_IC_CaptureCallback+0x120>)
 8001ff6:	6013      	str	r3, [r2, #0]
				IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);  // read second value
 8001ff8:	2104      	movs	r1, #4
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f003 fece 	bl	8005d9c <HAL_TIM_ReadCapturedValue>
 8002000:	4603      	mov	r3, r0
 8002002:	461a      	mov	r2, r3
 8002004:	4b3b      	ldr	r3, [pc, #236]	; (80020f4 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8002006:	601a      	str	r2, [r3, #0]
				Diff = IC_Val2-IC_Val1;
 8002008:	4b3a      	ldr	r3, [pc, #232]	; (80020f4 <HAL_TIM_IC_CaptureCallback+0x11c>)
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	4b3a      	ldr	r3, [pc, #232]	; (80020f8 <HAL_TIM_IC_CaptureCallback+0x120>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	4a3a      	ldr	r2, [pc, #232]	; (80020fc <HAL_TIM_IC_CaptureCallback+0x124>)
 8002014:	6013      	str	r3, [r2, #0]
				if(Diff < 0) {
 8002016:	4b39      	ldr	r3, [pc, #228]	; (80020fc <HAL_TIM_IC_CaptureCallback+0x124>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	0fdb      	lsrs	r3, r3, #31
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d006      	beq.n	8002030 <HAL_TIM_IC_CaptureCallback+0x58>
					Diff+=65535;
 8002022:	4b36      	ldr	r3, [pc, #216]	; (80020fc <HAL_TIM_IC_CaptureCallback+0x124>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800202a:	33ff      	adds	r3, #255	; 0xff
 800202c:	4a33      	ldr	r2, [pc, #204]	; (80020fc <HAL_TIM_IC_CaptureCallback+0x124>)
 800202e:	6013      	str	r3, [r2, #0]

				}
				//printf("Diff: %d\n",Diff);
				ch[i] = Diff;
 8002030:	4b33      	ldr	r3, [pc, #204]	; (8002100 <HAL_TIM_IC_CaptureCallback+0x128>)
 8002032:	881b      	ldrh	r3, [r3, #0]
 8002034:	b21b      	sxth	r3, r3
 8002036:	4619      	mov	r1, r3
 8002038:	4b30      	ldr	r3, [pc, #192]	; (80020fc <HAL_TIM_IC_CaptureCallback+0x124>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a31      	ldr	r2, [pc, #196]	; (8002104 <HAL_TIM_IC_CaptureCallback+0x12c>)
 800203e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				if(1) {
					if(ch[i] > CH0) {
 8002042:	4b2f      	ldr	r3, [pc, #188]	; (8002100 <HAL_TIM_IC_CaptureCallback+0x128>)
 8002044:	881b      	ldrh	r3, [r3, #0]
 8002046:	b21b      	sxth	r3, r3
 8002048:	461a      	mov	r2, r3
 800204a:	4b2e      	ldr	r3, [pc, #184]	; (8002104 <HAL_TIM_IC_CaptureCallback+0x12c>)
 800204c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002050:	f241 3288 	movw	r2, #5000	; 0x1388
 8002054:	4293      	cmp	r3, r2
 8002056:	bfcc      	ite	gt
 8002058:	2301      	movgt	r3, #1
 800205a:	2300      	movle	r3, #0
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b00      	cmp	r3, #0
 8002060:	d006      	beq.n	8002070 <HAL_TIM_IC_CaptureCallback+0x98>
						//ch[CH_NUM] = ch[i];
						i = -1;
 8002062:	4b27      	ldr	r3, [pc, #156]	; (8002100 <HAL_TIM_IC_CaptureCallback+0x128>)
 8002064:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002068:	801a      	strh	r2, [r3, #0]
						sync = 1;
 800206a:	4b27      	ldr	r3, [pc, #156]	; (8002108 <HAL_TIM_IC_CaptureCallback+0x130>)
 800206c:	2201      	movs	r2, #1
 800206e:	801a      	strh	r2, [r3, #0]
					}
				}



				state_des.angles[0] =  pid.pwm2ang(ch[0]);
 8002070:	4b24      	ldr	r3, [pc, #144]	; (8002104 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	b29b      	uxth	r3, r3
 8002076:	4619      	mov	r1, r3
 8002078:	4824      	ldr	r0, [pc, #144]	; (800210c <HAL_TIM_IC_CaptureCallback+0x134>)
 800207a:	f006 fc5a 	bl	8008932 <_ZN3PID7pwm2angEt>
 800207e:	4603      	mov	r3, r0
 8002080:	4a23      	ldr	r2, [pc, #140]	; (8002110 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002082:	6013      	str	r3, [r2, #0]
				state_des.angles[1] =  pid.pwm2ang(ch[1]);
 8002084:	4b1f      	ldr	r3, [pc, #124]	; (8002104 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	b29b      	uxth	r3, r3
 800208a:	4619      	mov	r1, r3
 800208c:	481f      	ldr	r0, [pc, #124]	; (800210c <HAL_TIM_IC_CaptureCallback+0x134>)
 800208e:	f006 fc50 	bl	8008932 <_ZN3PID7pwm2angEt>
 8002092:	4603      	mov	r3, r0
 8002094:	4a1e      	ldr	r2, [pc, #120]	; (8002110 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002096:	6053      	str	r3, [r2, #4]
				state_des.angles[2] =  0;
 8002098:	4b1d      	ldr	r3, [pc, #116]	; (8002110 <HAL_TIM_IC_CaptureCallback+0x138>)
 800209a:	f04f 0200 	mov.w	r2, #0
 800209e:	609a      	str	r2, [r3, #8]
				state_des.rates[2] = pid.pwm2rate(ch[3]);
 80020a0:	4b18      	ldr	r3, [pc, #96]	; (8002104 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	4619      	mov	r1, r3
 80020a8:	4818      	ldr	r0, [pc, #96]	; (800210c <HAL_TIM_IC_CaptureCallback+0x134>)
 80020aa:	f006 fc6a 	bl	8008982 <_ZN3PID8pwm2rateEt>
 80020ae:	4603      	mov	r3, r0
 80020b0:	4a17      	ldr	r2, [pc, #92]	; (8002110 <HAL_TIM_IC_CaptureCallback+0x138>)
 80020b2:	6153      	str	r3, [r2, #20]

				i++;
 80020b4:	4b12      	ldr	r3, [pc, #72]	; (8002100 <HAL_TIM_IC_CaptureCallback+0x128>)
 80020b6:	881b      	ldrh	r3, [r3, #0]
 80020b8:	b21b      	sxth	r3, r3
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	3301      	adds	r3, #1
 80020be:	b29b      	uxth	r3, r3
 80020c0:	b21a      	sxth	r2, r3
 80020c2:	4b0f      	ldr	r3, [pc, #60]	; (8002100 <HAL_TIM_IC_CaptureCallback+0x128>)
 80020c4:	801a      	strh	r2, [r3, #0]
				i = i % (CH_NUM+1);
 80020c6:	4b0e      	ldr	r3, [pc, #56]	; (8002100 <HAL_TIM_IC_CaptureCallback+0x128>)
 80020c8:	881b      	ldrh	r3, [r3, #0]
 80020ca:	b21b      	sxth	r3, r3
 80020cc:	4619      	mov	r1, r3
 80020ce:	4b11      	ldr	r3, [pc, #68]	; (8002114 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80020d0:	fb83 2301 	smull	r2, r3, r3, r1
 80020d4:	105a      	asrs	r2, r3, #1
 80020d6:	17cb      	asrs	r3, r1, #31
 80020d8:	1ad2      	subs	r2, r2, r3
 80020da:	4613      	mov	r3, r2
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	4413      	add	r3, r2
 80020e0:	1aca      	subs	r2, r1, r3
 80020e2:	b212      	sxth	r2, r2
 80020e4:	4b06      	ldr	r3, [pc, #24]	; (8002100 <HAL_TIM_IC_CaptureCallback+0x128>)
 80020e6:	801a      	strh	r2, [r3, #0]
			//	__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_2,TIM_INPUTCHANNELPOLARITY_RISING);


	 }
	}
}
 80020e8:	bf00      	nop
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	20000170 	.word	0x20000170
 80020f4:	200005b8 	.word	0x200005b8
 80020f8:	200005bc 	.word	0x200005bc
 80020fc:	200005c0 	.word	0x200005c0
 8002100:	200005c4 	.word	0x200005c4
 8002104:	200005c8 	.word	0x200005c8
 8002108:	200005ec 	.word	0x200005ec
 800210c:	20000400 	.word	0x20000400
 8002110:	20000260 	.word	0x20000260
 8002114:	38e38e39 	.word	0x38e38e39

08002118 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800211c:	b672      	cpsid	i
}
 800211e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002120:	e7fe      	b.n	8002120 <Error_Handler+0x8>

08002122 <_ZNSt12_Vector_baseIiSaIiEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8002122:	b580      	push	{r7, lr}
 8002124:	b082      	sub	sp, #8
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 f95b 	bl	80023e6 <_ZNSaIiEC1Ev>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4618      	mov	r0, r3
 8002134:	f000 f963 	bl	80023fe <_ZNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataC1Ev>
	{ }
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4618      	mov	r0, r3
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <_ZNSaIiED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 8002142:	b580      	push	{r7, lr}
 8002144:	b082      	sub	sp, #8
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 f96a 	bl	8002424 <_ZN9__gnu_cxx13new_allocatorIiED1Ev>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4618      	mov	r0, r3
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <_ZNSt12_Vector_baseIiSaIiEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800215a:	b580      	push	{r7, lr}
 800215c:	b082      	sub	sp, #8
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	689a      	ldr	r2, [r3, #8]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8002172:	461a      	mov	r2, r3
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f000 f95f 	bl	8002438 <_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPij>
      }
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4618      	mov	r0, r3
 800217e:	f7fe fffd 	bl	800117c <_ZNSt12_Vector_baseIiSaIiEE12_Vector_implD1Ev>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4618      	mov	r0, r3
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <_ZNSt6vectorIiSaIiEEixEj>:
       *  Note that data access with this operator is unchecked and
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      reference
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_requires_subscript(__n);
	return *(this->_M_impl._M_start + __n);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4413      	add	r3, r2
      }
 80021a0:	4618      	mov	r0, r3
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bc80      	pop	{r7}
 80021a8:	4770      	bx	lr

080021aa <_ZNSt6vectorIdSaIdEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 80021aa:	b5b0      	push	{r4, r5, r7, lr}
 80021ac:	b082      	sub	sp, #8
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681c      	ldr	r4, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4618      	mov	r0, r3
 80021be:	f000 f973 	bl	80024a8 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 80021c2:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80021c4:	461a      	mov	r2, r3
 80021c6:	4629      	mov	r1, r5
 80021c8:	4620      	mov	r0, r4
 80021ca:	f000 f977 	bl	80024bc <_ZSt8_DestroyIPddEvT_S1_RSaIT0_E>
      }
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f000 f950 	bl	8002476 <_ZNSt12_Vector_baseIdSaIdEED1Ev>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4618      	mov	r0, r3
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bdb0      	pop	{r4, r5, r7, pc}

080021e0 <_ZN9__gnu_cxx14__alloc_traitsISaIiEiE27_S_propagate_on_copy_assignEv>:
    { return _Base_type::select_on_container_copy_construction(__a); }

    static void _S_on_swap(_Alloc& __a, _Alloc& __b)
    { std::__alloc_on_swap(__a, __b); }

    static constexpr bool _S_propagate_on_copy_assign()
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
    { return _Base_type::propagate_on_container_copy_assignment::value; }
 80021e4:	2300      	movs	r3, #0
 80021e6:	4618      	mov	r0, r3
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bc80      	pop	{r7}
 80021ec:	4770      	bx	lr

080021ee <_ZN9__gnu_cxx14__alloc_traitsISaIiEiE15_S_always_equalEv>:
    { return _Base_type::propagate_on_container_move_assignment::value; }

    static constexpr bool _S_propagate_on_swap()
    { return _Base_type::propagate_on_container_swap::value; }

    static constexpr bool _S_always_equal()
 80021ee:	b480      	push	{r7}
 80021f0:	af00      	add	r7, sp, #0
    { return _Base_type::is_always_equal::value; }
 80021f2:	2301      	movs	r3, #1
 80021f4:	4618      	mov	r0, r3
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bc80      	pop	{r7}
 80021fa:	4770      	bx	lr

080021fc <_ZNSt6vectorIiSaIiEEaSERKS1_>:
      return __first;
    }

  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
 80021fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
 8002206:	683a      	ldr	r2, [r7, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	429a      	cmp	r2, r3
 800220c:	f000 80e6 	beq.w	80023dc <_ZNSt6vectorIiSaIiEEaSERKS1_+0x1e0>
	{
	  _GLIBCXX_ASAN_ANNOTATE_REINIT;
#if __cplusplus >= 201103L
	  if (_Alloc_traits::_S_propagate_on_copy_assign())
 8002210:	f7ff ffe6 	bl	80021e0 <_ZN9__gnu_cxx14__alloc_traitsISaIiEiE27_S_propagate_on_copy_assignEv>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d043      	beq.n	80022a2 <_ZNSt6vectorIiSaIiEEaSERKS1_+0xa6>
	    {
	      if (!_Alloc_traits::_S_always_equal()
 800221a:	f7ff ffe8 	bl	80021ee <_ZN9__gnu_cxx14__alloc_traitsISaIiEiE15_S_always_equalEv>
 800221e:	4603      	mov	r3, r0
 8002220:	f083 0301 	eor.w	r3, r3, #1
 8002224:	b2db      	uxtb	r3, r3
	          && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
 8002226:	2b00      	cmp	r3, #0
 8002228:	d012      	beq.n	8002250 <_ZNSt6vectorIiSaIiEEaSERKS1_+0x54>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4618      	mov	r0, r3
 800222e:	f000 f953 	bl	80024d8 <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 8002232:	4604      	mov	r4, r0
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	4618      	mov	r0, r3
 8002238:	f000 f958 	bl	80024ec <_ZNKSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 800223c:	4603      	mov	r3, r0
 800223e:	4619      	mov	r1, r3
 8002240:	4620      	mov	r0, r4
 8002242:	f000 f95d 	bl	8002500 <_ZStneRKSaIiES1_>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <_ZNSt6vectorIiSaIiEEaSERKS1_+0x54>
 800224c:	2301      	movs	r3, #1
 800224e:	e000      	b.n	8002252 <_ZNSt6vectorIiSaIiEEaSERKS1_+0x56>
 8002250:	2300      	movs	r3, #0
	      if (!_Alloc_traits::_S_always_equal()
 8002252:	2b00      	cmp	r3, #0
 8002254:	d017      	beq.n	8002286 <_ZNSt6vectorIiSaIiEEaSERKS1_+0x8a>
	        {
		  // replacement allocator cannot free existing storage
		  this->clear();
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 f95d 	bl	8002516 <_ZNSt6vectorIiSaIiEE5clearEv>
		  _M_deallocate(this->_M_impl._M_start,
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6819      	ldr	r1, [r3, #0]
				this->_M_impl._M_end_of_storage
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689a      	ldr	r2, [r3, #8]
				- this->_M_impl._M_start);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	109b      	asrs	r3, r3, #2
		  _M_deallocate(this->_M_impl._M_start,
 800226e:	461a      	mov	r2, r3
 8002270:	f000 f8e2 	bl	8002438 <_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPij>
		  this->_M_impl._M_start = nullptr;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	601a      	str	r2, [r3, #0]
		  this->_M_impl._M_finish = nullptr;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	605a      	str	r2, [r3, #4]
		  this->_M_impl._M_end_of_storage = nullptr;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	609a      	str	r2, [r3, #8]
		}
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4618      	mov	r0, r3
 800228a:	f000 f925 	bl	80024d8 <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 800228e:	4604      	mov	r4, r0
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f000 f92a 	bl	80024ec <_ZNKSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 8002298:	4603      	mov	r3, r0
 800229a:	4619      	mov	r1, r3
 800229c:	4620      	mov	r0, r4
 800229e:	f000 f948 	bl	8002532 <_ZSt15__alloc_on_copyISaIiEEvRT_RKS1_>
				   __x._M_get_Tp_allocator());
	    }
#endif
	  const size_type __xlen = __x.size();
 80022a2:	6838      	ldr	r0, [r7, #0]
 80022a4:	f000 f953 	bl	800254e <_ZNKSt6vectorIiSaIiEE4sizeEv>
 80022a8:	60f8      	str	r0, [r7, #12]
	  if (__xlen > capacity())
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 f95e 	bl	800256c <_ZNKSt6vectorIiSaIiEE8capacityEv>
 80022b0:	4602      	mov	r2, r0
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	4293      	cmp	r3, r2
 80022b6:	bf8c      	ite	hi
 80022b8:	2301      	movhi	r3, #1
 80022ba:	2300      	movls	r3, #0
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d032      	beq.n	8002328 <_ZNSt6vectorIiSaIiEEaSERKS1_+0x12c>
	    {
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
 80022c2:	6838      	ldr	r0, [r7, #0]
 80022c4:	f000 f961 	bl	800258a <_ZNKSt6vectorIiSaIiEE5beginEv>
 80022c8:	4604      	mov	r4, r0
 80022ca:	6838      	ldr	r0, [r7, #0]
 80022cc:	f000 f971 	bl	80025b2 <_ZNKSt6vectorIiSaIiEE3endEv>
 80022d0:	4603      	mov	r3, r0
 80022d2:	4622      	mov	r2, r4
 80022d4:	68f9      	ldr	r1, [r7, #12]
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f000 f97f 	bl	80025da <_ZNSt6vectorIiSaIiEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKiS1_EEEEPijT_S9_>
 80022dc:	60b8      	str	r0, [r7, #8]
						   __x.end());
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681c      	ldr	r4, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f000 f8f5 	bl	80024d8 <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 80022ee:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80022f0:	461a      	mov	r2, r3
 80022f2:	4629      	mov	r1, r5
 80022f4:	4620      	mov	r0, r4
 80022f6:	f000 f98c 	bl	8002612 <_ZSt8_DestroyIPiiEvT_S1_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689a      	ldr	r2, [r3, #8]
			    - this->_M_impl._M_start);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	109b      	asrs	r3, r3, #2
	      _M_deallocate(this->_M_impl._M_start,
 800230c:	461a      	mov	r2, r3
 800230e:	f000 f893 	bl	8002438 <_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPij>
	      this->_M_impl._M_start = __tmp;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	68ba      	ldr	r2, [r7, #8]
 8002316:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	441a      	add	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	609a      	str	r2, [r3, #8]
 8002326:	e052      	b.n	80023ce <_ZNSt6vectorIiSaIiEEaSERKS1_+0x1d2>
	    }
	  else if (size() >= __xlen)
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f000 f910 	bl	800254e <_ZNKSt6vectorIiSaIiEE4sizeEv>
 800232e:	4602      	mov	r2, r0
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	4293      	cmp	r3, r2
 8002334:	bf94      	ite	ls
 8002336:	2301      	movls	r3, #1
 8002338:	2300      	movhi	r3, #0
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2b00      	cmp	r3, #0
 800233e:	d020      	beq.n	8002382 <_ZNSt6vectorIiSaIiEEaSERKS1_+0x186>
	    {
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 8002340:	6838      	ldr	r0, [r7, #0]
 8002342:	f000 f922 	bl	800258a <_ZNKSt6vectorIiSaIiEE5beginEv>
 8002346:	4604      	mov	r4, r0
 8002348:	6838      	ldr	r0, [r7, #0]
 800234a:	f000 f932 	bl	80025b2 <_ZNKSt6vectorIiSaIiEE3endEv>
 800234e:	4605      	mov	r5, r0
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f000 f96c 	bl	800262e <_ZNSt6vectorIiSaIiEE5beginEv>
 8002356:	4603      	mov	r3, r0
 8002358:	461a      	mov	r2, r3
 800235a:	4629      	mov	r1, r5
 800235c:	4620      	mov	r0, r4
 800235e:	f000 f976 	bl	800264e <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEENS1_IPiS6_EEET0_T_SB_SA_>
 8002362:	4604      	mov	r4, r0
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f000 f98a 	bl	800267e <_ZNSt6vectorIiSaIiEE3endEv>
 800236a:	4605      	mov	r5, r0
			    end(), _M_get_Tp_allocator());
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4618      	mov	r0, r3
 8002370:	f000 f8b2 	bl	80024d8 <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 8002374:	4603      	mov	r3, r0
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 8002376:	461a      	mov	r2, r3
 8002378:	4629      	mov	r1, r5
 800237a:	4620      	mov	r0, r4
 800237c:	f000 f990 	bl	80026a0 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEvT_S7_RSaIT0_E>
 8002380:	e025      	b.n	80023ce <_ZNSt6vectorIiSaIiEEaSERKS1_+0x1d2>
	    }
	  else
	    {
	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681d      	ldr	r5, [r3, #0]
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681c      	ldr	r4, [r3, #0]
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 f8df 	bl	800254e <_ZNKSt6vectorIiSaIiEE4sizeEv>
 8002390:	4603      	mov	r3, r0
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	18e1      	adds	r1, r4, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	461a      	mov	r2, r3
 800239c:	4628      	mov	r0, r5
 800239e:	f000 f98d 	bl	80026bc <_ZSt4copyIPiS0_ET0_T_S2_S1_>
			this->_M_impl._M_start);
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681c      	ldr	r4, [r3, #0]
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 f8d1 	bl	800254e <_ZNKSt6vectorIiSaIiEE4sizeEv>
 80023ac:	4603      	mov	r3, r0
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	441c      	add	r4, r3
					  __x._M_impl._M_finish,
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685d      	ldr	r5, [r3, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685e      	ldr	r6, [r3, #4]
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4618      	mov	r0, r3
 80023be:	f000 f88b 	bl	80024d8 <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 80023c2:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 80023c4:	4632      	mov	r2, r6
 80023c6:	4629      	mov	r1, r5
 80023c8:	4620      	mov	r0, r4
 80023ca:	f000 f98f 	bl	80026ec <_ZSt22__uninitialized_copy_aIPiS0_iET0_T_S2_S1_RSaIT1_E>
	    }
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	441a      	add	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	605a      	str	r2, [r3, #4]
	}
      return *this;
 80023dc:	687b      	ldr	r3, [r7, #4]
    }
 80023de:	4618      	mov	r0, r3
 80023e0:	3714      	adds	r7, #20
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080023e6 <_ZNSaIiEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b082      	sub	sp, #8
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 f98d 	bl	800270e <_ZN9__gnu_cxx13new_allocatorIiEC1Ev>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4618      	mov	r0, r3
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <_ZNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80023fe:	b480      	push	{r7}
 8002400:	b083      	sub	sp, #12
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	605a      	str	r2, [r3, #4]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	609a      	str	r2, [r3, #8]
	{ }
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4618      	mov	r0, r3
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	bc80      	pop	{r7}
 8002422:	4770      	bx	lr

08002424 <_ZN9__gnu_cxx13new_allocatorIiED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4618      	mov	r0, r3
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	bc80      	pop	{r7}
 8002436:	4770      	bx	lr

08002438 <_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPij>:
      _M_deallocate(pointer __p, size_t __n)
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
	if (__p)
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d005      	beq.n	8002456 <_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPij+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	68b9      	ldr	r1, [r7, #8]
 8002450:	4618      	mov	r0, r3
 8002452:	f000 f966 	bl	8002722 <_ZNSt16allocator_traitsISaIiEE10deallocateERS0_Pij>
      }
 8002456:	bf00      	nop
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implD1Ev>:
      struct _Vector_impl
 800245e:	b580      	push	{r7, lr}
 8002460:	b082      	sub	sp, #8
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 f96a 	bl	8002740 <_ZNSaIdED1Ev>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4618      	mov	r0, r3
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <_ZNSt12_Vector_baseIdSaIdEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8002476:	b580      	push	{r7, lr}
 8002478:	b082      	sub	sp, #8
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	689a      	ldr	r2, [r3, #8]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 800248e:	461a      	mov	r2, r3
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 f961 	bl	8002758 <_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdj>
      }
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff ffe0 	bl	800245e <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implD1Ev>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4618      	mov	r0, r3
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4618      	mov	r0, r3
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bc80      	pop	{r7}
 80024ba:	4770      	bx	lr

080024bc <_ZSt8_DestroyIPddEvT_S1_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 80024c8:	68b9      	ldr	r1, [r7, #8]
 80024ca:	68f8      	ldr	r0, [r7, #12]
 80024cc:	f000 f957 	bl	800277e <_ZSt8_DestroyIPdEvT_S1_>
    }
 80024d0:	bf00      	nop
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4618      	mov	r0, r3
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bc80      	pop	{r7}
 80024ea:	4770      	bx	lr

080024ec <_ZNKSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4618      	mov	r0, r3
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bc80      	pop	{r7}
 80024fe:	4770      	bx	lr

08002500 <_ZStneRKSaIiES1_>:
      friend bool
      operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW
      { return true; }

      friend bool
      operator!=(const allocator&, const allocator&) _GLIBCXX_NOTHROW
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
      { return false; }
 800250a:	2300      	movs	r3, #0
 800250c:	4618      	mov	r0, r3
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	bc80      	pop	{r7}
 8002514:	4770      	bx	lr

08002516 <_ZNSt6vectorIiSaIiEE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 8002516:	b580      	push	{r7, lr}
 8002518:	b082      	sub	sp, #8
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4619      	mov	r1, r3
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f000 f937 	bl	8002798 <_ZNSt6vectorIiSaIiEE15_M_erase_at_endEPi>
 800252a:	bf00      	nop
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <_ZSt15__alloc_on_copyISaIiEEvRT_RKS1_>:
    inline void
    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
 8002532:	b580      	push	{r7, lr}
 8002534:	b084      	sub	sp, #16
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
 800253a:	6039      	str	r1, [r7, #0]
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_copy_assignment __pocca;
      __do_alloc_on_copy(__one, __two, __pocca());
 800253c:	461a      	mov	r2, r3
 800253e:	6839      	ldr	r1, [r7, #0]
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f000 f94a 	bl	80027da <_ZSt18__do_alloc_on_copyISaIiEEvRT_RKS1_St17integral_constantIbLb0EE>
    }
 8002546:	bf00      	nop
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <_ZNKSt6vectorIiSaIiEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800254e:	b480      	push	{r7}
 8002550:	b083      	sub	sp, #12
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685a      	ldr	r2, [r3, #4]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	109b      	asrs	r3, r3, #2
 8002562:	4618      	mov	r0, r3
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	bc80      	pop	{r7}
 800256a:	4770      	bx	lr

0800256c <_ZNKSt6vectorIiSaIiEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	689a      	ldr	r2, [r3, #8]
			 - this->_M_impl._M_start); }
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	109b      	asrs	r3, r3, #2
 8002580:	4618      	mov	r0, r3
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	bc80      	pop	{r7}
 8002588:	4770      	bx	lr

0800258a <_ZNKSt6vectorIiSaIiEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 800258a:	b580      	push	{r7, lr}
 800258c:	b084      	sub	sp, #16
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	60fb      	str	r3, [r7, #12]
 8002598:	f107 020c 	add.w	r2, r7, #12
 800259c:	f107 0308 	add.w	r3, r7, #8
 80025a0:	4611      	mov	r1, r2
 80025a2:	4618      	mov	r0, r3
 80025a4:	f000 f924 	bl	80027f0 <_ZN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEC1ERKS2_>
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	4618      	mov	r0, r3
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <_ZNKSt6vectorIiSaIiEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b084      	sub	sp, #16
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	60fb      	str	r3, [r7, #12]
 80025c0:	f107 020c 	add.w	r2, r7, #12
 80025c4:	f107 0308 	add.w	r3, r7, #8
 80025c8:	4611      	mov	r1, r2
 80025ca:	4618      	mov	r0, r3
 80025cc:	f000 f910 	bl	80027f0 <_ZN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEC1ERKS2_>
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	4618      	mov	r0, r3
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <_ZNSt6vectorIiSaIiEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKiS1_EEEEPijT_S9_>:
       *  Memory expansion handler.  Uses the member allocation function to
       *  obtain @a n bytes of memory, and then copies [first,last) into it.
       */
      template<typename _ForwardIterator>
	pointer
	_M_allocate_and_copy(size_type __n,
 80025da:	b580      	push	{r7, lr}
 80025dc:	b086      	sub	sp, #24
 80025de:	af00      	add	r7, sp, #0
 80025e0:	60f8      	str	r0, [r7, #12]
 80025e2:	60b9      	str	r1, [r7, #8]
 80025e4:	607a      	str	r2, [r7, #4]
 80025e6:	603b      	str	r3, [r7, #0]
			     _ForwardIterator __first, _ForwardIterator __last)
	{
	  pointer __result = this->_M_allocate(__n);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	68b9      	ldr	r1, [r7, #8]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f000 f90e 	bl	800280e <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj>
 80025f2:	6178      	str	r0, [r7, #20]
	  __try
	    {
	      std::__uninitialized_copy_a(__first, __last, __result,
					  _M_get_Tp_allocator());
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7ff ff6e 	bl	80024d8 <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 80025fc:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 80025fe:	697a      	ldr	r2, [r7, #20]
 8002600:	6839      	ldr	r1, [r7, #0]
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f917 	bl	8002836 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEEPiiET0_T_SA_S9_RSaIT1_E>
	      return __result;
 8002608:	697b      	ldr	r3, [r7, #20]
	  __catch(...)
	    {
	      _M_deallocate(__result, __n);
	      __throw_exception_again;
	    }
	}
 800260a:	4618      	mov	r0, r3
 800260c:	3718      	adds	r7, #24
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <_ZSt8_DestroyIPiiEvT_S1_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8002612:	b580      	push	{r7, lr}
 8002614:	b084      	sub	sp, #16
 8002616:	af00      	add	r7, sp, #0
 8002618:	60f8      	str	r0, [r7, #12]
 800261a:	60b9      	str	r1, [r7, #8]
 800261c:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800261e:	68b9      	ldr	r1, [r7, #8]
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f000 f919 	bl	8002858 <_ZSt8_DestroyIPiEvT_S1_>
    }
 8002626:	bf00      	nop
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <_ZNSt6vectorIiSaIiEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800262e:	b580      	push	{r7, lr}
 8002630:	b084      	sub	sp, #16
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	f107 030c 	add.w	r3, r7, #12
 800263c:	4611      	mov	r1, r2
 800263e:	4618      	mov	r0, r3
 8002640:	f000 f917 	bl	8002872 <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEC1ERKS1_>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	4618      	mov	r0, r3
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEENS1_IPiS6_EEET0_T_SB_SA_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 800264e:	b590      	push	{r4, r7, lr}
 8002650:	b085      	sub	sp, #20
 8002652:	af00      	add	r7, sp, #0
 8002654:	60f8      	str	r0, [r7, #12]
 8002656:	60b9      	str	r1, [r7, #8]
 8002658:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a2<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800265a:	68f8      	ldr	r0, [r7, #12]
 800265c:	f000 f918 	bl	8002890 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEEET_S8_>
 8002660:	4604      	mov	r4, r0
 8002662:	68b8      	ldr	r0, [r7, #8]
 8002664:	f000 f914 	bl	8002890 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEEET_S8_>
 8002668:	4603      	mov	r3, r0
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	4619      	mov	r1, r3
 800266e:	4620      	mov	r0, r4
 8002670:	f000 f918 	bl	80028a4 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEENS1_IPiS6_EEET1_T0_SB_SA_>
 8002674:	4603      	mov	r3, r0
    }
 8002676:	4618      	mov	r0, r3
 8002678:	3714      	adds	r7, #20
 800267a:	46bd      	mov	sp, r7
 800267c:	bd90      	pop	{r4, r7, pc}

0800267e <_ZNSt6vectorIiSaIiEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800267e:	b580      	push	{r7, lr}
 8002680:	b084      	sub	sp, #16
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	1d1a      	adds	r2, r3, #4
 800268a:	f107 030c 	add.w	r3, r7, #12
 800268e:	4611      	mov	r1, r2
 8002690:	4618      	mov	r0, r3
 8002692:	f000 f8ee 	bl	8002872 <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEC1ERKS1_>
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	4618      	mov	r0, r3
 800269a:	3710      	adds	r7, #16
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEvT_S7_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 80026ac:	68b9      	ldr	r1, [r7, #8]
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	f000 f919 	bl	80028e6 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEvT_S7_>
    }
 80026b4:	bf00      	nop
 80026b6:	3710      	adds	r7, #16
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <_ZSt4copyIPiS0_ET0_T_S2_S1_>:
    copy(_II __first, _II __last, _OI __result)
 80026bc:	b590      	push	{r4, r7, lr}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80026c8:	68f8      	ldr	r0, [r7, #12]
 80026ca:	f000 f919 	bl	8002900 <_ZSt12__miter_baseIPiET_S1_>
 80026ce:	4604      	mov	r4, r0
 80026d0:	68b8      	ldr	r0, [r7, #8]
 80026d2:	f000 f915 	bl	8002900 <_ZSt12__miter_baseIPiET_S1_>
 80026d6:	4603      	mov	r3, r0
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	4619      	mov	r1, r3
 80026dc:	4620      	mov	r0, r4
 80026de:	f000 f919 	bl	8002914 <_ZSt14__copy_move_a2ILb0EPiS0_ET1_T0_S2_S1_>
 80026e2:	4603      	mov	r3, r0
    }
 80026e4:	4618      	mov	r0, r3
 80026e6:	3714      	adds	r7, #20
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd90      	pop	{r4, r7, pc}

080026ec <_ZSt22__uninitialized_copy_aIPiS0_iET0_T_S2_S1_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
 80026f8:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	68b9      	ldr	r1, [r7, #8]
 80026fe:	68f8      	ldr	r0, [r7, #12]
 8002700:	f000 f92b 	bl	800295a <_ZSt18uninitialized_copyIPiS0_ET0_T_S2_S1_>
 8002704:	4603      	mov	r3, r0
 8002706:	4618      	mov	r0, r3
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <_ZN9__gnu_cxx13new_allocatorIiEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800270e:	b480      	push	{r7}
 8002710:	b083      	sub	sp, #12
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4618      	mov	r0, r3
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	bc80      	pop	{r7}
 8002720:	4770      	bx	lr

08002722 <_ZNSt16allocator_traitsISaIiEE10deallocateERS0_Pij>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002722:	b580      	push	{r7, lr}
 8002724:	b084      	sub	sp, #16
 8002726:	af00      	add	r7, sp, #0
 8002728:	60f8      	str	r0, [r7, #12]
 800272a:	60b9      	str	r1, [r7, #8]
 800272c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	68b9      	ldr	r1, [r7, #8]
 8002732:	68f8      	ldr	r0, [r7, #12]
 8002734:	f000 f923 	bl	800297e <_ZN9__gnu_cxx13new_allocatorIiE10deallocateEPij>
 8002738:	bf00      	nop
 800273a:	3710      	adds	r7, #16
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <_ZNSaIdED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f000 f925 	bl	8002998 <_ZN9__gnu_cxx13new_allocatorIdED1Ev>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4618      	mov	r0, r3
 8002752:	3708      	adds	r7, #8
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdj>:
      _M_deallocate(pointer __p, size_t __n)
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
	if (__p)
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d005      	beq.n	8002776 <_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	68b9      	ldr	r1, [r7, #8]
 8002770:	4618      	mov	r0, r3
 8002772:	f000 f91b 	bl	80029ac <_ZNSt16allocator_traitsISaIdEE10deallocateERS0_Pdj>
      }
 8002776:	bf00      	nop
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <_ZSt8_DestroyIPdEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800277e:	b580      	push	{r7, lr}
 8002780:	b082      	sub	sp, #8
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
 8002786:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8002788:	6839      	ldr	r1, [r7, #0]
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 f91d 	bl	80029ca <_ZNSt12_Destroy_auxILb1EE9__destroyIPdEEvT_S3_>
    }
 8002790:	bf00      	nop
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <_ZNSt6vectorIiSaIiEE15_M_erase_at_endEPi>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8002798:	b590      	push	{r4, r7, lr}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685a      	ldr	r2, [r3, #4]
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	109b      	asrs	r3, r3, #2
 80027ac:	60fb      	str	r3, [r7, #12]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00e      	beq.n	80027d2 <_ZNSt6vectorIiSaIiEE15_M_erase_at_endEPi+0x3a>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7ff fe8c 	bl	80024d8 <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 80027c0:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 80027c2:	461a      	mov	r2, r3
 80027c4:	4621      	mov	r1, r4
 80027c6:	6838      	ldr	r0, [r7, #0]
 80027c8:	f7ff ff23 	bl	8002612 <_ZSt8_DestroyIPiiEvT_S1_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 80027d2:	bf00      	nop
 80027d4:	3714      	adds	r7, #20
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd90      	pop	{r4, r7, pc}

080027da <_ZSt18__do_alloc_on_copyISaIiEEvRT_RKS1_St17integral_constantIbLb0EE>:
    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
 80027da:	b480      	push	{r7}
 80027dc:	b085      	sub	sp, #20
 80027de:	af00      	add	r7, sp, #0
 80027e0:	60f8      	str	r0, [r7, #12]
 80027e2:	60b9      	str	r1, [r7, #8]
 80027e4:	713a      	strb	r2, [r7, #4]
    { }
 80027e6:	bf00      	nop
 80027e8:	3714      	adds	r7, #20
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr

080027f0 <_ZN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEC1ERKS2_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	601a      	str	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4618      	mov	r0, r3
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	bc80      	pop	{r7}
 800280c:	4770      	bx	lr

0800280e <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800280e:	b580      	push	{r7, lr}
 8002810:	b082      	sub	sp, #8
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
 8002816:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d006      	beq.n	800282c <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj+0x1e>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6839      	ldr	r1, [r7, #0]
 8002822:	4618      	mov	r0, r3
 8002824:	f000 f8db 	bl	80029de <_ZNSt16allocator_traitsISaIiEE8allocateERS0_j>
 8002828:	4603      	mov	r3, r0
 800282a:	e000      	b.n	800282e <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj+0x20>
 800282c:	2300      	movs	r3, #0
      }
 800282e:	4618      	mov	r0, r3
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEEPiiET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8002836:	b580      	push	{r7, lr}
 8002838:	b084      	sub	sp, #16
 800283a:	af00      	add	r7, sp, #0
 800283c:	60f8      	str	r0, [r7, #12]
 800283e:	60b9      	str	r1, [r7, #8]
 8002840:	607a      	str	r2, [r7, #4]
 8002842:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	68b9      	ldr	r1, [r7, #8]
 8002848:	68f8      	ldr	r0, [r7, #12]
 800284a:	f000 f8d7 	bl	80029fc <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEEPiET0_T_SA_S9_>
 800284e:	4603      	mov	r3, r0
 8002850:	4618      	mov	r0, r3
 8002852:	3710      	adds	r7, #16
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <_ZSt8_DestroyIPiEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8002862:	6839      	ldr	r1, [r7, #0]
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f000 f8db 	bl	8002a20 <_ZNSt12_Destroy_auxILb1EE9__destroyIPiEEvT_S3_>
    }
 800286a:	bf00      	nop
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8002872:	b480      	push	{r7}
 8002874:	b083      	sub	sp, #12
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
 800287a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4618      	mov	r0, r3
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	bc80      	pop	{r7}
 800288e:	4770      	bx	lr

08002890 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEEET_S8_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
    { return __it; }
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4618      	mov	r0, r3
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	bc80      	pop	{r7}
 80028a2:	4770      	bx	lr

080028a4 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEENS1_IPiS6_EEET1_T0_SB_SA_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80028a4:	b5b0      	push	{r4, r5, r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f000 f8bf 	bl	8002a34 <_ZSt12__niter_baseIPKiSt6vectorIiSaIiEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 80028b6:	4604      	mov	r4, r0
 80028b8:	68b8      	ldr	r0, [r7, #8]
 80028ba:	f000 f8bb 	bl	8002a34 <_ZSt12__niter_baseIPKiSt6vectorIiSaIiEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 80028be:	4605      	mov	r5, r0
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f000 f8c5 	bl	8002a50 <_ZSt12__niter_baseIPiSt6vectorIiSaIiEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 80028c6:	4603      	mov	r3, r0
 80028c8:	461a      	mov	r2, r3
 80028ca:	4629      	mov	r1, r5
 80028cc:	4620      	mov	r0, r4
 80028ce:	f000 f8cd 	bl	8002a6c <_ZSt13__copy_move_aILb0EPKiPiET1_T0_S4_S3_>
 80028d2:	4603      	mov	r3, r0
 80028d4:	4619      	mov	r1, r3
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 f8da 	bl	8002a90 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES2_ET_S7_T0_>
 80028dc:	4603      	mov	r3, r0
    }
 80028de:	4618      	mov	r0, r3
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bdb0      	pop	{r4, r5, r7, pc}

080028e6 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEvT_S7_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b082      	sub	sp, #8
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
 80028ee:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80028f0:	6839      	ldr	r1, [r7, #0]
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 f8e3 	bl	8002abe <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEvT_S9_>
    }
 80028f8:	bf00      	nop
 80028fa:	3708      	adds	r7, #8
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <_ZSt12__miter_baseIPiET_S1_>:
    __miter_base(_Iterator __it)
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
    { return __it; }
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4618      	mov	r0, r3
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr

08002914 <_ZSt14__copy_move_a2ILb0EPiS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8002914:	b5b0      	push	{r4, r5, r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8002920:	68f8      	ldr	r0, [r7, #12]
 8002922:	f000 f8d6 	bl	8002ad2 <_ZSt12__niter_baseIPiET_S1_>
 8002926:	4604      	mov	r4, r0
 8002928:	68b8      	ldr	r0, [r7, #8]
 800292a:	f000 f8d2 	bl	8002ad2 <_ZSt12__niter_baseIPiET_S1_>
 800292e:	4605      	mov	r5, r0
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4618      	mov	r0, r3
 8002934:	f000 f8cd 	bl	8002ad2 <_ZSt12__niter_baseIPiET_S1_>
 8002938:	4603      	mov	r3, r0
 800293a:	461a      	mov	r2, r3
 800293c:	4629      	mov	r1, r5
 800293e:	4620      	mov	r0, r4
 8002940:	f000 f8d1 	bl	8002ae6 <_ZSt13__copy_move_aILb0EPiS0_ET1_T0_S2_S1_>
 8002944:	4602      	mov	r2, r0
 8002946:	1d3b      	adds	r3, r7, #4
 8002948:	4611      	mov	r1, r2
 800294a:	4618      	mov	r0, r3
 800294c:	f000 f8dd 	bl	8002b0a <_ZSt12__niter_wrapIPiET_RKS1_S1_>
 8002950:	4603      	mov	r3, r0
    }
 8002952:	4618      	mov	r0, r3
 8002954:	3710      	adds	r7, #16
 8002956:	46bd      	mov	sp, r7
 8002958:	bdb0      	pop	{r4, r5, r7, pc}

0800295a <_ZSt18uninitialized_copyIPiS0_ET0_T_S2_S1_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800295a:	b580      	push	{r7, lr}
 800295c:	b086      	sub	sp, #24
 800295e:	af00      	add	r7, sp, #0
 8002960:	60f8      	str	r0, [r7, #12]
 8002962:	60b9      	str	r1, [r7, #8]
 8002964:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8002966:	2301      	movs	r3, #1
 8002968:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	68b9      	ldr	r1, [r7, #8]
 800296e:	68f8      	ldr	r0, [r7, #12]
 8002970:	f000 f8d6 	bl	8002b20 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPiS2_EET0_T_S4_S3_>
 8002974:	4603      	mov	r3, r0
    }
 8002976:	4618      	mov	r0, r3
 8002978:	3718      	adds	r7, #24
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <_ZN9__gnu_cxx13new_allocatorIiE10deallocateEPij>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 800297e:	b580      	push	{r7, lr}
 8002980:	b084      	sub	sp, #16
 8002982:	af00      	add	r7, sp, #0
 8002984:	60f8      	str	r0, [r7, #12]
 8002986:	60b9      	str	r1, [r7, #8]
 8002988:	607a      	str	r2, [r7, #4]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 800298a:	68b8      	ldr	r0, [r7, #8]
 800298c:	f006 f874 	bl	8008a78 <_ZdlPv>
      }
 8002990:	bf00      	nop
 8002992:	3710      	adds	r7, #16
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <_ZN9__gnu_cxx13new_allocatorIdED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4618      	mov	r0, r3
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bc80      	pop	{r7}
 80029aa:	4770      	bx	lr

080029ac <_ZNSt16allocator_traitsISaIdEE10deallocateERS0_Pdj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	68b9      	ldr	r1, [r7, #8]
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f000 f8bf 	bl	8002b40 <_ZN9__gnu_cxx13new_allocatorIdE10deallocateEPdj>
 80029c2:	bf00      	nop
 80029c4:	3710      	adds	r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <_ZNSt12_Destroy_auxILb1EE9__destroyIPdEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80029ca:	b480      	push	{r7}
 80029cc:	b083      	sub	sp, #12
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
 80029d2:	6039      	str	r1, [r7, #0]
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	bc80      	pop	{r7}
 80029dc:	4770      	bx	lr

080029de <_ZNSt16allocator_traitsISaIiEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 80029de:	b580      	push	{r7, lr}
 80029e0:	b082      	sub	sp, #8
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
 80029e6:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80029e8:	2200      	movs	r2, #0
 80029ea:	6839      	ldr	r1, [r7, #0]
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 f8b4 	bl	8002b5a <_ZN9__gnu_cxx13new_allocatorIiE8allocateEjPKv>
 80029f2:	4603      	mov	r3, r0
 80029f4:	4618      	mov	r0, r3
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEEPiET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	68b9      	ldr	r1, [r7, #8]
 8002a10:	68f8      	ldr	r0, [r7, #12]
 8002a12:	f000 f8c0 	bl	8002b96 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEEPiEET0_T_SC_SB_>
 8002a16:	4603      	mov	r3, r0
    }
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3718      	adds	r7, #24
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <_ZNSt12_Destroy_auxILb1EE9__destroyIPiEEvT_S3_>:
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bc80      	pop	{r7}
 8002a32:	4770      	bx	lr

08002a34 <_ZSt12__niter_baseIPKiSt6vectorIiSaIiEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
{
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  template<typename _Iterator, typename _Container>
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it.base(); }
 8002a3c:	1d3b      	adds	r3, r7, #4
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f000 f8b9 	bl	8002bb6 <_ZNK9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEE4baseEv>
 8002a44:	4603      	mov	r3, r0
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3708      	adds	r7, #8
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <_ZSt12__niter_baseIPiSt6vectorIiSaIiEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8002a58:	1d3b      	adds	r3, r7, #4
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f000 f8b5 	bl	8002bca <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv>
 8002a60:	4603      	mov	r3, r0
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4618      	mov	r0, r3
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <_ZSt13__copy_move_aILb0EPKiPiET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 8002a78:	2301      	movs	r3, #1
 8002a7a:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	68b9      	ldr	r1, [r7, #8]
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f000 f8ac 	bl	8002bde <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
 8002a86:	4603      	mov	r3, r0
    }
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3718      	adds	r7, #24
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES2_ET_S7_T0_>:
    __niter_wrap(_From __from, _To __res)
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f7ff ffd8 	bl	8002a50 <_ZSt12__niter_baseIPiSt6vectorIiSaIiEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	1a9b      	subs	r3, r3, r2
 8002aa6:	109b      	asrs	r3, r3, #2
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	1d3b      	adds	r3, r7, #4
 8002aac:	4611      	mov	r1, r2
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f000 f8b2 	bl	8002c18 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEplEi>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEvT_S9_>:
 8002abe:	b480      	push	{r7}
 8002ac0:	b083      	sub	sp, #12
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
 8002ac6:	6039      	str	r1, [r7, #0]
 8002ac8:	bf00      	nop
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bc80      	pop	{r7}
 8002ad0:	4770      	bx	lr

08002ad2 <_ZSt12__niter_baseIPiET_S1_>:
    __niter_base(_Iterator __it)
 8002ad2:	b480      	push	{r7}
 8002ad4:	b083      	sub	sp, #12
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
    { return __it; }
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4618      	mov	r0, r3
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bc80      	pop	{r7}
 8002ae4:	4770      	bx	lr

08002ae6 <_ZSt13__copy_move_aILb0EPiS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b086      	sub	sp, #24
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	60f8      	str	r0, [r7, #12]
 8002aee:	60b9      	str	r1, [r7, #8]
 8002af0:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 8002af2:	2301      	movs	r3, #1
 8002af4:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	68b9      	ldr	r1, [r7, #8]
 8002afa:	68f8      	ldr	r0, [r7, #12]
 8002afc:	f000 f86f 	bl	8002bde <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
 8002b00:	4603      	mov	r3, r0
    }
 8002b02:	4618      	mov	r0, r3
 8002b04:	3718      	adds	r7, #24
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <_ZSt12__niter_wrapIPiET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8002b0a:	b480      	push	{r7}
 8002b0c:	b083      	sub	sp, #12
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
 8002b12:	6039      	str	r1, [r7, #0]
    { return __res; }
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	4618      	mov	r0, r3
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bc80      	pop	{r7}
 8002b1e:	4770      	bx	lr

08002b20 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPiS2_EET0_T_S4_S3_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	68b9      	ldr	r1, [r7, #8]
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	f7ff fdc3 	bl	80026bc <_ZSt4copyIPiS0_ET0_T_S2_S1_>
 8002b36:	4603      	mov	r3, r0
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3710      	adds	r7, #16
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <_ZN9__gnu_cxx13new_allocatorIdE10deallocateEPdj>:
      deallocate(pointer __p, size_type)
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8002b4c:	68b8      	ldr	r0, [r7, #8]
 8002b4e:	f005 ff93 	bl	8008a78 <_ZdlPv>
      }
 8002b52:	bf00      	nop
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <_ZN9__gnu_cxx13new_allocatorIiE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b084      	sub	sp, #16
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	60f8      	str	r0, [r7, #12]
 8002b62:	60b9      	str	r1, [r7, #8]
 8002b64:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8002b66:	68f8      	ldr	r0, [r7, #12]
 8002b68:	f000 f86e 	bl	8002c48 <_ZNK9__gnu_cxx13new_allocatorIiE8max_sizeEv>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	4293      	cmp	r3, r2
 8002b72:	bf8c      	ite	hi
 8002b74:	2301      	movhi	r3, #1
 8002b76:	2300      	movls	r3, #0
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <_ZN9__gnu_cxx13new_allocatorIiE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8002b7e:	f005 ff8e 	bl	8008a9e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	4618      	mov	r0, r3
 8002b88:	f005 ff78 	bl	8008a7c <_Znwj>
 8002b8c:	4603      	mov	r3, r0
      }
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEEPiEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b084      	sub	sp, #16
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	60f8      	str	r0, [r7, #12]
 8002b9e:	60b9      	str	r1, [r7, #8]
 8002ba0:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	68b9      	ldr	r1, [r7, #8]
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f000 f859 	bl	8002c5e <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEEPiET0_T_SA_S9_>
 8002bac:	4603      	mov	r3, r0
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3710      	adds	r7, #16
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <_ZNK9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8002bb6:	b480      	push	{r7}
 8002bb8:	b083      	sub	sp, #12
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bc80      	pop	{r7}
 8002bc8:	4770      	bx	lr

08002bca <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bc80      	pop	{r7}
 8002bdc:	4770      	bx	lr

08002bde <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b086      	sub	sp, #24
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	60f8      	str	r0, [r7, #12]
 8002be6:	60b9      	str	r1, [r7, #8]
 8002be8:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8002bea:	68ba      	ldr	r2, [r7, #8]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	109b      	asrs	r3, r3, #2
 8002bf2:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d006      	beq.n	8002c08 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	461a      	mov	r2, r3
 8002c00:	68f9      	ldr	r1, [r7, #12]
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f006 fb32 	bl	800926c <memmove>
	  return __result + _Num;
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	4413      	add	r3, r2
	}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3718      	adds	r7, #24
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	4413      	add	r3, r2
 8002c2c:	60fb      	str	r3, [r7, #12]
 8002c2e:	f107 020c 	add.w	r2, r7, #12
 8002c32:	f107 0308 	add.w	r3, r7, #8
 8002c36:	4611      	mov	r1, r2
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7ff fe1a 	bl	8002872 <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEC1ERKS1_>
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	4618      	mov	r0, r3
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <_ZNK9__gnu_cxx13new_allocatorIiE8max_sizeEv>:

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002c50:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return size_t(-1) / sizeof(_Tp);
#endif
      }
 8002c54:	4618      	mov	r0, r3
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bc80      	pop	{r7}
 8002c5c:	4770      	bx	lr

08002c5e <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEEPiET0_T_SA_S9_>:
    copy(_II __first, _II __last, _OI __result)
 8002c5e:	b590      	push	{r4, r7, lr}
 8002c60:	b085      	sub	sp, #20
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	60f8      	str	r0, [r7, #12]
 8002c66:	60b9      	str	r1, [r7, #8]
 8002c68:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f7ff fe10 	bl	8002890 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEEET_S8_>
 8002c70:	4604      	mov	r4, r0
 8002c72:	68b8      	ldr	r0, [r7, #8]
 8002c74:	f7ff fe0c 	bl	8002890 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEEET_S8_>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4620      	mov	r0, r4
 8002c80:	f000 f805 	bl	8002c8e <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEEPiET1_T0_SA_S9_>
 8002c84:	4603      	mov	r3, r0
    }
 8002c86:	4618      	mov	r0, r3
 8002c88:	3714      	adds	r7, #20
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd90      	pop	{r4, r7, pc}

08002c8e <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEEPiET1_T0_SA_S9_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8002c8e:	b5b0      	push	{r4, r5, r7, lr}
 8002c90:	b084      	sub	sp, #16
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	60f8      	str	r0, [r7, #12]
 8002c96:	60b9      	str	r1, [r7, #8]
 8002c98:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8002c9a:	68f8      	ldr	r0, [r7, #12]
 8002c9c:	f7ff feca 	bl	8002a34 <_ZSt12__niter_baseIPKiSt6vectorIiSaIiEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8002ca0:	4604      	mov	r4, r0
 8002ca2:	68b8      	ldr	r0, [r7, #8]
 8002ca4:	f7ff fec6 	bl	8002a34 <_ZSt12__niter_baseIPKiSt6vectorIiSaIiEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8002ca8:	4605      	mov	r5, r0
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7ff ff10 	bl	8002ad2 <_ZSt12__niter_baseIPiET_S1_>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	4629      	mov	r1, r5
 8002cb8:	4620      	mov	r0, r4
 8002cba:	f7ff fed7 	bl	8002a6c <_ZSt13__copy_move_aILb0EPKiPiET1_T0_S4_S3_>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	1d3b      	adds	r3, r7, #4
 8002cc2:	4611      	mov	r1, r2
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff ff20 	bl	8002b0a <_ZSt12__niter_wrapIPiET_RKS1_S1_>
 8002cca:	4603      	mov	r3, r0
    }
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3710      	adds	r7, #16
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bdb0      	pop	{r4, r5, r7, pc}

08002cd4 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d110      	bne.n	8002d06 <_Z41__static_initialization_and_destruction_0ii+0x32>
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d10b      	bne.n	8002d06 <_Z41__static_initialization_and_destruction_0ii+0x32>
Kalman_Filtresi EKF;
 8002cee:	4812      	ldr	r0, [pc, #72]	; (8002d38 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8002cf0:	f004 ff16 	bl	8007b20 <_ZN15Kalman_FiltresiC1Ev>
PID pid;
 8002cf4:	4811      	ldr	r0, [pc, #68]	; (8002d3c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8002cf6:	f005 fc15 	bl	8008524 <_ZN3PIDC1Ev>
Controller controller;
 8002cfa:	4811      	ldr	r0, [pc, #68]	; (8002d40 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8002cfc:	f003 fed8 	bl	8006ab0 <_ZN10ControllerC1Ev>
std::vector<int> controller_output;
 8002d00:	4810      	ldr	r0, [pc, #64]	; (8002d44 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8002d02:	f7fe fa54 	bl	80011ae <_ZNSt6vectorIiSaIiEEC1Ev>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d110      	bne.n	8002d2e <_Z41__static_initialization_and_destruction_0ii+0x5a>
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d10b      	bne.n	8002d2e <_Z41__static_initialization_and_destruction_0ii+0x5a>
 8002d16:	480b      	ldr	r0, [pc, #44]	; (8002d44 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8002d18:	f000 f816 	bl	8002d48 <_ZNSt6vectorIiSaIiEED1Ev>
Controller controller;
 8002d1c:	4808      	ldr	r0, [pc, #32]	; (8002d40 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8002d1e:	f004 fa29 	bl	8007174 <_ZN10ControllerD1Ev>
PID pid;
 8002d22:	4806      	ldr	r0, [pc, #24]	; (8002d3c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8002d24:	f005 fe9e 	bl	8008a64 <_ZN3PIDD1Ev>
Kalman_Filtresi EKF;
 8002d28:	4803      	ldr	r0, [pc, #12]	; (8002d38 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8002d2a:	f005 fb81 	bl	8008430 <_ZN15Kalman_FiltresiD1Ev>
}
 8002d2e:	bf00      	nop
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	200002d0 	.word	0x200002d0
 8002d3c:	20000400 	.word	0x20000400
 8002d40:	20000440 	.word	0x20000440
 8002d44:	200005a8 	.word	0x200005a8

08002d48 <_ZNSt6vectorIiSaIiEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8002d48:	b5b0      	push	{r4, r5, r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681c      	ldr	r4, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7ff fbbc 	bl	80024d8 <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 8002d60:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002d62:	461a      	mov	r2, r3
 8002d64:	4629      	mov	r1, r5
 8002d66:	4620      	mov	r0, r4
 8002d68:	f7ff fc53 	bl	8002612 <_ZSt8_DestroyIPiiEvT_S1_RSaIT0_E>
      }
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff f9f3 	bl	800215a <_ZNSt12_Vector_baseIiSaIiEED1Ev>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4618      	mov	r0, r3
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bdb0      	pop	{r4, r5, r7, pc}

08002d7e <_GLOBAL__sub_I_hi2c1>:
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002d86:	2001      	movs	r0, #1
 8002d88:	f7ff ffa4 	bl	8002cd4 <_Z41__static_initialization_and_destruction_0ii>
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <_GLOBAL__sub_D_hi2c1>:
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002d96:	2000      	movs	r0, #0
 8002d98:	f7ff ff9c 	bl	8002cd4 <_Z41__static_initialization_and_destruction_0ii>
 8002d9c:	bd80      	pop	{r7, pc}
	...

08002da0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002da6:	4b15      	ldr	r3, [pc, #84]	; (8002dfc <HAL_MspInit+0x5c>)
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	4a14      	ldr	r2, [pc, #80]	; (8002dfc <HAL_MspInit+0x5c>)
 8002dac:	f043 0301 	orr.w	r3, r3, #1
 8002db0:	6193      	str	r3, [r2, #24]
 8002db2:	4b12      	ldr	r3, [pc, #72]	; (8002dfc <HAL_MspInit+0x5c>)
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	60bb      	str	r3, [r7, #8]
 8002dbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dbe:	4b0f      	ldr	r3, [pc, #60]	; (8002dfc <HAL_MspInit+0x5c>)
 8002dc0:	69db      	ldr	r3, [r3, #28]
 8002dc2:	4a0e      	ldr	r2, [pc, #56]	; (8002dfc <HAL_MspInit+0x5c>)
 8002dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dc8:	61d3      	str	r3, [r2, #28]
 8002dca:	4b0c      	ldr	r3, [pc, #48]	; (8002dfc <HAL_MspInit+0x5c>)
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd2:	607b      	str	r3, [r7, #4]
 8002dd4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002dd6:	4b0a      	ldr	r3, [pc, #40]	; (8002e00 <HAL_MspInit+0x60>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	60fb      	str	r3, [r7, #12]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002de2:	60fb      	str	r3, [r7, #12]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002dea:	60fb      	str	r3, [r7, #12]
 8002dec:	4a04      	ldr	r2, [pc, #16]	; (8002e00 <HAL_MspInit+0x60>)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002df2:	bf00      	nop
 8002df4:	3714      	adds	r7, #20
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bc80      	pop	{r7}
 8002dfa:	4770      	bx	lr
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	40010000 	.word	0x40010000

08002e04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b088      	sub	sp, #32
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e0c:	f107 0310 	add.w	r3, r7, #16
 8002e10:	2200      	movs	r2, #0
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	605a      	str	r2, [r3, #4]
 8002e16:	609a      	str	r2, [r3, #8]
 8002e18:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a15      	ldr	r2, [pc, #84]	; (8002e74 <HAL_I2C_MspInit+0x70>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d123      	bne.n	8002e6c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e24:	4b14      	ldr	r3, [pc, #80]	; (8002e78 <HAL_I2C_MspInit+0x74>)
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	4a13      	ldr	r2, [pc, #76]	; (8002e78 <HAL_I2C_MspInit+0x74>)
 8002e2a:	f043 0308 	orr.w	r3, r3, #8
 8002e2e:	6193      	str	r3, [r2, #24]
 8002e30:	4b11      	ldr	r3, [pc, #68]	; (8002e78 <HAL_I2C_MspInit+0x74>)
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	f003 0308 	and.w	r3, r3, #8
 8002e38:	60fb      	str	r3, [r7, #12]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e3c:	23c0      	movs	r3, #192	; 0xc0
 8002e3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e40:	2312      	movs	r3, #18
 8002e42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e44:	2303      	movs	r3, #3
 8002e46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e48:	f107 0310 	add.w	r3, r7, #16
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	480b      	ldr	r0, [pc, #44]	; (8002e7c <HAL_I2C_MspInit+0x78>)
 8002e50:	f000 fb7a 	bl	8003548 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e54:	4b08      	ldr	r3, [pc, #32]	; (8002e78 <HAL_I2C_MspInit+0x74>)
 8002e56:	69db      	ldr	r3, [r3, #28]
 8002e58:	4a07      	ldr	r2, [pc, #28]	; (8002e78 <HAL_I2C_MspInit+0x74>)
 8002e5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e5e:	61d3      	str	r3, [r2, #28]
 8002e60:	4b05      	ldr	r3, [pc, #20]	; (8002e78 <HAL_I2C_MspInit+0x74>)
 8002e62:	69db      	ldr	r3, [r3, #28]
 8002e64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e68:	60bb      	str	r3, [r7, #8]
 8002e6a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002e6c:	bf00      	nop
 8002e6e:	3720      	adds	r7, #32
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	40005400 	.word	0x40005400
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	40010c00 	.word	0x40010c00

08002e80 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a09      	ldr	r2, [pc, #36]	; (8002eb4 <HAL_TIM_PWM_MspInit+0x34>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d10b      	bne.n	8002eaa <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e92:	4b09      	ldr	r3, [pc, #36]	; (8002eb8 <HAL_TIM_PWM_MspInit+0x38>)
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	4a08      	ldr	r2, [pc, #32]	; (8002eb8 <HAL_TIM_PWM_MspInit+0x38>)
 8002e98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e9c:	6193      	str	r3, [r2, #24]
 8002e9e:	4b06      	ldr	r3, [pc, #24]	; (8002eb8 <HAL_TIM_PWM_MspInit+0x38>)
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ea6:	60fb      	str	r3, [r7, #12]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002eaa:	bf00      	nop
 8002eac:	3714      	adds	r7, #20
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bc80      	pop	{r7}
 8002eb2:	4770      	bx	lr
 8002eb4:	40012c00 	.word	0x40012c00
 8002eb8:	40021000 	.word	0x40021000

08002ebc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b08a      	sub	sp, #40	; 0x28
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ec4:	f107 0318 	add.w	r3, r7, #24
 8002ec8:	2200      	movs	r2, #0
 8002eca:	601a      	str	r2, [r3, #0]
 8002ecc:	605a      	str	r2, [r3, #4]
 8002ece:	609a      	str	r2, [r3, #8]
 8002ed0:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eda:	d114      	bne.n	8002f06 <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002edc:	4b2d      	ldr	r3, [pc, #180]	; (8002f94 <HAL_TIM_Base_MspInit+0xd8>)
 8002ede:	69db      	ldr	r3, [r3, #28]
 8002ee0:	4a2c      	ldr	r2, [pc, #176]	; (8002f94 <HAL_TIM_Base_MspInit+0xd8>)
 8002ee2:	f043 0301 	orr.w	r3, r3, #1
 8002ee6:	61d3      	str	r3, [r2, #28]
 8002ee8:	4b2a      	ldr	r3, [pc, #168]	; (8002f94 <HAL_TIM_Base_MspInit+0xd8>)
 8002eea:	69db      	ldr	r3, [r3, #28]
 8002eec:	f003 0301 	and.w	r3, r3, #1
 8002ef0:	617b      	str	r3, [r7, #20]
 8002ef2:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	201c      	movs	r0, #28
 8002efa:	f000 faee 	bl	80034da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002efe:	201c      	movs	r0, #28
 8002f00:	f000 fb07 	bl	8003512 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002f04:	e042      	b.n	8002f8c <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM3)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a23      	ldr	r2, [pc, #140]	; (8002f98 <HAL_TIM_Base_MspInit+0xdc>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d12c      	bne.n	8002f6a <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f10:	4b20      	ldr	r3, [pc, #128]	; (8002f94 <HAL_TIM_Base_MspInit+0xd8>)
 8002f12:	69db      	ldr	r3, [r3, #28]
 8002f14:	4a1f      	ldr	r2, [pc, #124]	; (8002f94 <HAL_TIM_Base_MspInit+0xd8>)
 8002f16:	f043 0302 	orr.w	r3, r3, #2
 8002f1a:	61d3      	str	r3, [r2, #28]
 8002f1c:	4b1d      	ldr	r3, [pc, #116]	; (8002f94 <HAL_TIM_Base_MspInit+0xd8>)
 8002f1e:	69db      	ldr	r3, [r3, #28]
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	613b      	str	r3, [r7, #16]
 8002f26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f28:	4b1a      	ldr	r3, [pc, #104]	; (8002f94 <HAL_TIM_Base_MspInit+0xd8>)
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	4a19      	ldr	r2, [pc, #100]	; (8002f94 <HAL_TIM_Base_MspInit+0xd8>)
 8002f2e:	f043 0304 	orr.w	r3, r3, #4
 8002f32:	6193      	str	r3, [r2, #24]
 8002f34:	4b17      	ldr	r3, [pc, #92]	; (8002f94 <HAL_TIM_Base_MspInit+0xd8>)
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	f003 0304 	and.w	r3, r3, #4
 8002f3c:	60fb      	str	r3, [r7, #12]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002f40:	2380      	movs	r3, #128	; 0x80
 8002f42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f44:	2300      	movs	r3, #0
 8002f46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f4c:	f107 0318 	add.w	r3, r7, #24
 8002f50:	4619      	mov	r1, r3
 8002f52:	4812      	ldr	r0, [pc, #72]	; (8002f9c <HAL_TIM_Base_MspInit+0xe0>)
 8002f54:	f000 faf8 	bl	8003548 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002f58:	2200      	movs	r2, #0
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	201d      	movs	r0, #29
 8002f5e:	f000 fabc 	bl	80034da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002f62:	201d      	movs	r0, #29
 8002f64:	f000 fad5 	bl	8003512 <HAL_NVIC_EnableIRQ>
}
 8002f68:	e010      	b.n	8002f8c <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM4)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a0c      	ldr	r2, [pc, #48]	; (8002fa0 <HAL_TIM_Base_MspInit+0xe4>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d10b      	bne.n	8002f8c <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002f74:	4b07      	ldr	r3, [pc, #28]	; (8002f94 <HAL_TIM_Base_MspInit+0xd8>)
 8002f76:	69db      	ldr	r3, [r3, #28]
 8002f78:	4a06      	ldr	r2, [pc, #24]	; (8002f94 <HAL_TIM_Base_MspInit+0xd8>)
 8002f7a:	f043 0304 	orr.w	r3, r3, #4
 8002f7e:	61d3      	str	r3, [r2, #28]
 8002f80:	4b04      	ldr	r3, [pc, #16]	; (8002f94 <HAL_TIM_Base_MspInit+0xd8>)
 8002f82:	69db      	ldr	r3, [r3, #28]
 8002f84:	f003 0304 	and.w	r3, r3, #4
 8002f88:	60bb      	str	r3, [r7, #8]
 8002f8a:	68bb      	ldr	r3, [r7, #8]
}
 8002f8c:	bf00      	nop
 8002f8e:	3728      	adds	r7, #40	; 0x28
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	40021000 	.word	0x40021000
 8002f98:	40000400 	.word	0x40000400
 8002f9c:	40010800 	.word	0x40010800
 8002fa0:	40000800 	.word	0x40000800

08002fa4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b088      	sub	sp, #32
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fac:	f107 0310 	add.w	r3, r7, #16
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	601a      	str	r2, [r3, #0]
 8002fb4:	605a      	str	r2, [r3, #4]
 8002fb6:	609a      	str	r2, [r3, #8]
 8002fb8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a10      	ldr	r2, [pc, #64]	; (8003000 <HAL_TIM_MspPostInit+0x5c>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d118      	bne.n	8002ff6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fc4:	4b0f      	ldr	r3, [pc, #60]	; (8003004 <HAL_TIM_MspPostInit+0x60>)
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	4a0e      	ldr	r2, [pc, #56]	; (8003004 <HAL_TIM_MspPostInit+0x60>)
 8002fca:	f043 0304 	orr.w	r3, r3, #4
 8002fce:	6193      	str	r3, [r2, #24]
 8002fd0:	4b0c      	ldr	r3, [pc, #48]	; (8003004 <HAL_TIM_MspPostInit+0x60>)
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	f003 0304 	and.w	r3, r3, #4
 8002fd8:	60fb      	str	r3, [r7, #12]
 8002fda:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8002fdc:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002fe0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fea:	f107 0310 	add.w	r3, r7, #16
 8002fee:	4619      	mov	r1, r3
 8002ff0:	4805      	ldr	r0, [pc, #20]	; (8003008 <HAL_TIM_MspPostInit+0x64>)
 8002ff2:	f000 faa9 	bl	8003548 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002ff6:	bf00      	nop
 8002ff8:	3720      	adds	r7, #32
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	40012c00 	.word	0x40012c00
 8003004:	40021000 	.word	0x40021000
 8003008:	40010800 	.word	0x40010800

0800300c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b088      	sub	sp, #32
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003014:	f107 0310 	add.w	r3, r7, #16
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	605a      	str	r2, [r3, #4]
 800301e:	609a      	str	r2, [r3, #8]
 8003020:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a1b      	ldr	r2, [pc, #108]	; (8003094 <HAL_UART_MspInit+0x88>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d12f      	bne.n	800308c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800302c:	4b1a      	ldr	r3, [pc, #104]	; (8003098 <HAL_UART_MspInit+0x8c>)
 800302e:	69db      	ldr	r3, [r3, #28]
 8003030:	4a19      	ldr	r2, [pc, #100]	; (8003098 <HAL_UART_MspInit+0x8c>)
 8003032:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003036:	61d3      	str	r3, [r2, #28]
 8003038:	4b17      	ldr	r3, [pc, #92]	; (8003098 <HAL_UART_MspInit+0x8c>)
 800303a:	69db      	ldr	r3, [r3, #28]
 800303c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003040:	60fb      	str	r3, [r7, #12]
 8003042:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003044:	4b14      	ldr	r3, [pc, #80]	; (8003098 <HAL_UART_MspInit+0x8c>)
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	4a13      	ldr	r2, [pc, #76]	; (8003098 <HAL_UART_MspInit+0x8c>)
 800304a:	f043 0304 	orr.w	r3, r3, #4
 800304e:	6193      	str	r3, [r2, #24]
 8003050:	4b11      	ldr	r3, [pc, #68]	; (8003098 <HAL_UART_MspInit+0x8c>)
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	f003 0304 	and.w	r3, r3, #4
 8003058:	60bb      	str	r3, [r7, #8]
 800305a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800305c:	2304      	movs	r3, #4
 800305e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003060:	2302      	movs	r3, #2
 8003062:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003064:	2303      	movs	r3, #3
 8003066:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003068:	f107 0310 	add.w	r3, r7, #16
 800306c:	4619      	mov	r1, r3
 800306e:	480b      	ldr	r0, [pc, #44]	; (800309c <HAL_UART_MspInit+0x90>)
 8003070:	f000 fa6a 	bl	8003548 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003074:	2308      	movs	r3, #8
 8003076:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003078:	2300      	movs	r3, #0
 800307a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307c:	2300      	movs	r3, #0
 800307e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003080:	f107 0310 	add.w	r3, r7, #16
 8003084:	4619      	mov	r1, r3
 8003086:	4805      	ldr	r0, [pc, #20]	; (800309c <HAL_UART_MspInit+0x90>)
 8003088:	f000 fa5e 	bl	8003548 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800308c:	bf00      	nop
 800308e:	3720      	adds	r7, #32
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40004400 	.word	0x40004400
 8003098:	40021000 	.word	0x40021000
 800309c:	40010800 	.word	0x40010800

080030a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80030a4:	e7fe      	b.n	80030a4 <NMI_Handler+0x4>

080030a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030a6:	b480      	push	{r7}
 80030a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030aa:	e7fe      	b.n	80030aa <HardFault_Handler+0x4>

080030ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030b0:	e7fe      	b.n	80030b0 <MemManage_Handler+0x4>

080030b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030b2:	b480      	push	{r7}
 80030b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030b6:	e7fe      	b.n	80030b6 <BusFault_Handler+0x4>

080030b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030bc:	e7fe      	b.n	80030bc <UsageFault_Handler+0x4>

080030be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030be:	b480      	push	{r7}
 80030c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030c2:	bf00      	nop
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bc80      	pop	{r7}
 80030c8:	4770      	bx	lr

080030ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030ca:	b480      	push	{r7}
 80030cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030ce:	bf00      	nop
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bc80      	pop	{r7}
 80030d4:	4770      	bx	lr

080030d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030d6:	b480      	push	{r7}
 80030d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030da:	bf00      	nop
 80030dc:	46bd      	mov	sp, r7
 80030de:	bc80      	pop	{r7}
 80030e0:	4770      	bx	lr

080030e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030e6:	f000 f8e1 	bl	80032ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030ea:	bf00      	nop
 80030ec:	bd80      	pop	{r7, pc}
	...

080030f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80030f4:	4802      	ldr	r0, [pc, #8]	; (8003100 <TIM2_IRQHandler+0x10>)
 80030f6:	f002 fb33 	bl	8005760 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80030fa:	bf00      	nop
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	20000128 	.word	0x20000128

08003104 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003108:	4802      	ldr	r0, [pc, #8]	; (8003114 <TIM3_IRQHandler+0x10>)
 800310a:	f002 fb29 	bl	8005760 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800310e:	bf00      	nop
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	20000170 	.word	0x20000170

08003118 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
	return 1;
 800311c:	2301      	movs	r3, #1
}
 800311e:	4618      	mov	r0, r3
 8003120:	46bd      	mov	sp, r7
 8003122:	bc80      	pop	{r7}
 8003124:	4770      	bx	lr

08003126 <_kill>:

int _kill(int pid, int sig)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b082      	sub	sp, #8
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
 800312e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003130:	f006 f862 	bl	80091f8 <__errno>
 8003134:	4603      	mov	r3, r0
 8003136:	2216      	movs	r2, #22
 8003138:	601a      	str	r2, [r3, #0]
	return -1;
 800313a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800313e:	4618      	mov	r0, r3
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <_exit>:

void _exit (int status)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b082      	sub	sp, #8
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800314e:	f04f 31ff 	mov.w	r1, #4294967295
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f7ff ffe7 	bl	8003126 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003158:	e7fe      	b.n	8003158 <_exit+0x12>
	...

0800315c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003164:	4a14      	ldr	r2, [pc, #80]	; (80031b8 <_sbrk+0x5c>)
 8003166:	4b15      	ldr	r3, [pc, #84]	; (80031bc <_sbrk+0x60>)
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003170:	4b13      	ldr	r3, [pc, #76]	; (80031c0 <_sbrk+0x64>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d102      	bne.n	800317e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003178:	4b11      	ldr	r3, [pc, #68]	; (80031c0 <_sbrk+0x64>)
 800317a:	4a12      	ldr	r2, [pc, #72]	; (80031c4 <_sbrk+0x68>)
 800317c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800317e:	4b10      	ldr	r3, [pc, #64]	; (80031c0 <_sbrk+0x64>)
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4413      	add	r3, r2
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	429a      	cmp	r2, r3
 800318a:	d207      	bcs.n	800319c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800318c:	f006 f834 	bl	80091f8 <__errno>
 8003190:	4603      	mov	r3, r0
 8003192:	220c      	movs	r2, #12
 8003194:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003196:	f04f 33ff 	mov.w	r3, #4294967295
 800319a:	e009      	b.n	80031b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800319c:	4b08      	ldr	r3, [pc, #32]	; (80031c0 <_sbrk+0x64>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031a2:	4b07      	ldr	r3, [pc, #28]	; (80031c0 <_sbrk+0x64>)
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4413      	add	r3, r2
 80031aa:	4a05      	ldr	r2, [pc, #20]	; (80031c0 <_sbrk+0x64>)
 80031ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031ae:	68fb      	ldr	r3, [r7, #12]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3718      	adds	r7, #24
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	20005000 	.word	0x20005000
 80031bc:	00000400 	.word	0x00000400
 80031c0:	200005fc 	.word	0x200005fc
 80031c4:	20000620 	.word	0x20000620

080031c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031cc:	bf00      	nop
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bc80      	pop	{r7}
 80031d2:	4770      	bx	lr

080031d4 <Reset_Handler>:
 80031d4:	2100      	movs	r1, #0
 80031d6:	e003      	b.n	80031e0 <LoopCopyDataInit>

080031d8 <CopyDataInit>:
 80031d8:	4b0b      	ldr	r3, [pc, #44]	; (8003208 <LoopFillZerobss+0x14>)
 80031da:	585b      	ldr	r3, [r3, r1]
 80031dc:	5043      	str	r3, [r0, r1]
 80031de:	3104      	adds	r1, #4

080031e0 <LoopCopyDataInit>:
 80031e0:	480a      	ldr	r0, [pc, #40]	; (800320c <LoopFillZerobss+0x18>)
 80031e2:	4b0b      	ldr	r3, [pc, #44]	; (8003210 <LoopFillZerobss+0x1c>)
 80031e4:	1842      	adds	r2, r0, r1
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d3f6      	bcc.n	80031d8 <CopyDataInit>
 80031ea:	4a0a      	ldr	r2, [pc, #40]	; (8003214 <LoopFillZerobss+0x20>)
 80031ec:	e002      	b.n	80031f4 <LoopFillZerobss>

080031ee <FillZerobss>:
 80031ee:	2300      	movs	r3, #0
 80031f0:	f842 3b04 	str.w	r3, [r2], #4

080031f4 <LoopFillZerobss>:
 80031f4:	4b08      	ldr	r3, [pc, #32]	; (8003218 <LoopFillZerobss+0x24>)
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d3f9      	bcc.n	80031ee <FillZerobss>
 80031fa:	f7ff ffe5 	bl	80031c8 <SystemInit>
 80031fe:	f006 f801 	bl	8009204 <__libc_init_array>
 8003202:	f7fd ffe1 	bl	80011c8 <main>
 8003206:	4770      	bx	lr
 8003208:	080095d8 	.word	0x080095d8
 800320c:	20000000 	.word	0x20000000
 8003210:	20000070 	.word	0x20000070
 8003214:	20000070 	.word	0x20000070
 8003218:	20000620 	.word	0x20000620

0800321c <ADC1_2_IRQHandler>:
 800321c:	e7fe      	b.n	800321c <ADC1_2_IRQHandler>
	...

08003220 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003224:	4b08      	ldr	r3, [pc, #32]	; (8003248 <HAL_Init+0x28>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a07      	ldr	r2, [pc, #28]	; (8003248 <HAL_Init+0x28>)
 800322a:	f043 0310 	orr.w	r3, r3, #16
 800322e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003230:	2003      	movs	r0, #3
 8003232:	f000 f947 	bl	80034c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003236:	2000      	movs	r0, #0
 8003238:	f000 f808 	bl	800324c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800323c:	f7ff fdb0 	bl	8002da0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	40022000 	.word	0x40022000

0800324c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003254:	4b12      	ldr	r3, [pc, #72]	; (80032a0 <HAL_InitTick+0x54>)
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	4b12      	ldr	r3, [pc, #72]	; (80032a4 <HAL_InitTick+0x58>)
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	4619      	mov	r1, r3
 800325e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003262:	fbb3 f3f1 	udiv	r3, r3, r1
 8003266:	fbb2 f3f3 	udiv	r3, r2, r3
 800326a:	4618      	mov	r0, r3
 800326c:	f000 f95f 	bl	800352e <HAL_SYSTICK_Config>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e00e      	b.n	8003298 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2b0f      	cmp	r3, #15
 800327e:	d80a      	bhi.n	8003296 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003280:	2200      	movs	r2, #0
 8003282:	6879      	ldr	r1, [r7, #4]
 8003284:	f04f 30ff 	mov.w	r0, #4294967295
 8003288:	f000 f927 	bl	80034da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800328c:	4a06      	ldr	r2, [pc, #24]	; (80032a8 <HAL_InitTick+0x5c>)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003292:	2300      	movs	r3, #0
 8003294:	e000      	b.n	8003298 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
}
 8003298:	4618      	mov	r0, r3
 800329a:	3708      	adds	r7, #8
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	20000000 	.word	0x20000000
 80032a4:	20000008 	.word	0x20000008
 80032a8:	20000004 	.word	0x20000004

080032ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032b0:	4b05      	ldr	r3, [pc, #20]	; (80032c8 <HAL_IncTick+0x1c>)
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	461a      	mov	r2, r3
 80032b6:	4b05      	ldr	r3, [pc, #20]	; (80032cc <HAL_IncTick+0x20>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4413      	add	r3, r2
 80032bc:	4a03      	ldr	r2, [pc, #12]	; (80032cc <HAL_IncTick+0x20>)
 80032be:	6013      	str	r3, [r2, #0]
}
 80032c0:	bf00      	nop
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bc80      	pop	{r7}
 80032c6:	4770      	bx	lr
 80032c8:	20000008 	.word	0x20000008
 80032cc:	2000060c 	.word	0x2000060c

080032d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
  return uwTick;
 80032d4:	4b02      	ldr	r3, [pc, #8]	; (80032e0 <HAL_GetTick+0x10>)
 80032d6:	681b      	ldr	r3, [r3, #0]
}
 80032d8:	4618      	mov	r0, r3
 80032da:	46bd      	mov	sp, r7
 80032dc:	bc80      	pop	{r7}
 80032de:	4770      	bx	lr
 80032e0:	2000060c 	.word	0x2000060c

080032e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032ec:	f7ff fff0 	bl	80032d0 <HAL_GetTick>
 80032f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032fc:	d005      	beq.n	800330a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032fe:	4b0a      	ldr	r3, [pc, #40]	; (8003328 <HAL_Delay+0x44>)
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	461a      	mov	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	4413      	add	r3, r2
 8003308:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800330a:	bf00      	nop
 800330c:	f7ff ffe0 	bl	80032d0 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	429a      	cmp	r2, r3
 800331a:	d8f7      	bhi.n	800330c <HAL_Delay+0x28>
  {
  }
}
 800331c:	bf00      	nop
 800331e:	bf00      	nop
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	20000008 	.word	0x20000008

0800332c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f003 0307 	and.w	r3, r3, #7
 800333a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800333c:	4b0c      	ldr	r3, [pc, #48]	; (8003370 <__NVIC_SetPriorityGrouping+0x44>)
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003342:	68ba      	ldr	r2, [r7, #8]
 8003344:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003348:	4013      	ands	r3, r2
 800334a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003354:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800335c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800335e:	4a04      	ldr	r2, [pc, #16]	; (8003370 <__NVIC_SetPriorityGrouping+0x44>)
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	60d3      	str	r3, [r2, #12]
}
 8003364:	bf00      	nop
 8003366:	3714      	adds	r7, #20
 8003368:	46bd      	mov	sp, r7
 800336a:	bc80      	pop	{r7}
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	e000ed00 	.word	0xe000ed00

08003374 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003378:	4b04      	ldr	r3, [pc, #16]	; (800338c <__NVIC_GetPriorityGrouping+0x18>)
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	0a1b      	lsrs	r3, r3, #8
 800337e:	f003 0307 	and.w	r3, r3, #7
}
 8003382:	4618      	mov	r0, r3
 8003384:	46bd      	mov	sp, r7
 8003386:	bc80      	pop	{r7}
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	e000ed00 	.word	0xe000ed00

08003390 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	4603      	mov	r3, r0
 8003398:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800339a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	db0b      	blt.n	80033ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033a2:	79fb      	ldrb	r3, [r7, #7]
 80033a4:	f003 021f 	and.w	r2, r3, #31
 80033a8:	4906      	ldr	r1, [pc, #24]	; (80033c4 <__NVIC_EnableIRQ+0x34>)
 80033aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ae:	095b      	lsrs	r3, r3, #5
 80033b0:	2001      	movs	r0, #1
 80033b2:	fa00 f202 	lsl.w	r2, r0, r2
 80033b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033ba:	bf00      	nop
 80033bc:	370c      	adds	r7, #12
 80033be:	46bd      	mov	sp, r7
 80033c0:	bc80      	pop	{r7}
 80033c2:	4770      	bx	lr
 80033c4:	e000e100 	.word	0xe000e100

080033c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	4603      	mov	r3, r0
 80033d0:	6039      	str	r1, [r7, #0]
 80033d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	db0a      	blt.n	80033f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	b2da      	uxtb	r2, r3
 80033e0:	490c      	ldr	r1, [pc, #48]	; (8003414 <__NVIC_SetPriority+0x4c>)
 80033e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e6:	0112      	lsls	r2, r2, #4
 80033e8:	b2d2      	uxtb	r2, r2
 80033ea:	440b      	add	r3, r1
 80033ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033f0:	e00a      	b.n	8003408 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	b2da      	uxtb	r2, r3
 80033f6:	4908      	ldr	r1, [pc, #32]	; (8003418 <__NVIC_SetPriority+0x50>)
 80033f8:	79fb      	ldrb	r3, [r7, #7]
 80033fa:	f003 030f 	and.w	r3, r3, #15
 80033fe:	3b04      	subs	r3, #4
 8003400:	0112      	lsls	r2, r2, #4
 8003402:	b2d2      	uxtb	r2, r2
 8003404:	440b      	add	r3, r1
 8003406:	761a      	strb	r2, [r3, #24]
}
 8003408:	bf00      	nop
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	bc80      	pop	{r7}
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	e000e100 	.word	0xe000e100
 8003418:	e000ed00 	.word	0xe000ed00

0800341c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800341c:	b480      	push	{r7}
 800341e:	b089      	sub	sp, #36	; 0x24
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f003 0307 	and.w	r3, r3, #7
 800342e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	f1c3 0307 	rsb	r3, r3, #7
 8003436:	2b04      	cmp	r3, #4
 8003438:	bf28      	it	cs
 800343a:	2304      	movcs	r3, #4
 800343c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	3304      	adds	r3, #4
 8003442:	2b06      	cmp	r3, #6
 8003444:	d902      	bls.n	800344c <NVIC_EncodePriority+0x30>
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	3b03      	subs	r3, #3
 800344a:	e000      	b.n	800344e <NVIC_EncodePriority+0x32>
 800344c:	2300      	movs	r3, #0
 800344e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003450:	f04f 32ff 	mov.w	r2, #4294967295
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	fa02 f303 	lsl.w	r3, r2, r3
 800345a:	43da      	mvns	r2, r3
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	401a      	ands	r2, r3
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003464:	f04f 31ff 	mov.w	r1, #4294967295
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	fa01 f303 	lsl.w	r3, r1, r3
 800346e:	43d9      	mvns	r1, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003474:	4313      	orrs	r3, r2
         );
}
 8003476:	4618      	mov	r0, r3
 8003478:	3724      	adds	r7, #36	; 0x24
 800347a:	46bd      	mov	sp, r7
 800347c:	bc80      	pop	{r7}
 800347e:	4770      	bx	lr

08003480 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	3b01      	subs	r3, #1
 800348c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003490:	d301      	bcc.n	8003496 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003492:	2301      	movs	r3, #1
 8003494:	e00f      	b.n	80034b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003496:	4a0a      	ldr	r2, [pc, #40]	; (80034c0 <SysTick_Config+0x40>)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	3b01      	subs	r3, #1
 800349c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800349e:	210f      	movs	r1, #15
 80034a0:	f04f 30ff 	mov.w	r0, #4294967295
 80034a4:	f7ff ff90 	bl	80033c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034a8:	4b05      	ldr	r3, [pc, #20]	; (80034c0 <SysTick_Config+0x40>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034ae:	4b04      	ldr	r3, [pc, #16]	; (80034c0 <SysTick_Config+0x40>)
 80034b0:	2207      	movs	r2, #7
 80034b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	e000e010 	.word	0xe000e010

080034c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f7ff ff2d 	bl	800332c <__NVIC_SetPriorityGrouping>
}
 80034d2:	bf00      	nop
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034da:	b580      	push	{r7, lr}
 80034dc:	b086      	sub	sp, #24
 80034de:	af00      	add	r7, sp, #0
 80034e0:	4603      	mov	r3, r0
 80034e2:	60b9      	str	r1, [r7, #8]
 80034e4:	607a      	str	r2, [r7, #4]
 80034e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034e8:	2300      	movs	r3, #0
 80034ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034ec:	f7ff ff42 	bl	8003374 <__NVIC_GetPriorityGrouping>
 80034f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	68b9      	ldr	r1, [r7, #8]
 80034f6:	6978      	ldr	r0, [r7, #20]
 80034f8:	f7ff ff90 	bl	800341c <NVIC_EncodePriority>
 80034fc:	4602      	mov	r2, r0
 80034fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003502:	4611      	mov	r1, r2
 8003504:	4618      	mov	r0, r3
 8003506:	f7ff ff5f 	bl	80033c8 <__NVIC_SetPriority>
}
 800350a:	bf00      	nop
 800350c:	3718      	adds	r7, #24
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b082      	sub	sp, #8
 8003516:	af00      	add	r7, sp, #0
 8003518:	4603      	mov	r3, r0
 800351a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800351c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003520:	4618      	mov	r0, r3
 8003522:	f7ff ff35 	bl	8003390 <__NVIC_EnableIRQ>
}
 8003526:	bf00      	nop
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b082      	sub	sp, #8
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f7ff ffa2 	bl	8003480 <SysTick_Config>
 800353c:	4603      	mov	r3, r0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
	...

08003548 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003548:	b480      	push	{r7}
 800354a:	b08b      	sub	sp, #44	; 0x2c
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003552:	2300      	movs	r3, #0
 8003554:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003556:	2300      	movs	r3, #0
 8003558:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800355a:	e169      	b.n	8003830 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800355c:	2201      	movs	r2, #1
 800355e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003560:	fa02 f303 	lsl.w	r3, r2, r3
 8003564:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	69fa      	ldr	r2, [r7, #28]
 800356c:	4013      	ands	r3, r2
 800356e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	429a      	cmp	r2, r3
 8003576:	f040 8158 	bne.w	800382a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	4a9a      	ldr	r2, [pc, #616]	; (80037e8 <HAL_GPIO_Init+0x2a0>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d05e      	beq.n	8003642 <HAL_GPIO_Init+0xfa>
 8003584:	4a98      	ldr	r2, [pc, #608]	; (80037e8 <HAL_GPIO_Init+0x2a0>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d875      	bhi.n	8003676 <HAL_GPIO_Init+0x12e>
 800358a:	4a98      	ldr	r2, [pc, #608]	; (80037ec <HAL_GPIO_Init+0x2a4>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d058      	beq.n	8003642 <HAL_GPIO_Init+0xfa>
 8003590:	4a96      	ldr	r2, [pc, #600]	; (80037ec <HAL_GPIO_Init+0x2a4>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d86f      	bhi.n	8003676 <HAL_GPIO_Init+0x12e>
 8003596:	4a96      	ldr	r2, [pc, #600]	; (80037f0 <HAL_GPIO_Init+0x2a8>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d052      	beq.n	8003642 <HAL_GPIO_Init+0xfa>
 800359c:	4a94      	ldr	r2, [pc, #592]	; (80037f0 <HAL_GPIO_Init+0x2a8>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d869      	bhi.n	8003676 <HAL_GPIO_Init+0x12e>
 80035a2:	4a94      	ldr	r2, [pc, #592]	; (80037f4 <HAL_GPIO_Init+0x2ac>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d04c      	beq.n	8003642 <HAL_GPIO_Init+0xfa>
 80035a8:	4a92      	ldr	r2, [pc, #584]	; (80037f4 <HAL_GPIO_Init+0x2ac>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d863      	bhi.n	8003676 <HAL_GPIO_Init+0x12e>
 80035ae:	4a92      	ldr	r2, [pc, #584]	; (80037f8 <HAL_GPIO_Init+0x2b0>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d046      	beq.n	8003642 <HAL_GPIO_Init+0xfa>
 80035b4:	4a90      	ldr	r2, [pc, #576]	; (80037f8 <HAL_GPIO_Init+0x2b0>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d85d      	bhi.n	8003676 <HAL_GPIO_Init+0x12e>
 80035ba:	2b12      	cmp	r3, #18
 80035bc:	d82a      	bhi.n	8003614 <HAL_GPIO_Init+0xcc>
 80035be:	2b12      	cmp	r3, #18
 80035c0:	d859      	bhi.n	8003676 <HAL_GPIO_Init+0x12e>
 80035c2:	a201      	add	r2, pc, #4	; (adr r2, 80035c8 <HAL_GPIO_Init+0x80>)
 80035c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c8:	08003643 	.word	0x08003643
 80035cc:	0800361d 	.word	0x0800361d
 80035d0:	0800362f 	.word	0x0800362f
 80035d4:	08003671 	.word	0x08003671
 80035d8:	08003677 	.word	0x08003677
 80035dc:	08003677 	.word	0x08003677
 80035e0:	08003677 	.word	0x08003677
 80035e4:	08003677 	.word	0x08003677
 80035e8:	08003677 	.word	0x08003677
 80035ec:	08003677 	.word	0x08003677
 80035f0:	08003677 	.word	0x08003677
 80035f4:	08003677 	.word	0x08003677
 80035f8:	08003677 	.word	0x08003677
 80035fc:	08003677 	.word	0x08003677
 8003600:	08003677 	.word	0x08003677
 8003604:	08003677 	.word	0x08003677
 8003608:	08003677 	.word	0x08003677
 800360c:	08003625 	.word	0x08003625
 8003610:	08003639 	.word	0x08003639
 8003614:	4a79      	ldr	r2, [pc, #484]	; (80037fc <HAL_GPIO_Init+0x2b4>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d013      	beq.n	8003642 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800361a:	e02c      	b.n	8003676 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	623b      	str	r3, [r7, #32]
          break;
 8003622:	e029      	b.n	8003678 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	3304      	adds	r3, #4
 800362a:	623b      	str	r3, [r7, #32]
          break;
 800362c:	e024      	b.n	8003678 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	3308      	adds	r3, #8
 8003634:	623b      	str	r3, [r7, #32]
          break;
 8003636:	e01f      	b.n	8003678 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	330c      	adds	r3, #12
 800363e:	623b      	str	r3, [r7, #32]
          break;
 8003640:	e01a      	b.n	8003678 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d102      	bne.n	8003650 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800364a:	2304      	movs	r3, #4
 800364c:	623b      	str	r3, [r7, #32]
          break;
 800364e:	e013      	b.n	8003678 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d105      	bne.n	8003664 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003658:	2308      	movs	r3, #8
 800365a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	69fa      	ldr	r2, [r7, #28]
 8003660:	611a      	str	r2, [r3, #16]
          break;
 8003662:	e009      	b.n	8003678 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003664:	2308      	movs	r3, #8
 8003666:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	69fa      	ldr	r2, [r7, #28]
 800366c:	615a      	str	r2, [r3, #20]
          break;
 800366e:	e003      	b.n	8003678 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003670:	2300      	movs	r3, #0
 8003672:	623b      	str	r3, [r7, #32]
          break;
 8003674:	e000      	b.n	8003678 <HAL_GPIO_Init+0x130>
          break;
 8003676:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	2bff      	cmp	r3, #255	; 0xff
 800367c:	d801      	bhi.n	8003682 <HAL_GPIO_Init+0x13a>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	e001      	b.n	8003686 <HAL_GPIO_Init+0x13e>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	3304      	adds	r3, #4
 8003686:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	2bff      	cmp	r3, #255	; 0xff
 800368c:	d802      	bhi.n	8003694 <HAL_GPIO_Init+0x14c>
 800368e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	e002      	b.n	800369a <HAL_GPIO_Init+0x152>
 8003694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003696:	3b08      	subs	r3, #8
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	210f      	movs	r1, #15
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	fa01 f303 	lsl.w	r3, r1, r3
 80036a8:	43db      	mvns	r3, r3
 80036aa:	401a      	ands	r2, r3
 80036ac:	6a39      	ldr	r1, [r7, #32]
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	fa01 f303 	lsl.w	r3, r1, r3
 80036b4:	431a      	orrs	r2, r3
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f000 80b1 	beq.w	800382a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80036c8:	4b4d      	ldr	r3, [pc, #308]	; (8003800 <HAL_GPIO_Init+0x2b8>)
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	4a4c      	ldr	r2, [pc, #304]	; (8003800 <HAL_GPIO_Init+0x2b8>)
 80036ce:	f043 0301 	orr.w	r3, r3, #1
 80036d2:	6193      	str	r3, [r2, #24]
 80036d4:	4b4a      	ldr	r3, [pc, #296]	; (8003800 <HAL_GPIO_Init+0x2b8>)
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	60bb      	str	r3, [r7, #8]
 80036de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80036e0:	4a48      	ldr	r2, [pc, #288]	; (8003804 <HAL_GPIO_Init+0x2bc>)
 80036e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e4:	089b      	lsrs	r3, r3, #2
 80036e6:	3302      	adds	r3, #2
 80036e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80036ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f0:	f003 0303 	and.w	r3, r3, #3
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	220f      	movs	r2, #15
 80036f8:	fa02 f303 	lsl.w	r3, r2, r3
 80036fc:	43db      	mvns	r3, r3
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	4013      	ands	r3, r2
 8003702:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a40      	ldr	r2, [pc, #256]	; (8003808 <HAL_GPIO_Init+0x2c0>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d013      	beq.n	8003734 <HAL_GPIO_Init+0x1ec>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a3f      	ldr	r2, [pc, #252]	; (800380c <HAL_GPIO_Init+0x2c4>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d00d      	beq.n	8003730 <HAL_GPIO_Init+0x1e8>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4a3e      	ldr	r2, [pc, #248]	; (8003810 <HAL_GPIO_Init+0x2c8>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d007      	beq.n	800372c <HAL_GPIO_Init+0x1e4>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a3d      	ldr	r2, [pc, #244]	; (8003814 <HAL_GPIO_Init+0x2cc>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d101      	bne.n	8003728 <HAL_GPIO_Init+0x1e0>
 8003724:	2303      	movs	r3, #3
 8003726:	e006      	b.n	8003736 <HAL_GPIO_Init+0x1ee>
 8003728:	2304      	movs	r3, #4
 800372a:	e004      	b.n	8003736 <HAL_GPIO_Init+0x1ee>
 800372c:	2302      	movs	r3, #2
 800372e:	e002      	b.n	8003736 <HAL_GPIO_Init+0x1ee>
 8003730:	2301      	movs	r3, #1
 8003732:	e000      	b.n	8003736 <HAL_GPIO_Init+0x1ee>
 8003734:	2300      	movs	r3, #0
 8003736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003738:	f002 0203 	and.w	r2, r2, #3
 800373c:	0092      	lsls	r2, r2, #2
 800373e:	4093      	lsls	r3, r2
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	4313      	orrs	r3, r2
 8003744:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003746:	492f      	ldr	r1, [pc, #188]	; (8003804 <HAL_GPIO_Init+0x2bc>)
 8003748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374a:	089b      	lsrs	r3, r3, #2
 800374c:	3302      	adds	r3, #2
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d006      	beq.n	800376e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003760:	4b2d      	ldr	r3, [pc, #180]	; (8003818 <HAL_GPIO_Init+0x2d0>)
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	492c      	ldr	r1, [pc, #176]	; (8003818 <HAL_GPIO_Init+0x2d0>)
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	4313      	orrs	r3, r2
 800376a:	600b      	str	r3, [r1, #0]
 800376c:	e006      	b.n	800377c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800376e:	4b2a      	ldr	r3, [pc, #168]	; (8003818 <HAL_GPIO_Init+0x2d0>)
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	43db      	mvns	r3, r3
 8003776:	4928      	ldr	r1, [pc, #160]	; (8003818 <HAL_GPIO_Init+0x2d0>)
 8003778:	4013      	ands	r3, r2
 800377a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d006      	beq.n	8003796 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003788:	4b23      	ldr	r3, [pc, #140]	; (8003818 <HAL_GPIO_Init+0x2d0>)
 800378a:	685a      	ldr	r2, [r3, #4]
 800378c:	4922      	ldr	r1, [pc, #136]	; (8003818 <HAL_GPIO_Init+0x2d0>)
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	4313      	orrs	r3, r2
 8003792:	604b      	str	r3, [r1, #4]
 8003794:	e006      	b.n	80037a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003796:	4b20      	ldr	r3, [pc, #128]	; (8003818 <HAL_GPIO_Init+0x2d0>)
 8003798:	685a      	ldr	r2, [r3, #4]
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	43db      	mvns	r3, r3
 800379e:	491e      	ldr	r1, [pc, #120]	; (8003818 <HAL_GPIO_Init+0x2d0>)
 80037a0:	4013      	ands	r3, r2
 80037a2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d006      	beq.n	80037be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80037b0:	4b19      	ldr	r3, [pc, #100]	; (8003818 <HAL_GPIO_Init+0x2d0>)
 80037b2:	689a      	ldr	r2, [r3, #8]
 80037b4:	4918      	ldr	r1, [pc, #96]	; (8003818 <HAL_GPIO_Init+0x2d0>)
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	608b      	str	r3, [r1, #8]
 80037bc:	e006      	b.n	80037cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80037be:	4b16      	ldr	r3, [pc, #88]	; (8003818 <HAL_GPIO_Init+0x2d0>)
 80037c0:	689a      	ldr	r2, [r3, #8]
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	43db      	mvns	r3, r3
 80037c6:	4914      	ldr	r1, [pc, #80]	; (8003818 <HAL_GPIO_Init+0x2d0>)
 80037c8:	4013      	ands	r3, r2
 80037ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d021      	beq.n	800381c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80037d8:	4b0f      	ldr	r3, [pc, #60]	; (8003818 <HAL_GPIO_Init+0x2d0>)
 80037da:	68da      	ldr	r2, [r3, #12]
 80037dc:	490e      	ldr	r1, [pc, #56]	; (8003818 <HAL_GPIO_Init+0x2d0>)
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	60cb      	str	r3, [r1, #12]
 80037e4:	e021      	b.n	800382a <HAL_GPIO_Init+0x2e2>
 80037e6:	bf00      	nop
 80037e8:	10320000 	.word	0x10320000
 80037ec:	10310000 	.word	0x10310000
 80037f0:	10220000 	.word	0x10220000
 80037f4:	10210000 	.word	0x10210000
 80037f8:	10120000 	.word	0x10120000
 80037fc:	10110000 	.word	0x10110000
 8003800:	40021000 	.word	0x40021000
 8003804:	40010000 	.word	0x40010000
 8003808:	40010800 	.word	0x40010800
 800380c:	40010c00 	.word	0x40010c00
 8003810:	40011000 	.word	0x40011000
 8003814:	40011400 	.word	0x40011400
 8003818:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800381c:	4b0b      	ldr	r3, [pc, #44]	; (800384c <HAL_GPIO_Init+0x304>)
 800381e:	68da      	ldr	r2, [r3, #12]
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	43db      	mvns	r3, r3
 8003824:	4909      	ldr	r1, [pc, #36]	; (800384c <HAL_GPIO_Init+0x304>)
 8003826:	4013      	ands	r3, r2
 8003828:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382c:	3301      	adds	r3, #1
 800382e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003836:	fa22 f303 	lsr.w	r3, r2, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	f47f ae8e 	bne.w	800355c <HAL_GPIO_Init+0x14>
  }
}
 8003840:	bf00      	nop
 8003842:	bf00      	nop
 8003844:	372c      	adds	r7, #44	; 0x2c
 8003846:	46bd      	mov	sp, r7
 8003848:	bc80      	pop	{r7}
 800384a:	4770      	bx	lr
 800384c:	40010400 	.word	0x40010400

08003850 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	460b      	mov	r3, r1
 800385a:	807b      	strh	r3, [r7, #2]
 800385c:	4613      	mov	r3, r2
 800385e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003860:	787b      	ldrb	r3, [r7, #1]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d003      	beq.n	800386e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003866:	887a      	ldrh	r2, [r7, #2]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800386c:	e003      	b.n	8003876 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800386e:	887b      	ldrh	r3, [r7, #2]
 8003870:	041a      	lsls	r2, r3, #16
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	611a      	str	r2, [r3, #16]
}
 8003876:	bf00      	nop
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	bc80      	pop	{r7}
 800387e:	4770      	bx	lr

08003880 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003880:	b480      	push	{r7}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	460b      	mov	r3, r1
 800388a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003892:	887a      	ldrh	r2, [r7, #2]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	4013      	ands	r3, r2
 8003898:	041a      	lsls	r2, r3, #16
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	43d9      	mvns	r1, r3
 800389e:	887b      	ldrh	r3, [r7, #2]
 80038a0:	400b      	ands	r3, r1
 80038a2:	431a      	orrs	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	611a      	str	r2, [r3, #16]
}
 80038a8:	bf00      	nop
 80038aa:	3714      	adds	r7, #20
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bc80      	pop	{r7}
 80038b0:	4770      	bx	lr
	...

080038b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e12b      	b.n	8003b1e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d106      	bne.n	80038e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f7ff fa92 	bl	8002e04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2224      	movs	r2, #36	; 0x24
 80038e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f022 0201 	bic.w	r2, r2, #1
 80038f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003906:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003916:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003918:	f001 fba0 	bl	800505c <HAL_RCC_GetPCLK1Freq>
 800391c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	4a81      	ldr	r2, [pc, #516]	; (8003b28 <HAL_I2C_Init+0x274>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d807      	bhi.n	8003938 <HAL_I2C_Init+0x84>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	4a80      	ldr	r2, [pc, #512]	; (8003b2c <HAL_I2C_Init+0x278>)
 800392c:	4293      	cmp	r3, r2
 800392e:	bf94      	ite	ls
 8003930:	2301      	movls	r3, #1
 8003932:	2300      	movhi	r3, #0
 8003934:	b2db      	uxtb	r3, r3
 8003936:	e006      	b.n	8003946 <HAL_I2C_Init+0x92>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	4a7d      	ldr	r2, [pc, #500]	; (8003b30 <HAL_I2C_Init+0x27c>)
 800393c:	4293      	cmp	r3, r2
 800393e:	bf94      	ite	ls
 8003940:	2301      	movls	r3, #1
 8003942:	2300      	movhi	r3, #0
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e0e7      	b.n	8003b1e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	4a78      	ldr	r2, [pc, #480]	; (8003b34 <HAL_I2C_Init+0x280>)
 8003952:	fba2 2303 	umull	r2, r3, r2, r3
 8003956:	0c9b      	lsrs	r3, r3, #18
 8003958:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68ba      	ldr	r2, [r7, #8]
 800396a:	430a      	orrs	r2, r1
 800396c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	6a1b      	ldr	r3, [r3, #32]
 8003974:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	4a6a      	ldr	r2, [pc, #424]	; (8003b28 <HAL_I2C_Init+0x274>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d802      	bhi.n	8003988 <HAL_I2C_Init+0xd4>
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	3301      	adds	r3, #1
 8003986:	e009      	b.n	800399c <HAL_I2C_Init+0xe8>
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800398e:	fb02 f303 	mul.w	r3, r2, r3
 8003992:	4a69      	ldr	r2, [pc, #420]	; (8003b38 <HAL_I2C_Init+0x284>)
 8003994:	fba2 2303 	umull	r2, r3, r2, r3
 8003998:	099b      	lsrs	r3, r3, #6
 800399a:	3301      	adds	r3, #1
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	6812      	ldr	r2, [r2, #0]
 80039a0:	430b      	orrs	r3, r1
 80039a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	69db      	ldr	r3, [r3, #28]
 80039aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80039ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	495c      	ldr	r1, [pc, #368]	; (8003b28 <HAL_I2C_Init+0x274>)
 80039b8:	428b      	cmp	r3, r1
 80039ba:	d819      	bhi.n	80039f0 <HAL_I2C_Init+0x13c>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	1e59      	subs	r1, r3, #1
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	005b      	lsls	r3, r3, #1
 80039c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80039ca:	1c59      	adds	r1, r3, #1
 80039cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80039d0:	400b      	ands	r3, r1
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00a      	beq.n	80039ec <HAL_I2C_Init+0x138>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	1e59      	subs	r1, r3, #1
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	005b      	lsls	r3, r3, #1
 80039e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80039e4:	3301      	adds	r3, #1
 80039e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039ea:	e051      	b.n	8003a90 <HAL_I2C_Init+0x1dc>
 80039ec:	2304      	movs	r3, #4
 80039ee:	e04f      	b.n	8003a90 <HAL_I2C_Init+0x1dc>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d111      	bne.n	8003a1c <HAL_I2C_Init+0x168>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	1e58      	subs	r0, r3, #1
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6859      	ldr	r1, [r3, #4]
 8003a00:	460b      	mov	r3, r1
 8003a02:	005b      	lsls	r3, r3, #1
 8003a04:	440b      	add	r3, r1
 8003a06:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	bf0c      	ite	eq
 8003a14:	2301      	moveq	r3, #1
 8003a16:	2300      	movne	r3, #0
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	e012      	b.n	8003a42 <HAL_I2C_Init+0x18e>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	1e58      	subs	r0, r3, #1
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6859      	ldr	r1, [r3, #4]
 8003a24:	460b      	mov	r3, r1
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	440b      	add	r3, r1
 8003a2a:	0099      	lsls	r1, r3, #2
 8003a2c:	440b      	add	r3, r1
 8003a2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a32:	3301      	adds	r3, #1
 8003a34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	bf0c      	ite	eq
 8003a3c:	2301      	moveq	r3, #1
 8003a3e:	2300      	movne	r3, #0
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <HAL_I2C_Init+0x196>
 8003a46:	2301      	movs	r3, #1
 8003a48:	e022      	b.n	8003a90 <HAL_I2C_Init+0x1dc>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10e      	bne.n	8003a70 <HAL_I2C_Init+0x1bc>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	1e58      	subs	r0, r3, #1
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6859      	ldr	r1, [r3, #4]
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	005b      	lsls	r3, r3, #1
 8003a5e:	440b      	add	r3, r1
 8003a60:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a64:	3301      	adds	r3, #1
 8003a66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a6e:	e00f      	b.n	8003a90 <HAL_I2C_Init+0x1dc>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	1e58      	subs	r0, r3, #1
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6859      	ldr	r1, [r3, #4]
 8003a78:	460b      	mov	r3, r1
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	440b      	add	r3, r1
 8003a7e:	0099      	lsls	r1, r3, #2
 8003a80:	440b      	add	r3, r1
 8003a82:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a86:	3301      	adds	r3, #1
 8003a88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a90:	6879      	ldr	r1, [r7, #4]
 8003a92:	6809      	ldr	r1, [r1, #0]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	69da      	ldr	r2, [r3, #28]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	431a      	orrs	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003abe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	6911      	ldr	r1, [r2, #16]
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	68d2      	ldr	r2, [r2, #12]
 8003aca:	4311      	orrs	r1, r2
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	6812      	ldr	r2, [r2, #0]
 8003ad0:	430b      	orrs	r3, r1
 8003ad2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	695a      	ldr	r2, [r3, #20]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	430a      	orrs	r2, r1
 8003aee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f042 0201 	orr.w	r2, r2, #1
 8003afe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2220      	movs	r2, #32
 8003b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3710      	adds	r7, #16
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	000186a0 	.word	0x000186a0
 8003b2c:	001e847f 	.word	0x001e847f
 8003b30:	003d08ff 	.word	0x003d08ff
 8003b34:	431bde83 	.word	0x431bde83
 8003b38:	10624dd3 	.word	0x10624dd3

08003b3c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b088      	sub	sp, #32
 8003b40:	af02      	add	r7, sp, #8
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	4608      	mov	r0, r1
 8003b46:	4611      	mov	r1, r2
 8003b48:	461a      	mov	r2, r3
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	817b      	strh	r3, [r7, #10]
 8003b4e:	460b      	mov	r3, r1
 8003b50:	813b      	strh	r3, [r7, #8]
 8003b52:	4613      	mov	r3, r2
 8003b54:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b56:	f7ff fbbb 	bl	80032d0 <HAL_GetTick>
 8003b5a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	2b20      	cmp	r3, #32
 8003b66:	f040 80d9 	bne.w	8003d1c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	9300      	str	r3, [sp, #0]
 8003b6e:	2319      	movs	r3, #25
 8003b70:	2201      	movs	r2, #1
 8003b72:	496d      	ldr	r1, [pc, #436]	; (8003d28 <HAL_I2C_Mem_Write+0x1ec>)
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	f000 fcc1 	bl	80044fc <I2C_WaitOnFlagUntilTimeout>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d001      	beq.n	8003b84 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003b80:	2302      	movs	r3, #2
 8003b82:	e0cc      	b.n	8003d1e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d101      	bne.n	8003b92 <HAL_I2C_Mem_Write+0x56>
 8003b8e:	2302      	movs	r3, #2
 8003b90:	e0c5      	b.n	8003d1e <HAL_I2C_Mem_Write+0x1e2>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0301 	and.w	r3, r3, #1
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d007      	beq.n	8003bb8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f042 0201 	orr.w	r2, r2, #1
 8003bb6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bc6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2221      	movs	r2, #33	; 0x21
 8003bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2240      	movs	r2, #64	; 0x40
 8003bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6a3a      	ldr	r2, [r7, #32]
 8003be2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003be8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	4a4d      	ldr	r2, [pc, #308]	; (8003d2c <HAL_I2C_Mem_Write+0x1f0>)
 8003bf8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003bfa:	88f8      	ldrh	r0, [r7, #6]
 8003bfc:	893a      	ldrh	r2, [r7, #8]
 8003bfe:	8979      	ldrh	r1, [r7, #10]
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	9301      	str	r3, [sp, #4]
 8003c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c06:	9300      	str	r3, [sp, #0]
 8003c08:	4603      	mov	r3, r0
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	f000 faf8 	bl	8004200 <I2C_RequestMemoryWrite>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d052      	beq.n	8003cbc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e081      	b.n	8003d1e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c1a:	697a      	ldr	r2, [r7, #20]
 8003c1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c1e:	68f8      	ldr	r0, [r7, #12]
 8003c20:	f000 fd42 	bl	80046a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00d      	beq.n	8003c46 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2e:	2b04      	cmp	r3, #4
 8003c30:	d107      	bne.n	8003c42 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c40:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e06b      	b.n	8003d1e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4a:	781a      	ldrb	r2, [r3, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c56:	1c5a      	adds	r2, r3, #1
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c60:	3b01      	subs	r3, #1
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	b29a      	uxth	r2, r3
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	695b      	ldr	r3, [r3, #20]
 8003c7c:	f003 0304 	and.w	r3, r3, #4
 8003c80:	2b04      	cmp	r3, #4
 8003c82:	d11b      	bne.n	8003cbc <HAL_I2C_Mem_Write+0x180>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d017      	beq.n	8003cbc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c90:	781a      	ldrb	r2, [r3, #0]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9c:	1c5a      	adds	r2, r3, #1
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	b29a      	uxth	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1aa      	bne.n	8003c1a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cc4:	697a      	ldr	r2, [r7, #20]
 8003cc6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f000 fd2e 	bl	800472a <I2C_WaitOnBTFFlagUntilTimeout>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00d      	beq.n	8003cf0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd8:	2b04      	cmp	r3, #4
 8003cda:	d107      	bne.n	8003cec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e016      	b.n	8003d1e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2220      	movs	r2, #32
 8003d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	e000      	b.n	8003d1e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003d1c:	2302      	movs	r3, #2
  }
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3718      	adds	r7, #24
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	00100002 	.word	0x00100002
 8003d2c:	ffff0000 	.word	0xffff0000

08003d30 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b08c      	sub	sp, #48	; 0x30
 8003d34:	af02      	add	r7, sp, #8
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	4608      	mov	r0, r1
 8003d3a:	4611      	mov	r1, r2
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	4603      	mov	r3, r0
 8003d40:	817b      	strh	r3, [r7, #10]
 8003d42:	460b      	mov	r3, r1
 8003d44:	813b      	strh	r3, [r7, #8]
 8003d46:	4613      	mov	r3, r2
 8003d48:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d4e:	f7ff fabf 	bl	80032d0 <HAL_GetTick>
 8003d52:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	2b20      	cmp	r3, #32
 8003d5e:	f040 8244 	bne.w	80041ea <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d64:	9300      	str	r3, [sp, #0]
 8003d66:	2319      	movs	r3, #25
 8003d68:	2201      	movs	r2, #1
 8003d6a:	4982      	ldr	r1, [pc, #520]	; (8003f74 <HAL_I2C_Mem_Read+0x244>)
 8003d6c:	68f8      	ldr	r0, [r7, #12]
 8003d6e:	f000 fbc5 	bl	80044fc <I2C_WaitOnFlagUntilTimeout>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003d78:	2302      	movs	r3, #2
 8003d7a:	e237      	b.n	80041ec <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d101      	bne.n	8003d8a <HAL_I2C_Mem_Read+0x5a>
 8003d86:	2302      	movs	r3, #2
 8003d88:	e230      	b.n	80041ec <HAL_I2C_Mem_Read+0x4bc>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d007      	beq.n	8003db0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f042 0201 	orr.w	r2, r2, #1
 8003dae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dbe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2222      	movs	r2, #34	; 0x22
 8003dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2240      	movs	r2, #64	; 0x40
 8003dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003de0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de6:	b29a      	uxth	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	4a62      	ldr	r2, [pc, #392]	; (8003f78 <HAL_I2C_Mem_Read+0x248>)
 8003df0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003df2:	88f8      	ldrh	r0, [r7, #6]
 8003df4:	893a      	ldrh	r2, [r7, #8]
 8003df6:	8979      	ldrh	r1, [r7, #10]
 8003df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfa:	9301      	str	r3, [sp, #4]
 8003dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dfe:	9300      	str	r3, [sp, #0]
 8003e00:	4603      	mov	r3, r0
 8003e02:	68f8      	ldr	r0, [r7, #12]
 8003e04:	f000 fa92 	bl	800432c <I2C_RequestMemoryRead>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d001      	beq.n	8003e12 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e1ec      	b.n	80041ec <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d113      	bne.n	8003e42 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	61fb      	str	r3, [r7, #28]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	695b      	ldr	r3, [r3, #20]
 8003e24:	61fb      	str	r3, [r7, #28]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	61fb      	str	r3, [r7, #28]
 8003e2e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e3e:	601a      	str	r2, [r3, #0]
 8003e40:	e1c0      	b.n	80041c4 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d11e      	bne.n	8003e88 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e58:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003e5a:	b672      	cpsid	i
}
 8003e5c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e5e:	2300      	movs	r3, #0
 8003e60:	61bb      	str	r3, [r7, #24]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	695b      	ldr	r3, [r3, #20]
 8003e68:	61bb      	str	r3, [r7, #24]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	61bb      	str	r3, [r7, #24]
 8003e72:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e82:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003e84:	b662      	cpsie	i
}
 8003e86:	e035      	b.n	8003ef4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d11e      	bne.n	8003ece <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e9e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003ea0:	b672      	cpsid	i
}
 8003ea2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	617b      	str	r3, [r7, #20]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	617b      	str	r3, [r7, #20]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	617b      	str	r3, [r7, #20]
 8003eb8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ec8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003eca:	b662      	cpsie	i
}
 8003ecc:	e012      	b.n	8003ef4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003edc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ede:	2300      	movs	r3, #0
 8003ee0:	613b      	str	r3, [r7, #16]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	695b      	ldr	r3, [r3, #20]
 8003ee8:	613b      	str	r3, [r7, #16]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	613b      	str	r3, [r7, #16]
 8003ef2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003ef4:	e166      	b.n	80041c4 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003efa:	2b03      	cmp	r3, #3
 8003efc:	f200 811f 	bhi.w	800413e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d123      	bne.n	8003f50 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f0a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f000 fc4d 	bl	80047ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d001      	beq.n	8003f1c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e167      	b.n	80041ec <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	691a      	ldr	r2, [r3, #16]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f26:	b2d2      	uxtb	r2, r2
 8003f28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2e:	1c5a      	adds	r2, r3, #1
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	3b01      	subs	r3, #1
 8003f48:	b29a      	uxth	r2, r3
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f4e:	e139      	b.n	80041c4 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d152      	bne.n	8003ffe <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5a:	9300      	str	r3, [sp, #0]
 8003f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f5e:	2200      	movs	r2, #0
 8003f60:	4906      	ldr	r1, [pc, #24]	; (8003f7c <HAL_I2C_Mem_Read+0x24c>)
 8003f62:	68f8      	ldr	r0, [r7, #12]
 8003f64:	f000 faca 	bl	80044fc <I2C_WaitOnFlagUntilTimeout>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d008      	beq.n	8003f80 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e13c      	b.n	80041ec <HAL_I2C_Mem_Read+0x4bc>
 8003f72:	bf00      	nop
 8003f74:	00100002 	.word	0x00100002
 8003f78:	ffff0000 	.word	0xffff0000
 8003f7c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003f80:	b672      	cpsid	i
}
 8003f82:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	691a      	ldr	r2, [r3, #16]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9e:	b2d2      	uxtb	r2, r2
 8003fa0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa6:	1c5a      	adds	r2, r3, #1
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003fc6:	b662      	cpsie	i
}
 8003fc8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	691a      	ldr	r2, [r3, #16]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd4:	b2d2      	uxtb	r2, r2
 8003fd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fdc:	1c5a      	adds	r2, r3, #1
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ffc:	e0e2      	b.n	80041c4 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004000:	9300      	str	r3, [sp, #0]
 8004002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004004:	2200      	movs	r2, #0
 8004006:	497b      	ldr	r1, [pc, #492]	; (80041f4 <HAL_I2C_Mem_Read+0x4c4>)
 8004008:	68f8      	ldr	r0, [r7, #12]
 800400a:	f000 fa77 	bl	80044fc <I2C_WaitOnFlagUntilTimeout>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d001      	beq.n	8004018 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e0e9      	b.n	80041ec <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004026:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004028:	b672      	cpsid	i
}
 800402a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	691a      	ldr	r2, [r3, #16]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004036:	b2d2      	uxtb	r2, r2
 8004038:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403e:	1c5a      	adds	r2, r3, #1
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004048:	3b01      	subs	r3, #1
 800404a:	b29a      	uxth	r2, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004054:	b29b      	uxth	r3, r3
 8004056:	3b01      	subs	r3, #1
 8004058:	b29a      	uxth	r2, r3
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800405e:	4b66      	ldr	r3, [pc, #408]	; (80041f8 <HAL_I2C_Mem_Read+0x4c8>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	08db      	lsrs	r3, r3, #3
 8004064:	4a65      	ldr	r2, [pc, #404]	; (80041fc <HAL_I2C_Mem_Read+0x4cc>)
 8004066:	fba2 2303 	umull	r2, r3, r2, r3
 800406a:	0a1a      	lsrs	r2, r3, #8
 800406c:	4613      	mov	r3, r2
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	4413      	add	r3, r2
 8004072:	00da      	lsls	r2, r3, #3
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004078:	6a3b      	ldr	r3, [r7, #32]
 800407a:	3b01      	subs	r3, #1
 800407c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800407e:	6a3b      	ldr	r3, [r7, #32]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d118      	bne.n	80040b6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2220      	movs	r2, #32
 800408e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409e:	f043 0220 	orr.w	r2, r3, #32
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80040a6:	b662      	cpsie	i
}
 80040a8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e09a      	b.n	80041ec <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	695b      	ldr	r3, [r3, #20]
 80040bc:	f003 0304 	and.w	r3, r3, #4
 80040c0:	2b04      	cmp	r3, #4
 80040c2:	d1d9      	bne.n	8004078 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	691a      	ldr	r2, [r3, #16]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040de:	b2d2      	uxtb	r2, r2
 80040e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e6:	1c5a      	adds	r2, r3, #1
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040f0:	3b01      	subs	r3, #1
 80040f2:	b29a      	uxth	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	3b01      	subs	r3, #1
 8004100:	b29a      	uxth	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004106:	b662      	cpsie	i
}
 8004108:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	691a      	ldr	r2, [r3, #16]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004114:	b2d2      	uxtb	r2, r2
 8004116:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411c:	1c5a      	adds	r2, r3, #1
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004126:	3b01      	subs	r3, #1
 8004128:	b29a      	uxth	r2, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004132:	b29b      	uxth	r3, r3
 8004134:	3b01      	subs	r3, #1
 8004136:	b29a      	uxth	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800413c:	e042      	b.n	80041c4 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800413e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004140:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f000 fb32 	bl	80047ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e04c      	b.n	80041ec <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	691a      	ldr	r2, [r3, #16]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415c:	b2d2      	uxtb	r2, r2
 800415e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004164:	1c5a      	adds	r2, r3, #1
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800416e:	3b01      	subs	r3, #1
 8004170:	b29a      	uxth	r2, r3
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800417a:	b29b      	uxth	r3, r3
 800417c:	3b01      	subs	r3, #1
 800417e:	b29a      	uxth	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	f003 0304 	and.w	r3, r3, #4
 800418e:	2b04      	cmp	r3, #4
 8004190:	d118      	bne.n	80041c4 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	691a      	ldr	r2, [r3, #16]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419c:	b2d2      	uxtb	r2, r2
 800419e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a4:	1c5a      	adds	r2, r3, #1
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ae:	3b01      	subs	r3, #1
 80041b0:	b29a      	uxth	r2, r3
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	3b01      	subs	r3, #1
 80041be:	b29a      	uxth	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f47f ae94 	bne.w	8003ef6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2220      	movs	r2, #32
 80041d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80041e6:	2300      	movs	r3, #0
 80041e8:	e000      	b.n	80041ec <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80041ea:	2302      	movs	r3, #2
  }
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3728      	adds	r7, #40	; 0x28
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	00010004 	.word	0x00010004
 80041f8:	20000000 	.word	0x20000000
 80041fc:	14f8b589 	.word	0x14f8b589

08004200 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b088      	sub	sp, #32
 8004204:	af02      	add	r7, sp, #8
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	4608      	mov	r0, r1
 800420a:	4611      	mov	r1, r2
 800420c:	461a      	mov	r2, r3
 800420e:	4603      	mov	r3, r0
 8004210:	817b      	strh	r3, [r7, #10]
 8004212:	460b      	mov	r3, r1
 8004214:	813b      	strh	r3, [r7, #8]
 8004216:	4613      	mov	r3, r2
 8004218:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004228:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800422a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422c:	9300      	str	r3, [sp, #0]
 800422e:	6a3b      	ldr	r3, [r7, #32]
 8004230:	2200      	movs	r2, #0
 8004232:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004236:	68f8      	ldr	r0, [r7, #12]
 8004238:	f000 f960 	bl	80044fc <I2C_WaitOnFlagUntilTimeout>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00d      	beq.n	800425e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800424c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004250:	d103      	bne.n	800425a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004258:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e05f      	b.n	800431e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800425e:	897b      	ldrh	r3, [r7, #10]
 8004260:	b2db      	uxtb	r3, r3
 8004262:	461a      	mov	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800426c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800426e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004270:	6a3a      	ldr	r2, [r7, #32]
 8004272:	492d      	ldr	r1, [pc, #180]	; (8004328 <I2C_RequestMemoryWrite+0x128>)
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	f000 f998 	bl	80045aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d001      	beq.n	8004284 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e04c      	b.n	800431e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004284:	2300      	movs	r3, #0
 8004286:	617b      	str	r3, [r7, #20]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	617b      	str	r3, [r7, #20]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	617b      	str	r3, [r7, #20]
 8004298:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800429a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800429c:	6a39      	ldr	r1, [r7, #32]
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	f000 fa02 	bl	80046a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00d      	beq.n	80042c6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ae:	2b04      	cmp	r3, #4
 80042b0:	d107      	bne.n	80042c2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e02b      	b.n	800431e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80042c6:	88fb      	ldrh	r3, [r7, #6]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d105      	bne.n	80042d8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042cc:	893b      	ldrh	r3, [r7, #8]
 80042ce:	b2da      	uxtb	r2, r3
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	611a      	str	r2, [r3, #16]
 80042d6:	e021      	b.n	800431c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80042d8:	893b      	ldrh	r3, [r7, #8]
 80042da:	0a1b      	lsrs	r3, r3, #8
 80042dc:	b29b      	uxth	r3, r3
 80042de:	b2da      	uxtb	r2, r3
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042e8:	6a39      	ldr	r1, [r7, #32]
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f000 f9dc 	bl	80046a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00d      	beq.n	8004312 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fa:	2b04      	cmp	r3, #4
 80042fc:	d107      	bne.n	800430e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800430c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e005      	b.n	800431e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004312:	893b      	ldrh	r3, [r7, #8]
 8004314:	b2da      	uxtb	r2, r3
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3718      	adds	r7, #24
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	00010002 	.word	0x00010002

0800432c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b088      	sub	sp, #32
 8004330:	af02      	add	r7, sp, #8
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	4608      	mov	r0, r1
 8004336:	4611      	mov	r1, r2
 8004338:	461a      	mov	r2, r3
 800433a:	4603      	mov	r3, r0
 800433c:	817b      	strh	r3, [r7, #10]
 800433e:	460b      	mov	r3, r1
 8004340:	813b      	strh	r3, [r7, #8]
 8004342:	4613      	mov	r3, r2
 8004344:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004354:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004364:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004368:	9300      	str	r3, [sp, #0]
 800436a:	6a3b      	ldr	r3, [r7, #32]
 800436c:	2200      	movs	r2, #0
 800436e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f000 f8c2 	bl	80044fc <I2C_WaitOnFlagUntilTimeout>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00d      	beq.n	800439a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004388:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800438c:	d103      	bne.n	8004396 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004394:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e0aa      	b.n	80044f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800439a:	897b      	ldrh	r3, [r7, #10]
 800439c:	b2db      	uxtb	r3, r3
 800439e:	461a      	mov	r2, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80043a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ac:	6a3a      	ldr	r2, [r7, #32]
 80043ae:	4952      	ldr	r1, [pc, #328]	; (80044f8 <I2C_RequestMemoryRead+0x1cc>)
 80043b0:	68f8      	ldr	r0, [r7, #12]
 80043b2:	f000 f8fa 	bl	80045aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d001      	beq.n	80043c0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e097      	b.n	80044f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043c0:	2300      	movs	r3, #0
 80043c2:	617b      	str	r3, [r7, #20]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	617b      	str	r3, [r7, #20]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	617b      	str	r3, [r7, #20]
 80043d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043d8:	6a39      	ldr	r1, [r7, #32]
 80043da:	68f8      	ldr	r0, [r7, #12]
 80043dc:	f000 f964 	bl	80046a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00d      	beq.n	8004402 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ea:	2b04      	cmp	r3, #4
 80043ec:	d107      	bne.n	80043fe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e076      	b.n	80044f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004402:	88fb      	ldrh	r3, [r7, #6]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d105      	bne.n	8004414 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004408:	893b      	ldrh	r3, [r7, #8]
 800440a:	b2da      	uxtb	r2, r3
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	611a      	str	r2, [r3, #16]
 8004412:	e021      	b.n	8004458 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004414:	893b      	ldrh	r3, [r7, #8]
 8004416:	0a1b      	lsrs	r3, r3, #8
 8004418:	b29b      	uxth	r3, r3
 800441a:	b2da      	uxtb	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004424:	6a39      	ldr	r1, [r7, #32]
 8004426:	68f8      	ldr	r0, [r7, #12]
 8004428:	f000 f93e 	bl	80046a8 <I2C_WaitOnTXEFlagUntilTimeout>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00d      	beq.n	800444e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004436:	2b04      	cmp	r3, #4
 8004438:	d107      	bne.n	800444a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004448:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e050      	b.n	80044f0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800444e:	893b      	ldrh	r3, [r7, #8]
 8004450:	b2da      	uxtb	r2, r3
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800445a:	6a39      	ldr	r1, [r7, #32]
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f000 f923 	bl	80046a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00d      	beq.n	8004484 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446c:	2b04      	cmp	r3, #4
 800446e:	d107      	bne.n	8004480 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800447e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e035      	b.n	80044f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004492:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004496:	9300      	str	r3, [sp, #0]
 8004498:	6a3b      	ldr	r3, [r7, #32]
 800449a:	2200      	movs	r2, #0
 800449c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f000 f82b 	bl	80044fc <I2C_WaitOnFlagUntilTimeout>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00d      	beq.n	80044c8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044ba:	d103      	bne.n	80044c4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e013      	b.n	80044f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80044c8:	897b      	ldrh	r3, [r7, #10]
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	f043 0301 	orr.w	r3, r3, #1
 80044d0:	b2da      	uxtb	r2, r3
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044da:	6a3a      	ldr	r2, [r7, #32]
 80044dc:	4906      	ldr	r1, [pc, #24]	; (80044f8 <I2C_RequestMemoryRead+0x1cc>)
 80044de:	68f8      	ldr	r0, [r7, #12]
 80044e0:	f000 f863 	bl	80045aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d001      	beq.n	80044ee <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e000      	b.n	80044f0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3718      	adds	r7, #24
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	00010002 	.word	0x00010002

080044fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	603b      	str	r3, [r7, #0]
 8004508:	4613      	mov	r3, r2
 800450a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800450c:	e025      	b.n	800455a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004514:	d021      	beq.n	800455a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004516:	f7fe fedb 	bl	80032d0 <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	683a      	ldr	r2, [r7, #0]
 8004522:	429a      	cmp	r2, r3
 8004524:	d302      	bcc.n	800452c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d116      	bne.n	800455a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2220      	movs	r2, #32
 8004536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004546:	f043 0220 	orr.w	r2, r3, #32
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e023      	b.n	80045a2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	0c1b      	lsrs	r3, r3, #16
 800455e:	b2db      	uxtb	r3, r3
 8004560:	2b01      	cmp	r3, #1
 8004562:	d10d      	bne.n	8004580 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	43da      	mvns	r2, r3
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	4013      	ands	r3, r2
 8004570:	b29b      	uxth	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	bf0c      	ite	eq
 8004576:	2301      	moveq	r3, #1
 8004578:	2300      	movne	r3, #0
 800457a:	b2db      	uxtb	r3, r3
 800457c:	461a      	mov	r2, r3
 800457e:	e00c      	b.n	800459a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	43da      	mvns	r2, r3
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	4013      	ands	r3, r2
 800458c:	b29b      	uxth	r3, r3
 800458e:	2b00      	cmp	r3, #0
 8004590:	bf0c      	ite	eq
 8004592:	2301      	moveq	r3, #1
 8004594:	2300      	movne	r3, #0
 8004596:	b2db      	uxtb	r3, r3
 8004598:	461a      	mov	r2, r3
 800459a:	79fb      	ldrb	r3, [r7, #7]
 800459c:	429a      	cmp	r2, r3
 800459e:	d0b6      	beq.n	800450e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3710      	adds	r7, #16
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}

080045aa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80045aa:	b580      	push	{r7, lr}
 80045ac:	b084      	sub	sp, #16
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	60f8      	str	r0, [r7, #12]
 80045b2:	60b9      	str	r1, [r7, #8]
 80045b4:	607a      	str	r2, [r7, #4]
 80045b6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045b8:	e051      	b.n	800465e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	695b      	ldr	r3, [r3, #20]
 80045c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045c8:	d123      	bne.n	8004612 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045d8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045e2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2200      	movs	r2, #0
 80045e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2220      	movs	r2, #32
 80045ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fe:	f043 0204 	orr.w	r2, r3, #4
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e046      	b.n	80046a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004618:	d021      	beq.n	800465e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800461a:	f7fe fe59 	bl	80032d0 <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	429a      	cmp	r2, r3
 8004628:	d302      	bcc.n	8004630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d116      	bne.n	800465e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2200      	movs	r2, #0
 8004634:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2220      	movs	r2, #32
 800463a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464a:	f043 0220 	orr.w	r2, r3, #32
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e020      	b.n	80046a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	0c1b      	lsrs	r3, r3, #16
 8004662:	b2db      	uxtb	r3, r3
 8004664:	2b01      	cmp	r3, #1
 8004666:	d10c      	bne.n	8004682 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	43da      	mvns	r2, r3
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	4013      	ands	r3, r2
 8004674:	b29b      	uxth	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	bf14      	ite	ne
 800467a:	2301      	movne	r3, #1
 800467c:	2300      	moveq	r3, #0
 800467e:	b2db      	uxtb	r3, r3
 8004680:	e00b      	b.n	800469a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	43da      	mvns	r2, r3
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	4013      	ands	r3, r2
 800468e:	b29b      	uxth	r3, r3
 8004690:	2b00      	cmp	r3, #0
 8004692:	bf14      	ite	ne
 8004694:	2301      	movne	r3, #1
 8004696:	2300      	moveq	r3, #0
 8004698:	b2db      	uxtb	r3, r3
 800469a:	2b00      	cmp	r3, #0
 800469c:	d18d      	bne.n	80045ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3710      	adds	r7, #16
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046b4:	e02d      	b.n	8004712 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	f000 f8ce 	bl	8004858 <I2C_IsAcknowledgeFailed>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d001      	beq.n	80046c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e02d      	b.n	8004722 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046cc:	d021      	beq.n	8004712 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046ce:	f7fe fdff 	bl	80032d0 <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	68ba      	ldr	r2, [r7, #8]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d302      	bcc.n	80046e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d116      	bne.n	8004712 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2220      	movs	r2, #32
 80046ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fe:	f043 0220 	orr.w	r2, r3, #32
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e007      	b.n	8004722 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	695b      	ldr	r3, [r3, #20]
 8004718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800471c:	2b80      	cmp	r3, #128	; 0x80
 800471e:	d1ca      	bne.n	80046b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800472a:	b580      	push	{r7, lr}
 800472c:	b084      	sub	sp, #16
 800472e:	af00      	add	r7, sp, #0
 8004730:	60f8      	str	r0, [r7, #12]
 8004732:	60b9      	str	r1, [r7, #8]
 8004734:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004736:	e02d      	b.n	8004794 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004738:	68f8      	ldr	r0, [r7, #12]
 800473a:	f000 f88d 	bl	8004858 <I2C_IsAcknowledgeFailed>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d001      	beq.n	8004748 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e02d      	b.n	80047a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800474e:	d021      	beq.n	8004794 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004750:	f7fe fdbe 	bl	80032d0 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	68ba      	ldr	r2, [r7, #8]
 800475c:	429a      	cmp	r2, r3
 800475e:	d302      	bcc.n	8004766 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d116      	bne.n	8004794 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2220      	movs	r2, #32
 8004770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004780:	f043 0220 	orr.w	r2, r3, #32
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e007      	b.n	80047a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	f003 0304 	and.w	r3, r3, #4
 800479e:	2b04      	cmp	r3, #4
 80047a0:	d1ca      	bne.n	8004738 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3710      	adds	r7, #16
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80047b8:	e042      	b.n	8004840 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	695b      	ldr	r3, [r3, #20]
 80047c0:	f003 0310 	and.w	r3, r3, #16
 80047c4:	2b10      	cmp	r3, #16
 80047c6:	d119      	bne.n	80047fc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f06f 0210 	mvn.w	r2, #16
 80047d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2220      	movs	r2, #32
 80047dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e029      	b.n	8004850 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047fc:	f7fe fd68 	bl	80032d0 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	68ba      	ldr	r2, [r7, #8]
 8004808:	429a      	cmp	r2, r3
 800480a:	d302      	bcc.n	8004812 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d116      	bne.n	8004840 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2220      	movs	r2, #32
 800481c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2200      	movs	r2, #0
 8004824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482c:	f043 0220 	orr.w	r2, r3, #32
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e007      	b.n	8004850 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800484a:	2b40      	cmp	r3, #64	; 0x40
 800484c:	d1b5      	bne.n	80047ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	3710      	adds	r7, #16
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	695b      	ldr	r3, [r3, #20]
 8004866:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800486a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800486e:	d11b      	bne.n	80048a8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004878:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2220      	movs	r2, #32
 8004884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004894:	f043 0204 	orr.w	r2, r3, #4
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e000      	b.n	80048aa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	370c      	adds	r7, #12
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bc80      	pop	{r7}
 80048b2:	4770      	bx	lr

080048b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b086      	sub	sp, #24
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d101      	bne.n	80048c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e26c      	b.n	8004da0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f000 8087 	beq.w	80049e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80048d4:	4b92      	ldr	r3, [pc, #584]	; (8004b20 <HAL_RCC_OscConfig+0x26c>)
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f003 030c 	and.w	r3, r3, #12
 80048dc:	2b04      	cmp	r3, #4
 80048de:	d00c      	beq.n	80048fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80048e0:	4b8f      	ldr	r3, [pc, #572]	; (8004b20 <HAL_RCC_OscConfig+0x26c>)
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f003 030c 	and.w	r3, r3, #12
 80048e8:	2b08      	cmp	r3, #8
 80048ea:	d112      	bne.n	8004912 <HAL_RCC_OscConfig+0x5e>
 80048ec:	4b8c      	ldr	r3, [pc, #560]	; (8004b20 <HAL_RCC_OscConfig+0x26c>)
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048f8:	d10b      	bne.n	8004912 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048fa:	4b89      	ldr	r3, [pc, #548]	; (8004b20 <HAL_RCC_OscConfig+0x26c>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d06c      	beq.n	80049e0 <HAL_RCC_OscConfig+0x12c>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d168      	bne.n	80049e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e246      	b.n	8004da0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800491a:	d106      	bne.n	800492a <HAL_RCC_OscConfig+0x76>
 800491c:	4b80      	ldr	r3, [pc, #512]	; (8004b20 <HAL_RCC_OscConfig+0x26c>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a7f      	ldr	r2, [pc, #508]	; (8004b20 <HAL_RCC_OscConfig+0x26c>)
 8004922:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004926:	6013      	str	r3, [r2, #0]
 8004928:	e02e      	b.n	8004988 <HAL_RCC_OscConfig+0xd4>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d10c      	bne.n	800494c <HAL_RCC_OscConfig+0x98>
 8004932:	4b7b      	ldr	r3, [pc, #492]	; (8004b20 <HAL_RCC_OscConfig+0x26c>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a7a      	ldr	r2, [pc, #488]	; (8004b20 <HAL_RCC_OscConfig+0x26c>)
 8004938:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800493c:	6013      	str	r3, [r2, #0]
 800493e:	4b78      	ldr	r3, [pc, #480]	; (8004b20 <HAL_RCC_OscConfig+0x26c>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a77      	ldr	r2, [pc, #476]	; (8004b20 <HAL_RCC_OscConfig+0x26c>)
 8004944:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004948:	6013      	str	r3, [r2, #0]
 800494a:	e01d      	b.n	8004988 <HAL_RCC_OscConfig+0xd4>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004954:	d10c      	bne.n	8004970 <HAL_RCC_OscConfig+0xbc>
 8004956:	4b72      	ldr	r3, [pc, #456]	; (8004b20 <HAL_RCC_OscConfig+0x26c>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a71      	ldr	r2, [pc, #452]	; (8004b20 <HAL_RCC_OscConfig+0x26c>)
 800495c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004960:	6013      	str	r3, [r2, #0]
 8004962:	4b6f      	ldr	r3, [pc, #444]	; (8004b20 <HAL_RCC_OscConfig+0x26c>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a6e      	ldr	r2, [pc, #440]	; (8004b20 <HAL_RCC_OscConfig+0x26c>)
 8004968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800496c:	6013      	str	r3, [r2, #0]
 800496e:	e00b      	b.n	8004988 <HAL_RCC_OscConfig+0xd4>
 8004970:	4b6b      	ldr	r3, [pc, #428]	; (8004b20 <HAL_RCC_OscConfig+0x26c>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a6a      	ldr	r2, [pc, #424]	; (8004b20 <HAL_RCC_OscConfig+0x26c>)
 8004976:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800497a:	6013      	str	r3, [r2, #0]
 800497c:	4b68      	ldr	r3, [pc, #416]	; (8004b20 <HAL_RCC_OscConfig+0x26c>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a67      	ldr	r2, [pc, #412]	; (8004b20 <HAL_RCC_OscConfig+0x26c>)
 8004982:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004986:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d013      	beq.n	80049b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004990:	f7fe fc9e 	bl	80032d0 <HAL_GetTick>
 8004994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004996:	e008      	b.n	80049aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004998:	f7fe fc9a 	bl	80032d0 <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	2b64      	cmp	r3, #100	; 0x64
 80049a4:	d901      	bls.n	80049aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e1fa      	b.n	8004da0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049aa:	4b5d      	ldr	r3, [pc, #372]	; (8004b20 <HAL_RCC_OscConfig+0x26c>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d0f0      	beq.n	8004998 <HAL_RCC_OscConfig+0xe4>
 80049b6:	e014      	b.n	80049e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049b8:	f7fe fc8a 	bl	80032d0 <HAL_GetTick>
 80049bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049be:	e008      	b.n	80049d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049c0:	f7fe fc86 	bl	80032d0 <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	2b64      	cmp	r3, #100	; 0x64
 80049cc:	d901      	bls.n	80049d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e1e6      	b.n	8004da0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049d2:	4b53      	ldr	r3, [pc, #332]	; (8004b20 <HAL_RCC_OscConfig+0x26c>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1f0      	bne.n	80049c0 <HAL_RCC_OscConfig+0x10c>
 80049de:	e000      	b.n	80049e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d063      	beq.n	8004ab6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80049ee:	4b4c      	ldr	r3, [pc, #304]	; (8004b20 <HAL_RCC_OscConfig+0x26c>)
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f003 030c 	and.w	r3, r3, #12
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00b      	beq.n	8004a12 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80049fa:	4b49      	ldr	r3, [pc, #292]	; (8004b20 <HAL_RCC_OscConfig+0x26c>)
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f003 030c 	and.w	r3, r3, #12
 8004a02:	2b08      	cmp	r3, #8
 8004a04:	d11c      	bne.n	8004a40 <HAL_RCC_OscConfig+0x18c>
 8004a06:	4b46      	ldr	r3, [pc, #280]	; (8004b20 <HAL_RCC_OscConfig+0x26c>)
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d116      	bne.n	8004a40 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a12:	4b43      	ldr	r3, [pc, #268]	; (8004b20 <HAL_RCC_OscConfig+0x26c>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0302 	and.w	r3, r3, #2
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d005      	beq.n	8004a2a <HAL_RCC_OscConfig+0x176>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d001      	beq.n	8004a2a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e1ba      	b.n	8004da0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a2a:	4b3d      	ldr	r3, [pc, #244]	; (8004b20 <HAL_RCC_OscConfig+0x26c>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	00db      	lsls	r3, r3, #3
 8004a38:	4939      	ldr	r1, [pc, #228]	; (8004b20 <HAL_RCC_OscConfig+0x26c>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a3e:	e03a      	b.n	8004ab6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	691b      	ldr	r3, [r3, #16]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d020      	beq.n	8004a8a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a48:	4b36      	ldr	r3, [pc, #216]	; (8004b24 <HAL_RCC_OscConfig+0x270>)
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a4e:	f7fe fc3f 	bl	80032d0 <HAL_GetTick>
 8004a52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a54:	e008      	b.n	8004a68 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a56:	f7fe fc3b 	bl	80032d0 <HAL_GetTick>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d901      	bls.n	8004a68 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e19b      	b.n	8004da0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a68:	4b2d      	ldr	r3, [pc, #180]	; (8004b20 <HAL_RCC_OscConfig+0x26c>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0302 	and.w	r3, r3, #2
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d0f0      	beq.n	8004a56 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a74:	4b2a      	ldr	r3, [pc, #168]	; (8004b20 <HAL_RCC_OscConfig+0x26c>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	695b      	ldr	r3, [r3, #20]
 8004a80:	00db      	lsls	r3, r3, #3
 8004a82:	4927      	ldr	r1, [pc, #156]	; (8004b20 <HAL_RCC_OscConfig+0x26c>)
 8004a84:	4313      	orrs	r3, r2
 8004a86:	600b      	str	r3, [r1, #0]
 8004a88:	e015      	b.n	8004ab6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a8a:	4b26      	ldr	r3, [pc, #152]	; (8004b24 <HAL_RCC_OscConfig+0x270>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a90:	f7fe fc1e 	bl	80032d0 <HAL_GetTick>
 8004a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a96:	e008      	b.n	8004aaa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a98:	f7fe fc1a 	bl	80032d0 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d901      	bls.n	8004aaa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e17a      	b.n	8004da0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004aaa:	4b1d      	ldr	r3, [pc, #116]	; (8004b20 <HAL_RCC_OscConfig+0x26c>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0302 	and.w	r3, r3, #2
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d1f0      	bne.n	8004a98 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0308 	and.w	r3, r3, #8
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d03a      	beq.n	8004b38 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d019      	beq.n	8004afe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004aca:	4b17      	ldr	r3, [pc, #92]	; (8004b28 <HAL_RCC_OscConfig+0x274>)
 8004acc:	2201      	movs	r2, #1
 8004ace:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ad0:	f7fe fbfe 	bl	80032d0 <HAL_GetTick>
 8004ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ad6:	e008      	b.n	8004aea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ad8:	f7fe fbfa 	bl	80032d0 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d901      	bls.n	8004aea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e15a      	b.n	8004da0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004aea:	4b0d      	ldr	r3, [pc, #52]	; (8004b20 <HAL_RCC_OscConfig+0x26c>)
 8004aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aee:	f003 0302 	and.w	r3, r3, #2
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d0f0      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004af6:	2001      	movs	r0, #1
 8004af8:	f000 fad8 	bl	80050ac <RCC_Delay>
 8004afc:	e01c      	b.n	8004b38 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004afe:	4b0a      	ldr	r3, [pc, #40]	; (8004b28 <HAL_RCC_OscConfig+0x274>)
 8004b00:	2200      	movs	r2, #0
 8004b02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b04:	f7fe fbe4 	bl	80032d0 <HAL_GetTick>
 8004b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b0a:	e00f      	b.n	8004b2c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b0c:	f7fe fbe0 	bl	80032d0 <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d908      	bls.n	8004b2c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e140      	b.n	8004da0 <HAL_RCC_OscConfig+0x4ec>
 8004b1e:	bf00      	nop
 8004b20:	40021000 	.word	0x40021000
 8004b24:	42420000 	.word	0x42420000
 8004b28:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b2c:	4b9e      	ldr	r3, [pc, #632]	; (8004da8 <HAL_RCC_OscConfig+0x4f4>)
 8004b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b30:	f003 0302 	and.w	r3, r3, #2
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d1e9      	bne.n	8004b0c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0304 	and.w	r3, r3, #4
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f000 80a6 	beq.w	8004c92 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b46:	2300      	movs	r3, #0
 8004b48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b4a:	4b97      	ldr	r3, [pc, #604]	; (8004da8 <HAL_RCC_OscConfig+0x4f4>)
 8004b4c:	69db      	ldr	r3, [r3, #28]
 8004b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d10d      	bne.n	8004b72 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b56:	4b94      	ldr	r3, [pc, #592]	; (8004da8 <HAL_RCC_OscConfig+0x4f4>)
 8004b58:	69db      	ldr	r3, [r3, #28]
 8004b5a:	4a93      	ldr	r2, [pc, #588]	; (8004da8 <HAL_RCC_OscConfig+0x4f4>)
 8004b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b60:	61d3      	str	r3, [r2, #28]
 8004b62:	4b91      	ldr	r3, [pc, #580]	; (8004da8 <HAL_RCC_OscConfig+0x4f4>)
 8004b64:	69db      	ldr	r3, [r3, #28]
 8004b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b6a:	60bb      	str	r3, [r7, #8]
 8004b6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b72:	4b8e      	ldr	r3, [pc, #568]	; (8004dac <HAL_RCC_OscConfig+0x4f8>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d118      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b7e:	4b8b      	ldr	r3, [pc, #556]	; (8004dac <HAL_RCC_OscConfig+0x4f8>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a8a      	ldr	r2, [pc, #552]	; (8004dac <HAL_RCC_OscConfig+0x4f8>)
 8004b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b8a:	f7fe fba1 	bl	80032d0 <HAL_GetTick>
 8004b8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b90:	e008      	b.n	8004ba4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b92:	f7fe fb9d 	bl	80032d0 <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	2b64      	cmp	r3, #100	; 0x64
 8004b9e:	d901      	bls.n	8004ba4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e0fd      	b.n	8004da0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ba4:	4b81      	ldr	r3, [pc, #516]	; (8004dac <HAL_RCC_OscConfig+0x4f8>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d0f0      	beq.n	8004b92 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d106      	bne.n	8004bc6 <HAL_RCC_OscConfig+0x312>
 8004bb8:	4b7b      	ldr	r3, [pc, #492]	; (8004da8 <HAL_RCC_OscConfig+0x4f4>)
 8004bba:	6a1b      	ldr	r3, [r3, #32]
 8004bbc:	4a7a      	ldr	r2, [pc, #488]	; (8004da8 <HAL_RCC_OscConfig+0x4f4>)
 8004bbe:	f043 0301 	orr.w	r3, r3, #1
 8004bc2:	6213      	str	r3, [r2, #32]
 8004bc4:	e02d      	b.n	8004c22 <HAL_RCC_OscConfig+0x36e>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d10c      	bne.n	8004be8 <HAL_RCC_OscConfig+0x334>
 8004bce:	4b76      	ldr	r3, [pc, #472]	; (8004da8 <HAL_RCC_OscConfig+0x4f4>)
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	4a75      	ldr	r2, [pc, #468]	; (8004da8 <HAL_RCC_OscConfig+0x4f4>)
 8004bd4:	f023 0301 	bic.w	r3, r3, #1
 8004bd8:	6213      	str	r3, [r2, #32]
 8004bda:	4b73      	ldr	r3, [pc, #460]	; (8004da8 <HAL_RCC_OscConfig+0x4f4>)
 8004bdc:	6a1b      	ldr	r3, [r3, #32]
 8004bde:	4a72      	ldr	r2, [pc, #456]	; (8004da8 <HAL_RCC_OscConfig+0x4f4>)
 8004be0:	f023 0304 	bic.w	r3, r3, #4
 8004be4:	6213      	str	r3, [r2, #32]
 8004be6:	e01c      	b.n	8004c22 <HAL_RCC_OscConfig+0x36e>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	2b05      	cmp	r3, #5
 8004bee:	d10c      	bne.n	8004c0a <HAL_RCC_OscConfig+0x356>
 8004bf0:	4b6d      	ldr	r3, [pc, #436]	; (8004da8 <HAL_RCC_OscConfig+0x4f4>)
 8004bf2:	6a1b      	ldr	r3, [r3, #32]
 8004bf4:	4a6c      	ldr	r2, [pc, #432]	; (8004da8 <HAL_RCC_OscConfig+0x4f4>)
 8004bf6:	f043 0304 	orr.w	r3, r3, #4
 8004bfa:	6213      	str	r3, [r2, #32]
 8004bfc:	4b6a      	ldr	r3, [pc, #424]	; (8004da8 <HAL_RCC_OscConfig+0x4f4>)
 8004bfe:	6a1b      	ldr	r3, [r3, #32]
 8004c00:	4a69      	ldr	r2, [pc, #420]	; (8004da8 <HAL_RCC_OscConfig+0x4f4>)
 8004c02:	f043 0301 	orr.w	r3, r3, #1
 8004c06:	6213      	str	r3, [r2, #32]
 8004c08:	e00b      	b.n	8004c22 <HAL_RCC_OscConfig+0x36e>
 8004c0a:	4b67      	ldr	r3, [pc, #412]	; (8004da8 <HAL_RCC_OscConfig+0x4f4>)
 8004c0c:	6a1b      	ldr	r3, [r3, #32]
 8004c0e:	4a66      	ldr	r2, [pc, #408]	; (8004da8 <HAL_RCC_OscConfig+0x4f4>)
 8004c10:	f023 0301 	bic.w	r3, r3, #1
 8004c14:	6213      	str	r3, [r2, #32]
 8004c16:	4b64      	ldr	r3, [pc, #400]	; (8004da8 <HAL_RCC_OscConfig+0x4f4>)
 8004c18:	6a1b      	ldr	r3, [r3, #32]
 8004c1a:	4a63      	ldr	r2, [pc, #396]	; (8004da8 <HAL_RCC_OscConfig+0x4f4>)
 8004c1c:	f023 0304 	bic.w	r3, r3, #4
 8004c20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d015      	beq.n	8004c56 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c2a:	f7fe fb51 	bl	80032d0 <HAL_GetTick>
 8004c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c30:	e00a      	b.n	8004c48 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c32:	f7fe fb4d 	bl	80032d0 <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d901      	bls.n	8004c48 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e0ab      	b.n	8004da0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c48:	4b57      	ldr	r3, [pc, #348]	; (8004da8 <HAL_RCC_OscConfig+0x4f4>)
 8004c4a:	6a1b      	ldr	r3, [r3, #32]
 8004c4c:	f003 0302 	and.w	r3, r3, #2
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d0ee      	beq.n	8004c32 <HAL_RCC_OscConfig+0x37e>
 8004c54:	e014      	b.n	8004c80 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c56:	f7fe fb3b 	bl	80032d0 <HAL_GetTick>
 8004c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c5c:	e00a      	b.n	8004c74 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c5e:	f7fe fb37 	bl	80032d0 <HAL_GetTick>
 8004c62:	4602      	mov	r2, r0
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d901      	bls.n	8004c74 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004c70:	2303      	movs	r3, #3
 8004c72:	e095      	b.n	8004da0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c74:	4b4c      	ldr	r3, [pc, #304]	; (8004da8 <HAL_RCC_OscConfig+0x4f4>)
 8004c76:	6a1b      	ldr	r3, [r3, #32]
 8004c78:	f003 0302 	and.w	r3, r3, #2
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d1ee      	bne.n	8004c5e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004c80:	7dfb      	ldrb	r3, [r7, #23]
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d105      	bne.n	8004c92 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c86:	4b48      	ldr	r3, [pc, #288]	; (8004da8 <HAL_RCC_OscConfig+0x4f4>)
 8004c88:	69db      	ldr	r3, [r3, #28]
 8004c8a:	4a47      	ldr	r2, [pc, #284]	; (8004da8 <HAL_RCC_OscConfig+0x4f4>)
 8004c8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c90:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	69db      	ldr	r3, [r3, #28]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	f000 8081 	beq.w	8004d9e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c9c:	4b42      	ldr	r3, [pc, #264]	; (8004da8 <HAL_RCC_OscConfig+0x4f4>)
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f003 030c 	and.w	r3, r3, #12
 8004ca4:	2b08      	cmp	r3, #8
 8004ca6:	d061      	beq.n	8004d6c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	69db      	ldr	r3, [r3, #28]
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d146      	bne.n	8004d3e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cb0:	4b3f      	ldr	r3, [pc, #252]	; (8004db0 <HAL_RCC_OscConfig+0x4fc>)
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cb6:	f7fe fb0b 	bl	80032d0 <HAL_GetTick>
 8004cba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cbc:	e008      	b.n	8004cd0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cbe:	f7fe fb07 	bl	80032d0 <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d901      	bls.n	8004cd0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	e067      	b.n	8004da0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cd0:	4b35      	ldr	r3, [pc, #212]	; (8004da8 <HAL_RCC_OscConfig+0x4f4>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1f0      	bne.n	8004cbe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a1b      	ldr	r3, [r3, #32]
 8004ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ce4:	d108      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004ce6:	4b30      	ldr	r3, [pc, #192]	; (8004da8 <HAL_RCC_OscConfig+0x4f4>)
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	492d      	ldr	r1, [pc, #180]	; (8004da8 <HAL_RCC_OscConfig+0x4f4>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cf8:	4b2b      	ldr	r3, [pc, #172]	; (8004da8 <HAL_RCC_OscConfig+0x4f4>)
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a19      	ldr	r1, [r3, #32]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d08:	430b      	orrs	r3, r1
 8004d0a:	4927      	ldr	r1, [pc, #156]	; (8004da8 <HAL_RCC_OscConfig+0x4f4>)
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d10:	4b27      	ldr	r3, [pc, #156]	; (8004db0 <HAL_RCC_OscConfig+0x4fc>)
 8004d12:	2201      	movs	r2, #1
 8004d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d16:	f7fe fadb 	bl	80032d0 <HAL_GetTick>
 8004d1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d1c:	e008      	b.n	8004d30 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d1e:	f7fe fad7 	bl	80032d0 <HAL_GetTick>
 8004d22:	4602      	mov	r2, r0
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d901      	bls.n	8004d30 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	e037      	b.n	8004da0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d30:	4b1d      	ldr	r3, [pc, #116]	; (8004da8 <HAL_RCC_OscConfig+0x4f4>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d0f0      	beq.n	8004d1e <HAL_RCC_OscConfig+0x46a>
 8004d3c:	e02f      	b.n	8004d9e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d3e:	4b1c      	ldr	r3, [pc, #112]	; (8004db0 <HAL_RCC_OscConfig+0x4fc>)
 8004d40:	2200      	movs	r2, #0
 8004d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d44:	f7fe fac4 	bl	80032d0 <HAL_GetTick>
 8004d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d4a:	e008      	b.n	8004d5e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d4c:	f7fe fac0 	bl	80032d0 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d901      	bls.n	8004d5e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e020      	b.n	8004da0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d5e:	4b12      	ldr	r3, [pc, #72]	; (8004da8 <HAL_RCC_OscConfig+0x4f4>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1f0      	bne.n	8004d4c <HAL_RCC_OscConfig+0x498>
 8004d6a:	e018      	b.n	8004d9e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	69db      	ldr	r3, [r3, #28]
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d101      	bne.n	8004d78 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e013      	b.n	8004da0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004d78:	4b0b      	ldr	r3, [pc, #44]	; (8004da8 <HAL_RCC_OscConfig+0x4f4>)
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a1b      	ldr	r3, [r3, #32]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d106      	bne.n	8004d9a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d001      	beq.n	8004d9e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e000      	b.n	8004da0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3718      	adds	r7, #24
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	40021000 	.word	0x40021000
 8004dac:	40007000 	.word	0x40007000
 8004db0:	42420060 	.word	0x42420060

08004db4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d101      	bne.n	8004dc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e0d0      	b.n	8004f6a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004dc8:	4b6a      	ldr	r3, [pc, #424]	; (8004f74 <HAL_RCC_ClockConfig+0x1c0>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0307 	and.w	r3, r3, #7
 8004dd0:	683a      	ldr	r2, [r7, #0]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d910      	bls.n	8004df8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dd6:	4b67      	ldr	r3, [pc, #412]	; (8004f74 <HAL_RCC_ClockConfig+0x1c0>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f023 0207 	bic.w	r2, r3, #7
 8004dde:	4965      	ldr	r1, [pc, #404]	; (8004f74 <HAL_RCC_ClockConfig+0x1c0>)
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004de6:	4b63      	ldr	r3, [pc, #396]	; (8004f74 <HAL_RCC_ClockConfig+0x1c0>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0307 	and.w	r3, r3, #7
 8004dee:	683a      	ldr	r2, [r7, #0]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d001      	beq.n	8004df8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e0b8      	b.n	8004f6a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0302 	and.w	r3, r3, #2
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d020      	beq.n	8004e46 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0304 	and.w	r3, r3, #4
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d005      	beq.n	8004e1c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e10:	4b59      	ldr	r3, [pc, #356]	; (8004f78 <HAL_RCC_ClockConfig+0x1c4>)
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	4a58      	ldr	r2, [pc, #352]	; (8004f78 <HAL_RCC_ClockConfig+0x1c4>)
 8004e16:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004e1a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0308 	and.w	r3, r3, #8
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d005      	beq.n	8004e34 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e28:	4b53      	ldr	r3, [pc, #332]	; (8004f78 <HAL_RCC_ClockConfig+0x1c4>)
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	4a52      	ldr	r2, [pc, #328]	; (8004f78 <HAL_RCC_ClockConfig+0x1c4>)
 8004e2e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004e32:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e34:	4b50      	ldr	r3, [pc, #320]	; (8004f78 <HAL_RCC_ClockConfig+0x1c4>)
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	494d      	ldr	r1, [pc, #308]	; (8004f78 <HAL_RCC_ClockConfig+0x1c4>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d040      	beq.n	8004ed4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d107      	bne.n	8004e6a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e5a:	4b47      	ldr	r3, [pc, #284]	; (8004f78 <HAL_RCC_ClockConfig+0x1c4>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d115      	bne.n	8004e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e07f      	b.n	8004f6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d107      	bne.n	8004e82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e72:	4b41      	ldr	r3, [pc, #260]	; (8004f78 <HAL_RCC_ClockConfig+0x1c4>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d109      	bne.n	8004e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e073      	b.n	8004f6a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e82:	4b3d      	ldr	r3, [pc, #244]	; (8004f78 <HAL_RCC_ClockConfig+0x1c4>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0302 	and.w	r3, r3, #2
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d101      	bne.n	8004e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e06b      	b.n	8004f6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e92:	4b39      	ldr	r3, [pc, #228]	; (8004f78 <HAL_RCC_ClockConfig+0x1c4>)
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	f023 0203 	bic.w	r2, r3, #3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	4936      	ldr	r1, [pc, #216]	; (8004f78 <HAL_RCC_ClockConfig+0x1c4>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ea4:	f7fe fa14 	bl	80032d0 <HAL_GetTick>
 8004ea8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eaa:	e00a      	b.n	8004ec2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004eac:	f7fe fa10 	bl	80032d0 <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d901      	bls.n	8004ec2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e053      	b.n	8004f6a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ec2:	4b2d      	ldr	r3, [pc, #180]	; (8004f78 <HAL_RCC_ClockConfig+0x1c4>)
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	f003 020c 	and.w	r2, r3, #12
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d1eb      	bne.n	8004eac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ed4:	4b27      	ldr	r3, [pc, #156]	; (8004f74 <HAL_RCC_ClockConfig+0x1c0>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0307 	and.w	r3, r3, #7
 8004edc:	683a      	ldr	r2, [r7, #0]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d210      	bcs.n	8004f04 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ee2:	4b24      	ldr	r3, [pc, #144]	; (8004f74 <HAL_RCC_ClockConfig+0x1c0>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f023 0207 	bic.w	r2, r3, #7
 8004eea:	4922      	ldr	r1, [pc, #136]	; (8004f74 <HAL_RCC_ClockConfig+0x1c0>)
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ef2:	4b20      	ldr	r3, [pc, #128]	; (8004f74 <HAL_RCC_ClockConfig+0x1c0>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0307 	and.w	r3, r3, #7
 8004efa:	683a      	ldr	r2, [r7, #0]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d001      	beq.n	8004f04 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e032      	b.n	8004f6a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0304 	and.w	r3, r3, #4
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d008      	beq.n	8004f22 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f10:	4b19      	ldr	r3, [pc, #100]	; (8004f78 <HAL_RCC_ClockConfig+0x1c4>)
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	4916      	ldr	r1, [pc, #88]	; (8004f78 <HAL_RCC_ClockConfig+0x1c4>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0308 	and.w	r3, r3, #8
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d009      	beq.n	8004f42 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004f2e:	4b12      	ldr	r3, [pc, #72]	; (8004f78 <HAL_RCC_ClockConfig+0x1c4>)
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	00db      	lsls	r3, r3, #3
 8004f3c:	490e      	ldr	r1, [pc, #56]	; (8004f78 <HAL_RCC_ClockConfig+0x1c4>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f42:	f000 f821 	bl	8004f88 <HAL_RCC_GetSysClockFreq>
 8004f46:	4602      	mov	r2, r0
 8004f48:	4b0b      	ldr	r3, [pc, #44]	; (8004f78 <HAL_RCC_ClockConfig+0x1c4>)
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	091b      	lsrs	r3, r3, #4
 8004f4e:	f003 030f 	and.w	r3, r3, #15
 8004f52:	490a      	ldr	r1, [pc, #40]	; (8004f7c <HAL_RCC_ClockConfig+0x1c8>)
 8004f54:	5ccb      	ldrb	r3, [r1, r3]
 8004f56:	fa22 f303 	lsr.w	r3, r2, r3
 8004f5a:	4a09      	ldr	r2, [pc, #36]	; (8004f80 <HAL_RCC_ClockConfig+0x1cc>)
 8004f5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004f5e:	4b09      	ldr	r3, [pc, #36]	; (8004f84 <HAL_RCC_ClockConfig+0x1d0>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7fe f972 	bl	800324c <HAL_InitTick>

  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3710      	adds	r7, #16
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	40022000 	.word	0x40022000
 8004f78:	40021000 	.word	0x40021000
 8004f7c:	0800951c 	.word	0x0800951c
 8004f80:	20000000 	.word	0x20000000
 8004f84:	20000004 	.word	0x20000004

08004f88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f88:	b490      	push	{r4, r7}
 8004f8a:	b08a      	sub	sp, #40	; 0x28
 8004f8c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004f8e:	4b2a      	ldr	r3, [pc, #168]	; (8005038 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004f90:	1d3c      	adds	r4, r7, #4
 8004f92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004f94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004f98:	f240 2301 	movw	r3, #513	; 0x201
 8004f9c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	61fb      	str	r3, [r7, #28]
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	61bb      	str	r3, [r7, #24]
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	627b      	str	r3, [r7, #36]	; 0x24
 8004faa:	2300      	movs	r3, #0
 8004fac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004fb2:	4b22      	ldr	r3, [pc, #136]	; (800503c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	f003 030c 	and.w	r3, r3, #12
 8004fbe:	2b04      	cmp	r3, #4
 8004fc0:	d002      	beq.n	8004fc8 <HAL_RCC_GetSysClockFreq+0x40>
 8004fc2:	2b08      	cmp	r3, #8
 8004fc4:	d003      	beq.n	8004fce <HAL_RCC_GetSysClockFreq+0x46>
 8004fc6:	e02d      	b.n	8005024 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004fc8:	4b1d      	ldr	r3, [pc, #116]	; (8005040 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004fca:	623b      	str	r3, [r7, #32]
      break;
 8004fcc:	e02d      	b.n	800502a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	0c9b      	lsrs	r3, r3, #18
 8004fd2:	f003 030f 	and.w	r3, r3, #15
 8004fd6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004fda:	4413      	add	r3, r2
 8004fdc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004fe0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d013      	beq.n	8005014 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004fec:	4b13      	ldr	r3, [pc, #76]	; (800503c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	0c5b      	lsrs	r3, r3, #17
 8004ff2:	f003 0301 	and.w	r3, r3, #1
 8004ff6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004ffa:	4413      	add	r3, r2
 8004ffc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005000:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	4a0e      	ldr	r2, [pc, #56]	; (8005040 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005006:	fb02 f203 	mul.w	r2, r2, r3
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005010:	627b      	str	r3, [r7, #36]	; 0x24
 8005012:	e004      	b.n	800501e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	4a0b      	ldr	r2, [pc, #44]	; (8005044 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005018:	fb02 f303 	mul.w	r3, r2, r3
 800501c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800501e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005020:	623b      	str	r3, [r7, #32]
      break;
 8005022:	e002      	b.n	800502a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005024:	4b06      	ldr	r3, [pc, #24]	; (8005040 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005026:	623b      	str	r3, [r7, #32]
      break;
 8005028:	bf00      	nop
    }
  }
  return sysclockfreq;
 800502a:	6a3b      	ldr	r3, [r7, #32]
}
 800502c:	4618      	mov	r0, r3
 800502e:	3728      	adds	r7, #40	; 0x28
 8005030:	46bd      	mov	sp, r7
 8005032:	bc90      	pop	{r4, r7}
 8005034:	4770      	bx	lr
 8005036:	bf00      	nop
 8005038:	080094d8 	.word	0x080094d8
 800503c:	40021000 	.word	0x40021000
 8005040:	007a1200 	.word	0x007a1200
 8005044:	003d0900 	.word	0x003d0900

08005048 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005048:	b480      	push	{r7}
 800504a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800504c:	4b02      	ldr	r3, [pc, #8]	; (8005058 <HAL_RCC_GetHCLKFreq+0x10>)
 800504e:	681b      	ldr	r3, [r3, #0]
}
 8005050:	4618      	mov	r0, r3
 8005052:	46bd      	mov	sp, r7
 8005054:	bc80      	pop	{r7}
 8005056:	4770      	bx	lr
 8005058:	20000000 	.word	0x20000000

0800505c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005060:	f7ff fff2 	bl	8005048 <HAL_RCC_GetHCLKFreq>
 8005064:	4602      	mov	r2, r0
 8005066:	4b05      	ldr	r3, [pc, #20]	; (800507c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	0a1b      	lsrs	r3, r3, #8
 800506c:	f003 0307 	and.w	r3, r3, #7
 8005070:	4903      	ldr	r1, [pc, #12]	; (8005080 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005072:	5ccb      	ldrb	r3, [r1, r3]
 8005074:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005078:	4618      	mov	r0, r3
 800507a:	bd80      	pop	{r7, pc}
 800507c:	40021000 	.word	0x40021000
 8005080:	0800952c 	.word	0x0800952c

08005084 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005088:	f7ff ffde 	bl	8005048 <HAL_RCC_GetHCLKFreq>
 800508c:	4602      	mov	r2, r0
 800508e:	4b05      	ldr	r3, [pc, #20]	; (80050a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	0adb      	lsrs	r3, r3, #11
 8005094:	f003 0307 	and.w	r3, r3, #7
 8005098:	4903      	ldr	r1, [pc, #12]	; (80050a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800509a:	5ccb      	ldrb	r3, [r1, r3]
 800509c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	40021000 	.word	0x40021000
 80050a8:	0800952c 	.word	0x0800952c

080050ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80050b4:	4b0a      	ldr	r3, [pc, #40]	; (80050e0 <RCC_Delay+0x34>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a0a      	ldr	r2, [pc, #40]	; (80050e4 <RCC_Delay+0x38>)
 80050ba:	fba2 2303 	umull	r2, r3, r2, r3
 80050be:	0a5b      	lsrs	r3, r3, #9
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	fb02 f303 	mul.w	r3, r2, r3
 80050c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80050c8:	bf00      	nop
  }
  while (Delay --);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	1e5a      	subs	r2, r3, #1
 80050ce:	60fa      	str	r2, [r7, #12]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1f9      	bne.n	80050c8 <RCC_Delay+0x1c>
}
 80050d4:	bf00      	nop
 80050d6:	bf00      	nop
 80050d8:	3714      	adds	r7, #20
 80050da:	46bd      	mov	sp, r7
 80050dc:	bc80      	pop	{r7}
 80050de:	4770      	bx	lr
 80050e0:	20000000 	.word	0x20000000
 80050e4:	10624dd3 	.word	0x10624dd3

080050e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d101      	bne.n	80050fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e041      	b.n	800517e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005100:	b2db      	uxtb	r3, r3
 8005102:	2b00      	cmp	r3, #0
 8005104:	d106      	bne.n	8005114 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f7fd fed4 	bl	8002ebc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2202      	movs	r2, #2
 8005118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	3304      	adds	r3, #4
 8005124:	4619      	mov	r1, r3
 8005126:	4610      	mov	r0, r2
 8005128:	f000 fe98 	bl	8005e5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3708      	adds	r7, #8
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
	...

08005188 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005188:	b480      	push	{r7}
 800518a:	b085      	sub	sp, #20
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005196:	b2db      	uxtb	r3, r3
 8005198:	2b01      	cmp	r3, #1
 800519a:	d001      	beq.n	80051a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e032      	b.n	8005206 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2202      	movs	r2, #2
 80051a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a18      	ldr	r2, [pc, #96]	; (8005210 <HAL_TIM_Base_Start+0x88>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d00e      	beq.n	80051d0 <HAL_TIM_Base_Start+0x48>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051ba:	d009      	beq.n	80051d0 <HAL_TIM_Base_Start+0x48>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a14      	ldr	r2, [pc, #80]	; (8005214 <HAL_TIM_Base_Start+0x8c>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d004      	beq.n	80051d0 <HAL_TIM_Base_Start+0x48>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a13      	ldr	r2, [pc, #76]	; (8005218 <HAL_TIM_Base_Start+0x90>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d111      	bne.n	80051f4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	f003 0307 	and.w	r3, r3, #7
 80051da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2b06      	cmp	r3, #6
 80051e0:	d010      	beq.n	8005204 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f042 0201 	orr.w	r2, r2, #1
 80051f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051f2:	e007      	b.n	8005204 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f042 0201 	orr.w	r2, r2, #1
 8005202:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3714      	adds	r7, #20
 800520a:	46bd      	mov	sp, r7
 800520c:	bc80      	pop	{r7}
 800520e:	4770      	bx	lr
 8005210:	40012c00 	.word	0x40012c00
 8005214:	40000400 	.word	0x40000400
 8005218:	40000800 	.word	0x40000800

0800521c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800521c:	b480      	push	{r7}
 800521e:	b085      	sub	sp, #20
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800522a:	b2db      	uxtb	r3, r3
 800522c:	2b01      	cmp	r3, #1
 800522e:	d001      	beq.n	8005234 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e03a      	b.n	80052aa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2202      	movs	r2, #2
 8005238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68da      	ldr	r2, [r3, #12]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f042 0201 	orr.w	r2, r2, #1
 800524a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a18      	ldr	r2, [pc, #96]	; (80052b4 <HAL_TIM_Base_Start_IT+0x98>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d00e      	beq.n	8005274 <HAL_TIM_Base_Start_IT+0x58>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800525e:	d009      	beq.n	8005274 <HAL_TIM_Base_Start_IT+0x58>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a14      	ldr	r2, [pc, #80]	; (80052b8 <HAL_TIM_Base_Start_IT+0x9c>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d004      	beq.n	8005274 <HAL_TIM_Base_Start_IT+0x58>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a13      	ldr	r2, [pc, #76]	; (80052bc <HAL_TIM_Base_Start_IT+0xa0>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d111      	bne.n	8005298 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f003 0307 	and.w	r3, r3, #7
 800527e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2b06      	cmp	r3, #6
 8005284:	d010      	beq.n	80052a8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f042 0201 	orr.w	r2, r2, #1
 8005294:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005296:	e007      	b.n	80052a8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f042 0201 	orr.w	r2, r2, #1
 80052a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3714      	adds	r7, #20
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bc80      	pop	{r7}
 80052b2:	4770      	bx	lr
 80052b4:	40012c00 	.word	0x40012c00
 80052b8:	40000400 	.word	0x40000400
 80052bc:	40000800 	.word	0x40000800

080052c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e041      	b.n	8005356 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d106      	bne.n	80052ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f7fd fdca 	bl	8002e80 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2202      	movs	r2, #2
 80052f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	3304      	adds	r3, #4
 80052fc:	4619      	mov	r1, r3
 80052fe:	4610      	mov	r0, r2
 8005300:	f000 fdac 	bl	8005e5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3708      	adds	r7, #8
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
	...

08005360 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d109      	bne.n	8005384 <HAL_TIM_PWM_Start+0x24>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005376:	b2db      	uxtb	r3, r3
 8005378:	2b01      	cmp	r3, #1
 800537a:	bf14      	ite	ne
 800537c:	2301      	movne	r3, #1
 800537e:	2300      	moveq	r3, #0
 8005380:	b2db      	uxtb	r3, r3
 8005382:	e022      	b.n	80053ca <HAL_TIM_PWM_Start+0x6a>
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	2b04      	cmp	r3, #4
 8005388:	d109      	bne.n	800539e <HAL_TIM_PWM_Start+0x3e>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b01      	cmp	r3, #1
 8005394:	bf14      	ite	ne
 8005396:	2301      	movne	r3, #1
 8005398:	2300      	moveq	r3, #0
 800539a:	b2db      	uxtb	r3, r3
 800539c:	e015      	b.n	80053ca <HAL_TIM_PWM_Start+0x6a>
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	2b08      	cmp	r3, #8
 80053a2:	d109      	bne.n	80053b8 <HAL_TIM_PWM_Start+0x58>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	bf14      	ite	ne
 80053b0:	2301      	movne	r3, #1
 80053b2:	2300      	moveq	r3, #0
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	e008      	b.n	80053ca <HAL_TIM_PWM_Start+0x6a>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	bf14      	ite	ne
 80053c4:	2301      	movne	r3, #1
 80053c6:	2300      	moveq	r3, #0
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d001      	beq.n	80053d2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e05e      	b.n	8005490 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d104      	bne.n	80053e2 <HAL_TIM_PWM_Start+0x82>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2202      	movs	r2, #2
 80053dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053e0:	e013      	b.n	800540a <HAL_TIM_PWM_Start+0xaa>
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	2b04      	cmp	r3, #4
 80053e6:	d104      	bne.n	80053f2 <HAL_TIM_PWM_Start+0x92>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2202      	movs	r2, #2
 80053ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053f0:	e00b      	b.n	800540a <HAL_TIM_PWM_Start+0xaa>
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	2b08      	cmp	r3, #8
 80053f6:	d104      	bne.n	8005402 <HAL_TIM_PWM_Start+0xa2>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2202      	movs	r2, #2
 80053fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005400:	e003      	b.n	800540a <HAL_TIM_PWM_Start+0xaa>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2202      	movs	r2, #2
 8005406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2201      	movs	r2, #1
 8005410:	6839      	ldr	r1, [r7, #0]
 8005412:	4618      	mov	r0, r3
 8005414:	f001 f8af 	bl	8006576 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a1e      	ldr	r2, [pc, #120]	; (8005498 <HAL_TIM_PWM_Start+0x138>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d107      	bne.n	8005432 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005430:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a18      	ldr	r2, [pc, #96]	; (8005498 <HAL_TIM_PWM_Start+0x138>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d00e      	beq.n	800545a <HAL_TIM_PWM_Start+0xfa>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005444:	d009      	beq.n	800545a <HAL_TIM_PWM_Start+0xfa>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a14      	ldr	r2, [pc, #80]	; (800549c <HAL_TIM_PWM_Start+0x13c>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d004      	beq.n	800545a <HAL_TIM_PWM_Start+0xfa>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a12      	ldr	r2, [pc, #72]	; (80054a0 <HAL_TIM_PWM_Start+0x140>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d111      	bne.n	800547e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	f003 0307 	and.w	r3, r3, #7
 8005464:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2b06      	cmp	r3, #6
 800546a:	d010      	beq.n	800548e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f042 0201 	orr.w	r2, r2, #1
 800547a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800547c:	e007      	b.n	800548e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f042 0201 	orr.w	r2, r2, #1
 800548c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800548e:	2300      	movs	r3, #0
}
 8005490:	4618      	mov	r0, r3
 8005492:	3710      	adds	r7, #16
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	40012c00 	.word	0x40012c00
 800549c:	40000400 	.word	0x40000400
 80054a0:	40000800 	.word	0x40000800

080054a4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d101      	bne.n	80054b6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e041      	b.n	800553a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d106      	bne.n	80054d0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 f839 	bl	8005542 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2202      	movs	r2, #2
 80054d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	3304      	adds	r3, #4
 80054e0:	4619      	mov	r1, r3
 80054e2:	4610      	mov	r0, r2
 80054e4:	f000 fcba 	bl	8005e5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3708      	adds	r7, #8
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}

08005542 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005542:	b480      	push	{r7}
 8005544:	b083      	sub	sp, #12
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800554a:	bf00      	nop
 800554c:	370c      	adds	r7, #12
 800554e:	46bd      	mov	sp, r7
 8005550:	bc80      	pop	{r7}
 8005552:	4770      	bx	lr

08005554 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d104      	bne.n	800556e <HAL_TIM_IC_Start_IT+0x1a>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800556a:	b2db      	uxtb	r3, r3
 800556c:	e013      	b.n	8005596 <HAL_TIM_IC_Start_IT+0x42>
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	2b04      	cmp	r3, #4
 8005572:	d104      	bne.n	800557e <HAL_TIM_IC_Start_IT+0x2a>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800557a:	b2db      	uxtb	r3, r3
 800557c:	e00b      	b.n	8005596 <HAL_TIM_IC_Start_IT+0x42>
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	2b08      	cmp	r3, #8
 8005582:	d104      	bne.n	800558e <HAL_TIM_IC_Start_IT+0x3a>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800558a:	b2db      	uxtb	r3, r3
 800558c:	e003      	b.n	8005596 <HAL_TIM_IC_Start_IT+0x42>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005594:	b2db      	uxtb	r3, r3
 8005596:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d104      	bne.n	80055a8 <HAL_TIM_IC_Start_IT+0x54>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	e013      	b.n	80055d0 <HAL_TIM_IC_Start_IT+0x7c>
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	2b04      	cmp	r3, #4
 80055ac:	d104      	bne.n	80055b8 <HAL_TIM_IC_Start_IT+0x64>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	e00b      	b.n	80055d0 <HAL_TIM_IC_Start_IT+0x7c>
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	2b08      	cmp	r3, #8
 80055bc:	d104      	bne.n	80055c8 <HAL_TIM_IC_Start_IT+0x74>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	e003      	b.n	80055d0 <HAL_TIM_IC_Start_IT+0x7c>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80055d2:	7bfb      	ldrb	r3, [r7, #15]
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d102      	bne.n	80055de <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80055d8:	7bbb      	ldrb	r3, [r7, #14]
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d001      	beq.n	80055e2 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e0b3      	b.n	800574a <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d104      	bne.n	80055f2 <HAL_TIM_IC_Start_IT+0x9e>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2202      	movs	r2, #2
 80055ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055f0:	e013      	b.n	800561a <HAL_TIM_IC_Start_IT+0xc6>
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	2b04      	cmp	r3, #4
 80055f6:	d104      	bne.n	8005602 <HAL_TIM_IC_Start_IT+0xae>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2202      	movs	r2, #2
 80055fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005600:	e00b      	b.n	800561a <HAL_TIM_IC_Start_IT+0xc6>
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	2b08      	cmp	r3, #8
 8005606:	d104      	bne.n	8005612 <HAL_TIM_IC_Start_IT+0xbe>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2202      	movs	r2, #2
 800560c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005610:	e003      	b.n	800561a <HAL_TIM_IC_Start_IT+0xc6>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2202      	movs	r2, #2
 8005616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d104      	bne.n	800562a <HAL_TIM_IC_Start_IT+0xd6>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2202      	movs	r2, #2
 8005624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005628:	e013      	b.n	8005652 <HAL_TIM_IC_Start_IT+0xfe>
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	2b04      	cmp	r3, #4
 800562e:	d104      	bne.n	800563a <HAL_TIM_IC_Start_IT+0xe6>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2202      	movs	r2, #2
 8005634:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005638:	e00b      	b.n	8005652 <HAL_TIM_IC_Start_IT+0xfe>
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	2b08      	cmp	r3, #8
 800563e:	d104      	bne.n	800564a <HAL_TIM_IC_Start_IT+0xf6>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2202      	movs	r2, #2
 8005644:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005648:	e003      	b.n	8005652 <HAL_TIM_IC_Start_IT+0xfe>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2202      	movs	r2, #2
 800564e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	2b0c      	cmp	r3, #12
 8005656:	d841      	bhi.n	80056dc <HAL_TIM_IC_Start_IT+0x188>
 8005658:	a201      	add	r2, pc, #4	; (adr r2, 8005660 <HAL_TIM_IC_Start_IT+0x10c>)
 800565a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800565e:	bf00      	nop
 8005660:	08005695 	.word	0x08005695
 8005664:	080056dd 	.word	0x080056dd
 8005668:	080056dd 	.word	0x080056dd
 800566c:	080056dd 	.word	0x080056dd
 8005670:	080056a7 	.word	0x080056a7
 8005674:	080056dd 	.word	0x080056dd
 8005678:	080056dd 	.word	0x080056dd
 800567c:	080056dd 	.word	0x080056dd
 8005680:	080056b9 	.word	0x080056b9
 8005684:	080056dd 	.word	0x080056dd
 8005688:	080056dd 	.word	0x080056dd
 800568c:	080056dd 	.word	0x080056dd
 8005690:	080056cb 	.word	0x080056cb
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68da      	ldr	r2, [r3, #12]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f042 0202 	orr.w	r2, r2, #2
 80056a2:	60da      	str	r2, [r3, #12]
      break;
 80056a4:	e01b      	b.n	80056de <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68da      	ldr	r2, [r3, #12]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f042 0204 	orr.w	r2, r2, #4
 80056b4:	60da      	str	r2, [r3, #12]
      break;
 80056b6:	e012      	b.n	80056de <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	68da      	ldr	r2, [r3, #12]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f042 0208 	orr.w	r2, r2, #8
 80056c6:	60da      	str	r2, [r3, #12]
      break;
 80056c8:	e009      	b.n	80056de <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68da      	ldr	r2, [r3, #12]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f042 0210 	orr.w	r2, r2, #16
 80056d8:	60da      	str	r2, [r3, #12]
      break;
 80056da:	e000      	b.n	80056de <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 80056dc:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2201      	movs	r2, #1
 80056e4:	6839      	ldr	r1, [r7, #0]
 80056e6:	4618      	mov	r0, r3
 80056e8:	f000 ff45 	bl	8006576 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a18      	ldr	r2, [pc, #96]	; (8005754 <HAL_TIM_IC_Start_IT+0x200>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d00e      	beq.n	8005714 <HAL_TIM_IC_Start_IT+0x1c0>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056fe:	d009      	beq.n	8005714 <HAL_TIM_IC_Start_IT+0x1c0>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a14      	ldr	r2, [pc, #80]	; (8005758 <HAL_TIM_IC_Start_IT+0x204>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d004      	beq.n	8005714 <HAL_TIM_IC_Start_IT+0x1c0>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a13      	ldr	r2, [pc, #76]	; (800575c <HAL_TIM_IC_Start_IT+0x208>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d111      	bne.n	8005738 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	f003 0307 	and.w	r3, r3, #7
 800571e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	2b06      	cmp	r3, #6
 8005724:	d010      	beq.n	8005748 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f042 0201 	orr.w	r2, r2, #1
 8005734:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005736:	e007      	b.n	8005748 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f042 0201 	orr.w	r2, r2, #1
 8005746:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3710      	adds	r7, #16
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	40012c00 	.word	0x40012c00
 8005758:	40000400 	.word	0x40000400
 800575c:	40000800 	.word	0x40000800

08005760 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b082      	sub	sp, #8
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	f003 0302 	and.w	r3, r3, #2
 8005772:	2b02      	cmp	r3, #2
 8005774:	d122      	bne.n	80057bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	f003 0302 	and.w	r3, r3, #2
 8005780:	2b02      	cmp	r3, #2
 8005782:	d11b      	bne.n	80057bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f06f 0202 	mvn.w	r2, #2
 800578c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2201      	movs	r2, #1
 8005792:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	699b      	ldr	r3, [r3, #24]
 800579a:	f003 0303 	and.w	r3, r3, #3
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d003      	beq.n	80057aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f7fc fc18 	bl	8001fd8 <HAL_TIM_IC_CaptureCallback>
 80057a8:	e005      	b.n	80057b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 fb3a 	bl	8005e24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 fb40 	bl	8005e36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	f003 0304 	and.w	r3, r3, #4
 80057c6:	2b04      	cmp	r3, #4
 80057c8:	d122      	bne.n	8005810 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	f003 0304 	and.w	r3, r3, #4
 80057d4:	2b04      	cmp	r3, #4
 80057d6:	d11b      	bne.n	8005810 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f06f 0204 	mvn.w	r2, #4
 80057e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2202      	movs	r2, #2
 80057e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	699b      	ldr	r3, [r3, #24]
 80057ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d003      	beq.n	80057fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f7fc fbee 	bl	8001fd8 <HAL_TIM_IC_CaptureCallback>
 80057fc:	e005      	b.n	800580a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 fb10 	bl	8005e24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 fb16 	bl	8005e36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	f003 0308 	and.w	r3, r3, #8
 800581a:	2b08      	cmp	r3, #8
 800581c:	d122      	bne.n	8005864 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	f003 0308 	and.w	r3, r3, #8
 8005828:	2b08      	cmp	r3, #8
 800582a:	d11b      	bne.n	8005864 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f06f 0208 	mvn.w	r2, #8
 8005834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2204      	movs	r2, #4
 800583a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	69db      	ldr	r3, [r3, #28]
 8005842:	f003 0303 	and.w	r3, r3, #3
 8005846:	2b00      	cmp	r3, #0
 8005848:	d003      	beq.n	8005852 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f7fc fbc4 	bl	8001fd8 <HAL_TIM_IC_CaptureCallback>
 8005850:	e005      	b.n	800585e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 fae6 	bl	8005e24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f000 faec 	bl	8005e36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	f003 0310 	and.w	r3, r3, #16
 800586e:	2b10      	cmp	r3, #16
 8005870:	d122      	bne.n	80058b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	f003 0310 	and.w	r3, r3, #16
 800587c:	2b10      	cmp	r3, #16
 800587e:	d11b      	bne.n	80058b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f06f 0210 	mvn.w	r2, #16
 8005888:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2208      	movs	r2, #8
 800588e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	69db      	ldr	r3, [r3, #28]
 8005896:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800589a:	2b00      	cmp	r3, #0
 800589c:	d003      	beq.n	80058a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f7fc fb9a 	bl	8001fd8 <HAL_TIM_IC_CaptureCallback>
 80058a4:	e005      	b.n	80058b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 fabc 	bl	8005e24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 fac2 	bl	8005e36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	f003 0301 	and.w	r3, r3, #1
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d10e      	bne.n	80058e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	f003 0301 	and.w	r3, r3, #1
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d107      	bne.n	80058e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f06f 0201 	mvn.w	r2, #1
 80058dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f7fc f9ee 	bl	8001cc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ee:	2b80      	cmp	r3, #128	; 0x80
 80058f0:	d10e      	bne.n	8005910 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058fc:	2b80      	cmp	r3, #128	; 0x80
 80058fe:	d107      	bne.n	8005910 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005908:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 ff10 	bl	8006730 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800591a:	2b40      	cmp	r3, #64	; 0x40
 800591c:	d10e      	bne.n	800593c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005928:	2b40      	cmp	r3, #64	; 0x40
 800592a:	d107      	bne.n	800593c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 fa86 	bl	8005e48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	f003 0320 	and.w	r3, r3, #32
 8005946:	2b20      	cmp	r3, #32
 8005948:	d10e      	bne.n	8005968 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	f003 0320 	and.w	r3, r3, #32
 8005954:	2b20      	cmp	r3, #32
 8005956:	d107      	bne.n	8005968 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f06f 0220 	mvn.w	r2, #32
 8005960:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 fedb 	bl	800671e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005968:	bf00      	nop
 800596a:	3708      	adds	r7, #8
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005982:	2b01      	cmp	r3, #1
 8005984:	d101      	bne.n	800598a <HAL_TIM_IC_ConfigChannel+0x1a>
 8005986:	2302      	movs	r3, #2
 8005988:	e082      	b.n	8005a90 <HAL_TIM_IC_ConfigChannel+0x120>
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2201      	movs	r2, #1
 800598e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d11b      	bne.n	80059d0 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6818      	ldr	r0, [r3, #0]
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	6819      	ldr	r1, [r3, #0]
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	685a      	ldr	r2, [r3, #4]
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	f000 fc42 	bl	8006230 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	699a      	ldr	r2, [r3, #24]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f022 020c 	bic.w	r2, r2, #12
 80059ba:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6999      	ldr	r1, [r3, #24]
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	689a      	ldr	r2, [r3, #8]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	430a      	orrs	r2, r1
 80059cc:	619a      	str	r2, [r3, #24]
 80059ce:	e05a      	b.n	8005a86 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2b04      	cmp	r3, #4
 80059d4:	d11c      	bne.n	8005a10 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6818      	ldr	r0, [r3, #0]
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	6819      	ldr	r1, [r3, #0]
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	685a      	ldr	r2, [r3, #4]
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	f000 fcab 	bl	8006340 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	699a      	ldr	r2, [r3, #24]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80059f8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	6999      	ldr	r1, [r3, #24]
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	021a      	lsls	r2, r3, #8
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	430a      	orrs	r2, r1
 8005a0c:	619a      	str	r2, [r3, #24]
 8005a0e:	e03a      	b.n	8005a86 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2b08      	cmp	r3, #8
 8005a14:	d11b      	bne.n	8005a4e <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6818      	ldr	r0, [r3, #0]
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	6819      	ldr	r1, [r3, #0]
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	685a      	ldr	r2, [r3, #4]
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	f000 fcf6 	bl	8006416 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	69da      	ldr	r2, [r3, #28]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f022 020c 	bic.w	r2, r2, #12
 8005a38:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	69d9      	ldr	r1, [r3, #28]
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	689a      	ldr	r2, [r3, #8]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	430a      	orrs	r2, r1
 8005a4a:	61da      	str	r2, [r3, #28]
 8005a4c:	e01b      	b.n	8005a86 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6818      	ldr	r0, [r3, #0]
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	6819      	ldr	r1, [r3, #0]
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	685a      	ldr	r2, [r3, #4]
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	f000 fd15 	bl	800648c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	69da      	ldr	r2, [r3, #28]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005a70:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	69d9      	ldr	r1, [r3, #28]
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	021a      	lsls	r2, r3, #8
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	430a      	orrs	r2, r1
 8005a84:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a8e:	2300      	movs	r3, #0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3710      	adds	r7, #16
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d101      	bne.n	8005ab2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005aae:	2302      	movs	r3, #2
 8005ab0:	e0ac      	b.n	8005c0c <HAL_TIM_PWM_ConfigChannel+0x174>
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2b0c      	cmp	r3, #12
 8005abe:	f200 809f 	bhi.w	8005c00 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005ac2:	a201      	add	r2, pc, #4	; (adr r2, 8005ac8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac8:	08005afd 	.word	0x08005afd
 8005acc:	08005c01 	.word	0x08005c01
 8005ad0:	08005c01 	.word	0x08005c01
 8005ad4:	08005c01 	.word	0x08005c01
 8005ad8:	08005b3d 	.word	0x08005b3d
 8005adc:	08005c01 	.word	0x08005c01
 8005ae0:	08005c01 	.word	0x08005c01
 8005ae4:	08005c01 	.word	0x08005c01
 8005ae8:	08005b7f 	.word	0x08005b7f
 8005aec:	08005c01 	.word	0x08005c01
 8005af0:	08005c01 	.word	0x08005c01
 8005af4:	08005c01 	.word	0x08005c01
 8005af8:	08005bbf 	.word	0x08005bbf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	68b9      	ldr	r1, [r7, #8]
 8005b02:	4618      	mov	r0, r3
 8005b04:	f000 fa0c 	bl	8005f20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	699a      	ldr	r2, [r3, #24]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f042 0208 	orr.w	r2, r2, #8
 8005b16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	699a      	ldr	r2, [r3, #24]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f022 0204 	bic.w	r2, r2, #4
 8005b26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	6999      	ldr	r1, [r3, #24]
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	691a      	ldr	r2, [r3, #16]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	430a      	orrs	r2, r1
 8005b38:	619a      	str	r2, [r3, #24]
      break;
 8005b3a:	e062      	b.n	8005c02 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68b9      	ldr	r1, [r7, #8]
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 fa52 	bl	8005fec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	699a      	ldr	r2, [r3, #24]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	699a      	ldr	r2, [r3, #24]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	6999      	ldr	r1, [r3, #24]
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	021a      	lsls	r2, r3, #8
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	430a      	orrs	r2, r1
 8005b7a:	619a      	str	r2, [r3, #24]
      break;
 8005b7c:	e041      	b.n	8005c02 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68b9      	ldr	r1, [r7, #8]
 8005b84:	4618      	mov	r0, r3
 8005b86:	f000 fa9b 	bl	80060c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	69da      	ldr	r2, [r3, #28]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f042 0208 	orr.w	r2, r2, #8
 8005b98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	69da      	ldr	r2, [r3, #28]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f022 0204 	bic.w	r2, r2, #4
 8005ba8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	69d9      	ldr	r1, [r3, #28]
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	691a      	ldr	r2, [r3, #16]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	61da      	str	r2, [r3, #28]
      break;
 8005bbc:	e021      	b.n	8005c02 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68b9      	ldr	r1, [r7, #8]
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f000 fae5 	bl	8006194 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	69da      	ldr	r2, [r3, #28]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	69da      	ldr	r2, [r3, #28]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005be8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	69d9      	ldr	r1, [r3, #28]
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	691b      	ldr	r3, [r3, #16]
 8005bf4:	021a      	lsls	r2, r3, #8
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	430a      	orrs	r2, r1
 8005bfc:	61da      	str	r2, [r3, #28]
      break;
 8005bfe:	e000      	b.n	8005c02 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005c00:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c0a:	2300      	movs	r3, #0
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3710      	adds	r7, #16
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d101      	bne.n	8005c2c <HAL_TIM_ConfigClockSource+0x18>
 8005c28:	2302      	movs	r3, #2
 8005c2a:	e0b3      	b.n	8005d94 <HAL_TIM_ConfigClockSource+0x180>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2202      	movs	r2, #2
 8005c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c52:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c64:	d03e      	beq.n	8005ce4 <HAL_TIM_ConfigClockSource+0xd0>
 8005c66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c6a:	f200 8087 	bhi.w	8005d7c <HAL_TIM_ConfigClockSource+0x168>
 8005c6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c72:	f000 8085 	beq.w	8005d80 <HAL_TIM_ConfigClockSource+0x16c>
 8005c76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c7a:	d87f      	bhi.n	8005d7c <HAL_TIM_ConfigClockSource+0x168>
 8005c7c:	2b70      	cmp	r3, #112	; 0x70
 8005c7e:	d01a      	beq.n	8005cb6 <HAL_TIM_ConfigClockSource+0xa2>
 8005c80:	2b70      	cmp	r3, #112	; 0x70
 8005c82:	d87b      	bhi.n	8005d7c <HAL_TIM_ConfigClockSource+0x168>
 8005c84:	2b60      	cmp	r3, #96	; 0x60
 8005c86:	d050      	beq.n	8005d2a <HAL_TIM_ConfigClockSource+0x116>
 8005c88:	2b60      	cmp	r3, #96	; 0x60
 8005c8a:	d877      	bhi.n	8005d7c <HAL_TIM_ConfigClockSource+0x168>
 8005c8c:	2b50      	cmp	r3, #80	; 0x50
 8005c8e:	d03c      	beq.n	8005d0a <HAL_TIM_ConfigClockSource+0xf6>
 8005c90:	2b50      	cmp	r3, #80	; 0x50
 8005c92:	d873      	bhi.n	8005d7c <HAL_TIM_ConfigClockSource+0x168>
 8005c94:	2b40      	cmp	r3, #64	; 0x40
 8005c96:	d058      	beq.n	8005d4a <HAL_TIM_ConfigClockSource+0x136>
 8005c98:	2b40      	cmp	r3, #64	; 0x40
 8005c9a:	d86f      	bhi.n	8005d7c <HAL_TIM_ConfigClockSource+0x168>
 8005c9c:	2b30      	cmp	r3, #48	; 0x30
 8005c9e:	d064      	beq.n	8005d6a <HAL_TIM_ConfigClockSource+0x156>
 8005ca0:	2b30      	cmp	r3, #48	; 0x30
 8005ca2:	d86b      	bhi.n	8005d7c <HAL_TIM_ConfigClockSource+0x168>
 8005ca4:	2b20      	cmp	r3, #32
 8005ca6:	d060      	beq.n	8005d6a <HAL_TIM_ConfigClockSource+0x156>
 8005ca8:	2b20      	cmp	r3, #32
 8005caa:	d867      	bhi.n	8005d7c <HAL_TIM_ConfigClockSource+0x168>
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d05c      	beq.n	8005d6a <HAL_TIM_ConfigClockSource+0x156>
 8005cb0:	2b10      	cmp	r3, #16
 8005cb2:	d05a      	beq.n	8005d6a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005cb4:	e062      	b.n	8005d7c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6818      	ldr	r0, [r3, #0]
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	6899      	ldr	r1, [r3, #8]
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	685a      	ldr	r2, [r3, #4]
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	f000 fc37 	bl	8006538 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005cd8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	68fa      	ldr	r2, [r7, #12]
 8005ce0:	609a      	str	r2, [r3, #8]
      break;
 8005ce2:	e04e      	b.n	8005d82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6818      	ldr	r0, [r3, #0]
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	6899      	ldr	r1, [r3, #8]
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	685a      	ldr	r2, [r3, #4]
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	f000 fc20 	bl	8006538 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	689a      	ldr	r2, [r3, #8]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d06:	609a      	str	r2, [r3, #8]
      break;
 8005d08:	e03b      	b.n	8005d82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6818      	ldr	r0, [r3, #0]
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	6859      	ldr	r1, [r3, #4]
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	461a      	mov	r2, r3
 8005d18:	f000 fae4 	bl	80062e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2150      	movs	r1, #80	; 0x50
 8005d22:	4618      	mov	r0, r3
 8005d24:	f000 fbee 	bl	8006504 <TIM_ITRx_SetConfig>
      break;
 8005d28:	e02b      	b.n	8005d82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6818      	ldr	r0, [r3, #0]
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	6859      	ldr	r1, [r3, #4]
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	461a      	mov	r2, r3
 8005d38:	f000 fb3e 	bl	80063b8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2160      	movs	r1, #96	; 0x60
 8005d42:	4618      	mov	r0, r3
 8005d44:	f000 fbde 	bl	8006504 <TIM_ITRx_SetConfig>
      break;
 8005d48:	e01b      	b.n	8005d82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6818      	ldr	r0, [r3, #0]
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	6859      	ldr	r1, [r3, #4]
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	461a      	mov	r2, r3
 8005d58:	f000 fac4 	bl	80062e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2140      	movs	r1, #64	; 0x40
 8005d62:	4618      	mov	r0, r3
 8005d64:	f000 fbce 	bl	8006504 <TIM_ITRx_SetConfig>
      break;
 8005d68:	e00b      	b.n	8005d82 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4619      	mov	r1, r3
 8005d74:	4610      	mov	r0, r2
 8005d76:	f000 fbc5 	bl	8006504 <TIM_ITRx_SetConfig>
        break;
 8005d7a:	e002      	b.n	8005d82 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005d7c:	bf00      	nop
 8005d7e:	e000      	b.n	8005d82 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005d80:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2201      	movs	r2, #1
 8005d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d92:	2300      	movs	r3, #0
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3710      	adds	r7, #16
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b085      	sub	sp, #20
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005da6:	2300      	movs	r3, #0
 8005da8:	60fb      	str	r3, [r7, #12]
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	2b0c      	cmp	r3, #12
 8005dae:	d831      	bhi.n	8005e14 <HAL_TIM_ReadCapturedValue+0x78>
 8005db0:	a201      	add	r2, pc, #4	; (adr r2, 8005db8 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db6:	bf00      	nop
 8005db8:	08005ded 	.word	0x08005ded
 8005dbc:	08005e15 	.word	0x08005e15
 8005dc0:	08005e15 	.word	0x08005e15
 8005dc4:	08005e15 	.word	0x08005e15
 8005dc8:	08005df7 	.word	0x08005df7
 8005dcc:	08005e15 	.word	0x08005e15
 8005dd0:	08005e15 	.word	0x08005e15
 8005dd4:	08005e15 	.word	0x08005e15
 8005dd8:	08005e01 	.word	0x08005e01
 8005ddc:	08005e15 	.word	0x08005e15
 8005de0:	08005e15 	.word	0x08005e15
 8005de4:	08005e15 	.word	0x08005e15
 8005de8:	08005e0b 	.word	0x08005e0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005df2:	60fb      	str	r3, [r7, #12]

      break;
 8005df4:	e00f      	b.n	8005e16 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dfc:	60fb      	str	r3, [r7, #12]

      break;
 8005dfe:	e00a      	b.n	8005e16 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e06:	60fb      	str	r3, [r7, #12]

      break;
 8005e08:	e005      	b.n	8005e16 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e10:	60fb      	str	r3, [r7, #12]

      break;
 8005e12:	e000      	b.n	8005e16 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005e14:	bf00      	nop
  }

  return tmpreg;
 8005e16:	68fb      	ldr	r3, [r7, #12]
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3714      	adds	r7, #20
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bc80      	pop	{r7}
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop

08005e24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e2c:	bf00      	nop
 8005e2e:	370c      	adds	r7, #12
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bc80      	pop	{r7}
 8005e34:	4770      	bx	lr

08005e36 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e36:	b480      	push	{r7}
 8005e38:	b083      	sub	sp, #12
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e3e:	bf00      	nop
 8005e40:	370c      	adds	r7, #12
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bc80      	pop	{r7}
 8005e46:	4770      	bx	lr

08005e48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e50:	bf00      	nop
 8005e52:	370c      	adds	r7, #12
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bc80      	pop	{r7}
 8005e58:	4770      	bx	lr
	...

08005e5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b085      	sub	sp, #20
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4a29      	ldr	r2, [pc, #164]	; (8005f14 <TIM_Base_SetConfig+0xb8>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d00b      	beq.n	8005e8c <TIM_Base_SetConfig+0x30>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e7a:	d007      	beq.n	8005e8c <TIM_Base_SetConfig+0x30>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a26      	ldr	r2, [pc, #152]	; (8005f18 <TIM_Base_SetConfig+0xbc>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d003      	beq.n	8005e8c <TIM_Base_SetConfig+0x30>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a25      	ldr	r2, [pc, #148]	; (8005f1c <TIM_Base_SetConfig+0xc0>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d108      	bne.n	8005e9e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	68fa      	ldr	r2, [r7, #12]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a1c      	ldr	r2, [pc, #112]	; (8005f14 <TIM_Base_SetConfig+0xb8>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d00b      	beq.n	8005ebe <TIM_Base_SetConfig+0x62>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eac:	d007      	beq.n	8005ebe <TIM_Base_SetConfig+0x62>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a19      	ldr	r2, [pc, #100]	; (8005f18 <TIM_Base_SetConfig+0xbc>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d003      	beq.n	8005ebe <TIM_Base_SetConfig+0x62>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4a18      	ldr	r2, [pc, #96]	; (8005f1c <TIM_Base_SetConfig+0xc0>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d108      	bne.n	8005ed0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ec4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	695b      	ldr	r3, [r3, #20]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	689a      	ldr	r2, [r3, #8]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4a07      	ldr	r2, [pc, #28]	; (8005f14 <TIM_Base_SetConfig+0xb8>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d103      	bne.n	8005f04 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	691a      	ldr	r2, [r3, #16]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	615a      	str	r2, [r3, #20]
}
 8005f0a:	bf00      	nop
 8005f0c:	3714      	adds	r7, #20
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bc80      	pop	{r7}
 8005f12:	4770      	bx	lr
 8005f14:	40012c00 	.word	0x40012c00
 8005f18:	40000400 	.word	0x40000400
 8005f1c:	40000800 	.word	0x40000800

08005f20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b087      	sub	sp, #28
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a1b      	ldr	r3, [r3, #32]
 8005f2e:	f023 0201 	bic.w	r2, r3, #1
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a1b      	ldr	r3, [r3, #32]
 8005f3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	699b      	ldr	r3, [r3, #24]
 8005f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f023 0303 	bic.w	r3, r3, #3
 8005f56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	f023 0302 	bic.w	r3, r3, #2
 8005f68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	697a      	ldr	r2, [r7, #20]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	4a1c      	ldr	r2, [pc, #112]	; (8005fe8 <TIM_OC1_SetConfig+0xc8>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d10c      	bne.n	8005f96 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	f023 0308 	bic.w	r3, r3, #8
 8005f82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	697a      	ldr	r2, [r7, #20]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	f023 0304 	bic.w	r3, r3, #4
 8005f94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a13      	ldr	r2, [pc, #76]	; (8005fe8 <TIM_OC1_SetConfig+0xc8>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d111      	bne.n	8005fc2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	695b      	ldr	r3, [r3, #20]
 8005fb2:	693a      	ldr	r2, [r7, #16]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	699b      	ldr	r3, [r3, #24]
 8005fbc:	693a      	ldr	r2, [r7, #16]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	693a      	ldr	r2, [r7, #16]
 8005fc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	685a      	ldr	r2, [r3, #4]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	697a      	ldr	r2, [r7, #20]
 8005fda:	621a      	str	r2, [r3, #32]
}
 8005fdc:	bf00      	nop
 8005fde:	371c      	adds	r7, #28
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bc80      	pop	{r7}
 8005fe4:	4770      	bx	lr
 8005fe6:	bf00      	nop
 8005fe8:	40012c00 	.word	0x40012c00

08005fec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b087      	sub	sp, #28
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a1b      	ldr	r3, [r3, #32]
 8005ffa:	f023 0210 	bic.w	r2, r3, #16
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a1b      	ldr	r3, [r3, #32]
 8006006:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	699b      	ldr	r3, [r3, #24]
 8006012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800601a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006022:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	021b      	lsls	r3, r3, #8
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	4313      	orrs	r3, r2
 800602e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	f023 0320 	bic.w	r3, r3, #32
 8006036:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	011b      	lsls	r3, r3, #4
 800603e:	697a      	ldr	r2, [r7, #20]
 8006040:	4313      	orrs	r3, r2
 8006042:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4a1d      	ldr	r2, [pc, #116]	; (80060bc <TIM_OC2_SetConfig+0xd0>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d10d      	bne.n	8006068 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006052:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	011b      	lsls	r3, r3, #4
 800605a:	697a      	ldr	r2, [r7, #20]
 800605c:	4313      	orrs	r3, r2
 800605e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006066:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	4a14      	ldr	r2, [pc, #80]	; (80060bc <TIM_OC2_SetConfig+0xd0>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d113      	bne.n	8006098 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006076:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800607e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	695b      	ldr	r3, [r3, #20]
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	693a      	ldr	r2, [r7, #16]
 8006088:	4313      	orrs	r3, r2
 800608a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	699b      	ldr	r3, [r3, #24]
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	693a      	ldr	r2, [r7, #16]
 8006094:	4313      	orrs	r3, r2
 8006096:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	693a      	ldr	r2, [r7, #16]
 800609c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	68fa      	ldr	r2, [r7, #12]
 80060a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	685a      	ldr	r2, [r3, #4]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	697a      	ldr	r2, [r7, #20]
 80060b0:	621a      	str	r2, [r3, #32]
}
 80060b2:	bf00      	nop
 80060b4:	371c      	adds	r7, #28
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bc80      	pop	{r7}
 80060ba:	4770      	bx	lr
 80060bc:	40012c00 	.word	0x40012c00

080060c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b087      	sub	sp, #28
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a1b      	ldr	r3, [r3, #32]
 80060ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a1b      	ldr	r3, [r3, #32]
 80060da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	69db      	ldr	r3, [r3, #28]
 80060e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f023 0303 	bic.w	r3, r3, #3
 80060f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	4313      	orrs	r3, r2
 8006100:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006108:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	021b      	lsls	r3, r3, #8
 8006110:	697a      	ldr	r2, [r7, #20]
 8006112:	4313      	orrs	r3, r2
 8006114:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a1d      	ldr	r2, [pc, #116]	; (8006190 <TIM_OC3_SetConfig+0xd0>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d10d      	bne.n	800613a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006124:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	021b      	lsls	r3, r3, #8
 800612c:	697a      	ldr	r2, [r7, #20]
 800612e:	4313      	orrs	r3, r2
 8006130:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006138:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a14      	ldr	r2, [pc, #80]	; (8006190 <TIM_OC3_SetConfig+0xd0>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d113      	bne.n	800616a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006148:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006150:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	695b      	ldr	r3, [r3, #20]
 8006156:	011b      	lsls	r3, r3, #4
 8006158:	693a      	ldr	r2, [r7, #16]
 800615a:	4313      	orrs	r3, r2
 800615c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	699b      	ldr	r3, [r3, #24]
 8006162:	011b      	lsls	r3, r3, #4
 8006164:	693a      	ldr	r2, [r7, #16]
 8006166:	4313      	orrs	r3, r2
 8006168:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	693a      	ldr	r2, [r7, #16]
 800616e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	68fa      	ldr	r2, [r7, #12]
 8006174:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	685a      	ldr	r2, [r3, #4]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	697a      	ldr	r2, [r7, #20]
 8006182:	621a      	str	r2, [r3, #32]
}
 8006184:	bf00      	nop
 8006186:	371c      	adds	r7, #28
 8006188:	46bd      	mov	sp, r7
 800618a:	bc80      	pop	{r7}
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	40012c00 	.word	0x40012c00

08006194 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006194:	b480      	push	{r7}
 8006196:	b087      	sub	sp, #28
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a1b      	ldr	r3, [r3, #32]
 80061a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a1b      	ldr	r3, [r3, #32]
 80061ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	69db      	ldr	r3, [r3, #28]
 80061ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	021b      	lsls	r3, r3, #8
 80061d2:	68fa      	ldr	r2, [r7, #12]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	031b      	lsls	r3, r3, #12
 80061e6:	693a      	ldr	r2, [r7, #16]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	4a0f      	ldr	r2, [pc, #60]	; (800622c <TIM_OC4_SetConfig+0x98>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d109      	bne.n	8006208 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	695b      	ldr	r3, [r3, #20]
 8006200:	019b      	lsls	r3, r3, #6
 8006202:	697a      	ldr	r2, [r7, #20]
 8006204:	4313      	orrs	r3, r2
 8006206:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	697a      	ldr	r2, [r7, #20]
 800620c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	68fa      	ldr	r2, [r7, #12]
 8006212:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	685a      	ldr	r2, [r3, #4]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	693a      	ldr	r2, [r7, #16]
 8006220:	621a      	str	r2, [r3, #32]
}
 8006222:	bf00      	nop
 8006224:	371c      	adds	r7, #28
 8006226:	46bd      	mov	sp, r7
 8006228:	bc80      	pop	{r7}
 800622a:	4770      	bx	lr
 800622c:	40012c00 	.word	0x40012c00

08006230 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006230:	b480      	push	{r7}
 8006232:	b087      	sub	sp, #28
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	607a      	str	r2, [r7, #4]
 800623c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	6a1b      	ldr	r3, [r3, #32]
 8006242:	f023 0201 	bic.w	r2, r3, #1
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	699b      	ldr	r3, [r3, #24]
 800624e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6a1b      	ldr	r3, [r3, #32]
 8006254:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	4a1f      	ldr	r2, [pc, #124]	; (80062d8 <TIM_TI1_SetConfig+0xa8>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d00b      	beq.n	8006276 <TIM_TI1_SetConfig+0x46>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006264:	d007      	beq.n	8006276 <TIM_TI1_SetConfig+0x46>
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	4a1c      	ldr	r2, [pc, #112]	; (80062dc <TIM_TI1_SetConfig+0xac>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d003      	beq.n	8006276 <TIM_TI1_SetConfig+0x46>
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	4a1b      	ldr	r2, [pc, #108]	; (80062e0 <TIM_TI1_SetConfig+0xb0>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d101      	bne.n	800627a <TIM_TI1_SetConfig+0x4a>
 8006276:	2301      	movs	r3, #1
 8006278:	e000      	b.n	800627c <TIM_TI1_SetConfig+0x4c>
 800627a:	2300      	movs	r3, #0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d008      	beq.n	8006292 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	f023 0303 	bic.w	r3, r3, #3
 8006286:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006288:	697a      	ldr	r2, [r7, #20]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4313      	orrs	r3, r2
 800628e:	617b      	str	r3, [r7, #20]
 8006290:	e003      	b.n	800629a <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	f043 0301 	orr.w	r3, r3, #1
 8006298:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	011b      	lsls	r3, r3, #4
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	697a      	ldr	r2, [r7, #20]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	f023 030a 	bic.w	r3, r3, #10
 80062b4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	f003 030a 	and.w	r3, r3, #10
 80062bc:	693a      	ldr	r2, [r7, #16]
 80062be:	4313      	orrs	r3, r2
 80062c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	697a      	ldr	r2, [r7, #20]
 80062c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	693a      	ldr	r2, [r7, #16]
 80062cc:	621a      	str	r2, [r3, #32]
}
 80062ce:	bf00      	nop
 80062d0:	371c      	adds	r7, #28
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bc80      	pop	{r7}
 80062d6:	4770      	bx	lr
 80062d8:	40012c00 	.word	0x40012c00
 80062dc:	40000400 	.word	0x40000400
 80062e0:	40000800 	.word	0x40000800

080062e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b087      	sub	sp, #28
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	60b9      	str	r1, [r7, #8]
 80062ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6a1b      	ldr	r3, [r3, #32]
 80062f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6a1b      	ldr	r3, [r3, #32]
 80062fa:	f023 0201 	bic.w	r2, r3, #1
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	699b      	ldr	r3, [r3, #24]
 8006306:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800630e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	011b      	lsls	r3, r3, #4
 8006314:	693a      	ldr	r2, [r7, #16]
 8006316:	4313      	orrs	r3, r2
 8006318:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	f023 030a 	bic.w	r3, r3, #10
 8006320:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006322:	697a      	ldr	r2, [r7, #20]
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	4313      	orrs	r3, r2
 8006328:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	693a      	ldr	r2, [r7, #16]
 800632e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	697a      	ldr	r2, [r7, #20]
 8006334:	621a      	str	r2, [r3, #32]
}
 8006336:	bf00      	nop
 8006338:	371c      	adds	r7, #28
 800633a:	46bd      	mov	sp, r7
 800633c:	bc80      	pop	{r7}
 800633e:	4770      	bx	lr

08006340 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006340:	b480      	push	{r7}
 8006342:	b087      	sub	sp, #28
 8006344:	af00      	add	r7, sp, #0
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	607a      	str	r2, [r7, #4]
 800634c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6a1b      	ldr	r3, [r3, #32]
 8006352:	f023 0210 	bic.w	r2, r3, #16
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	699b      	ldr	r3, [r3, #24]
 800635e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	6a1b      	ldr	r3, [r3, #32]
 8006364:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800636c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	021b      	lsls	r3, r3, #8
 8006372:	697a      	ldr	r2, [r7, #20]
 8006374:	4313      	orrs	r3, r2
 8006376:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800637e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	031b      	lsls	r3, r3, #12
 8006384:	b29b      	uxth	r3, r3
 8006386:	697a      	ldr	r2, [r7, #20]
 8006388:	4313      	orrs	r3, r2
 800638a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006392:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	011b      	lsls	r3, r3, #4
 8006398:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800639c:	693a      	ldr	r2, [r7, #16]
 800639e:	4313      	orrs	r3, r2
 80063a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	697a      	ldr	r2, [r7, #20]
 80063a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	693a      	ldr	r2, [r7, #16]
 80063ac:	621a      	str	r2, [r3, #32]
}
 80063ae:	bf00      	nop
 80063b0:	371c      	adds	r7, #28
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bc80      	pop	{r7}
 80063b6:	4770      	bx	lr

080063b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b087      	sub	sp, #28
 80063bc:	af00      	add	r7, sp, #0
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6a1b      	ldr	r3, [r3, #32]
 80063c8:	f023 0210 	bic.w	r2, r3, #16
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	699b      	ldr	r3, [r3, #24]
 80063d4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6a1b      	ldr	r3, [r3, #32]
 80063da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063e2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	031b      	lsls	r3, r3, #12
 80063e8:	697a      	ldr	r2, [r7, #20]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80063f4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	011b      	lsls	r3, r3, #4
 80063fa:	693a      	ldr	r2, [r7, #16]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	697a      	ldr	r2, [r7, #20]
 8006404:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	693a      	ldr	r2, [r7, #16]
 800640a:	621a      	str	r2, [r3, #32]
}
 800640c:	bf00      	nop
 800640e:	371c      	adds	r7, #28
 8006410:	46bd      	mov	sp, r7
 8006412:	bc80      	pop	{r7}
 8006414:	4770      	bx	lr

08006416 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006416:	b480      	push	{r7}
 8006418:	b087      	sub	sp, #28
 800641a:	af00      	add	r7, sp, #0
 800641c:	60f8      	str	r0, [r7, #12]
 800641e:	60b9      	str	r1, [r7, #8]
 8006420:	607a      	str	r2, [r7, #4]
 8006422:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6a1b      	ldr	r3, [r3, #32]
 8006428:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	69db      	ldr	r3, [r3, #28]
 8006434:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6a1b      	ldr	r3, [r3, #32]
 800643a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	f023 0303 	bic.w	r3, r3, #3
 8006442:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006444:	697a      	ldr	r2, [r7, #20]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4313      	orrs	r3, r2
 800644a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006452:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	011b      	lsls	r3, r3, #4
 8006458:	b2db      	uxtb	r3, r3
 800645a:	697a      	ldr	r2, [r7, #20]
 800645c:	4313      	orrs	r3, r2
 800645e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006466:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	021b      	lsls	r3, r3, #8
 800646c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006470:	693a      	ldr	r2, [r7, #16]
 8006472:	4313      	orrs	r3, r2
 8006474:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	697a      	ldr	r2, [r7, #20]
 800647a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	693a      	ldr	r2, [r7, #16]
 8006480:	621a      	str	r2, [r3, #32]
}
 8006482:	bf00      	nop
 8006484:	371c      	adds	r7, #28
 8006486:	46bd      	mov	sp, r7
 8006488:	bc80      	pop	{r7}
 800648a:	4770      	bx	lr

0800648c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800648c:	b480      	push	{r7}
 800648e:	b087      	sub	sp, #28
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	607a      	str	r2, [r7, #4]
 8006498:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6a1b      	ldr	r3, [r3, #32]
 800649e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	69db      	ldr	r3, [r3, #28]
 80064aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6a1b      	ldr	r3, [r3, #32]
 80064b0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064b8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	021b      	lsls	r3, r3, #8
 80064be:	697a      	ldr	r2, [r7, #20]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064ca:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	031b      	lsls	r3, r3, #12
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	697a      	ldr	r2, [r7, #20]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80064de:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	031b      	lsls	r3, r3, #12
 80064e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064e8:	693a      	ldr	r2, [r7, #16]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	697a      	ldr	r2, [r7, #20]
 80064f2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	693a      	ldr	r2, [r7, #16]
 80064f8:	621a      	str	r2, [r3, #32]
}
 80064fa:	bf00      	nop
 80064fc:	371c      	adds	r7, #28
 80064fe:	46bd      	mov	sp, r7
 8006500:	bc80      	pop	{r7}
 8006502:	4770      	bx	lr

08006504 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006504:	b480      	push	{r7}
 8006506:	b085      	sub	sp, #20
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800651a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800651c:	683a      	ldr	r2, [r7, #0]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	4313      	orrs	r3, r2
 8006522:	f043 0307 	orr.w	r3, r3, #7
 8006526:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	609a      	str	r2, [r3, #8]
}
 800652e:	bf00      	nop
 8006530:	3714      	adds	r7, #20
 8006532:	46bd      	mov	sp, r7
 8006534:	bc80      	pop	{r7}
 8006536:	4770      	bx	lr

08006538 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006538:	b480      	push	{r7}
 800653a:	b087      	sub	sp, #28
 800653c:	af00      	add	r7, sp, #0
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	607a      	str	r2, [r7, #4]
 8006544:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006552:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	021a      	lsls	r2, r3, #8
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	431a      	orrs	r2, r3
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	4313      	orrs	r3, r2
 8006560:	697a      	ldr	r2, [r7, #20]
 8006562:	4313      	orrs	r3, r2
 8006564:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	697a      	ldr	r2, [r7, #20]
 800656a:	609a      	str	r2, [r3, #8]
}
 800656c:	bf00      	nop
 800656e:	371c      	adds	r7, #28
 8006570:	46bd      	mov	sp, r7
 8006572:	bc80      	pop	{r7}
 8006574:	4770      	bx	lr

08006576 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006576:	b480      	push	{r7}
 8006578:	b087      	sub	sp, #28
 800657a:	af00      	add	r7, sp, #0
 800657c:	60f8      	str	r0, [r7, #12]
 800657e:	60b9      	str	r1, [r7, #8]
 8006580:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	f003 031f 	and.w	r3, r3, #31
 8006588:	2201      	movs	r2, #1
 800658a:	fa02 f303 	lsl.w	r3, r2, r3
 800658e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6a1a      	ldr	r2, [r3, #32]
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	43db      	mvns	r3, r3
 8006598:	401a      	ands	r2, r3
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	6a1a      	ldr	r2, [r3, #32]
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	f003 031f 	and.w	r3, r3, #31
 80065a8:	6879      	ldr	r1, [r7, #4]
 80065aa:	fa01 f303 	lsl.w	r3, r1, r3
 80065ae:	431a      	orrs	r2, r3
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	621a      	str	r2, [r3, #32]
}
 80065b4:	bf00      	nop
 80065b6:	371c      	adds	r7, #28
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bc80      	pop	{r7}
 80065bc:	4770      	bx	lr
	...

080065c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b085      	sub	sp, #20
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d101      	bne.n	80065d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80065d4:	2302      	movs	r3, #2
 80065d6:	e046      	b.n	8006666 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2201      	movs	r2, #1
 80065dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2202      	movs	r2, #2
 80065e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68fa      	ldr	r2, [r7, #12]
 8006606:	4313      	orrs	r3, r2
 8006608:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a16      	ldr	r2, [pc, #88]	; (8006670 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d00e      	beq.n	800663a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006624:	d009      	beq.n	800663a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a12      	ldr	r2, [pc, #72]	; (8006674 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d004      	beq.n	800663a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a10      	ldr	r2, [pc, #64]	; (8006678 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d10c      	bne.n	8006654 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006640:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	68ba      	ldr	r2, [r7, #8]
 8006648:	4313      	orrs	r3, r2
 800664a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	68ba      	ldr	r2, [r7, #8]
 8006652:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2201      	movs	r2, #1
 8006658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	3714      	adds	r7, #20
 800666a:	46bd      	mov	sp, r7
 800666c:	bc80      	pop	{r7}
 800666e:	4770      	bx	lr
 8006670:	40012c00 	.word	0x40012c00
 8006674:	40000400 	.word	0x40000400
 8006678:	40000800 	.word	0x40000800

0800667c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800667c:	b480      	push	{r7}
 800667e:	b085      	sub	sp, #20
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006686:	2300      	movs	r3, #0
 8006688:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006690:	2b01      	cmp	r3, #1
 8006692:	d101      	bne.n	8006698 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006694:	2302      	movs	r3, #2
 8006696:	e03d      	b.n	8006714 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	695b      	ldr	r3, [r3, #20]
 80066f0:	4313      	orrs	r3, r2
 80066f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	69db      	ldr	r3, [r3, #28]
 80066fe:	4313      	orrs	r3, r2
 8006700:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	68fa      	ldr	r2, [r7, #12]
 8006708:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006712:	2300      	movs	r3, #0
}
 8006714:	4618      	mov	r0, r3
 8006716:	3714      	adds	r7, #20
 8006718:	46bd      	mov	sp, r7
 800671a:	bc80      	pop	{r7}
 800671c:	4770      	bx	lr

0800671e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800671e:	b480      	push	{r7}
 8006720:	b083      	sub	sp, #12
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006726:	bf00      	nop
 8006728:	370c      	adds	r7, #12
 800672a:	46bd      	mov	sp, r7
 800672c:	bc80      	pop	{r7}
 800672e:	4770      	bx	lr

08006730 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006730:	b480      	push	{r7}
 8006732:	b083      	sub	sp, #12
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006738:	bf00      	nop
 800673a:	370c      	adds	r7, #12
 800673c:	46bd      	mov	sp, r7
 800673e:	bc80      	pop	{r7}
 8006740:	4770      	bx	lr

08006742 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006742:	b580      	push	{r7, lr}
 8006744:	b082      	sub	sp, #8
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d101      	bne.n	8006754 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006750:	2301      	movs	r3, #1
 8006752:	e03f      	b.n	80067d4 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800675a:	b2db      	uxtb	r3, r3
 800675c:	2b00      	cmp	r3, #0
 800675e:	d106      	bne.n	800676e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f7fc fc4f 	bl	800300c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2224      	movs	r2, #36	; 0x24
 8006772:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	68da      	ldr	r2, [r3, #12]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006784:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 f904 	bl	8006994 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	691a      	ldr	r2, [r3, #16]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800679a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	695a      	ldr	r2, [r3, #20]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80067aa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68da      	ldr	r2, [r3, #12]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067ba:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2220      	movs	r2, #32
 80067c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2220      	movs	r2, #32
 80067ce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80067d2:	2300      	movs	r3, #0
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3708      	adds	r7, #8
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b08a      	sub	sp, #40	; 0x28
 80067e0:	af02      	add	r7, sp, #8
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	603b      	str	r3, [r7, #0]
 80067e8:	4613      	mov	r3, r2
 80067ea:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80067ec:	2300      	movs	r3, #0
 80067ee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	2b20      	cmp	r3, #32
 80067fa:	d17c      	bne.n	80068f6 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d002      	beq.n	8006808 <HAL_UART_Transmit+0x2c>
 8006802:	88fb      	ldrh	r3, [r7, #6]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d101      	bne.n	800680c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	e075      	b.n	80068f8 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006812:	2b01      	cmp	r3, #1
 8006814:	d101      	bne.n	800681a <HAL_UART_Transmit+0x3e>
 8006816:	2302      	movs	r3, #2
 8006818:	e06e      	b.n	80068f8 <HAL_UART_Transmit+0x11c>
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2201      	movs	r2, #1
 800681e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2200      	movs	r2, #0
 8006826:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2221      	movs	r2, #33	; 0x21
 800682c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006830:	f7fc fd4e 	bl	80032d0 <HAL_GetTick>
 8006834:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	88fa      	ldrh	r2, [r7, #6]
 800683a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	88fa      	ldrh	r2, [r7, #6]
 8006840:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800684a:	d108      	bne.n	800685e <HAL_UART_Transmit+0x82>
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	691b      	ldr	r3, [r3, #16]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d104      	bne.n	800685e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006854:	2300      	movs	r3, #0
 8006856:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	61bb      	str	r3, [r7, #24]
 800685c:	e003      	b.n	8006866 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006862:	2300      	movs	r3, #0
 8006864:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2200      	movs	r2, #0
 800686a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800686e:	e02a      	b.n	80068c6 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	9300      	str	r3, [sp, #0]
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	2200      	movs	r2, #0
 8006878:	2180      	movs	r1, #128	; 0x80
 800687a:	68f8      	ldr	r0, [r7, #12]
 800687c:	f000 f840 	bl	8006900 <UART_WaitOnFlagUntilTimeout>
 8006880:	4603      	mov	r3, r0
 8006882:	2b00      	cmp	r3, #0
 8006884:	d001      	beq.n	800688a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006886:	2303      	movs	r3, #3
 8006888:	e036      	b.n	80068f8 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d10b      	bne.n	80068a8 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	881b      	ldrh	r3, [r3, #0]
 8006894:	461a      	mov	r2, r3
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800689e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80068a0:	69bb      	ldr	r3, [r7, #24]
 80068a2:	3302      	adds	r3, #2
 80068a4:	61bb      	str	r3, [r7, #24]
 80068a6:	e007      	b.n	80068b8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80068a8:	69fb      	ldr	r3, [r7, #28]
 80068aa:	781a      	ldrb	r2, [r3, #0]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80068b2:	69fb      	ldr	r3, [r7, #28]
 80068b4:	3301      	adds	r3, #1
 80068b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80068bc:	b29b      	uxth	r3, r3
 80068be:	3b01      	subs	r3, #1
 80068c0:	b29a      	uxth	r2, r3
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d1cf      	bne.n	8006870 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	9300      	str	r3, [sp, #0]
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	2200      	movs	r2, #0
 80068d8:	2140      	movs	r1, #64	; 0x40
 80068da:	68f8      	ldr	r0, [r7, #12]
 80068dc:	f000 f810 	bl	8006900 <UART_WaitOnFlagUntilTimeout>
 80068e0:	4603      	mov	r3, r0
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d001      	beq.n	80068ea <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80068e6:	2303      	movs	r3, #3
 80068e8:	e006      	b.n	80068f8 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2220      	movs	r2, #32
 80068ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80068f2:	2300      	movs	r3, #0
 80068f4:	e000      	b.n	80068f8 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80068f6:	2302      	movs	r3, #2
  }
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3720      	adds	r7, #32
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}

08006900 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b084      	sub	sp, #16
 8006904:	af00      	add	r7, sp, #0
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	603b      	str	r3, [r7, #0]
 800690c:	4613      	mov	r3, r2
 800690e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006910:	e02c      	b.n	800696c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006912:	69bb      	ldr	r3, [r7, #24]
 8006914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006918:	d028      	beq.n	800696c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800691a:	69bb      	ldr	r3, [r7, #24]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d007      	beq.n	8006930 <UART_WaitOnFlagUntilTimeout+0x30>
 8006920:	f7fc fcd6 	bl	80032d0 <HAL_GetTick>
 8006924:	4602      	mov	r2, r0
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	1ad3      	subs	r3, r2, r3
 800692a:	69ba      	ldr	r2, [r7, #24]
 800692c:	429a      	cmp	r2, r3
 800692e:	d21d      	bcs.n	800696c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	68da      	ldr	r2, [r3, #12]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800693e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	695a      	ldr	r2, [r3, #20]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f022 0201 	bic.w	r2, r2, #1
 800694e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2220      	movs	r2, #32
 8006954:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2220      	movs	r2, #32
 800695c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2200      	movs	r2, #0
 8006964:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006968:	2303      	movs	r3, #3
 800696a:	e00f      	b.n	800698c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	4013      	ands	r3, r2
 8006976:	68ba      	ldr	r2, [r7, #8]
 8006978:	429a      	cmp	r2, r3
 800697a:	bf0c      	ite	eq
 800697c:	2301      	moveq	r3, #1
 800697e:	2300      	movne	r3, #0
 8006980:	b2db      	uxtb	r3, r3
 8006982:	461a      	mov	r2, r3
 8006984:	79fb      	ldrb	r3, [r7, #7]
 8006986:	429a      	cmp	r2, r3
 8006988:	d0c3      	beq.n	8006912 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800698a:	2300      	movs	r3, #0
}
 800698c:	4618      	mov	r0, r3
 800698e:	3710      	adds	r7, #16
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	68da      	ldr	r2, [r3, #12]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	430a      	orrs	r2, r1
 80069b0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	689a      	ldr	r2, [r3, #8]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	431a      	orrs	r2, r3
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	695b      	ldr	r3, [r3, #20]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	68db      	ldr	r3, [r3, #12]
 80069ca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80069ce:	f023 030c 	bic.w	r3, r3, #12
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	6812      	ldr	r2, [r2, #0]
 80069d6:	68b9      	ldr	r1, [r7, #8]
 80069d8:	430b      	orrs	r3, r1
 80069da:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	695b      	ldr	r3, [r3, #20]
 80069e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	699a      	ldr	r2, [r3, #24]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	430a      	orrs	r2, r1
 80069f0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a2c      	ldr	r2, [pc, #176]	; (8006aa8 <UART_SetConfig+0x114>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d103      	bne.n	8006a04 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80069fc:	f7fe fb42 	bl	8005084 <HAL_RCC_GetPCLK2Freq>
 8006a00:	60f8      	str	r0, [r7, #12]
 8006a02:	e002      	b.n	8006a0a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006a04:	f7fe fb2a 	bl	800505c <HAL_RCC_GetPCLK1Freq>
 8006a08:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a0a:	68fa      	ldr	r2, [r7, #12]
 8006a0c:	4613      	mov	r3, r2
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	4413      	add	r3, r2
 8006a12:	009a      	lsls	r2, r3, #2
 8006a14:	441a      	add	r2, r3
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a20:	4a22      	ldr	r2, [pc, #136]	; (8006aac <UART_SetConfig+0x118>)
 8006a22:	fba2 2303 	umull	r2, r3, r2, r3
 8006a26:	095b      	lsrs	r3, r3, #5
 8006a28:	0119      	lsls	r1, r3, #4
 8006a2a:	68fa      	ldr	r2, [r7, #12]
 8006a2c:	4613      	mov	r3, r2
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	4413      	add	r3, r2
 8006a32:	009a      	lsls	r2, r3, #2
 8006a34:	441a      	add	r2, r3
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a40:	4b1a      	ldr	r3, [pc, #104]	; (8006aac <UART_SetConfig+0x118>)
 8006a42:	fba3 0302 	umull	r0, r3, r3, r2
 8006a46:	095b      	lsrs	r3, r3, #5
 8006a48:	2064      	movs	r0, #100	; 0x64
 8006a4a:	fb00 f303 	mul.w	r3, r0, r3
 8006a4e:	1ad3      	subs	r3, r2, r3
 8006a50:	011b      	lsls	r3, r3, #4
 8006a52:	3332      	adds	r3, #50	; 0x32
 8006a54:	4a15      	ldr	r2, [pc, #84]	; (8006aac <UART_SetConfig+0x118>)
 8006a56:	fba2 2303 	umull	r2, r3, r2, r3
 8006a5a:	095b      	lsrs	r3, r3, #5
 8006a5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a60:	4419      	add	r1, r3
 8006a62:	68fa      	ldr	r2, [r7, #12]
 8006a64:	4613      	mov	r3, r2
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	4413      	add	r3, r2
 8006a6a:	009a      	lsls	r2, r3, #2
 8006a6c:	441a      	add	r2, r3
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a78:	4b0c      	ldr	r3, [pc, #48]	; (8006aac <UART_SetConfig+0x118>)
 8006a7a:	fba3 0302 	umull	r0, r3, r3, r2
 8006a7e:	095b      	lsrs	r3, r3, #5
 8006a80:	2064      	movs	r0, #100	; 0x64
 8006a82:	fb00 f303 	mul.w	r3, r0, r3
 8006a86:	1ad3      	subs	r3, r2, r3
 8006a88:	011b      	lsls	r3, r3, #4
 8006a8a:	3332      	adds	r3, #50	; 0x32
 8006a8c:	4a07      	ldr	r2, [pc, #28]	; (8006aac <UART_SetConfig+0x118>)
 8006a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a92:	095b      	lsrs	r3, r3, #5
 8006a94:	f003 020f 	and.w	r2, r3, #15
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	440a      	add	r2, r1
 8006a9e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006aa0:	bf00      	nop
 8006aa2:	3710      	adds	r7, #16
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	40013800 	.word	0x40013800
 8006aac:	51eb851f 	.word	0x51eb851f

08006ab0 <_ZN10ControllerC1Ev>:
    float angles[3];
    float rates[3];
    float bias[3];
};

Controller::Controller() {}
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	4a5d      	ldr	r2, [pc, #372]	; (8006c30 <_ZN10ControllerC1Ev+0x180>)
 8006abc:	651a      	str	r2, [r3, #80]	; 0x50
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4a5c      	ldr	r2, [pc, #368]	; (8006c34 <_ZN10ControllerC1Ev+0x184>)
 8006ac2:	655a      	str	r2, [r3, #84]	; 0x54
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	22c8      	movs	r2, #200	; 0xc8
 8006ac8:	659a      	str	r2, [r3, #88]	; 0x58
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f7fa f8e6 	bl	8000ca0 <__aeabi_i2f>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	4619      	mov	r1, r3
 8006ad8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006adc:	f7fa f9e8 	bl	8000eb0 <__aeabi_fdiv>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	65da      	str	r2, [r3, #92]	; 0x5c
 8006ae8:	6879      	ldr	r1, [r7, #4]
 8006aea:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8006aee:	4b52      	ldr	r3, [pc, #328]	; (8006c38 <_ZN10ControllerC1Ev+0x188>)
 8006af0:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006af8:	4618      	mov	r0, r3
 8006afa:	f7fa f8d1 	bl	8000ca0 <__aeabi_i2f>
 8006afe:	4603      	mov	r3, r0
 8006b00:	4618      	mov	r0, r3
 8006b02:	f7f9 fc89 	bl	8000418 <__aeabi_f2d>
 8006b06:	4602      	mov	r2, r0
 8006b08:	460b      	mov	r3, r1
 8006b0a:	a141      	add	r1, pc, #260	; (adr r1, 8006c10 <_ZN10ControllerC1Ev+0x160>)
 8006b0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b10:	f7f9 fe04 	bl	800071c <__aeabi_ddiv>
 8006b14:	4602      	mov	r2, r0
 8006b16:	460b      	mov	r3, r1
 8006b18:	6879      	ldr	r1, [r7, #4]
 8006b1a:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b22:	4618      	mov	r0, r3
 8006b24:	f7fa f8bc 	bl	8000ca0 <__aeabi_i2f>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f7f9 fc74 	bl	8000418 <__aeabi_f2d>
 8006b30:	a339      	add	r3, pc, #228	; (adr r3, 8006c18 <_ZN10ControllerC1Ev+0x168>)
 8006b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b36:	f7f9 fcc7 	bl	80004c8 <__aeabi_dmul>
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	6879      	ldr	r1, [r7, #4]
 8006b40:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
 8006b44:	6879      	ldr	r1, [r7, #4]
 8006b46:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8006b4a:	4b3b      	ldr	r3, [pc, #236]	; (8006c38 <_ZN10ControllerC1Ev+0x188>)
 8006b4c:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b54:	4618      	mov	r0, r3
 8006b56:	f7fa f8a3 	bl	8000ca0 <__aeabi_i2f>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f7f9 fc5b 	bl	8000418 <__aeabi_f2d>
 8006b62:	4602      	mov	r2, r0
 8006b64:	460b      	mov	r3, r1
 8006b66:	a12a      	add	r1, pc, #168	; (adr r1, 8006c10 <_ZN10ControllerC1Ev+0x160>)
 8006b68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b6c:	f7f9 fdd6 	bl	800071c <__aeabi_ddiv>
 8006b70:	4602      	mov	r2, r0
 8006b72:	460b      	mov	r3, r1
 8006b74:	6879      	ldr	r1, [r7, #4]
 8006b76:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f7fa f88e 	bl	8000ca0 <__aeabi_i2f>
 8006b84:	4603      	mov	r3, r0
 8006b86:	4618      	mov	r0, r3
 8006b88:	f7f9 fc46 	bl	8000418 <__aeabi_f2d>
 8006b8c:	a324      	add	r3, pc, #144	; (adr r3, 8006c20 <_ZN10ControllerC1Ev+0x170>)
 8006b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b92:	f7f9 fc99 	bl	80004c8 <__aeabi_dmul>
 8006b96:	4602      	mov	r2, r0
 8006b98:	460b      	mov	r3, r1
 8006b9a:	6879      	ldr	r1, [r7, #4]
 8006b9c:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
 8006ba0:	6879      	ldr	r1, [r7, #4]
 8006ba2:	f04f 0200 	mov.w	r2, #0
 8006ba6:	4b25      	ldr	r3, [pc, #148]	; (8006c3c <_ZN10ControllerC1Ev+0x18c>)
 8006ba8:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f7f9 fc1f 	bl	80003f4 <__aeabi_i2d>
 8006bb6:	a31c      	add	r3, pc, #112	; (adr r3, 8006c28 <_ZN10ControllerC1Ev+0x178>)
 8006bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bbc:	f7f9 fc84 	bl	80004c8 <__aeabi_dmul>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	460b      	mov	r3, r1
 8006bc4:	4610      	mov	r0, r2
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	f7f9 ff60 	bl	8000a8c <__aeabi_d2f>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	339c      	adds	r3, #156	; 0x9c
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f001 fca3 	bl	8008524 <_ZN3PIDC1Ev>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	33dc      	adds	r3, #220	; 0xdc
 8006be2:	4618      	mov	r0, r3
 8006be4:	f001 fc9e 	bl	8008524 <_ZN3PIDC1Ev>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f001 fc98 	bl	8008524 <_ZN3PIDC1Ev>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f7fa fad7 	bl	80011ae <_ZNSt6vectorIiSaIiEEC1Ev>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	4618      	mov	r0, r3
 8006c04:	3708      	adds	r7, #8
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop
 8006c0c:	f3af 8000 	nop.w
 8006c10:	9999999a 	.word	0x9999999a
 8006c14:	3fc99999 	.word	0x3fc99999
 8006c18:	eb851eb8 	.word	0xeb851eb8
 8006c1c:	3f9eb851 	.word	0x3f9eb851
 8006c20:	3126e979 	.word	0x3126e979
 8006c24:	3f7cac08 	.word	0x3f7cac08
 8006c28:	47ae147b 	.word	0x47ae147b
 8006c2c:	3f947ae1 	.word	0x3f947ae1
 8006c30:	44c1c000 	.word	0x44c1c000
 8006c34:	42654ca3 	.word	0x42654ca3
 8006c38:	3ff33333 	.word	0x3ff33333
 8006c3c:	40180000 	.word	0x40180000

08006c40 <_ZN10Controller3RunE5stateS0_i>:

std::vector<double> Controller::Run (struct state state, struct state state_des, int thr) {
 8006c40:	b082      	sub	sp, #8
 8006c42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c46:	b0ab      	sub	sp, #172	; 0xac
 8006c48:	af08      	add	r7, sp, #32
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8006c52:	e881 000c 	stmia.w	r1, {r2, r3}
        //printf("\ngyroX: %.2f",gyro[0]);
        //printf("\naccX: %.2f",acc[0]);
        
        roll  = state.angles[0];
 8006c56:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f7f9 fbdc 	bl	8000418 <__aeabi_f2d>
 8006c60:	4602      	mov	r2, r0
 8006c62:	460b      	mov	r3, r1
 8006c64:	68b9      	ldr	r1, [r7, #8]
 8006c66:	e9c1 2304 	strd	r2, r3, [r1, #16]
        pitch = state.angles[1];
 8006c6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f7f9 fbd2 	bl	8000418 <__aeabi_f2d>
 8006c74:	4602      	mov	r2, r0
 8006c76:	460b      	mov	r3, r1
 8006c78:	68b9      	ldr	r1, [r7, #8]
 8006c7a:	e9c1 2306 	strd	r2, r3, [r1, #24]
        yaw    = state.angles[2];
 8006c7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c82:	4618      	mov	r0, r3
 8006c84:	f7f9 fbc8 	bl	8000418 <__aeabi_f2d>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	460b      	mov	r3, r1
 8006c8c:	68b9      	ldr	r1, [r7, #8]
 8006c8e:	e9c1 2308 	strd	r2, r3, [r1, #32]
        //printf("\nroll: %.2f",roll);
        //printf("\npitch: %.2f",pitch);

        roll_rate  = state.rates[0];
 8006c92:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006c96:	4618      	mov	r0, r3
 8006c98:	f7f9 fbbe 	bl	8000418 <__aeabi_f2d>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	460b      	mov	r3, r1
 8006ca0:	68b9      	ldr	r1, [r7, #8]
 8006ca2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
        pitch_rate = state.rates[1];
 8006ca6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006caa:	4618      	mov	r0, r3
 8006cac:	f7f9 fbb4 	bl	8000418 <__aeabi_f2d>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	460b      	mov	r3, r1
 8006cb4:	68b9      	ldr	r1, [r7, #8]
 8006cb6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
        yaw_rate   = state.rates[2];
 8006cba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f7f9 fbaa 	bl	8000418 <__aeabi_f2d>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	460b      	mov	r3, r1
 8006cc8:	68b9      	ldr	r1, [r7, #8]
 8006cca:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

        roll_bias = state.bias[0];
 8006cce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	605a      	str	r2, [r3, #4]
        pitch_bias = state.bias[1];
 8006cd6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	601a      	str	r2, [r3, #0]
        yaw_bias = state.bias[2];
 8006cde:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	609a      	str	r2, [r3, #8]
        
        float roll_des     = state_des.angles[0];
 8006ce6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006cea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        float pitch_des 	 = state_des.angles[1];
 8006cee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006cf2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        float yaw_rate_des = state_des.rates[2];
 8006cf6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006cfa:	67fb      	str	r3, [r7, #124]	; 0x7c

    float roll_rate_des = pid_roll.P_Angle(roll_des,roll, Kp_angle);
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	f103 069c 	add.w	r6, r3, #156	; 0x9c
 8006d02:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8006d06:	f7f9 fb87 	bl	8000418 <__aeabi_f2d>
 8006d0a:	4680      	mov	r8, r0
 8006d0c:	4689      	mov	r9, r1
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f7f9 fb7c 	bl	8000418 <__aeabi_f2d>
 8006d20:	4602      	mov	r2, r0
 8006d22:	460b      	mov	r3, r1
 8006d24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006d28:	e9cd 4500 	strd	r4, r5, [sp]
 8006d2c:	4642      	mov	r2, r8
 8006d2e:	464b      	mov	r3, r9
 8006d30:	4630      	mov	r0, r6
 8006d32:	f001 fc1d 	bl	8008570 <_ZN3PID7P_AngleEddd>
 8006d36:	4602      	mov	r2, r0
 8006d38:	460b      	mov	r3, r1
 8006d3a:	4610      	mov	r0, r2
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	f7f9 fea5 	bl	8000a8c <__aeabi_d2f>
 8006d42:	4603      	mov	r3, r0
 8006d44:	67bb      	str	r3, [r7, #120]	; 0x78
    float pitch_rate_des = pid_pitch.P_Angle(pitch_des,pitch, Kp_angle);
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	f103 06dc 	add.w	r6, r3, #220	; 0xdc
 8006d4c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8006d50:	f7f9 fb62 	bl	8000418 <__aeabi_f2d>
 8006d54:	4680      	mov	r8, r0
 8006d56:	4689      	mov	r9, r1
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d64:	4618      	mov	r0, r3
 8006d66:	f7f9 fb57 	bl	8000418 <__aeabi_f2d>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	460b      	mov	r3, r1
 8006d6e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006d72:	e9cd 4500 	strd	r4, r5, [sp]
 8006d76:	4642      	mov	r2, r8
 8006d78:	464b      	mov	r3, r9
 8006d7a:	4630      	mov	r0, r6
 8006d7c:	f001 fbf8 	bl	8008570 <_ZN3PID7P_AngleEddd>
 8006d80:	4602      	mov	r2, r0
 8006d82:	460b      	mov	r3, r1
 8006d84:	4610      	mov	r0, r2
 8006d86:	4619      	mov	r1, r3
 8006d88:	f7f9 fe80 	bl	8000a8c <__aeabi_d2f>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	677b      	str	r3, [r7, #116]	; 0x74
/*
    //printf("\nroll_rate_des: %.2f",roll_rate_des);
    //printf("\npitch_rate_des: %.2f",pitch_rate_des);
    //printf("\nyaw_rate_des: %.2f",yaw_rate_des);
*/  //printf("\nroll_rate_des: %.2f",roll_rate_des);
    double pd_roll  = pid_roll.PD_Rate(roll_rate_des,roll_rate, Kp_roll, Ki_roll, Kd_roll);
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	339c      	adds	r3, #156	; 0x9c
 8006d94:	607b      	str	r3, [r7, #4]
 8006d96:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8006d98:	f7f9 fb3e 	bl	8000418 <__aeabi_f2d>
 8006d9c:	4682      	mov	sl, r0
 8006d9e:	468b      	mov	fp, r1
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8006da6:	68b9      	ldr	r1, [r7, #8]
 8006da8:	e9d1 011e 	ldrd	r0, r1, [r1, #120]	; 0x78
 8006dac:	68bc      	ldr	r4, [r7, #8]
 8006dae:	f104 0580 	add.w	r5, r4, #128	; 0x80
 8006db2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006db6:	68be      	ldr	r6, [r7, #8]
 8006db8:	e9d6 8922 	ldrd	r8, r9, [r6, #136]	; 0x88
 8006dbc:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8006dc0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8006dc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006dc8:	e9cd 2300 	strd	r2, r3, [sp]
 8006dcc:	4652      	mov	r2, sl
 8006dce:	465b      	mov	r3, fp
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f001 fbef 	bl	80085b4 <_ZN3PID7PD_RateEddddd>
 8006dd6:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
    //printf("\npitch_rate_des: %.2f",pitch_rate_des);
    double pd_pitch = pid_pitch.PD_Rate(pitch_rate_des,pitch_rate,Kp_pitch,Ki_pitch,Kd_pitch);
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	33dc      	adds	r3, #220	; 0xdc
 8006dde:	607b      	str	r3, [r7, #4]
 8006de0:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8006de2:	f7f9 fb19 	bl	8000418 <__aeabi_f2d>
 8006de6:	4682      	mov	sl, r0
 8006de8:	468b      	mov	fp, r1
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8006df0:	68b9      	ldr	r1, [r7, #8]
 8006df2:	e9d1 0118 	ldrd	r0, r1, [r1, #96]	; 0x60
 8006df6:	68bc      	ldr	r4, [r7, #8]
 8006df8:	f104 0568 	add.w	r5, r4, #104	; 0x68
 8006dfc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006e00:	68be      	ldr	r6, [r7, #8]
 8006e02:	e9d6 891c 	ldrd	r8, r9, [r6, #112]	; 0x70
 8006e06:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8006e0a:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8006e0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e12:	e9cd 2300 	strd	r2, r3, [sp]
 8006e16:	4652      	mov	r2, sl
 8006e18:	465b      	mov	r3, fp
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f001 fbca 	bl	80085b4 <_ZN3PID7PD_RateEddddd>
 8006e20:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
    double p_yaw    = pid_yaw.P_Rate_Yaw(yaw_rate_des,yaw_rate,Kp_yaw);
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	f503 768e 	add.w	r6, r3, #284	; 0x11c
 8006e2a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8006e2c:	f7f9 faf4 	bl	8000418 <__aeabi_f2d>
 8006e30:	4604      	mov	r4, r0
 8006e32:	460d      	mov	r5, r1
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8006e3a:	68b9      	ldr	r1, [r7, #8]
 8006e3c:	e9d1 0124 	ldrd	r0, r1, [r1, #144]	; 0x90
 8006e40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e44:	e9cd 2300 	strd	r2, r3, [sp]
 8006e48:	4622      	mov	r2, r4
 8006e4a:	462b      	mov	r3, r5
 8006e4c:	4630      	mov	r0, r6
 8006e4e:	f001 fc8f 	bl	8008770 <_ZN3PID10P_Rate_YawEddd>
 8006e52:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
    //printf("\npd_pitch: %.2f",pd_pitch);
    //printf("\np_yaw: %.2f",p_yaw);

    ////printf("\nst: %.3f",st);

    uint8_t pwm1 = thr + pd_pitch - pd_roll  + p_yaw;
 8006e56:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8006e5a:	f7f9 facb 	bl	80003f4 <__aeabi_i2d>
 8006e5e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8006e62:	f7f9 f97b 	bl	800015c <__adddf3>
 8006e66:	4602      	mov	r2, r0
 8006e68:	460b      	mov	r3, r1
 8006e6a:	4610      	mov	r0, r2
 8006e6c:	4619      	mov	r1, r3
 8006e6e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8006e72:	f7f9 f971 	bl	8000158 <__aeabi_dsub>
 8006e76:	4602      	mov	r2, r0
 8006e78:	460b      	mov	r3, r1
 8006e7a:	4610      	mov	r0, r2
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006e82:	f7f9 f96b 	bl	800015c <__adddf3>
 8006e86:	4602      	mov	r2, r0
 8006e88:	460b      	mov	r3, r1
 8006e8a:	4610      	mov	r0, r2
 8006e8c:	4619      	mov	r1, r3
 8006e8e:	f7f9 fddd 	bl	8000a4c <__aeabi_d2uiz>
 8006e92:	4603      	mov	r3, r0
 8006e94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    uint8_t pwm2 = thr - pd_pitch + pd_roll  + p_yaw;
 8006e98:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8006e9c:	f7f9 faaa 	bl	80003f4 <__aeabi_i2d>
 8006ea0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8006ea4:	f7f9 f958 	bl	8000158 <__aeabi_dsub>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	460b      	mov	r3, r1
 8006eac:	4610      	mov	r0, r2
 8006eae:	4619      	mov	r1, r3
 8006eb0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8006eb4:	f7f9 f952 	bl	800015c <__adddf3>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	460b      	mov	r3, r1
 8006ebc:	4610      	mov	r0, r2
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006ec4:	f7f9 f94a 	bl	800015c <__adddf3>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	460b      	mov	r3, r1
 8006ecc:	4610      	mov	r0, r2
 8006ece:	4619      	mov	r1, r3
 8006ed0:	f7f9 fdbc 	bl	8000a4c <__aeabi_d2uiz>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
    uint8_t pwm3 = thr + pd_pitch + pd_roll  - p_yaw;
 8006eda:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8006ede:	f7f9 fa89 	bl	80003f4 <__aeabi_i2d>
 8006ee2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8006ee6:	f7f9 f939 	bl	800015c <__adddf3>
 8006eea:	4602      	mov	r2, r0
 8006eec:	460b      	mov	r3, r1
 8006eee:	4610      	mov	r0, r2
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8006ef6:	f7f9 f931 	bl	800015c <__adddf3>
 8006efa:	4602      	mov	r2, r0
 8006efc:	460b      	mov	r3, r1
 8006efe:	4610      	mov	r0, r2
 8006f00:	4619      	mov	r1, r3
 8006f02:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006f06:	f7f9 f927 	bl	8000158 <__aeabi_dsub>
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	460b      	mov	r3, r1
 8006f0e:	4610      	mov	r0, r2
 8006f10:	4619      	mov	r1, r3
 8006f12:	f7f9 fd9b 	bl	8000a4c <__aeabi_d2uiz>
 8006f16:	4603      	mov	r3, r0
 8006f18:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
    uint8_t pwm4 = thr - pd_pitch - pd_roll  - p_yaw;
 8006f1c:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8006f20:	f7f9 fa68 	bl	80003f4 <__aeabi_i2d>
 8006f24:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8006f28:	f7f9 f916 	bl	8000158 <__aeabi_dsub>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	460b      	mov	r3, r1
 8006f30:	4610      	mov	r0, r2
 8006f32:	4619      	mov	r1, r3
 8006f34:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8006f38:	f7f9 f90e 	bl	8000158 <__aeabi_dsub>
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	460b      	mov	r3, r1
 8006f40:	4610      	mov	r0, r2
 8006f42:	4619      	mov	r1, r3
 8006f44:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006f48:	f7f9 f906 	bl	8000158 <__aeabi_dsub>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	460b      	mov	r3, r1
 8006f50:	4610      	mov	r0, r2
 8006f52:	4619      	mov	r1, r3
 8006f54:	f7f9 fd7a 	bl	8000a4c <__aeabi_d2uiz>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

    //Saturate pwm values
    pwm1 = (int)pid_roll.Sat(pwm1,PWM_UPPER,PWM_LOWER,thr);
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 8006f64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f7f9 fa33 	bl	80003d4 <__aeabi_ui2d>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	460b      	mov	r3, r1
 8006f72:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8006f76:	9102      	str	r1, [sp, #8]
 8006f78:	f240 414c 	movw	r1, #1100	; 0x44c
 8006f7c:	9101      	str	r1, [sp, #4]
 8006f7e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006f82:	9100      	str	r1, [sp, #0]
 8006f84:	4620      	mov	r0, r4
 8006f86:	f001 fc55 	bl	8008834 <_ZN3PID3SatEdiii>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	460b      	mov	r3, r1
 8006f8e:	4610      	mov	r0, r2
 8006f90:	4619      	mov	r1, r3
 8006f92:	f7f9 fd33 	bl	80009fc <__aeabi_d2iz>
 8006f96:	4603      	mov	r3, r0
 8006f98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    pwm2 = (int)pid_roll.Sat(pwm2,PWM_UPPER,PWM_LOWER,thr);
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 8006fa2:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f7f9 fa14 	bl	80003d4 <__aeabi_ui2d>
 8006fac:	4602      	mov	r2, r0
 8006fae:	460b      	mov	r3, r1
 8006fb0:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8006fb4:	9102      	str	r1, [sp, #8]
 8006fb6:	f240 414c 	movw	r1, #1100	; 0x44c
 8006fba:	9101      	str	r1, [sp, #4]
 8006fbc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006fc0:	9100      	str	r1, [sp, #0]
 8006fc2:	4620      	mov	r0, r4
 8006fc4:	f001 fc36 	bl	8008834 <_ZN3PID3SatEdiii>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	460b      	mov	r3, r1
 8006fcc:	4610      	mov	r0, r2
 8006fce:	4619      	mov	r1, r3
 8006fd0:	f7f9 fd14 	bl	80009fc <__aeabi_d2iz>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
    pwm3 = (int)pid_roll.Sat(pwm3,PWM_UPPER,PWM_LOWER,thr);
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 8006fe0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f7f9 f9f5 	bl	80003d4 <__aeabi_ui2d>
 8006fea:	4602      	mov	r2, r0
 8006fec:	460b      	mov	r3, r1
 8006fee:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8006ff2:	9102      	str	r1, [sp, #8]
 8006ff4:	f240 414c 	movw	r1, #1100	; 0x44c
 8006ff8:	9101      	str	r1, [sp, #4]
 8006ffa:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006ffe:	9100      	str	r1, [sp, #0]
 8007000:	4620      	mov	r0, r4
 8007002:	f001 fc17 	bl	8008834 <_ZN3PID3SatEdiii>
 8007006:	4602      	mov	r2, r0
 8007008:	460b      	mov	r3, r1
 800700a:	4610      	mov	r0, r2
 800700c:	4619      	mov	r1, r3
 800700e:	f7f9 fcf5 	bl	80009fc <__aeabi_d2iz>
 8007012:	4603      	mov	r3, r0
 8007014:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
    pwm4 = (int)pid_roll.Sat(pwm4,PWM_UPPER,PWM_LOWER,thr);
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 800701e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8007022:	4618      	mov	r0, r3
 8007024:	f7f9 f9d6 	bl	80003d4 <__aeabi_ui2d>
 8007028:	4602      	mov	r2, r0
 800702a:	460b      	mov	r3, r1
 800702c:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8007030:	9102      	str	r1, [sp, #8]
 8007032:	f240 414c 	movw	r1, #1100	; 0x44c
 8007036:	9101      	str	r1, [sp, #4]
 8007038:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800703c:	9100      	str	r1, [sp, #0]
 800703e:	4620      	mov	r0, r4
 8007040:	f001 fbf8 	bl	8008834 <_ZN3PID3SatEdiii>
 8007044:	4602      	mov	r2, r0
 8007046:	460b      	mov	r3, r1
 8007048:	4610      	mov	r0, r2
 800704a:	4619      	mov	r1, r3
 800704c:	f7f9 fcd6 	bl	80009fc <__aeabi_d2iz>
 8007050:	4603      	mov	r3, r0
 8007052:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

    //Convert pwm to motor speed 
    w1 = pid_roll.pwm2mot(pwm1, 1);
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	339c      	adds	r3, #156	; 0x9c
 800705a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800705e:	b291      	uxth	r1, r2
 8007060:	2201      	movs	r2, #1
 8007062:	4618      	mov	r0, r3
 8007064:	f001 fcb6 	bl	80089d4 <_ZN3PID7pwm2motEti>
 8007068:	4602      	mov	r2, r0
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	641a      	str	r2, [r3, #64]	; 0x40
    w2 = pid_roll.pwm2mot(pwm2, 1);
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	339c      	adds	r3, #156	; 0x9c
 8007072:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8007076:	b291      	uxth	r1, r2
 8007078:	2201      	movs	r2, #1
 800707a:	4618      	mov	r0, r3
 800707c:	f001 fcaa 	bl	80089d4 <_ZN3PID7pwm2motEti>
 8007080:	4602      	mov	r2, r0
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	645a      	str	r2, [r3, #68]	; 0x44
    w3 = pid_roll.pwm2mot(pwm3,-1);
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	339c      	adds	r3, #156	; 0x9c
 800708a:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800708e:	b291      	uxth	r1, r2
 8007090:	f04f 32ff 	mov.w	r2, #4294967295
 8007094:	4618      	mov	r0, r3
 8007096:	f001 fc9d 	bl	80089d4 <_ZN3PID7pwm2motEti>
 800709a:	4602      	mov	r2, r0
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	649a      	str	r2, [r3, #72]	; 0x48
    w4 = pid_roll.pwm2mot(pwm4,-1);
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	339c      	adds	r3, #156	; 0x9c
 80070a4:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 80070a8:	b291      	uxth	r1, r2
 80070aa:	f04f 32ff 	mov.w	r2, #4294967295
 80070ae:	4618      	mov	r0, r3
 80070b0:	f001 fc90 	bl	80089d4 <_ZN3PID7pwm2motEti>
 80070b4:	4602      	mov	r2, r0
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	64da      	str	r2, [r3, #76]	; 0x4c

    std::vector<double> controller_output = 	{w1,w2,w3,w4};
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070be:	4618      	mov	r0, r3
 80070c0:	f7f9 f9aa 	bl	8000418 <__aeabi_f2d>
 80070c4:	4602      	mov	r2, r0
 80070c6:	460b      	mov	r3, r1
 80070c8:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070d0:	4618      	mov	r0, r3
 80070d2:	f7f9 f9a1 	bl	8000418 <__aeabi_f2d>
 80070d6:	4602      	mov	r2, r0
 80070d8:	460b      	mov	r3, r1
 80070da:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070e2:	4618      	mov	r0, r3
 80070e4:	f7f9 f998 	bl	8000418 <__aeabi_f2d>
 80070e8:	4602      	mov	r2, r0
 80070ea:	460b      	mov	r3, r1
 80070ec:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070f4:	4618      	mov	r0, r3
 80070f6:	f7f9 f98f 	bl	8000418 <__aeabi_f2d>
 80070fa:	4602      	mov	r2, r0
 80070fc:	460b      	mov	r3, r1
 80070fe:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8007102:	f107 0318 	add.w	r3, r7, #24
 8007106:	613b      	str	r3, [r7, #16]
 8007108:	2304      	movs	r3, #4
 800710a:	617b      	str	r3, [r7, #20]
 800710c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007110:	4618      	mov	r0, r3
 8007112:	f000 f84e 	bl	80071b2 <_ZNSaIdEC1Ev>
 8007116:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800711a:	f107 0210 	add.w	r2, r7, #16
 800711e:	ca06      	ldmia	r2, {r1, r2}
 8007120:	68f8      	ldr	r0, [r7, #12]
 8007122:	f000 f852 	bl	80071ca <_ZNSt6vectorIdSaIdEEC1ESt16initializer_listIdERKS0_>
 8007126:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800712a:	4618      	mov	r0, r3
 800712c:	f7fb fb08 	bl	8002740 <_ZNSaIdED1Ev>
    controller_output_pwm = {pwm1,pwm2,pwm3,pwm4};
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	f503 70ae 	add.w	r0, r3, #348	; 0x15c
 8007136:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800713a:	647b      	str	r3, [r7, #68]	; 0x44
 800713c:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8007140:	64bb      	str	r3, [r7, #72]	; 0x48
 8007142:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8007146:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007148:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800714c:	653b      	str	r3, [r7, #80]	; 0x50
 800714e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007152:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007154:	2304      	movs	r3, #4
 8007156:	643b      	str	r3, [r7, #64]	; 0x40
 8007158:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800715c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8007160:	f000 f854 	bl	800720c <_ZNSt6vectorIiSaIiEEaSESt16initializer_listIiE>
    return controller_output;
 8007164:	bf00      	nop
}
 8007166:	68f8      	ldr	r0, [r7, #12]
 8007168:	378c      	adds	r7, #140	; 0x8c
 800716a:	46bd      	mov	sp, r7
 800716c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007170:	b002      	add	sp, #8
 8007172:	4770      	bx	lr

08007174 <_ZN10ControllerD1Ev>:

Controller::~Controller() {}
 8007174:	b580      	push	{r7, lr}
 8007176:	b082      	sub	sp, #8
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 8007182:	4618      	mov	r0, r3
 8007184:	f7fb fde0 	bl	8002d48 <_ZNSt6vectorIiSaIiEED1Ev>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800718e:	4618      	mov	r0, r3
 8007190:	f001 fc68 	bl	8008a64 <_ZN3PIDD1Ev>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	33dc      	adds	r3, #220	; 0xdc
 8007198:	4618      	mov	r0, r3
 800719a:	f001 fc63 	bl	8008a64 <_ZN3PIDD1Ev>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	339c      	adds	r3, #156	; 0x9c
 80071a2:	4618      	mov	r0, r3
 80071a4:	f001 fc5e 	bl	8008a64 <_ZN3PIDD1Ev>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4618      	mov	r0, r3
 80071ac:	3708      	adds	r7, #8
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}

080071b2 <_ZNSaIdEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80071b2:	b580      	push	{r7, lr}
 80071b4:	b082      	sub	sp, #8
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 f841 	bl	8007242 <_ZN9__gnu_cxx13new_allocatorIdEC1Ev>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	4618      	mov	r0, r3
 80071c4:	3708      	adds	r7, #8
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}

080071ca <_ZNSt6vectorIdSaIdEEC1ESt16initializer_listIdERKS0_>:
      vector(initializer_list<value_type> __l,
 80071ca:	b5b0      	push	{r4, r5, r7, lr}
 80071cc:	b086      	sub	sp, #24
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	60f8      	str	r0, [r7, #12]
 80071d2:	1d38      	adds	r0, r7, #4
 80071d4:	e880 0006 	stmia.w	r0, {r1, r2}
 80071d8:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	6839      	ldr	r1, [r7, #0]
 80071de:	4618      	mov	r0, r3
 80071e0:	f000 f839 	bl	8007256 <_ZNSt12_Vector_baseIdSaIdEEC1ERKS0_>
	_M_range_initialize(__l.begin(), __l.end(),
 80071e4:	1d3b      	adds	r3, r7, #4
 80071e6:	4618      	mov	r0, r3
 80071e8:	f000 f844 	bl	8007274 <_ZNKSt16initializer_listIdE5beginEv>
 80071ec:	4604      	mov	r4, r0
 80071ee:	1d3b      	adds	r3, r7, #4
 80071f0:	4618      	mov	r0, r3
 80071f2:	f000 f84a 	bl	800728a <_ZNKSt16initializer_listIdE3endEv>
 80071f6:	4602      	mov	r2, r0
 80071f8:	462b      	mov	r3, r5
 80071fa:	4621      	mov	r1, r4
 80071fc:	68f8      	ldr	r0, [r7, #12]
 80071fe:	f000 f856 	bl	80072ae <_ZNSt6vectorIdSaIdEE19_M_range_initializeIPKdEEvT_S5_St20forward_iterator_tag>
      }
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	4618      	mov	r0, r3
 8007206:	3718      	adds	r7, #24
 8007208:	46bd      	mov	sp, r7
 800720a:	bdb0      	pop	{r4, r5, r7, pc}

0800720c <_ZNSt6vectorIiSaIiEEaSESt16initializer_listIiE>:
      operator=(initializer_list<value_type> __l)
 800720c:	b5b0      	push	{r4, r5, r7, lr}
 800720e:	b086      	sub	sp, #24
 8007210:	af00      	add	r7, sp, #0
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	1d3b      	adds	r3, r7, #4
 8007216:	e883 0006 	stmia.w	r3, {r1, r2}
	this->_M_assign_aux(__l.begin(), __l.end(),
 800721a:	1d3b      	adds	r3, r7, #4
 800721c:	4618      	mov	r0, r3
 800721e:	f000 f87f 	bl	8007320 <_ZNKSt16initializer_listIiE5beginEv>
 8007222:	4604      	mov	r4, r0
 8007224:	1d3b      	adds	r3, r7, #4
 8007226:	4618      	mov	r0, r3
 8007228:	f000 f885 	bl	8007336 <_ZNKSt16initializer_listIiE3endEv>
 800722c:	4602      	mov	r2, r0
 800722e:	462b      	mov	r3, r5
 8007230:	4621      	mov	r1, r4
 8007232:	68f8      	ldr	r0, [r7, #12]
 8007234:	f000 f891 	bl	800735a <_ZNSt6vectorIiSaIiEE13_M_assign_auxIPKiEEvT_S5_St20forward_iterator_tag>
	return *this;
 8007238:	68fb      	ldr	r3, [r7, #12]
      }
 800723a:	4618      	mov	r0, r3
 800723c:	3718      	adds	r7, #24
 800723e:	46bd      	mov	sp, r7
 8007240:	bdb0      	pop	{r4, r5, r7, pc}

08007242 <_ZN9__gnu_cxx13new_allocatorIdEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8007242:	b480      	push	{r7}
 8007244:	b083      	sub	sp, #12
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4618      	mov	r0, r3
 800724e:	370c      	adds	r7, #12
 8007250:	46bd      	mov	sp, r7
 8007252:	bc80      	pop	{r7}
 8007254:	4770      	bx	lr

08007256 <_ZNSt12_Vector_baseIdSaIdEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8007256:	b580      	push	{r7, lr}
 8007258:	b082      	sub	sp, #8
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
 800725e:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6839      	ldr	r1, [r7, #0]
 8007264:	4618      	mov	r0, r3
 8007266:	f000 f91f 	bl	80074a8 <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implC1ERKS0_>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	4618      	mov	r0, r3
 800726e:	3708      	adds	r7, #8
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <_ZNKSt16initializer_listIdE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8007274:	b480      	push	{r7}
 8007276:	b083      	sub	sp, #12
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4618      	mov	r0, r3
 8007282:	370c      	adds	r7, #12
 8007284:	46bd      	mov	sp, r7
 8007286:	bc80      	pop	{r7}
 8007288:	4770      	bx	lr

0800728a <_ZNKSt16initializer_listIdE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 800728a:	b590      	push	{r4, r7, lr}
 800728c:	b083      	sub	sp, #12
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f7ff ffee 	bl	8007274 <_ZNKSt16initializer_listIdE5beginEv>
 8007298:	4604      	mov	r4, r0
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 f916 	bl	80074cc <_ZNKSt16initializer_listIdE4sizeEv>
 80072a0:	4603      	mov	r3, r0
 80072a2:	00db      	lsls	r3, r3, #3
 80072a4:	4423      	add	r3, r4
 80072a6:	4618      	mov	r0, r3
 80072a8:	370c      	adds	r7, #12
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd90      	pop	{r4, r7, pc}

080072ae <_ZNSt6vectorIdSaIdEE19_M_range_initializeIPKdEEvT_S5_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 80072ae:	b590      	push	{r4, r7, lr}
 80072b0:	b087      	sub	sp, #28
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	60f8      	str	r0, [r7, #12]
 80072b6:	60b9      	str	r1, [r7, #8]
 80072b8:	607a      	str	r2, [r7, #4]
 80072ba:	703b      	strb	r3, [r7, #0]
	  const size_type __n = std::distance(__first, __last);
 80072bc:	6879      	ldr	r1, [r7, #4]
 80072be:	68b8      	ldr	r0, [r7, #8]
 80072c0:	f000 f90f 	bl	80074e2 <_ZSt8distanceIPKdENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 80072c4:	4603      	mov	r3, r0
 80072c6:	617b      	str	r3, [r7, #20]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80072c8:	68fc      	ldr	r4, [r7, #12]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	4618      	mov	r0, r3
 80072ce:	f7fb f8eb 	bl	80024a8 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 80072d2:	4603      	mov	r3, r0
 80072d4:	4619      	mov	r1, r3
 80072d6:	6978      	ldr	r0, [r7, #20]
 80072d8:	f000 f918 	bl	800750c <_ZNSt6vectorIdSaIdEE17_S_check_init_lenEjRKS0_>
 80072dc:	4603      	mov	r3, r0
 80072de:	4619      	mov	r1, r3
 80072e0:	4620      	mov	r0, r4
 80072e2:	f000 f93b 	bl	800755c <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEj>
 80072e6:	4602      	mov	r2, r0
	  this->_M_impl._M_start
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	00db      	lsls	r3, r3, #3
 80072f4:	441a      	add	r2, r3
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	609a      	str	r2, [r3, #8]
	    std::__uninitialized_copy_a(__first, __last,
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	4618      	mov	r0, r3
 8007302:	f7fb f8d1 	bl	80024a8 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8007306:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 8007308:	4622      	mov	r2, r4
 800730a:	6879      	ldr	r1, [r7, #4]
 800730c:	68b8      	ldr	r0, [r7, #8]
 800730e:	f000 f939 	bl	8007584 <_ZSt22__uninitialized_copy_aIPKdPddET0_T_S4_S3_RSaIT1_E>
 8007312:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	605a      	str	r2, [r3, #4]
	}
 8007318:	bf00      	nop
 800731a:	371c      	adds	r7, #28
 800731c:	46bd      	mov	sp, r7
 800731e:	bd90      	pop	{r4, r7, pc}

08007320 <_ZNKSt16initializer_listIiE5beginEv>:
      begin() const noexcept { return _M_array; }
 8007320:	b480      	push	{r7}
 8007322:	b083      	sub	sp, #12
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4618      	mov	r0, r3
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	bc80      	pop	{r7}
 8007334:	4770      	bx	lr

08007336 <_ZNKSt16initializer_listIiE3endEv>:
      end() const noexcept { return begin() + size(); }
 8007336:	b590      	push	{r4, r7, lr}
 8007338:	b083      	sub	sp, #12
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f7ff ffee 	bl	8007320 <_ZNKSt16initializer_listIiE5beginEv>
 8007344:	4604      	mov	r4, r0
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 f92d 	bl	80075a6 <_ZNKSt16initializer_listIiE4sizeEv>
 800734c:	4603      	mov	r3, r0
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	4423      	add	r3, r4
 8007352:	4618      	mov	r0, r3
 8007354:	370c      	adds	r7, #12
 8007356:	46bd      	mov	sp, r7
 8007358:	bd90      	pop	{r4, r7, pc}

0800735a <_ZNSt6vectorIiSaIiEE13_M_assign_auxIPKiEEvT_S5_St20forward_iterator_tag>:
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<_Tp, _Alloc>::
 800735a:	b5b0      	push	{r4, r5, r7, lr}
 800735c:	b088      	sub	sp, #32
 800735e:	af00      	add	r7, sp, #0
 8007360:	60f8      	str	r0, [r7, #12]
 8007362:	60b9      	str	r1, [r7, #8]
 8007364:	607a      	str	r2, [r7, #4]
 8007366:	703b      	strb	r3, [r7, #0]
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
		    std::forward_iterator_tag)
      {
	const size_type __len = std::distance(__first, __last);
 8007368:	6879      	ldr	r1, [r7, #4]
 800736a:	68b8      	ldr	r0, [r7, #8]
 800736c:	f000 f926 	bl	80075bc <_ZSt8distanceIPKiENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 8007370:	4603      	mov	r3, r0
 8007372:	61fb      	str	r3, [r7, #28]

	if (__len > capacity())
 8007374:	68f8      	ldr	r0, [r7, #12]
 8007376:	f7fb f8f9 	bl	800256c <_ZNKSt6vectorIiSaIiEE8capacityEv>
 800737a:	4602      	mov	r2, r0
 800737c:	69fb      	ldr	r3, [r7, #28]
 800737e:	4293      	cmp	r3, r2
 8007380:	bf8c      	ite	hi
 8007382:	2301      	movhi	r3, #1
 8007384:	2300      	movls	r3, #0
 8007386:	b2db      	uxtb	r3, r3
 8007388:	2b00      	cmp	r3, #0
 800738a:	d038      	beq.n	80073fe <_ZNSt6vectorIiSaIiEE13_M_assign_auxIPKiEEvT_S5_St20forward_iterator_tag+0xa4>
	  {
	    _S_check_init_len(__len, _M_get_Tp_allocator());
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	4618      	mov	r0, r3
 8007390:	f7fb f8a2 	bl	80024d8 <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 8007394:	4603      	mov	r3, r0
 8007396:	4619      	mov	r1, r3
 8007398:	69f8      	ldr	r0, [r7, #28]
 800739a:	f000 f923 	bl	80075e4 <_ZNSt6vectorIiSaIiEE17_S_check_init_lenEjRKS0_>
	    pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	68ba      	ldr	r2, [r7, #8]
 80073a2:	69f9      	ldr	r1, [r7, #28]
 80073a4:	68f8      	ldr	r0, [r7, #12]
 80073a6:	f000 f945 	bl	8007634 <_ZNSt6vectorIiSaIiEE20_M_allocate_and_copyIPKiEEPijT_S6_>
 80073aa:	6178      	str	r0, [r7, #20]
	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681c      	ldr	r4, [r3, #0]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	685d      	ldr	r5, [r3, #4]
			  _M_get_Tp_allocator());
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	4618      	mov	r0, r3
 80073b8:	f7fb f88e 	bl	80024d8 <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 80073bc:	4603      	mov	r3, r0
	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80073be:	461a      	mov	r2, r3
 80073c0:	4629      	mov	r1, r5
 80073c2:	4620      	mov	r0, r4
 80073c4:	f7fb f925 	bl	8002612 <_ZSt8_DestroyIPiiEvT_S1_RSaIT0_E>
	    _GLIBCXX_ASAN_ANNOTATE_REINIT;
	    _M_deallocate(this->_M_impl._M_start,
 80073c8:	68f8      	ldr	r0, [r7, #12]
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	6819      	ldr	r1, [r3, #0]
			  this->_M_impl._M_end_of_storage
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	689a      	ldr	r2, [r3, #8]
			  - this->_M_impl._M_start);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	1ad3      	subs	r3, r2, r3
 80073d8:	109b      	asrs	r3, r3, #2
	    _M_deallocate(this->_M_impl._M_start,
 80073da:	461a      	mov	r2, r3
 80073dc:	f7fb f82c 	bl	8002438 <_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPij>
	    this->_M_impl._M_start = __tmp;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	697a      	ldr	r2, [r7, #20]
 80073e4:	601a      	str	r2, [r3, #0]
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	69fb      	ldr	r3, [r7, #28]
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	441a      	add	r2, r3
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	605a      	str	r2, [r3, #4]
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	685a      	ldr	r2, [r3, #4]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	609a      	str	r2, [r3, #8]
	      std::__uninitialized_copy_a(__mid, __last,
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
	    _GLIBCXX_ASAN_ANNOTATE_GREW(__n);
	  }
      }
 80073fc:	e042      	b.n	8007484 <_ZNSt6vectorIiSaIiEE13_M_assign_auxIPKiEEvT_S5_St20forward_iterator_tag+0x12a>
	else if (size() >= __len)
 80073fe:	68f8      	ldr	r0, [r7, #12]
 8007400:	f7fb f8a5 	bl	800254e <_ZNKSt6vectorIiSaIiEE4sizeEv>
 8007404:	4602      	mov	r2, r0
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	4293      	cmp	r3, r2
 800740a:	bf94      	ite	ls
 800740c:	2301      	movls	r3, #1
 800740e:	2300      	movhi	r3, #0
 8007410:	b2db      	uxtb	r3, r3
 8007412:	2b00      	cmp	r3, #0
 8007414:	d00c      	beq.n	8007430 <_ZNSt6vectorIiSaIiEE13_M_assign_auxIPKiEEvT_S5_St20forward_iterator_tag+0xd6>
	  _M_erase_at_end(std::copy(__first, __last, this->_M_impl._M_start));
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	461a      	mov	r2, r3
 800741c:	6879      	ldr	r1, [r7, #4]
 800741e:	68b8      	ldr	r0, [r7, #8]
 8007420:	f000 f924 	bl	800766c <_ZSt4copyIPKiPiET0_T_S4_S3_>
 8007424:	4603      	mov	r3, r0
 8007426:	4619      	mov	r1, r3
 8007428:	68f8      	ldr	r0, [r7, #12]
 800742a:	f7fb f9b5 	bl	8002798 <_ZNSt6vectorIiSaIiEE15_M_erase_at_endEPi>
      }
 800742e:	e029      	b.n	8007484 <_ZNSt6vectorIiSaIiEE13_M_assign_auxIPKiEEvT_S5_St20forward_iterator_tag+0x12a>
	    _ForwardIterator __mid = __first;
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	613b      	str	r3, [r7, #16]
	    std::advance(__mid, size());
 8007434:	68f8      	ldr	r0, [r7, #12]
 8007436:	f7fb f88a 	bl	800254e <_ZNKSt6vectorIiSaIiEE4sizeEv>
 800743a:	4602      	mov	r2, r0
 800743c:	f107 0310 	add.w	r3, r7, #16
 8007440:	4611      	mov	r1, r2
 8007442:	4618      	mov	r0, r3
 8007444:	f000 f92a 	bl	800769c <_ZSt7advanceIPKijEvRT_T0_>
	    std::copy(__first, __mid, this->_M_impl._M_start);
 8007448:	6939      	ldr	r1, [r7, #16]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	461a      	mov	r2, r3
 8007450:	68b8      	ldr	r0, [r7, #8]
 8007452:	f000 f90b 	bl	800766c <_ZSt4copyIPKiPiET0_T_S4_S3_>
	    const size_type __attribute__((__unused__)) __n = __len - size();
 8007456:	68f8      	ldr	r0, [r7, #12]
 8007458:	f7fb f879 	bl	800254e <_ZNKSt6vectorIiSaIiEE4sizeEv>
 800745c:	4602      	mov	r2, r0
 800745e:	69fb      	ldr	r3, [r7, #28]
 8007460:	1a9b      	subs	r3, r3, r2
 8007462:	61bb      	str	r3, [r7, #24]
	      std::__uninitialized_copy_a(__mid, __last,
 8007464:	693c      	ldr	r4, [r7, #16]
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	685d      	ldr	r5, [r3, #4]
					  _M_get_Tp_allocator());
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	4618      	mov	r0, r3
 800746e:	f7fb f833 	bl	80024d8 <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 8007472:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__mid, __last,
 8007474:	462a      	mov	r2, r5
 8007476:	6879      	ldr	r1, [r7, #4]
 8007478:	4620      	mov	r0, r4
 800747a:	f000 f922 	bl	80076c2 <_ZSt22__uninitialized_copy_aIPKiPiiET0_T_S4_S3_RSaIT1_E>
 800747e:	4602      	mov	r2, r0
	    this->_M_impl._M_finish =
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	605a      	str	r2, [r3, #4]
      }
 8007484:	bf00      	nop
 8007486:	3720      	adds	r7, #32
 8007488:	46bd      	mov	sp, r7
 800748a:	bdb0      	pop	{r4, r5, r7, pc}

0800748c <_ZNSaIdEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8007496:	6839      	ldr	r1, [r7, #0]
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 f923 	bl	80076e4 <_ZN9__gnu_cxx13new_allocatorIdEC1ERKS1_>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	4618      	mov	r0, r3
 80074a2:	3708      	adds	r7, #8
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 80074b2:	6839      	ldr	r1, [r7, #0]
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f7ff ffe9 	bl	800748c <_ZNSaIdEC1ERKS_>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	4618      	mov	r0, r3
 80074be:	f000 f91c 	bl	80076fa <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_dataC1Ev>
	{ }
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	4618      	mov	r0, r3
 80074c6:	3708      	adds	r7, #8
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <_ZNKSt16initializer_listIdE4sizeEv>:
      size() const noexcept { return _M_len; }
 80074cc:	b480      	push	{r7}
 80074ce:	b083      	sub	sp, #12
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	4618      	mov	r0, r3
 80074da:	370c      	adds	r7, #12
 80074dc:	46bd      	mov	sp, r7
 80074de:	bc80      	pop	{r7}
 80074e0:	4770      	bx	lr

080074e2 <_ZSt8distanceIPKdENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 80074e2:	b5b0      	push	{r4, r5, r7, lr}
 80074e4:	b084      	sub	sp, #16
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
 80074ea:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 80074ec:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 80074ee:	1d3b      	adds	r3, r7, #4
 80074f0:	4618      	mov	r0, r3
 80074f2:	f000 f915 	bl	8007720 <_ZSt19__iterator_categoryIPKdENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 80074f6:	462a      	mov	r2, r5
 80074f8:	6839      	ldr	r1, [r7, #0]
 80074fa:	4620      	mov	r0, r4
 80074fc:	f000 f919 	bl	8007732 <_ZSt10__distanceIPKdENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 8007500:	4603      	mov	r3, r0
    }
 8007502:	4618      	mov	r0, r3
 8007504:	3710      	adds	r7, #16
 8007506:	46bd      	mov	sp, r7
 8007508:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800750c <_ZNSt6vectorIdSaIdEE17_S_check_init_lenEjRKS0_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 800750c:	b590      	push	{r4, r7, lr}
 800750e:	b085      	sub	sp, #20
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8007516:	f107 030c 	add.w	r3, r7, #12
 800751a:	6839      	ldr	r1, [r7, #0]
 800751c:	4618      	mov	r0, r3
 800751e:	f7ff ffb5 	bl	800748c <_ZNSaIdEC1ERKS_>
 8007522:	f107 030c 	add.w	r3, r7, #12
 8007526:	4618      	mov	r0, r3
 8007528:	f000 f912 	bl	8007750 <_ZNSt6vectorIdSaIdEE11_S_max_sizeERKS0_>
 800752c:	4602      	mov	r2, r0
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	4293      	cmp	r3, r2
 8007532:	bf8c      	ite	hi
 8007534:	2301      	movhi	r3, #1
 8007536:	2300      	movls	r3, #0
 8007538:	b2dc      	uxtb	r4, r3
 800753a:	f107 030c 	add.w	r3, r7, #12
 800753e:	4618      	mov	r0, r3
 8007540:	f7fb f8fe 	bl	8002740 <_ZNSaIdED1Ev>
 8007544:	2c00      	cmp	r4, #0
 8007546:	d002      	beq.n	800754e <_ZNSt6vectorIdSaIdEE17_S_check_init_lenEjRKS0_+0x42>
	  __throw_length_error(
 8007548:	4803      	ldr	r0, [pc, #12]	; (8007558 <_ZNSt6vectorIdSaIdEE17_S_check_init_lenEjRKS0_+0x4c>)
 800754a:	f001 faab 	bl	8008aa4 <_ZSt20__throw_length_errorPKc>
	return __n;
 800754e:	687b      	ldr	r3, [r7, #4]
      }
 8007550:	4618      	mov	r0, r3
 8007552:	3714      	adds	r7, #20
 8007554:	46bd      	mov	sp, r7
 8007556:	bd90      	pop	{r4, r7, pc}
 8007558:	080094e8 	.word	0x080094e8

0800755c <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800755c:	b580      	push	{r7, lr}
 800755e:	b082      	sub	sp, #8
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d006      	beq.n	800757a <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEj+0x1e>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6839      	ldr	r1, [r7, #0]
 8007570:	4618      	mov	r0, r3
 8007572:	f000 f907 	bl	8007784 <_ZNSt16allocator_traitsISaIdEE8allocateERS0_j>
 8007576:	4603      	mov	r3, r0
 8007578:	e000      	b.n	800757c <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEj+0x20>
 800757a:	2300      	movs	r3, #0
      }
 800757c:	4618      	mov	r0, r3
 800757e:	3708      	adds	r7, #8
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <_ZSt22__uninitialized_copy_aIPKdPddET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	60b9      	str	r1, [r7, #8]
 800758e:	607a      	str	r2, [r7, #4]
 8007590:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	68b9      	ldr	r1, [r7, #8]
 8007596:	68f8      	ldr	r0, [r7, #12]
 8007598:	f000 f903 	bl	80077a2 <_ZSt18uninitialized_copyIPKdPdET0_T_S4_S3_>
 800759c:	4603      	mov	r3, r0
 800759e:	4618      	mov	r0, r3
 80075a0:	3710      	adds	r7, #16
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}

080075a6 <_ZNKSt16initializer_listIiE4sizeEv>:
 80075a6:	b480      	push	{r7}
 80075a8:	b083      	sub	sp, #12
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	4618      	mov	r0, r3
 80075b4:	370c      	adds	r7, #12
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bc80      	pop	{r7}
 80075ba:	4770      	bx	lr

080075bc <_ZSt8distanceIPKiENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
    distance(_InputIterator __first, _InputIterator __last)
 80075bc:	b5b0      	push	{r4, r5, r7, lr}
 80075be:	b084      	sub	sp, #16
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	6039      	str	r1, [r7, #0]
      return std::__distance(__first, __last,
 80075c6:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 80075c8:	1d3b      	adds	r3, r7, #4
 80075ca:	4618      	mov	r0, r3
 80075cc:	f000 f8fb 	bl	80077c6 <_ZSt19__iterator_categoryIPKiENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 80075d0:	462a      	mov	r2, r5
 80075d2:	6839      	ldr	r1, [r7, #0]
 80075d4:	4620      	mov	r0, r4
 80075d6:	f000 f8ff 	bl	80077d8 <_ZSt10__distanceIPKiENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 80075da:	4603      	mov	r3, r0
    }
 80075dc:	4618      	mov	r0, r3
 80075de:	3710      	adds	r7, #16
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bdb0      	pop	{r4, r5, r7, pc}

080075e4 <_ZNSt6vectorIiSaIiEE17_S_check_init_lenEjRKS0_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 80075e4:	b590      	push	{r4, r7, lr}
 80075e6:	b085      	sub	sp, #20
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 80075ee:	f107 030c 	add.w	r3, r7, #12
 80075f2:	6839      	ldr	r1, [r7, #0]
 80075f4:	4618      	mov	r0, r3
 80075f6:	f000 f918 	bl	800782a <_ZNSaIiEC1ERKS_>
 80075fa:	f107 030c 	add.w	r3, r7, #12
 80075fe:	4618      	mov	r0, r3
 8007600:	f000 f8f9 	bl	80077f6 <_ZNSt6vectorIiSaIiEE11_S_max_sizeERKS0_>
 8007604:	4602      	mov	r2, r0
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	4293      	cmp	r3, r2
 800760a:	bf8c      	ite	hi
 800760c:	2301      	movhi	r3, #1
 800760e:	2300      	movls	r3, #0
 8007610:	b2dc      	uxtb	r4, r3
 8007612:	f107 030c 	add.w	r3, r7, #12
 8007616:	4618      	mov	r0, r3
 8007618:	f7fa fd93 	bl	8002142 <_ZNSaIiED1Ev>
 800761c:	2c00      	cmp	r4, #0
 800761e:	d002      	beq.n	8007626 <_ZNSt6vectorIiSaIiEE17_S_check_init_lenEjRKS0_+0x42>
	  __throw_length_error(
 8007620:	4803      	ldr	r0, [pc, #12]	; (8007630 <_ZNSt6vectorIiSaIiEE17_S_check_init_lenEjRKS0_+0x4c>)
 8007622:	f001 fa3f 	bl	8008aa4 <_ZSt20__throw_length_errorPKc>
	return __n;
 8007626:	687b      	ldr	r3, [r7, #4]
      }
 8007628:	4618      	mov	r0, r3
 800762a:	3714      	adds	r7, #20
 800762c:	46bd      	mov	sp, r7
 800762e:	bd90      	pop	{r4, r7, pc}
 8007630:	080094e8 	.word	0x080094e8

08007634 <_ZNSt6vectorIiSaIiEE20_M_allocate_and_copyIPKiEEPijT_S6_>:
	_M_allocate_and_copy(size_type __n,
 8007634:	b580      	push	{r7, lr}
 8007636:	b086      	sub	sp, #24
 8007638:	af00      	add	r7, sp, #0
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	60b9      	str	r1, [r7, #8]
 800763e:	607a      	str	r2, [r7, #4]
 8007640:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	68b9      	ldr	r1, [r7, #8]
 8007646:	4618      	mov	r0, r3
 8007648:	f7fb f8e1 	bl	800280e <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj>
 800764c:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	4618      	mov	r0, r3
 8007652:	f7fa ff41 	bl	80024d8 <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 8007656:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 8007658:	697a      	ldr	r2, [r7, #20]
 800765a:	6839      	ldr	r1, [r7, #0]
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f000 f830 	bl	80076c2 <_ZSt22__uninitialized_copy_aIPKiPiiET0_T_S4_S3_RSaIT1_E>
	      return __result;
 8007662:	697b      	ldr	r3, [r7, #20]
	}
 8007664:	4618      	mov	r0, r3
 8007666:	3718      	adds	r7, #24
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <_ZSt4copyIPKiPiET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 800766c:	b590      	push	{r4, r7, lr}
 800766e:	b085      	sub	sp, #20
 8007670:	af00      	add	r7, sp, #0
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	60b9      	str	r1, [r7, #8]
 8007676:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8007678:	68f8      	ldr	r0, [r7, #12]
 800767a:	f000 f8e4 	bl	8007846 <_ZSt12__miter_baseIPKiET_S2_>
 800767e:	4604      	mov	r4, r0
 8007680:	68b8      	ldr	r0, [r7, #8]
 8007682:	f000 f8e0 	bl	8007846 <_ZSt12__miter_baseIPKiET_S2_>
 8007686:	4603      	mov	r3, r0
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	4619      	mov	r1, r3
 800768c:	4620      	mov	r0, r4
 800768e:	f000 f8e4 	bl	800785a <_ZSt14__copy_move_a2ILb0EPKiPiET1_T0_S4_S3_>
 8007692:	4603      	mov	r3, r0
    }
 8007694:	4618      	mov	r0, r3
 8007696:	3714      	adds	r7, #20
 8007698:	46bd      	mov	sp, r7
 800769a:	bd90      	pop	{r4, r7, pc}

0800769c <_ZSt7advanceIPKijEvRT_T0_>:
   *  For random access iterators, this uses their @c + and @c - operations
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator, typename _Distance>
    inline _GLIBCXX17_CONSTEXPR void
    advance(_InputIterator& __i, _Distance __n)
 800769c:	b590      	push	{r4, r7, lr}
 800769e:	b085      	sub	sp, #20
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __advance
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 f88b 	bl	80077c6 <_ZSt19__iterator_categoryIPKiENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
 80076b0:	4622      	mov	r2, r4
 80076b2:	68f9      	ldr	r1, [r7, #12]
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f000 f8f3 	bl	80078a0 <_ZSt9__advanceIPKiiEvRT_T0_St26random_access_iterator_tag>
    }
 80076ba:	bf00      	nop
 80076bc:	3714      	adds	r7, #20
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd90      	pop	{r4, r7, pc}

080076c2 <_ZSt22__uninitialized_copy_aIPKiPiiET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80076c2:	b580      	push	{r7, lr}
 80076c4:	b084      	sub	sp, #16
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	60f8      	str	r0, [r7, #12]
 80076ca:	60b9      	str	r1, [r7, #8]
 80076cc:	607a      	str	r2, [r7, #4]
 80076ce:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	68b9      	ldr	r1, [r7, #8]
 80076d4:	68f8      	ldr	r0, [r7, #12]
 80076d6:	f000 f8f5 	bl	80078c4 <_ZSt18uninitialized_copyIPKiPiET0_T_S4_S3_>
 80076da:	4603      	mov	r3, r0
 80076dc:	4618      	mov	r0, r3
 80076de:	3710      	adds	r7, #16
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <_ZN9__gnu_cxx13new_allocatorIdEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 80076e4:	b480      	push	{r7}
 80076e6:	b083      	sub	sp, #12
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	6039      	str	r1, [r7, #0]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	4618      	mov	r0, r3
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bc80      	pop	{r7}
 80076f8:	4770      	bx	lr

080076fa <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80076fa:	b480      	push	{r7}
 80076fc:	b083      	sub	sp, #12
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2200      	movs	r2, #0
 8007706:	601a      	str	r2, [r3, #0]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2200      	movs	r2, #0
 800770c:	605a      	str	r2, [r3, #4]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2200      	movs	r2, #0
 8007712:	609a      	str	r2, [r3, #8]
	{ }
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	4618      	mov	r0, r3
 8007718:	370c      	adds	r7, #12
 800771a:	46bd      	mov	sp, r7
 800771c:	bc80      	pop	{r7}
 800771e:	4770      	bx	lr

08007720 <_ZSt19__iterator_categoryIPKdENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8007728:	4618      	mov	r0, r3
 800772a:	370c      	adds	r7, #12
 800772c:	46bd      	mov	sp, r7
 800772e:	bc80      	pop	{r7}
 8007730:	4770      	bx	lr

08007732 <_ZSt10__distanceIPKdENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8007732:	b480      	push	{r7}
 8007734:	b085      	sub	sp, #20
 8007736:	af00      	add	r7, sp, #0
 8007738:	60f8      	str	r0, [r7, #12]
 800773a:	60b9      	str	r1, [r7, #8]
 800773c:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 800773e:	68ba      	ldr	r2, [r7, #8]
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	1ad3      	subs	r3, r2, r3
 8007744:	10db      	asrs	r3, r3, #3
    }
 8007746:	4618      	mov	r0, r3
 8007748:	3714      	adds	r7, #20
 800774a:	46bd      	mov	sp, r7
 800774c:	bc80      	pop	{r7}
 800774e:	4770      	bx	lr

08007750 <_ZNSt6vectorIdSaIdEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8007758:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800775c:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 f8c2 	bl	80078e8 <_ZNSt16allocator_traitsISaIdEE8max_sizeERKS0_>
 8007764:	4603      	mov	r3, r0
 8007766:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8007768:	f107 0208 	add.w	r2, r7, #8
 800776c:	f107 030c 	add.w	r3, r7, #12
 8007770:	4611      	mov	r1, r2
 8007772:	4618      	mov	r0, r3
 8007774:	f000 f8c4 	bl	8007900 <_ZSt3minIjERKT_S2_S2_>
 8007778:	4603      	mov	r3, r0
 800777a:	681b      	ldr	r3, [r3, #0]
      }
 800777c:	4618      	mov	r0, r3
 800777e:	3710      	adds	r7, #16
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <_ZNSt16allocator_traitsISaIdEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8007784:	b580      	push	{r7, lr}
 8007786:	b082      	sub	sp, #8
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800778e:	2200      	movs	r2, #0
 8007790:	6839      	ldr	r1, [r7, #0]
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 f8c7 	bl	8007926 <_ZN9__gnu_cxx13new_allocatorIdE8allocateEjPKv>
 8007798:	4603      	mov	r3, r0
 800779a:	4618      	mov	r0, r3
 800779c:	3708      	adds	r7, #8
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}

080077a2 <_ZSt18uninitialized_copyIPKdPdET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80077a2:	b580      	push	{r7, lr}
 80077a4:	b086      	sub	sp, #24
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	60f8      	str	r0, [r7, #12]
 80077aa:	60b9      	str	r1, [r7, #8]
 80077ac:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80077ae:	2301      	movs	r3, #1
 80077b0:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	68b9      	ldr	r1, [r7, #8]
 80077b6:	68f8      	ldr	r0, [r7, #12]
 80077b8:	f000 f8d3 	bl	8007962 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKdPdEET0_T_S6_S5_>
 80077bc:	4603      	mov	r3, r0
    }
 80077be:	4618      	mov	r0, r3
 80077c0:	3718      	adds	r7, #24
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}

080077c6 <_ZSt19__iterator_categoryIPKiENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
    __iterator_category(const _Iter&)
 80077c6:	b480      	push	{r7}
 80077c8:	b083      	sub	sp, #12
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 80077ce:	4618      	mov	r0, r3
 80077d0:	370c      	adds	r7, #12
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bc80      	pop	{r7}
 80077d6:	4770      	bx	lr

080077d8 <_ZSt10__distanceIPKiENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80077d8:	b480      	push	{r7}
 80077da:	b085      	sub	sp, #20
 80077dc:	af00      	add	r7, sp, #0
 80077de:	60f8      	str	r0, [r7, #12]
 80077e0:	60b9      	str	r1, [r7, #8]
 80077e2:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 80077e4:	68ba      	ldr	r2, [r7, #8]
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	1ad3      	subs	r3, r2, r3
 80077ea:	109b      	asrs	r3, r3, #2
    }
 80077ec:	4618      	mov	r0, r3
 80077ee:	3714      	adds	r7, #20
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bc80      	pop	{r7}
 80077f4:	4770      	bx	lr

080077f6 <_ZNSt6vectorIiSaIiEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80077f6:	b580      	push	{r7, lr}
 80077f8:	b084      	sub	sp, #16
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 80077fe:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8007802:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f000 f8bc 	bl	8007982 <_ZNSt16allocator_traitsISaIiEE8max_sizeERKS0_>
 800780a:	4603      	mov	r3, r0
 800780c:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800780e:	f107 0208 	add.w	r2, r7, #8
 8007812:	f107 030c 	add.w	r3, r7, #12
 8007816:	4611      	mov	r1, r2
 8007818:	4618      	mov	r0, r3
 800781a:	f000 f871 	bl	8007900 <_ZSt3minIjERKT_S2_S2_>
 800781e:	4603      	mov	r3, r0
 8007820:	681b      	ldr	r3, [r3, #0]
      }
 8007822:	4618      	mov	r0, r3
 8007824:	3710      	adds	r7, #16
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}

0800782a <_ZNSaIiEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800782a:	b580      	push	{r7, lr}
 800782c:	b082      	sub	sp, #8
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
 8007832:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8007834:	6839      	ldr	r1, [r7, #0]
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 f8af 	bl	800799a <_ZN9__gnu_cxx13new_allocatorIiEC1ERKS1_>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	4618      	mov	r0, r3
 8007840:	3708      	adds	r7, #8
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}

08007846 <_ZSt12__miter_baseIPKiET_S2_>:
    __miter_base(_Iterator __it)
 8007846:	b480      	push	{r7}
 8007848:	b083      	sub	sp, #12
 800784a:	af00      	add	r7, sp, #0
 800784c:	6078      	str	r0, [r7, #4]
    { return __it; }
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	4618      	mov	r0, r3
 8007852:	370c      	adds	r7, #12
 8007854:	46bd      	mov	sp, r7
 8007856:	bc80      	pop	{r7}
 8007858:	4770      	bx	lr

0800785a <_ZSt14__copy_move_a2ILb0EPKiPiET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800785a:	b5b0      	push	{r4, r5, r7, lr}
 800785c:	b084      	sub	sp, #16
 800785e:	af00      	add	r7, sp, #0
 8007860:	60f8      	str	r0, [r7, #12]
 8007862:	60b9      	str	r1, [r7, #8]
 8007864:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8007866:	68f8      	ldr	r0, [r7, #12]
 8007868:	f000 f8a2 	bl	80079b0 <_ZSt12__niter_baseIPKiET_S2_>
 800786c:	4604      	mov	r4, r0
 800786e:	68b8      	ldr	r0, [r7, #8]
 8007870:	f000 f89e 	bl	80079b0 <_ZSt12__niter_baseIPKiET_S2_>
 8007874:	4605      	mov	r5, r0
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	4618      	mov	r0, r3
 800787a:	f7fb f92a 	bl	8002ad2 <_ZSt12__niter_baseIPiET_S1_>
 800787e:	4603      	mov	r3, r0
 8007880:	461a      	mov	r2, r3
 8007882:	4629      	mov	r1, r5
 8007884:	4620      	mov	r0, r4
 8007886:	f7fb f8f1 	bl	8002a6c <_ZSt13__copy_move_aILb0EPKiPiET1_T0_S4_S3_>
 800788a:	4602      	mov	r2, r0
 800788c:	1d3b      	adds	r3, r7, #4
 800788e:	4611      	mov	r1, r2
 8007890:	4618      	mov	r0, r3
 8007892:	f7fb f93a 	bl	8002b0a <_ZSt12__niter_wrapIPiET_RKS1_S1_>
 8007896:	4603      	mov	r3, r0
    }
 8007898:	4618      	mov	r0, r3
 800789a:	3710      	adds	r7, #16
 800789c:	46bd      	mov	sp, r7
 800789e:	bdb0      	pop	{r4, r5, r7, pc}

080078a0 <_ZSt9__advanceIPKiiEvRT_T0_St26random_access_iterator_tag>:
    __advance(_RandomAccessIterator& __i, _Distance __n,
 80078a0:	b480      	push	{r7}
 80078a2:	b085      	sub	sp, #20
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	60f8      	str	r0, [r7, #12]
 80078a8:	60b9      	str	r1, [r7, #8]
 80078aa:	713a      	strb	r2, [r7, #4]
	__i += __n;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	441a      	add	r2, r3
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	601a      	str	r2, [r3, #0]
    }
 80078ba:	bf00      	nop
 80078bc:	3714      	adds	r7, #20
 80078be:	46bd      	mov	sp, r7
 80078c0:	bc80      	pop	{r7}
 80078c2:	4770      	bx	lr

080078c4 <_ZSt18uninitialized_copyIPKiPiET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b086      	sub	sp, #24
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	60f8      	str	r0, [r7, #12]
 80078cc:	60b9      	str	r1, [r7, #8]
 80078ce:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80078d0:	2301      	movs	r3, #1
 80078d2:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	68b9      	ldr	r1, [r7, #8]
 80078d8:	68f8      	ldr	r0, [r7, #12]
 80078da:	f000 f873 	bl	80079c4 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKiPiEET0_T_S6_S5_>
 80078de:	4603      	mov	r3, r0
    }
 80078e0:	4618      	mov	r0, r3
 80078e2:	3718      	adds	r7, #24
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <_ZNSt16allocator_traitsISaIdEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a) noexcept
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 f877 	bl	80079e4 <_ZNK9__gnu_cxx13new_allocatorIdE8max_sizeEv>
 80078f6:	4603      	mov	r3, r0
 80078f8:	4618      	mov	r0, r3
 80078fa:	3708      	adds	r7, #8
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8007900:	b480      	push	{r7}
 8007902:	b083      	sub	sp, #12
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	681a      	ldr	r2, [r3, #0]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	429a      	cmp	r2, r3
 8007914:	d201      	bcs.n	800791a <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	e000      	b.n	800791c <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 800791a:	687b      	ldr	r3, [r7, #4]
    }
 800791c:	4618      	mov	r0, r3
 800791e:	370c      	adds	r7, #12
 8007920:	46bd      	mov	sp, r7
 8007922:	bc80      	pop	{r7}
 8007924:	4770      	bx	lr

08007926 <_ZN9__gnu_cxx13new_allocatorIdE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8007926:	b580      	push	{r7, lr}
 8007928:	b084      	sub	sp, #16
 800792a:	af00      	add	r7, sp, #0
 800792c:	60f8      	str	r0, [r7, #12]
 800792e:	60b9      	str	r1, [r7, #8]
 8007930:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8007932:	68f8      	ldr	r0, [r7, #12]
 8007934:	f000 f856 	bl	80079e4 <_ZNK9__gnu_cxx13new_allocatorIdE8max_sizeEv>
 8007938:	4602      	mov	r2, r0
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	4293      	cmp	r3, r2
 800793e:	bf8c      	ite	hi
 8007940:	2301      	movhi	r3, #1
 8007942:	2300      	movls	r3, #0
 8007944:	b2db      	uxtb	r3, r3
 8007946:	2b00      	cmp	r3, #0
 8007948:	d001      	beq.n	800794e <_ZN9__gnu_cxx13new_allocatorIdE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800794a:	f001 f8a8 	bl	8008a9e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	00db      	lsls	r3, r3, #3
 8007952:	4618      	mov	r0, r3
 8007954:	f001 f892 	bl	8008a7c <_Znwj>
 8007958:	4603      	mov	r3, r0
      }
 800795a:	4618      	mov	r0, r3
 800795c:	3710      	adds	r7, #16
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}

08007962 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKdPdEET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8007962:	b580      	push	{r7, lr}
 8007964:	b084      	sub	sp, #16
 8007966:	af00      	add	r7, sp, #0
 8007968:	60f8      	str	r0, [r7, #12]
 800796a:	60b9      	str	r1, [r7, #8]
 800796c:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800796e:	687a      	ldr	r2, [r7, #4]
 8007970:	68b9      	ldr	r1, [r7, #8]
 8007972:	68f8      	ldr	r0, [r7, #12]
 8007974:	f000 f841 	bl	80079fa <_ZSt4copyIPKdPdET0_T_S4_S3_>
 8007978:	4603      	mov	r3, r0
 800797a:	4618      	mov	r0, r3
 800797c:	3710      	adds	r7, #16
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}

08007982 <_ZNSt16allocator_traitsISaIiEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a) noexcept
 8007982:	b580      	push	{r7, lr}
 8007984:	b082      	sub	sp, #8
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f7fb f95c 	bl	8002c48 <_ZNK9__gnu_cxx13new_allocatorIiE8max_sizeEv>
 8007990:	4603      	mov	r3, r0
 8007992:	4618      	mov	r0, r3
 8007994:	3708      	adds	r7, #8
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}

0800799a <_ZN9__gnu_cxx13new_allocatorIiEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800799a:	b480      	push	{r7}
 800799c:	b083      	sub	sp, #12
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
 80079a2:	6039      	str	r1, [r7, #0]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	4618      	mov	r0, r3
 80079a8:	370c      	adds	r7, #12
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bc80      	pop	{r7}
 80079ae:	4770      	bx	lr

080079b0 <_ZSt12__niter_baseIPKiET_S2_>:
    __niter_base(_Iterator __it)
 80079b0:	b480      	push	{r7}
 80079b2:	b083      	sub	sp, #12
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
    { return __it; }
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	4618      	mov	r0, r3
 80079bc:	370c      	adds	r7, #12
 80079be:	46bd      	mov	sp, r7
 80079c0:	bc80      	pop	{r7}
 80079c2:	4770      	bx	lr

080079c4 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKiPiEET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	60b9      	str	r1, [r7, #8]
 80079ce:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80079d0:	687a      	ldr	r2, [r7, #4]
 80079d2:	68b9      	ldr	r1, [r7, #8]
 80079d4:	68f8      	ldr	r0, [r7, #12]
 80079d6:	f7ff fe49 	bl	800766c <_ZSt4copyIPKiPiET0_T_S4_S3_>
 80079da:	4603      	mov	r3, r0
 80079dc:	4618      	mov	r0, r3
 80079de:	3710      	adds	r7, #16
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <_ZNK9__gnu_cxx13new_allocatorIdE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80079e4:	b480      	push	{r7}
 80079e6:	b083      	sub	sp, #12
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80079ec:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      }
 80079f0:	4618      	mov	r0, r3
 80079f2:	370c      	adds	r7, #12
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bc80      	pop	{r7}
 80079f8:	4770      	bx	lr

080079fa <_ZSt4copyIPKdPdET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 80079fa:	b590      	push	{r4, r7, lr}
 80079fc:	b085      	sub	sp, #20
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	60f8      	str	r0, [r7, #12]
 8007a02:	60b9      	str	r1, [r7, #8]
 8007a04:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8007a06:	68f8      	ldr	r0, [r7, #12]
 8007a08:	f000 f80f 	bl	8007a2a <_ZSt12__miter_baseIPKdET_S2_>
 8007a0c:	4604      	mov	r4, r0
 8007a0e:	68b8      	ldr	r0, [r7, #8]
 8007a10:	f000 f80b 	bl	8007a2a <_ZSt12__miter_baseIPKdET_S2_>
 8007a14:	4603      	mov	r3, r0
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	4619      	mov	r1, r3
 8007a1a:	4620      	mov	r0, r4
 8007a1c:	f000 f80f 	bl	8007a3e <_ZSt14__copy_move_a2ILb0EPKdPdET1_T0_S4_S3_>
 8007a20:	4603      	mov	r3, r0
    }
 8007a22:	4618      	mov	r0, r3
 8007a24:	3714      	adds	r7, #20
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd90      	pop	{r4, r7, pc}

08007a2a <_ZSt12__miter_baseIPKdET_S2_>:
    __miter_base(_Iterator __it)
 8007a2a:	b480      	push	{r7}
 8007a2c:	b083      	sub	sp, #12
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	6078      	str	r0, [r7, #4]
    { return __it; }
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	4618      	mov	r0, r3
 8007a36:	370c      	adds	r7, #12
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bc80      	pop	{r7}
 8007a3c:	4770      	bx	lr

08007a3e <_ZSt14__copy_move_a2ILb0EPKdPdET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8007a3e:	b5b0      	push	{r4, r5, r7, lr}
 8007a40:	b084      	sub	sp, #16
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	60f8      	str	r0, [r7, #12]
 8007a46:	60b9      	str	r1, [r7, #8]
 8007a48:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8007a4a:	68f8      	ldr	r0, [r7, #12]
 8007a4c:	f000 f81a 	bl	8007a84 <_ZSt12__niter_baseIPKdET_S2_>
 8007a50:	4604      	mov	r4, r0
 8007a52:	68b8      	ldr	r0, [r7, #8]
 8007a54:	f000 f816 	bl	8007a84 <_ZSt12__niter_baseIPKdET_S2_>
 8007a58:	4605      	mov	r5, r0
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f000 f81b 	bl	8007a98 <_ZSt12__niter_baseIPdET_S1_>
 8007a62:	4603      	mov	r3, r0
 8007a64:	461a      	mov	r2, r3
 8007a66:	4629      	mov	r1, r5
 8007a68:	4620      	mov	r0, r4
 8007a6a:	f000 f81f 	bl	8007aac <_ZSt13__copy_move_aILb0EPKdPdET1_T0_S4_S3_>
 8007a6e:	4602      	mov	r2, r0
 8007a70:	1d3b      	adds	r3, r7, #4
 8007a72:	4611      	mov	r1, r2
 8007a74:	4618      	mov	r0, r3
 8007a76:	f000 f82b 	bl	8007ad0 <_ZSt12__niter_wrapIPdET_RKS1_S1_>
 8007a7a:	4603      	mov	r3, r0
    }
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3710      	adds	r7, #16
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bdb0      	pop	{r4, r5, r7, pc}

08007a84 <_ZSt12__niter_baseIPKdET_S2_>:
    __niter_base(_Iterator __it)
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
    { return __it; }
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	4618      	mov	r0, r3
 8007a90:	370c      	adds	r7, #12
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bc80      	pop	{r7}
 8007a96:	4770      	bx	lr

08007a98 <_ZSt12__niter_baseIPdET_S1_>:
    __niter_base(_Iterator __it)
 8007a98:	b480      	push	{r7}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	370c      	adds	r7, #12
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bc80      	pop	{r7}
 8007aaa:	4770      	bx	lr

08007aac <_ZSt13__copy_move_aILb0EPKdPdET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b086      	sub	sp, #24
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	60b9      	str	r1, [r7, #8]
 8007ab6:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 8007ab8:	2301      	movs	r3, #1
 8007aba:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	68b9      	ldr	r1, [r7, #8]
 8007ac0:	68f8      	ldr	r0, [r7, #12]
 8007ac2:	f000 f810 	bl	8007ae6 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_>
 8007ac6:	4603      	mov	r3, r0
    }
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3718      	adds	r7, #24
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <_ZSt12__niter_wrapIPdET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8007ad0:	b480      	push	{r7}
 8007ad2:	b083      	sub	sp, #12
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]
    { return __res; }
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	4618      	mov	r0, r3
 8007ade:	370c      	adds	r7, #12
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bc80      	pop	{r7}
 8007ae4:	4770      	bx	lr

08007ae6 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8007ae6:	b580      	push	{r7, lr}
 8007ae8:	b086      	sub	sp, #24
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	60f8      	str	r0, [r7, #12]
 8007aee:	60b9      	str	r1, [r7, #8]
 8007af0:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8007af2:	68ba      	ldr	r2, [r7, #8]
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	1ad3      	subs	r3, r2, r3
 8007af8:	10db      	asrs	r3, r3, #3
 8007afa:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d006      	beq.n	8007b10 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	00db      	lsls	r3, r3, #3
 8007b06:	461a      	mov	r2, r3
 8007b08:	68f9      	ldr	r1, [r7, #12]
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f001 fbae 	bl	800926c <memmove>
	  return __result + _Num;
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	00db      	lsls	r3, r3, #3
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	4413      	add	r3, r2
	}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3718      	adds	r7, #24
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <_ZN15Kalman_FiltresiC1Ev>:
#include "Kalman.hpp"
#include <math.h>


Kalman_Filtresi::Kalman_Filtresi() : lpf(LP_FILTER_CUT_FREQ,st) {
 8007b20:	b590      	push	{r4, r7, lr}
 8007b22:	b083      	sub	sp, #12
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6879      	ldr	r1, [r7, #4]
 8007b2a:	a327      	add	r3, pc, #156	; (adr r3, 8007bc8 <_ZN15Kalman_FiltresiC1Ev+0xa8>)
 8007b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b30:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8007b34:	6879      	ldr	r1, [r7, #4]
 8007b36:	a324      	add	r3, pc, #144	; (adr r3, 8007bc8 <_ZN15Kalman_FiltresiC1Ev+0xa8>)
 8007b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b3c:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
 8007b40:	6879      	ldr	r1, [r7, #4]
 8007b42:	a323      	add	r3, pc, #140	; (adr r3, 8007bd0 <_ZN15Kalman_FiltresiC1Ev+0xb0>)
 8007b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b48:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
 8007b4c:	6879      	ldr	r1, [r7, #4]
 8007b4e:	a320      	add	r3, pc, #128	; (adr r3, 8007bd0 <_ZN15Kalman_FiltresiC1Ev+0xb0>)
 8007b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b54:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
 8007b58:	6879      	ldr	r1, [r7, #4]
 8007b5a:	f04f 0200 	mov.w	r2, #0
 8007b5e:	4b1e      	ldr	r3, [pc, #120]	; (8007bd8 <_ZN15Kalman_FiltresiC1Ev+0xb8>)
 8007b60:	e9c1 2336 	strd	r2, r3, [r1, #216]	; 0xd8
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	4a1d      	ldr	r2, [pc, #116]	; (8007bdc <_ZN15Kalman_FiltresiC1Ev+0xbc>)
 8007b68:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	22c8      	movs	r2, #200	; 0xc8
 8007b70:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f7f9 f890 	bl	8000ca0 <__aeabi_i2f>
 8007b80:	4603      	mov	r3, r0
 8007b82:	4619      	mov	r1, r3
 8007b84:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007b88:	f7f9 f992 	bl	8000eb0 <__aeabi_fdiv>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f7f8 fc42 	bl	8000418 <__aeabi_f2d>
 8007b94:	4602      	mov	r2, r0
 8007b96:	460b      	mov	r3, r1
 8007b98:	6879      	ldr	r1, [r7, #4]
 8007b9a:	e9c1 233e 	strd	r2, r3, [r1, #248]	; 0xf8
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f503 7480 	add.w	r4, r3, #256	; 0x100
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	e9d3 233e 	ldrd	r2, r3, [r3, #248]	; 0xf8
 8007baa:	4610      	mov	r0, r2
 8007bac:	4619      	mov	r1, r3
 8007bae:	f7f8 ff6d 	bl	8000a8c <__aeabi_d2f>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	490a      	ldr	r1, [pc, #40]	; (8007be0 <_ZN15Kalman_FiltresiC1Ev+0xc0>)
 8007bb8:	4620      	mov	r0, r4
 8007bba:	f000 fc45 	bl	8008448 <_ZN13LowPassFilterC1Eff>

}
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	370c      	adds	r7, #12
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd90      	pop	{r4, r7, pc}
 8007bc8:	47ae147b 	.word	0x47ae147b
 8007bcc:	3f847ae1 	.word	0x3f847ae1
 8007bd0:	47ae147b 	.word	0x47ae147b
 8007bd4:	3f947ae1 	.word	0x3f947ae1
 8007bd8:	3ff00000 	.word	0x3ff00000
 8007bdc:	42654ca3 	.word	0x42654ca3
 8007be0:	427b3333 	.word	0x427b3333

08007be4 <_ZN15Kalman_Filtresi3RunEPfS0_>:


void Kalman_Filtresi::Run(float gyro[3], float acc[3]) {
 8007be4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007be8:	b090      	sub	sp, #64	; 0x40
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	61f8      	str	r0, [r7, #28]
 8007bee:	61b9      	str	r1, [r7, #24]
 8007bf0:	617a      	str	r2, [r7, #20]

  float accX = acc[0]; 
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
  float accY = acc[1];
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	63bb      	str	r3, [r7, #56]	; 0x38
  float accZ = acc[2];
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	637b      	str	r3, [r7, #52]	; 0x34

  float gyroX = gyro[0]; 
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	633b      	str	r3, [r7, #48]	; 0x30
  float gyroY = gyro[1];
 8007c0a:	69bb      	ldr	r3, [r7, #24]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  float gyroZ = gyro[2];
 8007c10:	69bb      	ldr	r3, [r7, #24]
 8007c12:	689b      	ldr	r3, [r3, #8]
 8007c14:	62bb      	str	r3, [r7, #40]	; 0x28

    //---IMU KİSMİ----
    //=================================
  float acctop=sqrt(accX*accX+accY*accY+accZ*accZ);
 8007c16:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007c18:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007c1a:	f7f9 f895 	bl	8000d48 <__aeabi_fmul>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	461c      	mov	r4, r3
 8007c22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007c24:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007c26:	f7f9 f88f 	bl	8000d48 <__aeabi_fmul>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	4620      	mov	r0, r4
 8007c30:	f7f8 ff82 	bl	8000b38 <__addsf3>
 8007c34:	4603      	mov	r3, r0
 8007c36:	461c      	mov	r4, r3
 8007c38:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007c3a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007c3c:	f7f9 f884 	bl	8000d48 <__aeabi_fmul>
 8007c40:	4603      	mov	r3, r0
 8007c42:	4619      	mov	r1, r3
 8007c44:	4620      	mov	r0, r4
 8007c46:	f7f8 ff77 	bl	8000b38 <__addsf3>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f7f9 fa89 	bl	8001164 <_ZSt4sqrtf>
 8007c52:	6278      	str	r0, [r7, #36]	; 0x24

  pitch_acc =  asin(accX/acctop)*rad2deg;
 8007c54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007c56:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007c58:	f7f9 f92a 	bl	8000eb0 <__aeabi_fdiv>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f7f9 fa74 	bl	800114c <_ZSt4asinf>
 8007c64:	4602      	mov	r2, r0
 8007c66:	69fb      	ldr	r3, [r7, #28]
 8007c68:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	4610      	mov	r0, r2
 8007c70:	f7f9 f86a 	bl	8000d48 <__aeabi_fmul>
 8007c74:	4603      	mov	r3, r0
 8007c76:	461a      	mov	r2, r3
 8007c78:	69fb      	ldr	r3, [r7, #28]
 8007c7a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  roll_acc  =  asin(accY/acctop)*rad2deg;
 8007c7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007c80:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007c82:	f7f9 f915 	bl	8000eb0 <__aeabi_fdiv>
 8007c86:	4603      	mov	r3, r0
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f7f9 fa5f 	bl	800114c <_ZSt4asinf>
 8007c8e:	4602      	mov	r2, r0
 8007c90:	69fb      	ldr	r3, [r7, #28]
 8007c92:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8007c96:	4619      	mov	r1, r3
 8007c98:	4610      	mov	r0, r2
 8007c9a:	f7f9 f855 	bl	8000d48 <__aeabi_fmul>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	69fb      	ldr	r3, [r7, #28]
 8007ca4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
  //yaw_acc   =  asin(accZ/acctop)*rad2deg;

  pitch_acc = lpf.update(pitch_acc);
 8007ca8:	69fb      	ldr	r3, [r7, #28]
 8007caa:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8007cae:	69fb      	ldr	r3, [r7, #28]
 8007cb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	4610      	mov	r0, r2
 8007cb8:	f000 fc10 	bl	80084dc <_ZN13LowPassFilter6updateEf>
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	69fb      	ldr	r3, [r7, #28]
 8007cc0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  roll_acc = lpf.update(roll_acc);
 8007cc4:	69fb      	ldr	r3, [r7, #28]
 8007cc6:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8007cca:	69fb      	ldr	r3, [r7, #28]
 8007ccc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	4610      	mov	r0, r2
 8007cd4:	f000 fc02 	bl	80084dc <_ZN13LowPassFilter6updateEf>
 8007cd8:	4602      	mov	r2, r0
 8007cda:	69fb      	ldr	r3, [r7, #28]
 8007cdc:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    //printf("\npitc_acc: %.2f", pitch_acc);
  #endif
    
  //Pitch angle
	//**Tahmin**
	pitch = pitch  - pitch_bias*st + gyroY*st;
 8007ce0:	69fb      	ldr	r3, [r7, #28]
 8007ce2:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8007ce6:	69fb      	ldr	r3, [r7, #28]
 8007ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cea:	4618      	mov	r0, r3
 8007cec:	f7f8 fb94 	bl	8000418 <__aeabi_f2d>
 8007cf0:	69fb      	ldr	r3, [r7, #28]
 8007cf2:	e9d3 233e 	ldrd	r2, r3, [r3, #248]	; 0xf8
 8007cf6:	f7f8 fbe7 	bl	80004c8 <__aeabi_dmul>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	4620      	mov	r0, r4
 8007d00:	4629      	mov	r1, r5
 8007d02:	f7f8 fa29 	bl	8000158 <__aeabi_dsub>
 8007d06:	4602      	mov	r2, r0
 8007d08:	460b      	mov	r3, r1
 8007d0a:	4614      	mov	r4, r2
 8007d0c:	461d      	mov	r5, r3
 8007d0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d10:	f7f8 fb82 	bl	8000418 <__aeabi_f2d>
 8007d14:	69fb      	ldr	r3, [r7, #28]
 8007d16:	e9d3 233e 	ldrd	r2, r3, [r3, #248]	; 0xf8
 8007d1a:	f7f8 fbd5 	bl	80004c8 <__aeabi_dmul>
 8007d1e:	4602      	mov	r2, r0
 8007d20:	460b      	mov	r3, r1
 8007d22:	4620      	mov	r0, r4
 8007d24:	4629      	mov	r1, r5
 8007d26:	f7f8 fa19 	bl	800015c <__adddf3>
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	69f9      	ldr	r1, [r7, #28]
 8007d30:	e9c1 2302 	strd	r2, r3, [r1, #8]
	S11_m_pitch = 2*sa_p+st*st*sb_p; S12_m_pitch=-st*sb_p;
 8007d34:	69fb      	ldr	r3, [r7, #28]
 8007d36:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8007d3a:	4602      	mov	r2, r0
 8007d3c:	460b      	mov	r3, r1
 8007d3e:	f7f8 fa0d 	bl	800015c <__adddf3>
 8007d42:	4602      	mov	r2, r0
 8007d44:	460b      	mov	r3, r1
 8007d46:	4614      	mov	r4, r2
 8007d48:	461d      	mov	r5, r3
 8007d4a:	69fb      	ldr	r3, [r7, #28]
 8007d4c:	e9d3 013e 	ldrd	r0, r1, [r3, #248]	; 0xf8
 8007d50:	69fb      	ldr	r3, [r7, #28]
 8007d52:	e9d3 233e 	ldrd	r2, r3, [r3, #248]	; 0xf8
 8007d56:	f7f8 fbb7 	bl	80004c8 <__aeabi_dmul>
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	460b      	mov	r3, r1
 8007d5e:	4610      	mov	r0, r2
 8007d60:	4619      	mov	r1, r3
 8007d62:	69fb      	ldr	r3, [r7, #28]
 8007d64:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8007d68:	f7f8 fbae 	bl	80004c8 <__aeabi_dmul>
 8007d6c:	4602      	mov	r2, r0
 8007d6e:	460b      	mov	r3, r1
 8007d70:	4620      	mov	r0, r4
 8007d72:	4629      	mov	r1, r5
 8007d74:	f7f8 f9f2 	bl	800015c <__adddf3>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	460b      	mov	r3, r1
 8007d7c:	4610      	mov	r0, r2
 8007d7e:	4619      	mov	r1, r3
 8007d80:	f7f8 fe84 	bl	8000a8c <__aeabi_d2f>
 8007d84:	4602      	mov	r2, r0
 8007d86:	69fb      	ldr	r3, [r7, #28]
 8007d88:	63da      	str	r2, [r3, #60]	; 0x3c
 8007d8a:	69fb      	ldr	r3, [r7, #28]
 8007d8c:	e9d3 233e 	ldrd	r2, r3, [r3, #248]	; 0xf8
 8007d90:	4692      	mov	sl, r2
 8007d92:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8007d96:	69fb      	ldr	r3, [r7, #28]
 8007d98:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8007d9c:	4650      	mov	r0, sl
 8007d9e:	4659      	mov	r1, fp
 8007da0:	f7f8 fb92 	bl	80004c8 <__aeabi_dmul>
 8007da4:	4602      	mov	r2, r0
 8007da6:	460b      	mov	r3, r1
 8007da8:	4610      	mov	r0, r2
 8007daa:	4619      	mov	r1, r3
 8007dac:	f7f8 fe6e 	bl	8000a8c <__aeabi_d2f>
 8007db0:	4602      	mov	r2, r0
 8007db2:	69fb      	ldr	r3, [r7, #28]
 8007db4:	641a      	str	r2, [r3, #64]	; 0x40
	S21_m_pitch = -st*sb_p; 	   S22_m_pitch=2*sb_p;
 8007db6:	69fb      	ldr	r3, [r7, #28]
 8007db8:	e9d3 233e 	ldrd	r2, r3, [r3, #248]	; 0xf8
 8007dbc:	4690      	mov	r8, r2
 8007dbe:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8007dc2:	69fb      	ldr	r3, [r7, #28]
 8007dc4:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8007dc8:	4640      	mov	r0, r8
 8007dca:	4649      	mov	r1, r9
 8007dcc:	f7f8 fb7c 	bl	80004c8 <__aeabi_dmul>
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	460b      	mov	r3, r1
 8007dd4:	4610      	mov	r0, r2
 8007dd6:	4619      	mov	r1, r3
 8007dd8:	f7f8 fe58 	bl	8000a8c <__aeabi_d2f>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	69fb      	ldr	r3, [r7, #28]
 8007de0:	645a      	str	r2, [r3, #68]	; 0x44
 8007de2:	69fb      	ldr	r3, [r7, #28]
 8007de4:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 8007de8:	4602      	mov	r2, r0
 8007dea:	460b      	mov	r3, r1
 8007dec:	f7f8 f9b6 	bl	800015c <__adddf3>
 8007df0:	4602      	mov	r2, r0
 8007df2:	460b      	mov	r3, r1
 8007df4:	4610      	mov	r0, r2
 8007df6:	4619      	mov	r1, r3
 8007df8:	f7f8 fe48 	bl	8000a8c <__aeabi_d2f>
 8007dfc:	4602      	mov	r2, r0
 8007dfe:	69fb      	ldr	r3, [r7, #28]
 8007e00:	649a      	str	r2, [r3, #72]	; 0x48

	//**Düzeltme**
	Kt11_pitch = S11_m_pitch / (S11_m_pitch+Q);
 8007e02:	69fb      	ldr	r3, [r7, #28]
 8007e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e06:	4618      	mov	r0, r3
 8007e08:	f7f8 fb06 	bl	8000418 <__aeabi_f2d>
 8007e0c:	4604      	mov	r4, r0
 8007e0e:	460d      	mov	r5, r1
 8007e10:	69fb      	ldr	r3, [r7, #28]
 8007e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e14:	4618      	mov	r0, r3
 8007e16:	f7f8 faff 	bl	8000418 <__aeabi_f2d>
 8007e1a:	69fb      	ldr	r3, [r7, #28]
 8007e1c:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 8007e20:	f7f8 f99c 	bl	800015c <__adddf3>
 8007e24:	4602      	mov	r2, r0
 8007e26:	460b      	mov	r3, r1
 8007e28:	4620      	mov	r0, r4
 8007e2a:	4629      	mov	r1, r5
 8007e2c:	f7f8 fc76 	bl	800071c <__aeabi_ddiv>
 8007e30:	4602      	mov	r2, r0
 8007e32:	460b      	mov	r3, r1
 8007e34:	4610      	mov	r0, r2
 8007e36:	4619      	mov	r1, r3
 8007e38:	f7f8 fe28 	bl	8000a8c <__aeabi_d2f>
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	69fb      	ldr	r3, [r7, #28]
 8007e40:	65da      	str	r2, [r3, #92]	; 0x5c
	Kt21_pitch = S21_m_pitch / (S21_m_pitch+Q);
 8007e42:	69fb      	ldr	r3, [r7, #28]
 8007e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e46:	4618      	mov	r0, r3
 8007e48:	f7f8 fae6 	bl	8000418 <__aeabi_f2d>
 8007e4c:	4604      	mov	r4, r0
 8007e4e:	460d      	mov	r5, r1
 8007e50:	69fb      	ldr	r3, [r7, #28]
 8007e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e54:	4618      	mov	r0, r3
 8007e56:	f7f8 fadf 	bl	8000418 <__aeabi_f2d>
 8007e5a:	69fb      	ldr	r3, [r7, #28]
 8007e5c:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 8007e60:	f7f8 f97c 	bl	800015c <__adddf3>
 8007e64:	4602      	mov	r2, r0
 8007e66:	460b      	mov	r3, r1
 8007e68:	4620      	mov	r0, r4
 8007e6a:	4629      	mov	r1, r5
 8007e6c:	f7f8 fc56 	bl	800071c <__aeabi_ddiv>
 8007e70:	4602      	mov	r2, r0
 8007e72:	460b      	mov	r3, r1
 8007e74:	4610      	mov	r0, r2
 8007e76:	4619      	mov	r1, r3
 8007e78:	f7f8 fe08 	bl	8000a8c <__aeabi_d2f>
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	69fb      	ldr	r3, [r7, #28]
 8007e80:	661a      	str	r2, [r3, #96]	; 0x60

	pitch = pitch - Kt11_pitch*(pitch-pitch_acc);
 8007e82:	69fb      	ldr	r3, [r7, #28]
 8007e84:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8007e88:	69fb      	ldr	r3, [r7, #28]
 8007e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f7f8 fac3 	bl	8000418 <__aeabi_f2d>
 8007e92:	4682      	mov	sl, r0
 8007e94:	468b      	mov	fp, r1
 8007e96:	69fb      	ldr	r3, [r7, #28]
 8007e98:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f7f8 fab8 	bl	8000418 <__aeabi_f2d>
 8007ea8:	4602      	mov	r2, r0
 8007eaa:	460b      	mov	r3, r1
 8007eac:	4620      	mov	r0, r4
 8007eae:	4629      	mov	r1, r5
 8007eb0:	f7f8 f952 	bl	8000158 <__aeabi_dsub>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	460b      	mov	r3, r1
 8007eb8:	4650      	mov	r0, sl
 8007eba:	4659      	mov	r1, fp
 8007ebc:	f7f8 fb04 	bl	80004c8 <__aeabi_dmul>
 8007ec0:	4602      	mov	r2, r0
 8007ec2:	460b      	mov	r3, r1
 8007ec4:	4640      	mov	r0, r8
 8007ec6:	4649      	mov	r1, r9
 8007ec8:	f7f8 f946 	bl	8000158 <__aeabi_dsub>
 8007ecc:	4602      	mov	r2, r0
 8007ece:	460b      	mov	r3, r1
 8007ed0:	69f9      	ldr	r1, [r7, #28]
 8007ed2:	e9c1 2302 	strd	r2, r3, [r1, #8]
	pitch_bias = pitch_bias - Kt21_pitch*(pitch-pitch_acc);
 8007ed6:	69fb      	ldr	r3, [r7, #28]
 8007ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eda:	4618      	mov	r0, r3
 8007edc:	f7f8 fa9c 	bl	8000418 <__aeabi_f2d>
 8007ee0:	4680      	mov	r8, r0
 8007ee2:	4689      	mov	r9, r1
 8007ee4:	69fb      	ldr	r3, [r7, #28]
 8007ee6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f7f8 fa95 	bl	8000418 <__aeabi_f2d>
 8007eee:	4682      	mov	sl, r0
 8007ef0:	468b      	mov	fp, r1
 8007ef2:	69fb      	ldr	r3, [r7, #28]
 8007ef4:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8007ef8:	69fb      	ldr	r3, [r7, #28]
 8007efa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007efe:	4618      	mov	r0, r3
 8007f00:	f7f8 fa8a 	bl	8000418 <__aeabi_f2d>
 8007f04:	4602      	mov	r2, r0
 8007f06:	460b      	mov	r3, r1
 8007f08:	4620      	mov	r0, r4
 8007f0a:	4629      	mov	r1, r5
 8007f0c:	f7f8 f924 	bl	8000158 <__aeabi_dsub>
 8007f10:	4602      	mov	r2, r0
 8007f12:	460b      	mov	r3, r1
 8007f14:	4650      	mov	r0, sl
 8007f16:	4659      	mov	r1, fp
 8007f18:	f7f8 fad6 	bl	80004c8 <__aeabi_dmul>
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	460b      	mov	r3, r1
 8007f20:	4640      	mov	r0, r8
 8007f22:	4649      	mov	r1, r9
 8007f24:	f7f8 f918 	bl	8000158 <__aeabi_dsub>
 8007f28:	4602      	mov	r2, r0
 8007f2a:	460b      	mov	r3, r1
 8007f2c:	4610      	mov	r0, r2
 8007f2e:	4619      	mov	r1, r3
 8007f30:	f7f8 fdac 	bl	8000a8c <__aeabi_d2f>
 8007f34:	4602      	mov	r2, r0
 8007f36:	69fb      	ldr	r3, [r7, #28]
 8007f38:	631a      	str	r2, [r3, #48]	; 0x30

	S11_p_pitch = -S11_m_pitch*(Kt11_pitch-1);  S12_p_pitch = -S12_m_pitch*(Kt11_pitch-1);
 8007f3a:	69fb      	ldr	r3, [r7, #28]
 8007f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f3e:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8007f42:	69fb      	ldr	r3, [r7, #28]
 8007f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f46:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f7f8 fdf2 	bl	8000b34 <__aeabi_fsub>
 8007f50:	4603      	mov	r3, r0
 8007f52:	4619      	mov	r1, r3
 8007f54:	4620      	mov	r0, r4
 8007f56:	f7f8 fef7 	bl	8000d48 <__aeabi_fmul>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	69fb      	ldr	r3, [r7, #28]
 8007f60:	64da      	str	r2, [r3, #76]	; 0x4c
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f66:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8007f6a:	69fb      	ldr	r3, [r7, #28]
 8007f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f6e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8007f72:	4618      	mov	r0, r3
 8007f74:	f7f8 fdde 	bl	8000b34 <__aeabi_fsub>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	4619      	mov	r1, r3
 8007f7c:	4620      	mov	r0, r4
 8007f7e:	f7f8 fee3 	bl	8000d48 <__aeabi_fmul>
 8007f82:	4603      	mov	r3, r0
 8007f84:	461a      	mov	r2, r3
 8007f86:	69fb      	ldr	r3, [r7, #28]
 8007f88:	651a      	str	r2, [r3, #80]	; 0x50
	S21_p_pitch = S21_m_pitch-S11_m_pitch*Kt21_pitch; S22_p_pitch = S22_m_pitch-S12_m_pitch*Kt21_pitch;
 8007f8a:	69fb      	ldr	r3, [r7, #28]
 8007f8c:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8007f8e:	69fb      	ldr	r3, [r7, #28]
 8007f90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f92:	69fb      	ldr	r3, [r7, #28]
 8007f94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f96:	4619      	mov	r1, r3
 8007f98:	4610      	mov	r0, r2
 8007f9a:	f7f8 fed5 	bl	8000d48 <__aeabi_fmul>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	4619      	mov	r1, r3
 8007fa2:	4620      	mov	r0, r4
 8007fa4:	f7f8 fdc6 	bl	8000b34 <__aeabi_fsub>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	461a      	mov	r2, r3
 8007fac:	69fb      	ldr	r3, [r7, #28]
 8007fae:	655a      	str	r2, [r3, #84]	; 0x54
 8007fb0:	69fb      	ldr	r3, [r7, #28]
 8007fb2:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8007fb4:	69fb      	ldr	r3, [r7, #28]
 8007fb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007fb8:	69fb      	ldr	r3, [r7, #28]
 8007fba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	4610      	mov	r0, r2
 8007fc0:	f7f8 fec2 	bl	8000d48 <__aeabi_fmul>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	4620      	mov	r0, r4
 8007fca:	f7f8 fdb3 	bl	8000b34 <__aeabi_fsub>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	461a      	mov	r2, r3
 8007fd2:	69fb      	ldr	r3, [r7, #28]
 8007fd4:	659a      	str	r2, [r3, #88]	; 0x58

	S11_m_pitch = S11_p_pitch; S12_m_pitch = S12_p_pitch; S21_m_pitch = S21_p_pitch; S22_m_pitch = S22_p_pitch; 
 8007fd6:	69fb      	ldr	r3, [r7, #28]
 8007fd8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007fda:	69fb      	ldr	r3, [r7, #28]
 8007fdc:	63da      	str	r2, [r3, #60]	; 0x3c
 8007fde:	69fb      	ldr	r3, [r7, #28]
 8007fe0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007fe2:	69fb      	ldr	r3, [r7, #28]
 8007fe4:	641a      	str	r2, [r3, #64]	; 0x40
 8007fe6:	69fb      	ldr	r3, [r7, #28]
 8007fe8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007fea:	69fb      	ldr	r3, [r7, #28]
 8007fec:	645a      	str	r2, [r3, #68]	; 0x44
 8007fee:	69fb      	ldr	r3, [r7, #28]
 8007ff0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007ff2:	69fb      	ldr	r3, [r7, #28]
 8007ff4:	649a      	str	r2, [r3, #72]	; 0x48

  pitch_rate = gyroY;
 8007ff6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ff8:	f7f8 fa0e 	bl	8000418 <__aeabi_f2d>
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	460b      	mov	r3, r1
 8008000:	69f9      	ldr	r1, [r7, #28]
 8008002:	e9c1 2308 	strd	r2, r3, [r1, #32]
    //=================================

  //Roll angle
	//**Tahmin**
	roll = roll - roll_bias*st + gyroX*st;
 8008006:	69fb      	ldr	r3, [r7, #28]
 8008008:	e9d3 4500 	ldrd	r4, r5, [r3]
 800800c:	69fb      	ldr	r3, [r7, #28]
 800800e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008010:	4618      	mov	r0, r3
 8008012:	f7f8 fa01 	bl	8000418 <__aeabi_f2d>
 8008016:	69fb      	ldr	r3, [r7, #28]
 8008018:	e9d3 233e 	ldrd	r2, r3, [r3, #248]	; 0xf8
 800801c:	f7f8 fa54 	bl	80004c8 <__aeabi_dmul>
 8008020:	4602      	mov	r2, r0
 8008022:	460b      	mov	r3, r1
 8008024:	4620      	mov	r0, r4
 8008026:	4629      	mov	r1, r5
 8008028:	f7f8 f896 	bl	8000158 <__aeabi_dsub>
 800802c:	4602      	mov	r2, r0
 800802e:	460b      	mov	r3, r1
 8008030:	4614      	mov	r4, r2
 8008032:	461d      	mov	r5, r3
 8008034:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008036:	f7f8 f9ef 	bl	8000418 <__aeabi_f2d>
 800803a:	69fb      	ldr	r3, [r7, #28]
 800803c:	e9d3 233e 	ldrd	r2, r3, [r3, #248]	; 0xf8
 8008040:	f7f8 fa42 	bl	80004c8 <__aeabi_dmul>
 8008044:	4602      	mov	r2, r0
 8008046:	460b      	mov	r3, r1
 8008048:	4620      	mov	r0, r4
 800804a:	4629      	mov	r1, r5
 800804c:	f7f8 f886 	bl	800015c <__adddf3>
 8008050:	4602      	mov	r2, r0
 8008052:	460b      	mov	r3, r1
 8008054:	69f9      	ldr	r1, [r7, #28]
 8008056:	e9c1 2300 	strd	r2, r3, [r1]
	S11_m_roll = 2*sa+st*st*sb; S12_m_roll=-st*sb;
 800805a:	69fb      	ldr	r3, [r7, #28]
 800805c:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8008060:	4602      	mov	r2, r0
 8008062:	460b      	mov	r3, r1
 8008064:	f7f8 f87a 	bl	800015c <__adddf3>
 8008068:	4602      	mov	r2, r0
 800806a:	460b      	mov	r3, r1
 800806c:	4614      	mov	r4, r2
 800806e:	461d      	mov	r5, r3
 8008070:	69fb      	ldr	r3, [r7, #28]
 8008072:	e9d3 013e 	ldrd	r0, r1, [r3, #248]	; 0xf8
 8008076:	69fb      	ldr	r3, [r7, #28]
 8008078:	e9d3 233e 	ldrd	r2, r3, [r3, #248]	; 0xf8
 800807c:	f7f8 fa24 	bl	80004c8 <__aeabi_dmul>
 8008080:	4602      	mov	r2, r0
 8008082:	460b      	mov	r3, r1
 8008084:	4610      	mov	r0, r2
 8008086:	4619      	mov	r1, r3
 8008088:	69fb      	ldr	r3, [r7, #28]
 800808a:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 800808e:	f7f8 fa1b 	bl	80004c8 <__aeabi_dmul>
 8008092:	4602      	mov	r2, r0
 8008094:	460b      	mov	r3, r1
 8008096:	4620      	mov	r0, r4
 8008098:	4629      	mov	r1, r5
 800809a:	f7f8 f85f 	bl	800015c <__adddf3>
 800809e:	4602      	mov	r2, r0
 80080a0:	460b      	mov	r3, r1
 80080a2:	4610      	mov	r0, r2
 80080a4:	4619      	mov	r1, r3
 80080a6:	f7f8 fcf1 	bl	8000a8c <__aeabi_d2f>
 80080aa:	4602      	mov	r2, r0
 80080ac:	69fb      	ldr	r3, [r7, #28]
 80080ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80080b2:	69fb      	ldr	r3, [r7, #28]
 80080b4:	e9d3 233e 	ldrd	r2, r3, [r3, #248]	; 0xf8
 80080b8:	60ba      	str	r2, [r7, #8]
 80080ba:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80080be:	60fb      	str	r3, [r7, #12]
 80080c0:	69fb      	ldr	r3, [r7, #28]
 80080c2:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80080c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80080ca:	f7f8 f9fd 	bl	80004c8 <__aeabi_dmul>
 80080ce:	4602      	mov	r2, r0
 80080d0:	460b      	mov	r3, r1
 80080d2:	4610      	mov	r0, r2
 80080d4:	4619      	mov	r1, r3
 80080d6:	f7f8 fcd9 	bl	8000a8c <__aeabi_d2f>
 80080da:	4602      	mov	r2, r0
 80080dc:	69fb      	ldr	r3, [r7, #28]
 80080de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	S21_m_roll = -st*sb; 	   S22_m_roll=2*sb;
 80080e2:	69fb      	ldr	r3, [r7, #28]
 80080e4:	e9d3 233e 	ldrd	r2, r3, [r3, #248]	; 0xf8
 80080e8:	603a      	str	r2, [r7, #0]
 80080ea:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80080ee:	607b      	str	r3, [r7, #4]
 80080f0:	69fb      	ldr	r3, [r7, #28]
 80080f2:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80080f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80080fa:	f7f8 f9e5 	bl	80004c8 <__aeabi_dmul>
 80080fe:	4602      	mov	r2, r0
 8008100:	460b      	mov	r3, r1
 8008102:	4610      	mov	r0, r2
 8008104:	4619      	mov	r1, r3
 8008106:	f7f8 fcc1 	bl	8000a8c <__aeabi_d2f>
 800810a:	4602      	mov	r2, r0
 800810c:	69fb      	ldr	r3, [r7, #28]
 800810e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8008112:	69fb      	ldr	r3, [r7, #28]
 8008114:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8008118:	4602      	mov	r2, r0
 800811a:	460b      	mov	r3, r1
 800811c:	f7f8 f81e 	bl	800015c <__adddf3>
 8008120:	4602      	mov	r2, r0
 8008122:	460b      	mov	r3, r1
 8008124:	4610      	mov	r0, r2
 8008126:	4619      	mov	r1, r3
 8008128:	f7f8 fcb0 	bl	8000a8c <__aeabi_d2f>
 800812c:	4602      	mov	r2, r0
 800812e:	69fb      	ldr	r3, [r7, #28]
 8008130:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

	//**Düzeltme**
	Kt11_roll = S11_m_roll / (S11_m_roll+Q);
 8008134:	69fb      	ldr	r3, [r7, #28]
 8008136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800813a:	4618      	mov	r0, r3
 800813c:	f7f8 f96c 	bl	8000418 <__aeabi_f2d>
 8008140:	4604      	mov	r4, r0
 8008142:	460d      	mov	r5, r1
 8008144:	69fb      	ldr	r3, [r7, #28]
 8008146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800814a:	4618      	mov	r0, r3
 800814c:	f7f8 f964 	bl	8000418 <__aeabi_f2d>
 8008150:	69fb      	ldr	r3, [r7, #28]
 8008152:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 8008156:	f7f8 f801 	bl	800015c <__adddf3>
 800815a:	4602      	mov	r2, r0
 800815c:	460b      	mov	r3, r1
 800815e:	4620      	mov	r0, r4
 8008160:	4629      	mov	r1, r5
 8008162:	f7f8 fadb 	bl	800071c <__aeabi_ddiv>
 8008166:	4602      	mov	r2, r0
 8008168:	460b      	mov	r3, r1
 800816a:	4610      	mov	r0, r2
 800816c:	4619      	mov	r1, r3
 800816e:	f7f8 fc8d 	bl	8000a8c <__aeabi_d2f>
 8008172:	4602      	mov	r2, r0
 8008174:	69fb      	ldr	r3, [r7, #28]
 8008176:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	Kt21_roll = S21_m_roll / (S21_m_roll+Q);
 800817a:	69fb      	ldr	r3, [r7, #28]
 800817c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008180:	4618      	mov	r0, r3
 8008182:	f7f8 f949 	bl	8000418 <__aeabi_f2d>
 8008186:	4604      	mov	r4, r0
 8008188:	460d      	mov	r5, r1
 800818a:	69fb      	ldr	r3, [r7, #28]
 800818c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008190:	4618      	mov	r0, r3
 8008192:	f7f8 f941 	bl	8000418 <__aeabi_f2d>
 8008196:	69fb      	ldr	r3, [r7, #28]
 8008198:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 800819c:	f7f7 ffde 	bl	800015c <__adddf3>
 80081a0:	4602      	mov	r2, r0
 80081a2:	460b      	mov	r3, r1
 80081a4:	4620      	mov	r0, r4
 80081a6:	4629      	mov	r1, r5
 80081a8:	f7f8 fab8 	bl	800071c <__aeabi_ddiv>
 80081ac:	4602      	mov	r2, r0
 80081ae:	460b      	mov	r3, r1
 80081b0:	4610      	mov	r0, r2
 80081b2:	4619      	mov	r1, r3
 80081b4:	f7f8 fc6a 	bl	8000a8c <__aeabi_d2f>
 80081b8:	4602      	mov	r2, r0
 80081ba:	69fb      	ldr	r3, [r7, #28]
 80081bc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

	roll = roll - Kt11_roll*(roll-roll_acc);
 80081c0:	69fb      	ldr	r3, [r7, #28]
 80081c2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80081c6:	69fb      	ldr	r3, [r7, #28]
 80081c8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80081cc:	4618      	mov	r0, r3
 80081ce:	f7f8 f923 	bl	8000418 <__aeabi_f2d>
 80081d2:	4682      	mov	sl, r0
 80081d4:	468b      	mov	fp, r1
 80081d6:	69fb      	ldr	r3, [r7, #28]
 80081d8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80081dc:	69fb      	ldr	r3, [r7, #28]
 80081de:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80081e2:	4618      	mov	r0, r3
 80081e4:	f7f8 f918 	bl	8000418 <__aeabi_f2d>
 80081e8:	4602      	mov	r2, r0
 80081ea:	460b      	mov	r3, r1
 80081ec:	4640      	mov	r0, r8
 80081ee:	4649      	mov	r1, r9
 80081f0:	f7f7 ffb2 	bl	8000158 <__aeabi_dsub>
 80081f4:	4602      	mov	r2, r0
 80081f6:	460b      	mov	r3, r1
 80081f8:	4650      	mov	r0, sl
 80081fa:	4659      	mov	r1, fp
 80081fc:	f7f8 f964 	bl	80004c8 <__aeabi_dmul>
 8008200:	4602      	mov	r2, r0
 8008202:	460b      	mov	r3, r1
 8008204:	4620      	mov	r0, r4
 8008206:	4629      	mov	r1, r5
 8008208:	f7f7 ffa6 	bl	8000158 <__aeabi_dsub>
 800820c:	4602      	mov	r2, r0
 800820e:	460b      	mov	r3, r1
 8008210:	69f9      	ldr	r1, [r7, #28]
 8008212:	e9c1 2300 	strd	r2, r3, [r1]
	roll_bias = roll_bias - Kt21_roll*(roll-roll_acc);
 8008216:	69fb      	ldr	r3, [r7, #28]
 8008218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800821a:	4618      	mov	r0, r3
 800821c:	f7f8 f8fc 	bl	8000418 <__aeabi_f2d>
 8008220:	4680      	mov	r8, r0
 8008222:	4689      	mov	r9, r1
 8008224:	69fb      	ldr	r3, [r7, #28]
 8008226:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800822a:	4618      	mov	r0, r3
 800822c:	f7f8 f8f4 	bl	8000418 <__aeabi_f2d>
 8008230:	4682      	mov	sl, r0
 8008232:	468b      	mov	fp, r1
 8008234:	69fb      	ldr	r3, [r7, #28]
 8008236:	e9d3 4500 	ldrd	r4, r5, [r3]
 800823a:	69fb      	ldr	r3, [r7, #28]
 800823c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008240:	4618      	mov	r0, r3
 8008242:	f7f8 f8e9 	bl	8000418 <__aeabi_f2d>
 8008246:	4602      	mov	r2, r0
 8008248:	460b      	mov	r3, r1
 800824a:	4620      	mov	r0, r4
 800824c:	4629      	mov	r1, r5
 800824e:	f7f7 ff83 	bl	8000158 <__aeabi_dsub>
 8008252:	4602      	mov	r2, r0
 8008254:	460b      	mov	r3, r1
 8008256:	4650      	mov	r0, sl
 8008258:	4659      	mov	r1, fp
 800825a:	f7f8 f935 	bl	80004c8 <__aeabi_dmul>
 800825e:	4602      	mov	r2, r0
 8008260:	460b      	mov	r3, r1
 8008262:	4640      	mov	r0, r8
 8008264:	4649      	mov	r1, r9
 8008266:	f7f7 ff77 	bl	8000158 <__aeabi_dsub>
 800826a:	4602      	mov	r2, r0
 800826c:	460b      	mov	r3, r1
 800826e:	4610      	mov	r0, r2
 8008270:	4619      	mov	r1, r3
 8008272:	f7f8 fc0b 	bl	8000a8c <__aeabi_d2f>
 8008276:	4602      	mov	r2, r0
 8008278:	69fb      	ldr	r3, [r7, #28]
 800827a:	635a      	str	r2, [r3, #52]	; 0x34

	S11_p_roll = -S11_m_roll*(Kt11_roll-1);  S12_p_roll = -S12_m_roll*(Kt11_roll-1);
 800827c:	69fb      	ldr	r3, [r7, #28]
 800827e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008282:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8008286:	69fb      	ldr	r3, [r7, #28]
 8008288:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800828c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008290:	4618      	mov	r0, r3
 8008292:	f7f8 fc4f 	bl	8000b34 <__aeabi_fsub>
 8008296:	4603      	mov	r3, r0
 8008298:	4619      	mov	r1, r3
 800829a:	4620      	mov	r0, r4
 800829c:	f7f8 fd54 	bl	8000d48 <__aeabi_fmul>
 80082a0:	4603      	mov	r3, r0
 80082a2:	461a      	mov	r2, r3
 80082a4:	69fb      	ldr	r3, [r7, #28]
 80082a6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80082aa:	69fb      	ldr	r3, [r7, #28]
 80082ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082b0:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 80082b4:	69fb      	ldr	r3, [r7, #28]
 80082b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80082ba:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80082be:	4618      	mov	r0, r3
 80082c0:	f7f8 fc38 	bl	8000b34 <__aeabi_fsub>
 80082c4:	4603      	mov	r3, r0
 80082c6:	4619      	mov	r1, r3
 80082c8:	4620      	mov	r0, r4
 80082ca:	f7f8 fd3d 	bl	8000d48 <__aeabi_fmul>
 80082ce:	4603      	mov	r3, r0
 80082d0:	461a      	mov	r2, r3
 80082d2:	69fb      	ldr	r3, [r7, #28]
 80082d4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	S21_p_roll = S21_m_roll-S11_m_roll*Kt21_roll; S22_p_roll = S22_m_roll-S12_m_roll*Kt21_roll;
 80082d8:	69fb      	ldr	r3, [r7, #28]
 80082da:	f8d3 4090 	ldr.w	r4, [r3, #144]	; 0x90
 80082de:	69fb      	ldr	r3, [r7, #28]
 80082e0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80082e4:	69fb      	ldr	r3, [r7, #28]
 80082e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80082ea:	4619      	mov	r1, r3
 80082ec:	4610      	mov	r0, r2
 80082ee:	f7f8 fd2b 	bl	8000d48 <__aeabi_fmul>
 80082f2:	4603      	mov	r3, r0
 80082f4:	4619      	mov	r1, r3
 80082f6:	4620      	mov	r0, r4
 80082f8:	f7f8 fc1c 	bl	8000b34 <__aeabi_fsub>
 80082fc:	4603      	mov	r3, r0
 80082fe:	461a      	mov	r2, r3
 8008300:	69fb      	ldr	r3, [r7, #28]
 8008302:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8008306:	69fb      	ldr	r3, [r7, #28]
 8008308:	f8d3 4094 	ldr.w	r4, [r3, #148]	; 0x94
 800830c:	69fb      	ldr	r3, [r7, #28]
 800830e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008312:	69fb      	ldr	r3, [r7, #28]
 8008314:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008318:	4619      	mov	r1, r3
 800831a:	4610      	mov	r0, r2
 800831c:	f7f8 fd14 	bl	8000d48 <__aeabi_fmul>
 8008320:	4603      	mov	r3, r0
 8008322:	4619      	mov	r1, r3
 8008324:	4620      	mov	r0, r4
 8008326:	f7f8 fc05 	bl	8000b34 <__aeabi_fsub>
 800832a:	4603      	mov	r3, r0
 800832c:	461a      	mov	r2, r3
 800832e:	69fb      	ldr	r3, [r7, #28]
 8008330:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	S11_m_roll = S11_p_roll; S12_m_roll = S12_p_roll; S21_m_roll = S21_p_roll; S22_m_roll = S22_p_roll; 
 8008334:	69fb      	ldr	r3, [r7, #28]
 8008336:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800833a:	69fb      	ldr	r3, [r7, #28]
 800833c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8008340:	69fb      	ldr	r3, [r7, #28]
 8008342:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8008346:	69fb      	ldr	r3, [r7, #28]
 8008348:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800834c:	69fb      	ldr	r3, [r7, #28]
 800834e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8008352:	69fb      	ldr	r3, [r7, #28]
 8008354:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8008358:	69fb      	ldr	r3, [r7, #28]
 800835a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800835e:	69fb      	ldr	r3, [r7, #28]
 8008360:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  roll_rate = gyroX;
 8008364:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008366:	f7f8 f857 	bl	8000418 <__aeabi_f2d>
 800836a:	4602      	mov	r2, r0
 800836c:	460b      	mov	r3, r1
 800836e:	69f9      	ldr	r1, [r7, #28]
 8008370:	e9c1 2306 	strd	r2, r3, [r1, #24]

	S11_p_yaw = -S11_m_yaw*(Kt11_yaw-1);  S12_p_yaw = -S12_m_yaw*(Kt11_yaw-1);
	S21_p_yaw = S21_m_yaw-S11_m_yaw*Kt21_yaw; S22_p_yaw = S22_m_yaw-S12_m_yaw*Kt21_yaw;

	S11_m_yaw = S11_p_yaw; S12_m_yaw = S12_p_yaw; S21_m_yaw = S21_p_yaw; S22_m_yaw = S22_p_yaw; */
  yaw_rate = gyroZ;
 8008374:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008376:	f7f8 f84f 	bl	8000418 <__aeabi_f2d>
 800837a:	4602      	mov	r2, r0
 800837c:	460b      	mov	r3, r1
 800837e:	69f9      	ldr	r1, [r7, #28]
 8008380:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    //=================================

    state.angles[0] = roll;
 8008384:	69fb      	ldr	r3, [r7, #28]
 8008386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800838a:	4610      	mov	r0, r2
 800838c:	4619      	mov	r1, r3
 800838e:	f7f8 fb7d 	bl	8000a8c <__aeabi_d2f>
 8008392:	4602      	mov	r2, r0
 8008394:	69fb      	ldr	r3, [r7, #28]
 8008396:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    state.angles[1] = pitch;
 800839a:	69fb      	ldr	r3, [r7, #28]
 800839c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80083a0:	4610      	mov	r0, r2
 80083a2:	4619      	mov	r1, r3
 80083a4:	f7f8 fb72 	bl	8000a8c <__aeabi_d2f>
 80083a8:	4602      	mov	r2, r0
 80083aa:	69fb      	ldr	r3, [r7, #28]
 80083ac:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    state.angles[2] = yaw;
 80083b0:	69fb      	ldr	r3, [r7, #28]
 80083b2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80083b6:	4610      	mov	r0, r2
 80083b8:	4619      	mov	r1, r3
 80083ba:	f7f8 fb67 	bl	8000a8c <__aeabi_d2f>
 80083be:	4602      	mov	r2, r0
 80083c0:	69fb      	ldr	r3, [r7, #28]
 80083c2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

    state.rates[0] = roll_rate;
 80083c6:	69fb      	ldr	r3, [r7, #28]
 80083c8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80083cc:	4610      	mov	r0, r2
 80083ce:	4619      	mov	r1, r3
 80083d0:	f7f8 fb5c 	bl	8000a8c <__aeabi_d2f>
 80083d4:	4602      	mov	r2, r0
 80083d6:	69fb      	ldr	r3, [r7, #28]
 80083d8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    state.rates[1] = pitch_rate;
 80083dc:	69fb      	ldr	r3, [r7, #28]
 80083de:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80083e2:	4610      	mov	r0, r2
 80083e4:	4619      	mov	r1, r3
 80083e6:	f7f8 fb51 	bl	8000a8c <__aeabi_d2f>
 80083ea:	4602      	mov	r2, r0
 80083ec:	69fb      	ldr	r3, [r7, #28]
 80083ee:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    state.rates[2] = yaw_rate;
 80083f2:	69fb      	ldr	r3, [r7, #28]
 80083f4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80083f8:	4610      	mov	r0, r2
 80083fa:	4619      	mov	r1, r3
 80083fc:	f7f8 fb46 	bl	8000a8c <__aeabi_d2f>
 8008400:	4602      	mov	r2, r0
 8008402:	69fb      	ldr	r3, [r7, #28]
 8008404:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

    state.bias[0] = roll_bias;
 8008408:	69fb      	ldr	r3, [r7, #28]
 800840a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800840c:	69fb      	ldr	r3, [r7, #28]
 800840e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    state.bias[1] = pitch_bias;
 8008412:	69fb      	ldr	r3, [r7, #28]
 8008414:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008416:	69fb      	ldr	r3, [r7, #28]
 8008418:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    state.bias[2] = yaw_bias;
 800841c:	69fb      	ldr	r3, [r7, #28]
 800841e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008420:	69fb      	ldr	r3, [r7, #28]
 8008422:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

}
 8008426:	bf00      	nop
 8008428:	3740      	adds	r7, #64	; 0x40
 800842a:	46bd      	mov	sp, r7
 800842c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008430 <_ZN15Kalman_FiltresiD1Ev>:

Kalman_Filtresi::~Kalman_Filtresi() {}
 8008430:	b480      	push	{r7}
 8008432:	b083      	sub	sp, #12
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	4618      	mov	r0, r3
 800843c:	370c      	adds	r7, #12
 800843e:	46bd      	mov	sp, r7
 8008440:	bc80      	pop	{r7}
 8008442:	4770      	bx	lr
 8008444:	0000      	movs	r0, r0
	...

08008448 <_ZN13LowPassFilterC1Eff>:

LowPassFilter::LowPassFilter():
	output(0),
	ePow(0){}

LowPassFilter::LowPassFilter(float iCutOffFrequency, float iDeltaTime):
 8008448:	b5b0      	push	{r4, r5, r7, lr}
 800844a:	b084      	sub	sp, #16
 800844c:	af00      	add	r7, sp, #0
 800844e:	60f8      	str	r0, [r7, #12]
 8008450:	60b9      	str	r1, [r7, #8]
 8008452:	607a      	str	r2, [r7, #4]
	output(0),
	ePow(1-exp(-iDeltaTime * 2 * M_PI * iCutOffFrequency))
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f04f 0200 	mov.w	r2, #0
 800845a:	601a      	str	r2, [r3, #0]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008462:	4619      	mov	r1, r3
 8008464:	4618      	mov	r0, r3
 8008466:	f7f8 fb67 	bl	8000b38 <__addsf3>
 800846a:	4603      	mov	r3, r0
 800846c:	4618      	mov	r0, r3
 800846e:	f7f7 ffd3 	bl	8000418 <__aeabi_f2d>
 8008472:	a317      	add	r3, pc, #92	; (adr r3, 80084d0 <_ZN13LowPassFilterC1Eff+0x88>)
 8008474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008478:	f7f8 f826 	bl	80004c8 <__aeabi_dmul>
 800847c:	4602      	mov	r2, r0
 800847e:	460b      	mov	r3, r1
 8008480:	4614      	mov	r4, r2
 8008482:	461d      	mov	r5, r3
 8008484:	68b8      	ldr	r0, [r7, #8]
 8008486:	f7f7 ffc7 	bl	8000418 <__aeabi_f2d>
 800848a:	4602      	mov	r2, r0
 800848c:	460b      	mov	r3, r1
 800848e:	4620      	mov	r0, r4
 8008490:	4629      	mov	r1, r5
 8008492:	f7f8 f819 	bl	80004c8 <__aeabi_dmul>
 8008496:	4602      	mov	r2, r0
 8008498:	460b      	mov	r3, r1
 800849a:	4610      	mov	r0, r2
 800849c:	4619      	mov	r1, r3
 800849e:	f000 fb0f 	bl	8008ac0 <exp>
 80084a2:	4602      	mov	r2, r0
 80084a4:	460b      	mov	r3, r1
 80084a6:	f04f 0000 	mov.w	r0, #0
 80084aa:	490b      	ldr	r1, [pc, #44]	; (80084d8 <_ZN13LowPassFilterC1Eff+0x90>)
 80084ac:	f7f7 fe54 	bl	8000158 <__aeabi_dsub>
 80084b0:	4602      	mov	r2, r0
 80084b2:	460b      	mov	r3, r1
 80084b4:	4610      	mov	r0, r2
 80084b6:	4619      	mov	r1, r3
 80084b8:	f7f8 fae8 	bl	8000a8c <__aeabi_d2f>
 80084bc:	4602      	mov	r2, r0
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	605a      	str	r2, [r3, #4]
	if(iCutOffFrequency <= 0){
		std::cout << "Warning: A LowPassFilter instance has been configured with 0 Hz as cut-off frequency.";
		ePow = 0;
	}
	#endif
}
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	4618      	mov	r0, r3
 80084c6:	3710      	adds	r7, #16
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bdb0      	pop	{r4, r5, r7, pc}
 80084cc:	f3af 8000 	nop.w
 80084d0:	54442d18 	.word	0x54442d18
 80084d4:	400921fb 	.word	0x400921fb
 80084d8:	3ff00000 	.word	0x3ff00000

080084dc <_ZN13LowPassFilter6updateEf>:

float LowPassFilter::update(float input){
 80084dc:	b590      	push	{r4, r7, lr}
 80084de:	b083      	sub	sp, #12
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	6039      	str	r1, [r7, #0]
	return output += (input - output) * ePow;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681c      	ldr	r4, [r3, #0]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4619      	mov	r1, r3
 80084f0:	6838      	ldr	r0, [r7, #0]
 80084f2:	f7f8 fb1f 	bl	8000b34 <__aeabi_fsub>
 80084f6:	4603      	mov	r3, r0
 80084f8:	461a      	mov	r2, r3
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	4619      	mov	r1, r3
 8008500:	4610      	mov	r0, r2
 8008502:	f7f8 fc21 	bl	8000d48 <__aeabi_fmul>
 8008506:	4603      	mov	r3, r0
 8008508:	4619      	mov	r1, r3
 800850a:	4620      	mov	r0, r4
 800850c:	f7f8 fb14 	bl	8000b38 <__addsf3>
 8008510:	4603      	mov	r3, r0
 8008512:	461a      	mov	r2, r3
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	601a      	str	r2, [r3, #0]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
}
 800851c:	4618      	mov	r0, r3
 800851e:	370c      	adds	r7, #12
 8008520:	46bd      	mov	sp, r7
 8008522:	bd90      	pop	{r4, r7, pc}

08008524 <_ZN3PIDC1Ev>:
#include "PID.hpp"

PID::PID() {};
 8008524:	b580      	push	{r7, lr}
 8008526:	b082      	sub	sp, #8
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	4a0e      	ldr	r2, [pc, #56]	; (8008568 <_ZN3PIDC1Ev+0x44>)
 8008530:	619a      	str	r2, [r3, #24]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	4a0d      	ldr	r2, [pc, #52]	; (800856c <_ZN3PIDC1Ev+0x48>)
 8008536:	61da      	str	r2, [r3, #28]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2228      	movs	r2, #40	; 0x28
 800853c:	621a      	str	r2, [r3, #32]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6a1b      	ldr	r3, [r3, #32]
 8008542:	4618      	mov	r0, r3
 8008544:	f7f8 fbac 	bl	8000ca0 <__aeabi_i2f>
 8008548:	4603      	mov	r3, r0
 800854a:	4619      	mov	r1, r3
 800854c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008550:	f7f8 fcae 	bl	8000eb0 <__aeabi_fdiv>
 8008554:	4603      	mov	r3, r0
 8008556:	461a      	mov	r2, r3
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	625a      	str	r2, [r3, #36]	; 0x24
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	4618      	mov	r0, r3
 8008560:	3708      	adds	r7, #8
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}
 8008566:	bf00      	nop
 8008568:	42f00000 	.word	0x42f00000
 800856c:	c2f00000 	.word	0xc2f00000

08008570 <_ZN3PID7P_AngleEddd>:

double PID::P_Angle(double alpha_des, double alpha, double Kp_angle) {
 8008570:	b580      	push	{r7, lr}
 8008572:	b088      	sub	sp, #32
 8008574:	af00      	add	r7, sp, #0
 8008576:	60f8      	str	r0, [r7, #12]
 8008578:	e9c7 2300 	strd	r2, r3, [r7]
	double P;
	double e = alpha_des - alpha;
 800857c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008580:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008584:	f7f7 fde8 	bl	8000158 <__aeabi_dsub>
 8008588:	4602      	mov	r2, r0
 800858a:	460b      	mov	r3, r1
 800858c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	P = Kp_angle*e;
 8008590:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008594:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008598:	f7f7 ff96 	bl	80004c8 <__aeabi_dmul>
 800859c:	4602      	mov	r2, r0
 800859e:	460b      	mov	r3, r1
 80085a0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    return P;
 80085a4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]

}
 80085a8:	4610      	mov	r0, r2
 80085aa:	4619      	mov	r1, r3
 80085ac:	3720      	adds	r7, #32
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
	...

080085b4 <_ZN3PID7PD_RateEddddd>:


double PID::PD_Rate(double alpha_dot_des, double alpha_dot, double Kp, double Ki, double Kd) {
 80085b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085b6:	b093      	sub	sp, #76	; 0x4c
 80085b8:	af02      	add	r7, sp, #8
 80085ba:	60f8      	str	r0, [r7, #12]
 80085bc:	e9c7 2300 	strd	r2, r3, [r7]
	double P, I, D, pd,de;
	e_eski_roll = e_roll;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681a      	ldr	r2, [r3, #0]
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	609a      	str	r2, [r3, #8]
	e_roll = alpha_dot_des - alpha_dot;
 80085c8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80085cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80085d0:	f7f7 fdc2 	bl	8000158 <__aeabi_dsub>
 80085d4:	4602      	mov	r2, r0
 80085d6:	460b      	mov	r3, r1
 80085d8:	4610      	mov	r0, r2
 80085da:	4619      	mov	r1, r3
 80085dc:	f7f8 fa56 	bl	8000a8c <__aeabi_d2f>
 80085e0:	4602      	mov	r2, r0
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	601a      	str	r2, [r3, #0]
  double e_roll_int = e_roll;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4618      	mov	r0, r3
 80085ec:	f7f7 ff14 	bl	8000418 <__aeabi_f2d>
 80085f0:	4602      	mov	r2, r0
 80085f2:	460b      	mov	r3, r1
 80085f4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

  if((int)pd_roll_buf != (int)pd_roll_sat_buf) {
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085fc:	4618      	mov	r0, r3
 80085fe:	f7f8 fd7f 	bl	8001100 <__aeabi_f2iz>
 8008602:	4604      	mov	r4, r0
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008608:	4618      	mov	r0, r3
 800860a:	f7f8 fd79 	bl	8001100 <__aeabi_f2iz>
 800860e:	4603      	mov	r3, r0
 8008610:	429c      	cmp	r4, r3
 8008612:	d02b      	beq.n	800866c <_ZN3PID7PD_RateEddddd+0xb8>
    if(sgn(e_roll) == sgn(pd_roll_sat_buf)) {
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4618      	mov	r0, r3
 800861a:	f7f7 fefd 	bl	8000418 <__aeabi_f2d>
 800861e:	4602      	mov	r2, r0
 8008620:	460b      	mov	r3, r1
 8008622:	68f8      	ldr	r0, [r7, #12]
 8008624:	f000 f8d4 	bl	80087d0 <_ZN3PID3sgnEd>
 8008628:	4604      	mov	r4, r0
 800862a:	460d      	mov	r5, r1
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008630:	4618      	mov	r0, r3
 8008632:	f7f7 fef1 	bl	8000418 <__aeabi_f2d>
 8008636:	4602      	mov	r2, r0
 8008638:	460b      	mov	r3, r1
 800863a:	68f8      	ldr	r0, [r7, #12]
 800863c:	f000 f8c8 	bl	80087d0 <_ZN3PID3sgnEd>
 8008640:	4602      	mov	r2, r0
 8008642:	460b      	mov	r3, r1
 8008644:	2101      	movs	r1, #1
 8008646:	460e      	mov	r6, r1
 8008648:	4620      	mov	r0, r4
 800864a:	4629      	mov	r1, r5
 800864c:	f7f8 f9a4 	bl	8000998 <__aeabi_dcmpeq>
 8008650:	4603      	mov	r3, r0
 8008652:	2b00      	cmp	r3, #0
 8008654:	d101      	bne.n	800865a <_ZN3PID7PD_RateEddddd+0xa6>
 8008656:	2300      	movs	r3, #0
 8008658:	461e      	mov	r6, r3
 800865a:	b2f3      	uxtb	r3, r6
 800865c:	2b00      	cmp	r3, #0
 800865e:	d005      	beq.n	800866c <_ZN3PID7PD_RateEddddd+0xb8>
      e_roll_int = 0;
 8008660:	f04f 0200 	mov.w	r2, #0
 8008664:	f04f 0300 	mov.w	r3, #0
 8008668:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
  }


	de = e_roll - e_eski_roll;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681a      	ldr	r2, [r3, #0]
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	689b      	ldr	r3, [r3, #8]
 8008674:	4619      	mov	r1, r3
 8008676:	4610      	mov	r0, r2
 8008678:	f7f8 fa5c 	bl	8000b34 <__aeabi_fsub>
 800867c:	4603      	mov	r3, r0
 800867e:	4618      	mov	r0, r3
 8008680:	f7f7 feca 	bl	8000418 <__aeabi_f2d>
 8008684:	4602      	mov	r2, r0
 8008686:	460b      	mov	r3, r1
 8008688:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  ie_roll = ie_roll + e_roll_int;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	691b      	ldr	r3, [r3, #16]
 8008690:	4618      	mov	r0, r3
 8008692:	f7f7 fec1 	bl	8000418 <__aeabi_f2d>
 8008696:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800869a:	f7f7 fd5f 	bl	800015c <__adddf3>
 800869e:	4602      	mov	r2, r0
 80086a0:	460b      	mov	r3, r1
 80086a2:	4610      	mov	r0, r2
 80086a4:	4619      	mov	r1, r3
 80086a6:	f7f8 f9f1 	bl	8000a8c <__aeabi_d2f>
 80086aa:	4602      	mov	r2, r0
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	611a      	str	r2, [r3, #16]
  ie_roll_sat = ie_roll;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	691a      	ldr	r2, [r3, #16]
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	629a      	str	r2, [r3, #40]	; 0x28
	

	P = Kp*e_roll; D = Kd*de; I = Ki * ie_roll_sat;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4618      	mov	r0, r3
 80086be:	f7f7 feab 	bl	8000418 <__aeabi_f2d>
 80086c2:	4602      	mov	r2, r0
 80086c4:	460b      	mov	r3, r1
 80086c6:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80086ca:	f7f7 fefd 	bl	80004c8 <__aeabi_dmul>
 80086ce:	4602      	mov	r2, r0
 80086d0:	460b      	mov	r3, r1
 80086d2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80086d6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80086da:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80086de:	f7f7 fef3 	bl	80004c8 <__aeabi_dmul>
 80086e2:	4602      	mov	r2, r0
 80086e4:	460b      	mov	r3, r1
 80086e6:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ee:	4618      	mov	r0, r3
 80086f0:	f7f7 fe92 	bl	8000418 <__aeabi_f2d>
 80086f4:	4602      	mov	r2, r0
 80086f6:	460b      	mov	r3, r1
 80086f8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80086fc:	f7f7 fee4 	bl	80004c8 <__aeabi_dmul>
 8008700:	4602      	mov	r2, r0
 8008702:	460b      	mov	r3, r1
 8008704:	e9c7 2306 	strd	r2, r3, [r7, #24]

	pd = P + I + D;
 8008708:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800870c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008710:	f7f7 fd24 	bl	800015c <__adddf3>
 8008714:	4602      	mov	r2, r0
 8008716:	460b      	mov	r3, r1
 8008718:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800871c:	f7f7 fd1e 	bl	800015c <__adddf3>
 8008720:	4602      	mov	r2, r0
 8008722:	460b      	mov	r3, r1
 8008724:	e9c7 2304 	strd	r2, r3, [r7, #16]
  	pd_roll_buf = pd;
 8008728:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800872c:	f7f8 f9ae 	bl	8000a8c <__aeabi_d2f>
 8008730:	4602      	mov	r2, r0
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	631a      	str	r2, [r3, #48]	; 0x30
	pd  = Sat(pd,  300, -300);
 8008736:	4b0d      	ldr	r3, [pc, #52]	; (800876c <_ZN3PID7PD_RateEddddd+0x1b8>)
 8008738:	9301      	str	r3, [sp, #4]
 800873a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800873e:	9300      	str	r3, [sp, #0]
 8008740:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008744:	68f8      	ldr	r0, [r7, #12]
 8008746:	f000 f8bb 	bl	80088c0 <_ZN3PID3SatEdii>
 800874a:	e9c7 0104 	strd	r0, r1, [r7, #16]
	pd_roll_sat_buf = pd;
 800874e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008752:	f7f8 f99b 	bl	8000a8c <__aeabi_d2f>
 8008756:	4602      	mov	r2, r0
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	639a      	str	r2, [r3, #56]	; 0x38
    return pd;
 800875c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]

}
 8008760:	4610      	mov	r0, r2
 8008762:	4619      	mov	r1, r3
 8008764:	3744      	adds	r7, #68	; 0x44
 8008766:	46bd      	mov	sp, r7
 8008768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800876a:	bf00      	nop
 800876c:	fffffed4 	.word	0xfffffed4

08008770 <_ZN3PID10P_Rate_YawEddd>:


double PID::P_Rate_Yaw(double alpha_dot_des, double alpha_dot, double Kp) {
 8008770:	b580      	push	{r7, lr}
 8008772:	b08a      	sub	sp, #40	; 0x28
 8008774:	af02      	add	r7, sp, #8
 8008776:	60f8      	str	r0, [r7, #12]
 8008778:	e9c7 2300 	strd	r2, r3, [r7]
	double P;
	double e_yaw = alpha_dot_des - alpha_dot;	
 800877c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008780:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008784:	f7f7 fce8 	bl	8000158 <__aeabi_dsub>
 8008788:	4602      	mov	r2, r0
 800878a:	460b      	mov	r3, r1
 800878c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	P = Kp*e_yaw;
 8008790:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008794:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008798:	f7f7 fe96 	bl	80004c8 <__aeabi_dmul>
 800879c:	4602      	mov	r2, r0
 800879e:	460b      	mov	r3, r1
 80087a0:	e9c7 2304 	strd	r2, r3, [r7, #16]
	P    = Sat(P,    300, -300);
 80087a4:	4b09      	ldr	r3, [pc, #36]	; (80087cc <_ZN3PID10P_Rate_YawEddd+0x5c>)
 80087a6:	9301      	str	r3, [sp, #4]
 80087a8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80087ac:	9300      	str	r3, [sp, #0]
 80087ae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80087b2:	68f8      	ldr	r0, [r7, #12]
 80087b4:	f000 f884 	bl	80088c0 <_ZN3PID3SatEdii>
 80087b8:	e9c7 0104 	strd	r0, r1, [r7, #16]

    return P;
 80087bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]

}
 80087c0:	4610      	mov	r0, r2
 80087c2:	4619      	mov	r1, r3
 80087c4:	3720      	adds	r7, #32
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
 80087ca:	bf00      	nop
 80087cc:	fffffed4 	.word	0xfffffed4

080087d0 <_ZN3PID3sgnEd>:

double PID::sgn(double v) {
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b084      	sub	sp, #16
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	60f8      	str	r0, [r7, #12]
 80087d8:	e9c7 2300 	strd	r2, r3, [r7]
  if (v < 0) return -1;
 80087dc:	f04f 0200 	mov.w	r2, #0
 80087e0:	f04f 0300 	mov.w	r3, #0
 80087e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80087e8:	f7f8 f8e0 	bl	80009ac <__aeabi_dcmplt>
 80087ec:	4603      	mov	r3, r0
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d003      	beq.n	80087fa <_ZN3PID3sgnEd+0x2a>
 80087f2:	f04f 0200 	mov.w	r2, #0
 80087f6:	4b0d      	ldr	r3, [pc, #52]	; (800882c <_ZN3PID3sgnEd+0x5c>)
 80087f8:	e012      	b.n	8008820 <_ZN3PID3sgnEd+0x50>
  if (v > 0) return 1;
 80087fa:	f04f 0200 	mov.w	r2, #0
 80087fe:	f04f 0300 	mov.w	r3, #0
 8008802:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008806:	f7f8 f8ef 	bl	80009e8 <__aeabi_dcmpgt>
 800880a:	4603      	mov	r3, r0
 800880c:	2b00      	cmp	r3, #0
 800880e:	d003      	beq.n	8008818 <_ZN3PID3sgnEd+0x48>
 8008810:	f04f 0200 	mov.w	r2, #0
 8008814:	4b06      	ldr	r3, [pc, #24]	; (8008830 <_ZN3PID3sgnEd+0x60>)
 8008816:	e003      	b.n	8008820 <_ZN3PID3sgnEd+0x50>
  return 0;
 8008818:	f04f 0200 	mov.w	r2, #0
 800881c:	f04f 0300 	mov.w	r3, #0
}
 8008820:	4610      	mov	r0, r2
 8008822:	4619      	mov	r1, r3
 8008824:	3710      	adds	r7, #16
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}
 800882a:	bf00      	nop
 800882c:	bff00000 	.word	0xbff00000
 8008830:	3ff00000 	.word	0x3ff00000

08008834 <_ZN3PID3SatEdiii>:

 double PID::Sat(double pwm, int max, int min, int thr) {
 8008834:	b580      	push	{r7, lr}
 8008836:	b086      	sub	sp, #24
 8008838:	af00      	add	r7, sp, #0
 800883a:	60f8      	str	r0, [r7, #12]
 800883c:	e9c7 2300 	strd	r2, r3, [r7]
	double pwm_out;

	if(thr > 1020) {
 8008840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008842:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 8008846:	dd2c      	ble.n	80088a2 <_ZN3PID3SatEdiii+0x6e>
		if(pwm > max) {
 8008848:	6a38      	ldr	r0, [r7, #32]
 800884a:	f7f7 fdd3 	bl	80003f4 <__aeabi_i2d>
 800884e:	4602      	mov	r2, r0
 8008850:	460b      	mov	r3, r1
 8008852:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008856:	f7f8 f8c7 	bl	80009e8 <__aeabi_dcmpgt>
 800885a:	4603      	mov	r3, r0
 800885c:	2b00      	cmp	r3, #0
 800885e:	d007      	beq.n	8008870 <_ZN3PID3SatEdiii+0x3c>
			pwm_out = max;
 8008860:	6a38      	ldr	r0, [r7, #32]
 8008862:	f7f7 fdc7 	bl	80003f4 <__aeabi_i2d>
 8008866:	4602      	mov	r2, r0
 8008868:	460b      	mov	r3, r1
 800886a:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800886e:	e01d      	b.n	80088ac <_ZN3PID3SatEdiii+0x78>
		}

		else if (pwm < min) {
 8008870:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008872:	f7f7 fdbf 	bl	80003f4 <__aeabi_i2d>
 8008876:	4602      	mov	r2, r0
 8008878:	460b      	mov	r3, r1
 800887a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800887e:	f7f8 f895 	bl	80009ac <__aeabi_dcmplt>
 8008882:	4603      	mov	r3, r0
 8008884:	2b00      	cmp	r3, #0
 8008886:	d007      	beq.n	8008898 <_ZN3PID3SatEdiii+0x64>
			pwm_out = min;
 8008888:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800888a:	f7f7 fdb3 	bl	80003f4 <__aeabi_i2d>
 800888e:	4602      	mov	r2, r0
 8008890:	460b      	mov	r3, r1
 8008892:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8008896:	e009      	b.n	80088ac <_ZN3PID3SatEdiii+0x78>
		}

		else {
			pwm_out = pwm;
 8008898:	e9d7 2300 	ldrd	r2, r3, [r7]
 800889c:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80088a0:	e004      	b.n	80088ac <_ZN3PID3SatEdiii+0x78>


	}

	else {
		pwm_out = 1000;
 80088a2:	f04f 0200 	mov.w	r2, #0
 80088a6:	4b05      	ldr	r3, [pc, #20]	; (80088bc <_ZN3PID3SatEdiii+0x88>)
 80088a8:	e9c7 2304 	strd	r2, r3, [r7, #16]
	}
	return pwm_out;
 80088ac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 80088b0:	4610      	mov	r0, r2
 80088b2:	4619      	mov	r1, r3
 80088b4:	3718      	adds	r7, #24
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}
 80088ba:	bf00      	nop
 80088bc:	408f4000 	.word	0x408f4000

080088c0 <_ZN3PID3SatEdii>:

 double PID::Sat(double pwm, int max, int min) {
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b086      	sub	sp, #24
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	60f8      	str	r0, [r7, #12]
 80088c8:	e9c7 2300 	strd	r2, r3, [r7]
	double pwm_out;

		if(pwm > max) {
 80088cc:	6a38      	ldr	r0, [r7, #32]
 80088ce:	f7f7 fd91 	bl	80003f4 <__aeabi_i2d>
 80088d2:	4602      	mov	r2, r0
 80088d4:	460b      	mov	r3, r1
 80088d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80088da:	f7f8 f885 	bl	80009e8 <__aeabi_dcmpgt>
 80088de:	4603      	mov	r3, r0
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d007      	beq.n	80088f4 <_ZN3PID3SatEdii+0x34>
			pwm_out = max;
 80088e4:	6a38      	ldr	r0, [r7, #32]
 80088e6:	f7f7 fd85 	bl	80003f4 <__aeabi_i2d>
 80088ea:	4602      	mov	r2, r0
 80088ec:	460b      	mov	r3, r1
 80088ee:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80088f2:	e017      	b.n	8008924 <_ZN3PID3SatEdii+0x64>
		}

		else if (pwm < min) {
 80088f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80088f6:	f7f7 fd7d 	bl	80003f4 <__aeabi_i2d>
 80088fa:	4602      	mov	r2, r0
 80088fc:	460b      	mov	r3, r1
 80088fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008902:	f7f8 f853 	bl	80009ac <__aeabi_dcmplt>
 8008906:	4603      	mov	r3, r0
 8008908:	2b00      	cmp	r3, #0
 800890a:	d007      	beq.n	800891c <_ZN3PID3SatEdii+0x5c>
			pwm_out = min;
 800890c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800890e:	f7f7 fd71 	bl	80003f4 <__aeabi_i2d>
 8008912:	4602      	mov	r2, r0
 8008914:	460b      	mov	r3, r1
 8008916:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800891a:	e003      	b.n	8008924 <_ZN3PID3SatEdii+0x64>
		}

		else {
			pwm_out = pwm;
 800891c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008920:	e9c7 2304 	strd	r2, r3, [r7, #16]
		}




	return pwm_out;
 8008924:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8008928:	4610      	mov	r0, r2
 800892a:	4619      	mov	r1, r3
 800892c:	3718      	adds	r7, #24
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}

08008932 <_ZN3PID7pwm2angEt>:

float PID::pwm2ang(unsigned short int pwm) {
 8008932:	b580      	push	{r7, lr}
 8008934:	b086      	sub	sp, #24
 8008936:	af00      	add	r7, sp, #0
 8008938:	6078      	str	r0, [r7, #4]
 800893a:	460b      	mov	r3, r1
 800893c:	807b      	strh	r3, [r7, #2]
	int in_min  = 1000;
 800893e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008942:	617b      	str	r3, [r7, #20]
	int in_max  = 2000;
 8008944:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8008948:	613b      	str	r3, [r7, #16]
	int out_min = -30;
 800894a:	f06f 031d 	mvn.w	r3, #29
 800894e:	60fb      	str	r3, [r7, #12]
	int out_max  = 30;
 8008950:	231e      	movs	r3, #30
 8008952:	60bb      	str	r3, [r7, #8]

	return (pwm - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8008954:	887a      	ldrh	r2, [r7, #2]
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	1ad3      	subs	r3, r2, r3
 800895a:	68b9      	ldr	r1, [r7, #8]
 800895c:	68fa      	ldr	r2, [r7, #12]
 800895e:	1a8a      	subs	r2, r1, r2
 8008960:	fb02 f203 	mul.w	r2, r2, r3
 8008964:	6939      	ldr	r1, [r7, #16]
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	1acb      	subs	r3, r1, r3
 800896a:	fb92 f2f3 	sdiv	r2, r2, r3
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	4413      	add	r3, r2
 8008972:	4618      	mov	r0, r3
 8008974:	f7f8 f994 	bl	8000ca0 <__aeabi_i2f>
 8008978:	4603      	mov	r3, r0
}
 800897a:	4618      	mov	r0, r3
 800897c:	3718      	adds	r7, #24
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}

08008982 <_ZN3PID8pwm2rateEt>:

float PID::pwm2rate(unsigned short int pwm) {
 8008982:	b580      	push	{r7, lr}
 8008984:	b086      	sub	sp, #24
 8008986:	af00      	add	r7, sp, #0
 8008988:	6078      	str	r0, [r7, #4]
 800898a:	460b      	mov	r3, r1
 800898c:	807b      	strh	r3, [r7, #2]
	int in_min  = 1000;
 800898e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008992:	617b      	str	r3, [r7, #20]
	int in_max  = 2000;
 8008994:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8008998:	613b      	str	r3, [r7, #16]
	int out_min = -15;
 800899a:	f06f 030e 	mvn.w	r3, #14
 800899e:	60fb      	str	r3, [r7, #12]
	int out_max  = 15;
 80089a0:	230f      	movs	r3, #15
 80089a2:	60bb      	str	r3, [r7, #8]

	return -1 * ((pwm - in_min) * (out_max - out_min) / (in_max - in_min) + out_min);
 80089a4:	887a      	ldrh	r2, [r7, #2]
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	1ad3      	subs	r3, r2, r3
 80089aa:	68b9      	ldr	r1, [r7, #8]
 80089ac:	68fa      	ldr	r2, [r7, #12]
 80089ae:	1a8a      	subs	r2, r1, r2
 80089b0:	fb02 f203 	mul.w	r2, r2, r3
 80089b4:	6939      	ldr	r1, [r7, #16]
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	1acb      	subs	r3, r1, r3
 80089ba:	fb92 f2f3 	sdiv	r2, r2, r3
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	4413      	add	r3, r2
 80089c2:	425b      	negs	r3, r3
 80089c4:	4618      	mov	r0, r3
 80089c6:	f7f8 f96b 	bl	8000ca0 <__aeabi_i2f>
 80089ca:	4603      	mov	r3, r0
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3718      	adds	r7, #24
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}

080089d4 <_ZN3PID7pwm2motEti>:

//Convert pwm to motor speed for simulation
float PID::pwm2mot(unsigned short int pwm, int dir) {
 80089d4:	b590      	push	{r4, r7, lr}
 80089d6:	b089      	sub	sp, #36	; 0x24
 80089d8:	af00      	add	r7, sp, #0
 80089da:	60f8      	str	r0, [r7, #12]
 80089dc:	460b      	mov	r3, r1
 80089de:	607a      	str	r2, [r7, #4]
 80089e0:	817b      	strh	r3, [r7, #10]
	float in_min  = 1000;
 80089e2:	4b1d      	ldr	r3, [pc, #116]	; (8008a58 <_ZN3PID7pwm2motEti+0x84>)
 80089e4:	61fb      	str	r3, [r7, #28]
	float in_max  = 2000;
 80089e6:	4b1d      	ldr	r3, [pc, #116]	; (8008a5c <_ZN3PID7pwm2motEti+0x88>)
 80089e8:	61bb      	str	r3, [r7, #24]
	float out_min = 0;
 80089ea:	f04f 0300 	mov.w	r3, #0
 80089ee:	617b      	str	r3, [r7, #20]
	float out_max  = 1326;
 80089f0:	4b1b      	ldr	r3, [pc, #108]	; (8008a60 <_ZN3PID7pwm2motEti+0x8c>)
 80089f2:	613b      	str	r3, [r7, #16]

	return (float)(dir) * ((float)pwm - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f7f8 f953 	bl	8000ca0 <__aeabi_i2f>
 80089fa:	4604      	mov	r4, r0
 80089fc:	897b      	ldrh	r3, [r7, #10]
 80089fe:	4618      	mov	r0, r3
 8008a00:	f7f8 f94a 	bl	8000c98 <__aeabi_ui2f>
 8008a04:	4603      	mov	r3, r0
 8008a06:	69f9      	ldr	r1, [r7, #28]
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f7f8 f893 	bl	8000b34 <__aeabi_fsub>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	4619      	mov	r1, r3
 8008a12:	4620      	mov	r0, r4
 8008a14:	f7f8 f998 	bl	8000d48 <__aeabi_fmul>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	461c      	mov	r4, r3
 8008a1c:	6979      	ldr	r1, [r7, #20]
 8008a1e:	6938      	ldr	r0, [r7, #16]
 8008a20:	f7f8 f888 	bl	8000b34 <__aeabi_fsub>
 8008a24:	4603      	mov	r3, r0
 8008a26:	4619      	mov	r1, r3
 8008a28:	4620      	mov	r0, r4
 8008a2a:	f7f8 f98d 	bl	8000d48 <__aeabi_fmul>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	461c      	mov	r4, r3
 8008a32:	69f9      	ldr	r1, [r7, #28]
 8008a34:	69b8      	ldr	r0, [r7, #24]
 8008a36:	f7f8 f87d 	bl	8000b34 <__aeabi_fsub>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	4620      	mov	r0, r4
 8008a40:	f7f8 fa36 	bl	8000eb0 <__aeabi_fdiv>
 8008a44:	4603      	mov	r3, r0
 8008a46:	6979      	ldr	r1, [r7, #20]
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f7f8 f875 	bl	8000b38 <__addsf3>
 8008a4e:	4603      	mov	r3, r0
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3724      	adds	r7, #36	; 0x24
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd90      	pop	{r4, r7, pc}
 8008a58:	447a0000 	.word	0x447a0000
 8008a5c:	44fa0000 	.word	0x44fa0000
 8008a60:	44a5c000 	.word	0x44a5c000

08008a64 <_ZN3PIDD1Ev>:

PID::~PID() {};
 8008a64:	b480      	push	{r7}
 8008a66:	b083      	sub	sp, #12
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	4618      	mov	r0, r3
 8008a70:	370c      	adds	r7, #12
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bc80      	pop	{r7}
 8008a76:	4770      	bx	lr

08008a78 <_ZdlPv>:
 8008a78:	f000 bbf0 	b.w	800925c <free>

08008a7c <_Znwj>:
 8008a7c:	2801      	cmp	r0, #1
 8008a7e:	bf38      	it	cc
 8008a80:	2001      	movcc	r0, #1
 8008a82:	b510      	push	{r4, lr}
 8008a84:	4604      	mov	r4, r0
 8008a86:	4620      	mov	r0, r4
 8008a88:	f000 fbe0 	bl	800924c <malloc>
 8008a8c:	b930      	cbnz	r0, 8008a9c <_Znwj+0x20>
 8008a8e:	f000 f80d 	bl	8008aac <_ZSt15get_new_handlerv>
 8008a92:	b908      	cbnz	r0, 8008a98 <_Znwj+0x1c>
 8008a94:	f000 fba8 	bl	80091e8 <abort>
 8008a98:	4780      	blx	r0
 8008a9a:	e7f4      	b.n	8008a86 <_Znwj+0xa>
 8008a9c:	bd10      	pop	{r4, pc}

08008a9e <_ZSt17__throw_bad_allocv>:
 8008a9e:	b508      	push	{r3, lr}
 8008aa0:	f000 fba2 	bl	80091e8 <abort>

08008aa4 <_ZSt20__throw_length_errorPKc>:
 8008aa4:	b508      	push	{r3, lr}
 8008aa6:	f000 fb9f 	bl	80091e8 <abort>
	...

08008aac <_ZSt15get_new_handlerv>:
 8008aac:	4b02      	ldr	r3, [pc, #8]	; (8008ab8 <_ZSt15get_new_handlerv+0xc>)
 8008aae:	6818      	ldr	r0, [r3, #0]
 8008ab0:	f3bf 8f5b 	dmb	ish
 8008ab4:	4770      	bx	lr
 8008ab6:	bf00      	nop
 8008ab8:	20000600 	.word	0x20000600
 8008abc:	00000000 	.word	0x00000000

08008ac0 <exp>:
 8008ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ac2:	4606      	mov	r6, r0
 8008ac4:	460f      	mov	r7, r1
 8008ac6:	f000 f883 	bl	8008bd0 <__ieee754_exp>
 8008aca:	4b1b      	ldr	r3, [pc, #108]	; (8008b38 <exp+0x78>)
 8008acc:	4604      	mov	r4, r0
 8008ace:	f993 3000 	ldrsb.w	r3, [r3]
 8008ad2:	460d      	mov	r5, r1
 8008ad4:	3301      	adds	r3, #1
 8008ad6:	d012      	beq.n	8008afe <exp+0x3e>
 8008ad8:	4630      	mov	r0, r6
 8008ada:	4639      	mov	r1, r7
 8008adc:	f000 fb77 	bl	80091ce <finite>
 8008ae0:	b168      	cbz	r0, 8008afe <exp+0x3e>
 8008ae2:	a311      	add	r3, pc, #68	; (adr r3, 8008b28 <exp+0x68>)
 8008ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae8:	4630      	mov	r0, r6
 8008aea:	4639      	mov	r1, r7
 8008aec:	f7f7 ff7c 	bl	80009e8 <__aeabi_dcmpgt>
 8008af0:	b140      	cbz	r0, 8008b04 <exp+0x44>
 8008af2:	f000 fb81 	bl	80091f8 <__errno>
 8008af6:	2322      	movs	r3, #34	; 0x22
 8008af8:	2400      	movs	r4, #0
 8008afa:	4d10      	ldr	r5, [pc, #64]	; (8008b3c <exp+0x7c>)
 8008afc:	6003      	str	r3, [r0, #0]
 8008afe:	4620      	mov	r0, r4
 8008b00:	4629      	mov	r1, r5
 8008b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b04:	4630      	mov	r0, r6
 8008b06:	a30a      	add	r3, pc, #40	; (adr r3, 8008b30 <exp+0x70>)
 8008b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b0c:	4639      	mov	r1, r7
 8008b0e:	f7f7 ff4d 	bl	80009ac <__aeabi_dcmplt>
 8008b12:	2800      	cmp	r0, #0
 8008b14:	d0f3      	beq.n	8008afe <exp+0x3e>
 8008b16:	f000 fb6f 	bl	80091f8 <__errno>
 8008b1a:	2322      	movs	r3, #34	; 0x22
 8008b1c:	2400      	movs	r4, #0
 8008b1e:	2500      	movs	r5, #0
 8008b20:	6003      	str	r3, [r0, #0]
 8008b22:	e7ec      	b.n	8008afe <exp+0x3e>
 8008b24:	f3af 8000 	nop.w
 8008b28:	fefa39ef 	.word	0xfefa39ef
 8008b2c:	40862e42 	.word	0x40862e42
 8008b30:	d52d3051 	.word	0xd52d3051
 8008b34:	c0874910 	.word	0xc0874910
 8008b38:	20000009 	.word	0x20000009
 8008b3c:	7ff00000 	.word	0x7ff00000

08008b40 <asinf>:
 8008b40:	b538      	push	{r3, r4, r5, lr}
 8008b42:	4604      	mov	r4, r0
 8008b44:	f000 f9ae 	bl	8008ea4 <__ieee754_asinf>
 8008b48:	4b0e      	ldr	r3, [pc, #56]	; (8008b84 <asinf+0x44>)
 8008b4a:	4605      	mov	r5, r0
 8008b4c:	f993 3000 	ldrsb.w	r3, [r3]
 8008b50:	3301      	adds	r3, #1
 8008b52:	d015      	beq.n	8008b80 <asinf+0x40>
 8008b54:	4621      	mov	r1, r4
 8008b56:	4620      	mov	r0, r4
 8008b58:	f7f8 fabc 	bl	80010d4 <__aeabi_fcmpun>
 8008b5c:	b980      	cbnz	r0, 8008b80 <asinf+0x40>
 8008b5e:	4620      	mov	r0, r4
 8008b60:	f000 fb3b 	bl	80091da <fabsf>
 8008b64:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008b68:	f7f8 faaa 	bl	80010c0 <__aeabi_fcmpgt>
 8008b6c:	b140      	cbz	r0, 8008b80 <asinf+0x40>
 8008b6e:	f000 fb43 	bl	80091f8 <__errno>
 8008b72:	2321      	movs	r3, #33	; 0x21
 8008b74:	6003      	str	r3, [r0, #0]
 8008b76:	4804      	ldr	r0, [pc, #16]	; (8008b88 <asinf+0x48>)
 8008b78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b7c:	f000 bb30 	b.w	80091e0 <nanf>
 8008b80:	4628      	mov	r0, r5
 8008b82:	bd38      	pop	{r3, r4, r5, pc}
 8008b84:	20000009 	.word	0x20000009
 8008b88:	08009534 	.word	0x08009534

08008b8c <sqrtf>:
 8008b8c:	b538      	push	{r3, r4, r5, lr}
 8008b8e:	4605      	mov	r5, r0
 8008b90:	f000 facc 	bl	800912c <__ieee754_sqrtf>
 8008b94:	4b0d      	ldr	r3, [pc, #52]	; (8008bcc <sqrtf+0x40>)
 8008b96:	4604      	mov	r4, r0
 8008b98:	f993 3000 	ldrsb.w	r3, [r3]
 8008b9c:	3301      	adds	r3, #1
 8008b9e:	d012      	beq.n	8008bc6 <sqrtf+0x3a>
 8008ba0:	4629      	mov	r1, r5
 8008ba2:	4628      	mov	r0, r5
 8008ba4:	f7f8 fa96 	bl	80010d4 <__aeabi_fcmpun>
 8008ba8:	b968      	cbnz	r0, 8008bc6 <sqrtf+0x3a>
 8008baa:	2100      	movs	r1, #0
 8008bac:	4628      	mov	r0, r5
 8008bae:	f7f8 fa69 	bl	8001084 <__aeabi_fcmplt>
 8008bb2:	b140      	cbz	r0, 8008bc6 <sqrtf+0x3a>
 8008bb4:	f000 fb20 	bl	80091f8 <__errno>
 8008bb8:	2321      	movs	r3, #33	; 0x21
 8008bba:	2100      	movs	r1, #0
 8008bbc:	6003      	str	r3, [r0, #0]
 8008bbe:	4608      	mov	r0, r1
 8008bc0:	f7f8 f976 	bl	8000eb0 <__aeabi_fdiv>
 8008bc4:	4604      	mov	r4, r0
 8008bc6:	4620      	mov	r0, r4
 8008bc8:	bd38      	pop	{r3, r4, r5, pc}
 8008bca:	bf00      	nop
 8008bcc:	20000009 	.word	0x20000009

08008bd0 <__ieee754_exp>:
 8008bd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008bd4:	4faa      	ldr	r7, [pc, #680]	; (8008e80 <__ieee754_exp+0x2b0>)
 8008bd6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008bda:	42bb      	cmp	r3, r7
 8008bdc:	4605      	mov	r5, r0
 8008bde:	460c      	mov	r4, r1
 8008be0:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 8008be4:	d92f      	bls.n	8008c46 <__ieee754_exp+0x76>
 8008be6:	4fa7      	ldr	r7, [pc, #668]	; (8008e84 <__ieee754_exp+0x2b4>)
 8008be8:	42bb      	cmp	r3, r7
 8008bea:	d911      	bls.n	8008c10 <__ieee754_exp+0x40>
 8008bec:	4603      	mov	r3, r0
 8008bee:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	d006      	beq.n	8008c04 <__ieee754_exp+0x34>
 8008bf6:	4602      	mov	r2, r0
 8008bf8:	460b      	mov	r3, r1
 8008bfa:	f7f7 faaf 	bl	800015c <__adddf3>
 8008bfe:	4605      	mov	r5, r0
 8008c00:	460c      	mov	r4, r1
 8008c02:	e000      	b.n	8008c06 <__ieee754_exp+0x36>
 8008c04:	b9e6      	cbnz	r6, 8008c40 <__ieee754_exp+0x70>
 8008c06:	4628      	mov	r0, r5
 8008c08:	4621      	mov	r1, r4
 8008c0a:	b004      	add	sp, #16
 8008c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c10:	a385      	add	r3, pc, #532	; (adr r3, 8008e28 <__ieee754_exp+0x258>)
 8008c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c16:	f7f7 fee7 	bl	80009e8 <__aeabi_dcmpgt>
 8008c1a:	b138      	cbz	r0, 8008c2c <__ieee754_exp+0x5c>
 8008c1c:	a384      	add	r3, pc, #528	; (adr r3, 8008e30 <__ieee754_exp+0x260>)
 8008c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c22:	4610      	mov	r0, r2
 8008c24:	4619      	mov	r1, r3
 8008c26:	f7f7 fc4f 	bl	80004c8 <__aeabi_dmul>
 8008c2a:	e7e8      	b.n	8008bfe <__ieee754_exp+0x2e>
 8008c2c:	4628      	mov	r0, r5
 8008c2e:	a382      	add	r3, pc, #520	; (adr r3, 8008e38 <__ieee754_exp+0x268>)
 8008c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c34:	4621      	mov	r1, r4
 8008c36:	f7f7 feb9 	bl	80009ac <__aeabi_dcmplt>
 8008c3a:	2800      	cmp	r0, #0
 8008c3c:	f000 8082 	beq.w	8008d44 <__ieee754_exp+0x174>
 8008c40:	2500      	movs	r5, #0
 8008c42:	462c      	mov	r4, r5
 8008c44:	e7df      	b.n	8008c06 <__ieee754_exp+0x36>
 8008c46:	4a90      	ldr	r2, [pc, #576]	; (8008e88 <__ieee754_exp+0x2b8>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	f240 80a7 	bls.w	8008d9c <__ieee754_exp+0x1cc>
 8008c4e:	4a8f      	ldr	r2, [pc, #572]	; (8008e8c <__ieee754_exp+0x2bc>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d877      	bhi.n	8008d44 <__ieee754_exp+0x174>
 8008c54:	4b8e      	ldr	r3, [pc, #568]	; (8008e90 <__ieee754_exp+0x2c0>)
 8008c56:	00f4      	lsls	r4, r6, #3
 8008c58:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c60:	f7f7 fa7a 	bl	8000158 <__aeabi_dsub>
 8008c64:	4680      	mov	r8, r0
 8008c66:	4689      	mov	r9, r1
 8008c68:	4b8a      	ldr	r3, [pc, #552]	; (8008e94 <__ieee754_exp+0x2c4>)
 8008c6a:	f1c6 0a01 	rsb	sl, r6, #1
 8008c6e:	4423      	add	r3, r4
 8008c70:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008c74:	e9cd 3400 	strd	r3, r4, [sp]
 8008c78:	ebaa 0a06 	sub.w	sl, sl, r6
 8008c7c:	4640      	mov	r0, r8
 8008c7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c82:	4649      	mov	r1, r9
 8008c84:	f7f7 fa68 	bl	8000158 <__aeabi_dsub>
 8008c88:	4605      	mov	r5, r0
 8008c8a:	460c      	mov	r4, r1
 8008c8c:	462a      	mov	r2, r5
 8008c8e:	4623      	mov	r3, r4
 8008c90:	4628      	mov	r0, r5
 8008c92:	4621      	mov	r1, r4
 8008c94:	f7f7 fc18 	bl	80004c8 <__aeabi_dmul>
 8008c98:	a369      	add	r3, pc, #420	; (adr r3, 8008e40 <__ieee754_exp+0x270>)
 8008c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c9e:	4606      	mov	r6, r0
 8008ca0:	460f      	mov	r7, r1
 8008ca2:	f7f7 fc11 	bl	80004c8 <__aeabi_dmul>
 8008ca6:	a368      	add	r3, pc, #416	; (adr r3, 8008e48 <__ieee754_exp+0x278>)
 8008ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cac:	f7f7 fa54 	bl	8000158 <__aeabi_dsub>
 8008cb0:	4632      	mov	r2, r6
 8008cb2:	463b      	mov	r3, r7
 8008cb4:	f7f7 fc08 	bl	80004c8 <__aeabi_dmul>
 8008cb8:	a365      	add	r3, pc, #404	; (adr r3, 8008e50 <__ieee754_exp+0x280>)
 8008cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cbe:	f7f7 fa4d 	bl	800015c <__adddf3>
 8008cc2:	4632      	mov	r2, r6
 8008cc4:	463b      	mov	r3, r7
 8008cc6:	f7f7 fbff 	bl	80004c8 <__aeabi_dmul>
 8008cca:	a363      	add	r3, pc, #396	; (adr r3, 8008e58 <__ieee754_exp+0x288>)
 8008ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd0:	f7f7 fa42 	bl	8000158 <__aeabi_dsub>
 8008cd4:	4632      	mov	r2, r6
 8008cd6:	463b      	mov	r3, r7
 8008cd8:	f7f7 fbf6 	bl	80004c8 <__aeabi_dmul>
 8008cdc:	a360      	add	r3, pc, #384	; (adr r3, 8008e60 <__ieee754_exp+0x290>)
 8008cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce2:	f7f7 fa3b 	bl	800015c <__adddf3>
 8008ce6:	4632      	mov	r2, r6
 8008ce8:	463b      	mov	r3, r7
 8008cea:	f7f7 fbed 	bl	80004c8 <__aeabi_dmul>
 8008cee:	4602      	mov	r2, r0
 8008cf0:	460b      	mov	r3, r1
 8008cf2:	4628      	mov	r0, r5
 8008cf4:	4621      	mov	r1, r4
 8008cf6:	f7f7 fa2f 	bl	8000158 <__aeabi_dsub>
 8008cfa:	4602      	mov	r2, r0
 8008cfc:	460b      	mov	r3, r1
 8008cfe:	4606      	mov	r6, r0
 8008d00:	460f      	mov	r7, r1
 8008d02:	4628      	mov	r0, r5
 8008d04:	4621      	mov	r1, r4
 8008d06:	f7f7 fbdf 	bl	80004c8 <__aeabi_dmul>
 8008d0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d0e:	f1ba 0f00 	cmp.w	sl, #0
 8008d12:	d15a      	bne.n	8008dca <__ieee754_exp+0x1fa>
 8008d14:	2200      	movs	r2, #0
 8008d16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008d1a:	4630      	mov	r0, r6
 8008d1c:	4639      	mov	r1, r7
 8008d1e:	f7f7 fa1b 	bl	8000158 <__aeabi_dsub>
 8008d22:	4602      	mov	r2, r0
 8008d24:	460b      	mov	r3, r1
 8008d26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d2a:	f7f7 fcf7 	bl	800071c <__aeabi_ddiv>
 8008d2e:	462a      	mov	r2, r5
 8008d30:	4623      	mov	r3, r4
 8008d32:	f7f7 fa11 	bl	8000158 <__aeabi_dsub>
 8008d36:	4602      	mov	r2, r0
 8008d38:	460b      	mov	r3, r1
 8008d3a:	2000      	movs	r0, #0
 8008d3c:	4956      	ldr	r1, [pc, #344]	; (8008e98 <__ieee754_exp+0x2c8>)
 8008d3e:	f7f7 fa0b 	bl	8000158 <__aeabi_dsub>
 8008d42:	e75c      	b.n	8008bfe <__ieee754_exp+0x2e>
 8008d44:	4855      	ldr	r0, [pc, #340]	; (8008e9c <__ieee754_exp+0x2cc>)
 8008d46:	a348      	add	r3, pc, #288	; (adr r3, 8008e68 <__ieee754_exp+0x298>)
 8008d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d4c:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8008d50:	4621      	mov	r1, r4
 8008d52:	4628      	mov	r0, r5
 8008d54:	f7f7 fbb8 	bl	80004c8 <__aeabi_dmul>
 8008d58:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008d5c:	f7f7 f9fe 	bl	800015c <__adddf3>
 8008d60:	f7f7 fe4c 	bl	80009fc <__aeabi_d2iz>
 8008d64:	4682      	mov	sl, r0
 8008d66:	f7f7 fb45 	bl	80003f4 <__aeabi_i2d>
 8008d6a:	a341      	add	r3, pc, #260	; (adr r3, 8008e70 <__ieee754_exp+0x2a0>)
 8008d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d70:	4606      	mov	r6, r0
 8008d72:	460f      	mov	r7, r1
 8008d74:	f7f7 fba8 	bl	80004c8 <__aeabi_dmul>
 8008d78:	4602      	mov	r2, r0
 8008d7a:	460b      	mov	r3, r1
 8008d7c:	4628      	mov	r0, r5
 8008d7e:	4621      	mov	r1, r4
 8008d80:	f7f7 f9ea 	bl	8000158 <__aeabi_dsub>
 8008d84:	a33c      	add	r3, pc, #240	; (adr r3, 8008e78 <__ieee754_exp+0x2a8>)
 8008d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d8a:	4680      	mov	r8, r0
 8008d8c:	4689      	mov	r9, r1
 8008d8e:	4630      	mov	r0, r6
 8008d90:	4639      	mov	r1, r7
 8008d92:	f7f7 fb99 	bl	80004c8 <__aeabi_dmul>
 8008d96:	e9cd 0100 	strd	r0, r1, [sp]
 8008d9a:	e76f      	b.n	8008c7c <__ieee754_exp+0xac>
 8008d9c:	4a40      	ldr	r2, [pc, #256]	; (8008ea0 <__ieee754_exp+0x2d0>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d80e      	bhi.n	8008dc0 <__ieee754_exp+0x1f0>
 8008da2:	a323      	add	r3, pc, #140	; (adr r3, 8008e30 <__ieee754_exp+0x260>)
 8008da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da8:	f7f7 f9d8 	bl	800015c <__adddf3>
 8008dac:	2200      	movs	r2, #0
 8008dae:	4b3a      	ldr	r3, [pc, #232]	; (8008e98 <__ieee754_exp+0x2c8>)
 8008db0:	f7f7 fe1a 	bl	80009e8 <__aeabi_dcmpgt>
 8008db4:	b138      	cbz	r0, 8008dc6 <__ieee754_exp+0x1f6>
 8008db6:	2200      	movs	r2, #0
 8008db8:	4628      	mov	r0, r5
 8008dba:	4621      	mov	r1, r4
 8008dbc:	4b36      	ldr	r3, [pc, #216]	; (8008e98 <__ieee754_exp+0x2c8>)
 8008dbe:	e71c      	b.n	8008bfa <__ieee754_exp+0x2a>
 8008dc0:	f04f 0a00 	mov.w	sl, #0
 8008dc4:	e762      	b.n	8008c8c <__ieee754_exp+0xbc>
 8008dc6:	4682      	mov	sl, r0
 8008dc8:	e760      	b.n	8008c8c <__ieee754_exp+0xbc>
 8008dca:	4632      	mov	r2, r6
 8008dcc:	463b      	mov	r3, r7
 8008dce:	2000      	movs	r0, #0
 8008dd0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008dd4:	f7f7 f9c0 	bl	8000158 <__aeabi_dsub>
 8008dd8:	4602      	mov	r2, r0
 8008dda:	460b      	mov	r3, r1
 8008ddc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008de0:	f7f7 fc9c 	bl	800071c <__aeabi_ddiv>
 8008de4:	4602      	mov	r2, r0
 8008de6:	460b      	mov	r3, r1
 8008de8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008dec:	f7f7 f9b4 	bl	8000158 <__aeabi_dsub>
 8008df0:	4642      	mov	r2, r8
 8008df2:	464b      	mov	r3, r9
 8008df4:	f7f7 f9b0 	bl	8000158 <__aeabi_dsub>
 8008df8:	4602      	mov	r2, r0
 8008dfa:	460b      	mov	r3, r1
 8008dfc:	2000      	movs	r0, #0
 8008dfe:	4926      	ldr	r1, [pc, #152]	; (8008e98 <__ieee754_exp+0x2c8>)
 8008e00:	f7f7 f9aa 	bl	8000158 <__aeabi_dsub>
 8008e04:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8008e08:	4592      	cmp	sl, r2
 8008e0a:	db02      	blt.n	8008e12 <__ieee754_exp+0x242>
 8008e0c:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8008e10:	e6f5      	b.n	8008bfe <__ieee754_exp+0x2e>
 8008e12:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8008e16:	2200      	movs	r2, #0
 8008e18:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8008e1c:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8008e20:	e701      	b.n	8008c26 <__ieee754_exp+0x56>
 8008e22:	bf00      	nop
 8008e24:	f3af 8000 	nop.w
 8008e28:	fefa39ef 	.word	0xfefa39ef
 8008e2c:	40862e42 	.word	0x40862e42
 8008e30:	8800759c 	.word	0x8800759c
 8008e34:	7e37e43c 	.word	0x7e37e43c
 8008e38:	d52d3051 	.word	0xd52d3051
 8008e3c:	c0874910 	.word	0xc0874910
 8008e40:	72bea4d0 	.word	0x72bea4d0
 8008e44:	3e663769 	.word	0x3e663769
 8008e48:	c5d26bf1 	.word	0xc5d26bf1
 8008e4c:	3ebbbd41 	.word	0x3ebbbd41
 8008e50:	af25de2c 	.word	0xaf25de2c
 8008e54:	3f11566a 	.word	0x3f11566a
 8008e58:	16bebd93 	.word	0x16bebd93
 8008e5c:	3f66c16c 	.word	0x3f66c16c
 8008e60:	5555553e 	.word	0x5555553e
 8008e64:	3fc55555 	.word	0x3fc55555
 8008e68:	652b82fe 	.word	0x652b82fe
 8008e6c:	3ff71547 	.word	0x3ff71547
 8008e70:	fee00000 	.word	0xfee00000
 8008e74:	3fe62e42 	.word	0x3fe62e42
 8008e78:	35793c76 	.word	0x35793c76
 8008e7c:	3dea39ef 	.word	0x3dea39ef
 8008e80:	40862e41 	.word	0x40862e41
 8008e84:	7fefffff 	.word	0x7fefffff
 8008e88:	3fd62e42 	.word	0x3fd62e42
 8008e8c:	3ff0a2b1 	.word	0x3ff0a2b1
 8008e90:	08009548 	.word	0x08009548
 8008e94:	08009558 	.word	0x08009558
 8008e98:	3ff00000 	.word	0x3ff00000
 8008e9c:	08009538 	.word	0x08009538
 8008ea0:	3e2fffff 	.word	0x3e2fffff

08008ea4 <__ieee754_asinf>:
 8008ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ea8:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 8008eac:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8008eb0:	4604      	mov	r4, r0
 8008eb2:	4605      	mov	r5, r0
 8008eb4:	d10c      	bne.n	8008ed0 <__ieee754_asinf+0x2c>
 8008eb6:	498d      	ldr	r1, [pc, #564]	; (80090ec <__ieee754_asinf+0x248>)
 8008eb8:	f7f7 ff46 	bl	8000d48 <__aeabi_fmul>
 8008ebc:	498c      	ldr	r1, [pc, #560]	; (80090f0 <__ieee754_asinf+0x24c>)
 8008ebe:	4605      	mov	r5, r0
 8008ec0:	4620      	mov	r0, r4
 8008ec2:	f7f7 ff41 	bl	8000d48 <__aeabi_fmul>
 8008ec6:	4601      	mov	r1, r0
 8008ec8:	4628      	mov	r0, r5
 8008eca:	f7f7 fe35 	bl	8000b38 <__addsf3>
 8008ece:	e006      	b.n	8008ede <__ieee754_asinf+0x3a>
 8008ed0:	dd07      	ble.n	8008ee2 <__ieee754_asinf+0x3e>
 8008ed2:	4601      	mov	r1, r0
 8008ed4:	f7f7 fe2e 	bl	8000b34 <__aeabi_fsub>
 8008ed8:	4601      	mov	r1, r0
 8008eda:	f7f7 ffe9 	bl	8000eb0 <__aeabi_fdiv>
 8008ede:	4604      	mov	r4, r0
 8008ee0:	e00e      	b.n	8008f00 <__ieee754_asinf+0x5c>
 8008ee2:	f1b8 5f7c 	cmp.w	r8, #1056964608	; 0x3f000000
 8008ee6:	da58      	bge.n	8008f9a <__ieee754_asinf+0xf6>
 8008ee8:	f1b8 5f48 	cmp.w	r8, #838860800	; 0x32000000
 8008eec:	da0b      	bge.n	8008f06 <__ieee754_asinf+0x62>
 8008eee:	4981      	ldr	r1, [pc, #516]	; (80090f4 <__ieee754_asinf+0x250>)
 8008ef0:	f7f7 fe22 	bl	8000b38 <__addsf3>
 8008ef4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008ef8:	f7f8 f8e2 	bl	80010c0 <__aeabi_fcmpgt>
 8008efc:	2800      	cmp	r0, #0
 8008efe:	d04c      	beq.n	8008f9a <__ieee754_asinf+0xf6>
 8008f00:	4620      	mov	r0, r4
 8008f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f06:	4601      	mov	r1, r0
 8008f08:	f7f7 ff1e 	bl	8000d48 <__aeabi_fmul>
 8008f0c:	4605      	mov	r5, r0
 8008f0e:	497a      	ldr	r1, [pc, #488]	; (80090f8 <__ieee754_asinf+0x254>)
 8008f10:	f7f7 ff1a 	bl	8000d48 <__aeabi_fmul>
 8008f14:	4979      	ldr	r1, [pc, #484]	; (80090fc <__ieee754_asinf+0x258>)
 8008f16:	f7f7 fe0f 	bl	8000b38 <__addsf3>
 8008f1a:	4629      	mov	r1, r5
 8008f1c:	f7f7 ff14 	bl	8000d48 <__aeabi_fmul>
 8008f20:	4977      	ldr	r1, [pc, #476]	; (8009100 <__ieee754_asinf+0x25c>)
 8008f22:	f7f7 fe07 	bl	8000b34 <__aeabi_fsub>
 8008f26:	4629      	mov	r1, r5
 8008f28:	f7f7 ff0e 	bl	8000d48 <__aeabi_fmul>
 8008f2c:	4975      	ldr	r1, [pc, #468]	; (8009104 <__ieee754_asinf+0x260>)
 8008f2e:	f7f7 fe03 	bl	8000b38 <__addsf3>
 8008f32:	4629      	mov	r1, r5
 8008f34:	f7f7 ff08 	bl	8000d48 <__aeabi_fmul>
 8008f38:	4973      	ldr	r1, [pc, #460]	; (8009108 <__ieee754_asinf+0x264>)
 8008f3a:	f7f7 fdfb 	bl	8000b34 <__aeabi_fsub>
 8008f3e:	4629      	mov	r1, r5
 8008f40:	f7f7 ff02 	bl	8000d48 <__aeabi_fmul>
 8008f44:	4971      	ldr	r1, [pc, #452]	; (800910c <__ieee754_asinf+0x268>)
 8008f46:	f7f7 fdf7 	bl	8000b38 <__addsf3>
 8008f4a:	4629      	mov	r1, r5
 8008f4c:	f7f7 fefc 	bl	8000d48 <__aeabi_fmul>
 8008f50:	496f      	ldr	r1, [pc, #444]	; (8009110 <__ieee754_asinf+0x26c>)
 8008f52:	4606      	mov	r6, r0
 8008f54:	4628      	mov	r0, r5
 8008f56:	f7f7 fef7 	bl	8000d48 <__aeabi_fmul>
 8008f5a:	496e      	ldr	r1, [pc, #440]	; (8009114 <__ieee754_asinf+0x270>)
 8008f5c:	f7f7 fdea 	bl	8000b34 <__aeabi_fsub>
 8008f60:	4629      	mov	r1, r5
 8008f62:	f7f7 fef1 	bl	8000d48 <__aeabi_fmul>
 8008f66:	496c      	ldr	r1, [pc, #432]	; (8009118 <__ieee754_asinf+0x274>)
 8008f68:	f7f7 fde6 	bl	8000b38 <__addsf3>
 8008f6c:	4629      	mov	r1, r5
 8008f6e:	f7f7 feeb 	bl	8000d48 <__aeabi_fmul>
 8008f72:	496a      	ldr	r1, [pc, #424]	; (800911c <__ieee754_asinf+0x278>)
 8008f74:	f7f7 fdde 	bl	8000b34 <__aeabi_fsub>
 8008f78:	4629      	mov	r1, r5
 8008f7a:	f7f7 fee5 	bl	8000d48 <__aeabi_fmul>
 8008f7e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008f82:	f7f7 fdd9 	bl	8000b38 <__addsf3>
 8008f86:	4601      	mov	r1, r0
 8008f88:	4630      	mov	r0, r6
 8008f8a:	f7f7 ff91 	bl	8000eb0 <__aeabi_fdiv>
 8008f8e:	4621      	mov	r1, r4
 8008f90:	f7f7 feda 	bl	8000d48 <__aeabi_fmul>
 8008f94:	4601      	mov	r1, r0
 8008f96:	4620      	mov	r0, r4
 8008f98:	e797      	b.n	8008eca <__ieee754_asinf+0x26>
 8008f9a:	4620      	mov	r0, r4
 8008f9c:	f000 f91d 	bl	80091da <fabsf>
 8008fa0:	4601      	mov	r1, r0
 8008fa2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008fa6:	f7f7 fdc5 	bl	8000b34 <__aeabi_fsub>
 8008faa:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8008fae:	f7f7 fecb 	bl	8000d48 <__aeabi_fmul>
 8008fb2:	4606      	mov	r6, r0
 8008fb4:	4950      	ldr	r1, [pc, #320]	; (80090f8 <__ieee754_asinf+0x254>)
 8008fb6:	f7f7 fec7 	bl	8000d48 <__aeabi_fmul>
 8008fba:	4950      	ldr	r1, [pc, #320]	; (80090fc <__ieee754_asinf+0x258>)
 8008fbc:	f7f7 fdbc 	bl	8000b38 <__addsf3>
 8008fc0:	4631      	mov	r1, r6
 8008fc2:	f7f7 fec1 	bl	8000d48 <__aeabi_fmul>
 8008fc6:	494e      	ldr	r1, [pc, #312]	; (8009100 <__ieee754_asinf+0x25c>)
 8008fc8:	f7f7 fdb4 	bl	8000b34 <__aeabi_fsub>
 8008fcc:	4631      	mov	r1, r6
 8008fce:	f7f7 febb 	bl	8000d48 <__aeabi_fmul>
 8008fd2:	494c      	ldr	r1, [pc, #304]	; (8009104 <__ieee754_asinf+0x260>)
 8008fd4:	f7f7 fdb0 	bl	8000b38 <__addsf3>
 8008fd8:	4631      	mov	r1, r6
 8008fda:	f7f7 feb5 	bl	8000d48 <__aeabi_fmul>
 8008fde:	494a      	ldr	r1, [pc, #296]	; (8009108 <__ieee754_asinf+0x264>)
 8008fe0:	f7f7 fda8 	bl	8000b34 <__aeabi_fsub>
 8008fe4:	4631      	mov	r1, r6
 8008fe6:	f7f7 feaf 	bl	8000d48 <__aeabi_fmul>
 8008fea:	4948      	ldr	r1, [pc, #288]	; (800910c <__ieee754_asinf+0x268>)
 8008fec:	f7f7 fda4 	bl	8000b38 <__addsf3>
 8008ff0:	4631      	mov	r1, r6
 8008ff2:	f7f7 fea9 	bl	8000d48 <__aeabi_fmul>
 8008ff6:	4946      	ldr	r1, [pc, #280]	; (8009110 <__ieee754_asinf+0x26c>)
 8008ff8:	4681      	mov	r9, r0
 8008ffa:	4630      	mov	r0, r6
 8008ffc:	f7f7 fea4 	bl	8000d48 <__aeabi_fmul>
 8009000:	4944      	ldr	r1, [pc, #272]	; (8009114 <__ieee754_asinf+0x270>)
 8009002:	f7f7 fd97 	bl	8000b34 <__aeabi_fsub>
 8009006:	4631      	mov	r1, r6
 8009008:	f7f7 fe9e 	bl	8000d48 <__aeabi_fmul>
 800900c:	4942      	ldr	r1, [pc, #264]	; (8009118 <__ieee754_asinf+0x274>)
 800900e:	f7f7 fd93 	bl	8000b38 <__addsf3>
 8009012:	4631      	mov	r1, r6
 8009014:	f7f7 fe98 	bl	8000d48 <__aeabi_fmul>
 8009018:	4940      	ldr	r1, [pc, #256]	; (800911c <__ieee754_asinf+0x278>)
 800901a:	f7f7 fd8b 	bl	8000b34 <__aeabi_fsub>
 800901e:	4631      	mov	r1, r6
 8009020:	f7f7 fe92 	bl	8000d48 <__aeabi_fmul>
 8009024:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009028:	f7f7 fd86 	bl	8000b38 <__addsf3>
 800902c:	4682      	mov	sl, r0
 800902e:	4630      	mov	r0, r6
 8009030:	f000 f87c 	bl	800912c <__ieee754_sqrtf>
 8009034:	4b3a      	ldr	r3, [pc, #232]	; (8009120 <__ieee754_asinf+0x27c>)
 8009036:	4607      	mov	r7, r0
 8009038:	4598      	cmp	r8, r3
 800903a:	dd1a      	ble.n	8009072 <__ieee754_asinf+0x1ce>
 800903c:	4651      	mov	r1, sl
 800903e:	4648      	mov	r0, r9
 8009040:	f7f7 ff36 	bl	8000eb0 <__aeabi_fdiv>
 8009044:	4639      	mov	r1, r7
 8009046:	f7f7 fe7f 	bl	8000d48 <__aeabi_fmul>
 800904a:	4639      	mov	r1, r7
 800904c:	f7f7 fd74 	bl	8000b38 <__addsf3>
 8009050:	4601      	mov	r1, r0
 8009052:	f7f7 fd71 	bl	8000b38 <__addsf3>
 8009056:	4933      	ldr	r1, [pc, #204]	; (8009124 <__ieee754_asinf+0x280>)
 8009058:	f7f7 fd6e 	bl	8000b38 <__addsf3>
 800905c:	4601      	mov	r1, r0
 800905e:	4823      	ldr	r0, [pc, #140]	; (80090ec <__ieee754_asinf+0x248>)
 8009060:	f7f7 fd68 	bl	8000b34 <__aeabi_fsub>
 8009064:	2d00      	cmp	r5, #0
 8009066:	4604      	mov	r4, r0
 8009068:	f73f af4a 	bgt.w	8008f00 <__ieee754_asinf+0x5c>
 800906c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8009070:	e735      	b.n	8008ede <__ieee754_asinf+0x3a>
 8009072:	4601      	mov	r1, r0
 8009074:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 8009078:	f7f7 fd5e 	bl	8000b38 <__addsf3>
 800907c:	4651      	mov	r1, sl
 800907e:	4604      	mov	r4, r0
 8009080:	4648      	mov	r0, r9
 8009082:	f7f7 ff15 	bl	8000eb0 <__aeabi_fdiv>
 8009086:	4601      	mov	r1, r0
 8009088:	4620      	mov	r0, r4
 800908a:	f7f7 fe5d 	bl	8000d48 <__aeabi_fmul>
 800908e:	f028 080f 	bic.w	r8, r8, #15
 8009092:	4681      	mov	r9, r0
 8009094:	4641      	mov	r1, r8
 8009096:	4640      	mov	r0, r8
 8009098:	f7f7 fe56 	bl	8000d48 <__aeabi_fmul>
 800909c:	4601      	mov	r1, r0
 800909e:	4630      	mov	r0, r6
 80090a0:	f7f7 fd48 	bl	8000b34 <__aeabi_fsub>
 80090a4:	4641      	mov	r1, r8
 80090a6:	4604      	mov	r4, r0
 80090a8:	4638      	mov	r0, r7
 80090aa:	f7f7 fd45 	bl	8000b38 <__addsf3>
 80090ae:	4601      	mov	r1, r0
 80090b0:	4620      	mov	r0, r4
 80090b2:	f7f7 fefd 	bl	8000eb0 <__aeabi_fdiv>
 80090b6:	4601      	mov	r1, r0
 80090b8:	f7f7 fd3e 	bl	8000b38 <__addsf3>
 80090bc:	4601      	mov	r1, r0
 80090be:	480c      	ldr	r0, [pc, #48]	; (80090f0 <__ieee754_asinf+0x24c>)
 80090c0:	f7f7 fd38 	bl	8000b34 <__aeabi_fsub>
 80090c4:	4601      	mov	r1, r0
 80090c6:	4648      	mov	r0, r9
 80090c8:	f7f7 fd34 	bl	8000b34 <__aeabi_fsub>
 80090cc:	4641      	mov	r1, r8
 80090ce:	4604      	mov	r4, r0
 80090d0:	4640      	mov	r0, r8
 80090d2:	f7f7 fd31 	bl	8000b38 <__addsf3>
 80090d6:	4601      	mov	r1, r0
 80090d8:	4813      	ldr	r0, [pc, #76]	; (8009128 <__ieee754_asinf+0x284>)
 80090da:	f7f7 fd2b 	bl	8000b34 <__aeabi_fsub>
 80090de:	4601      	mov	r1, r0
 80090e0:	4620      	mov	r0, r4
 80090e2:	f7f7 fd27 	bl	8000b34 <__aeabi_fsub>
 80090e6:	4601      	mov	r1, r0
 80090e8:	480f      	ldr	r0, [pc, #60]	; (8009128 <__ieee754_asinf+0x284>)
 80090ea:	e7b9      	b.n	8009060 <__ieee754_asinf+0x1bc>
 80090ec:	3fc90fdb 	.word	0x3fc90fdb
 80090f0:	b33bbd2e 	.word	0xb33bbd2e
 80090f4:	7149f2ca 	.word	0x7149f2ca
 80090f8:	3811ef08 	.word	0x3811ef08
 80090fc:	3a4f7f04 	.word	0x3a4f7f04
 8009100:	3d241146 	.word	0x3d241146
 8009104:	3e4e0aa8 	.word	0x3e4e0aa8
 8009108:	3ea6b090 	.word	0x3ea6b090
 800910c:	3e2aaaab 	.word	0x3e2aaaab
 8009110:	3d9dc62e 	.word	0x3d9dc62e
 8009114:	3f303361 	.word	0x3f303361
 8009118:	4001572d 	.word	0x4001572d
 800911c:	4019d139 	.word	0x4019d139
 8009120:	3f799999 	.word	0x3f799999
 8009124:	333bbd2e 	.word	0x333bbd2e
 8009128:	3f490fdb 	.word	0x3f490fdb

0800912c <__ieee754_sqrtf>:
 800912c:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8009130:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8009134:	b570      	push	{r4, r5, r6, lr}
 8009136:	4603      	mov	r3, r0
 8009138:	4604      	mov	r4, r0
 800913a:	d309      	bcc.n	8009150 <__ieee754_sqrtf+0x24>
 800913c:	4601      	mov	r1, r0
 800913e:	f7f7 fe03 	bl	8000d48 <__aeabi_fmul>
 8009142:	4601      	mov	r1, r0
 8009144:	4620      	mov	r0, r4
 8009146:	f7f7 fcf7 	bl	8000b38 <__addsf3>
 800914a:	4604      	mov	r4, r0
 800914c:	4620      	mov	r0, r4
 800914e:	bd70      	pop	{r4, r5, r6, pc}
 8009150:	2a00      	cmp	r2, #0
 8009152:	d0fb      	beq.n	800914c <__ieee754_sqrtf+0x20>
 8009154:	2800      	cmp	r0, #0
 8009156:	da06      	bge.n	8009166 <__ieee754_sqrtf+0x3a>
 8009158:	4601      	mov	r1, r0
 800915a:	f7f7 fceb 	bl	8000b34 <__aeabi_fsub>
 800915e:	4601      	mov	r1, r0
 8009160:	f7f7 fea6 	bl	8000eb0 <__aeabi_fdiv>
 8009164:	e7f1      	b.n	800914a <__ieee754_sqrtf+0x1e>
 8009166:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 800916a:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800916e:	d029      	beq.n	80091c4 <__ieee754_sqrtf+0x98>
 8009170:	f3c3 0216 	ubfx	r2, r3, #0, #23
 8009174:	07cb      	lsls	r3, r1, #31
 8009176:	f04f 0300 	mov.w	r3, #0
 800917a:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 800917e:	f04f 0419 	mov.w	r4, #25
 8009182:	461e      	mov	r6, r3
 8009184:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8009188:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800918c:	bf58      	it	pl
 800918e:	0052      	lslpl	r2, r2, #1
 8009190:	1040      	asrs	r0, r0, #1
 8009192:	0052      	lsls	r2, r2, #1
 8009194:	1875      	adds	r5, r6, r1
 8009196:	4295      	cmp	r5, r2
 8009198:	bfde      	ittt	le
 800919a:	186e      	addle	r6, r5, r1
 800919c:	1b52      	suble	r2, r2, r5
 800919e:	185b      	addle	r3, r3, r1
 80091a0:	3c01      	subs	r4, #1
 80091a2:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80091a6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80091aa:	d1f3      	bne.n	8009194 <__ieee754_sqrtf+0x68>
 80091ac:	b112      	cbz	r2, 80091b4 <__ieee754_sqrtf+0x88>
 80091ae:	3301      	adds	r3, #1
 80091b0:	f023 0301 	bic.w	r3, r3, #1
 80091b4:	105c      	asrs	r4, r3, #1
 80091b6:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 80091ba:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 80091be:	e7c5      	b.n	800914c <__ieee754_sqrtf+0x20>
 80091c0:	005b      	lsls	r3, r3, #1
 80091c2:	3201      	adds	r2, #1
 80091c4:	0218      	lsls	r0, r3, #8
 80091c6:	d5fb      	bpl.n	80091c0 <__ieee754_sqrtf+0x94>
 80091c8:	3a01      	subs	r2, #1
 80091ca:	1a89      	subs	r1, r1, r2
 80091cc:	e7d0      	b.n	8009170 <__ieee754_sqrtf+0x44>

080091ce <finite>:
 80091ce:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 80091d2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80091d6:	0fc0      	lsrs	r0, r0, #31
 80091d8:	4770      	bx	lr

080091da <fabsf>:
 80091da:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80091de:	4770      	bx	lr

080091e0 <nanf>:
 80091e0:	4800      	ldr	r0, [pc, #0]	; (80091e4 <nanf+0x4>)
 80091e2:	4770      	bx	lr
 80091e4:	7fc00000 	.word	0x7fc00000

080091e8 <abort>:
 80091e8:	2006      	movs	r0, #6
 80091ea:	b508      	push	{r3, lr}
 80091ec:	f000 f93e 	bl	800946c <raise>
 80091f0:	2001      	movs	r0, #1
 80091f2:	f7f9 ffa8 	bl	8003146 <_exit>
	...

080091f8 <__errno>:
 80091f8:	4b01      	ldr	r3, [pc, #4]	; (8009200 <__errno+0x8>)
 80091fa:	6818      	ldr	r0, [r3, #0]
 80091fc:	4770      	bx	lr
 80091fe:	bf00      	nop
 8009200:	2000000c 	.word	0x2000000c

08009204 <__libc_init_array>:
 8009204:	b570      	push	{r4, r5, r6, lr}
 8009206:	2600      	movs	r6, #0
 8009208:	4d0c      	ldr	r5, [pc, #48]	; (800923c <__libc_init_array+0x38>)
 800920a:	4c0d      	ldr	r4, [pc, #52]	; (8009240 <__libc_init_array+0x3c>)
 800920c:	1b64      	subs	r4, r4, r5
 800920e:	10a4      	asrs	r4, r4, #2
 8009210:	42a6      	cmp	r6, r4
 8009212:	d109      	bne.n	8009228 <__libc_init_array+0x24>
 8009214:	f000 f954 	bl	80094c0 <_init>
 8009218:	2600      	movs	r6, #0
 800921a:	4d0a      	ldr	r5, [pc, #40]	; (8009244 <__libc_init_array+0x40>)
 800921c:	4c0a      	ldr	r4, [pc, #40]	; (8009248 <__libc_init_array+0x44>)
 800921e:	1b64      	subs	r4, r4, r5
 8009220:	10a4      	asrs	r4, r4, #2
 8009222:	42a6      	cmp	r6, r4
 8009224:	d105      	bne.n	8009232 <__libc_init_array+0x2e>
 8009226:	bd70      	pop	{r4, r5, r6, pc}
 8009228:	f855 3b04 	ldr.w	r3, [r5], #4
 800922c:	4798      	blx	r3
 800922e:	3601      	adds	r6, #1
 8009230:	e7ee      	b.n	8009210 <__libc_init_array+0xc>
 8009232:	f855 3b04 	ldr.w	r3, [r5], #4
 8009236:	4798      	blx	r3
 8009238:	3601      	adds	r6, #1
 800923a:	e7f2      	b.n	8009222 <__libc_init_array+0x1e>
 800923c:	080095c8 	.word	0x080095c8
 8009240:	080095c8 	.word	0x080095c8
 8009244:	080095c8 	.word	0x080095c8
 8009248:	080095d0 	.word	0x080095d0

0800924c <malloc>:
 800924c:	4b02      	ldr	r3, [pc, #8]	; (8009258 <malloc+0xc>)
 800924e:	4601      	mov	r1, r0
 8009250:	6818      	ldr	r0, [r3, #0]
 8009252:	f000 b879 	b.w	8009348 <_malloc_r>
 8009256:	bf00      	nop
 8009258:	2000000c 	.word	0x2000000c

0800925c <free>:
 800925c:	4b02      	ldr	r3, [pc, #8]	; (8009268 <free+0xc>)
 800925e:	4601      	mov	r1, r0
 8009260:	6818      	ldr	r0, [r3, #0]
 8009262:	f000 b825 	b.w	80092b0 <_free_r>
 8009266:	bf00      	nop
 8009268:	2000000c 	.word	0x2000000c

0800926c <memmove>:
 800926c:	4288      	cmp	r0, r1
 800926e:	b510      	push	{r4, lr}
 8009270:	eb01 0402 	add.w	r4, r1, r2
 8009274:	d902      	bls.n	800927c <memmove+0x10>
 8009276:	4284      	cmp	r4, r0
 8009278:	4623      	mov	r3, r4
 800927a:	d807      	bhi.n	800928c <memmove+0x20>
 800927c:	1e43      	subs	r3, r0, #1
 800927e:	42a1      	cmp	r1, r4
 8009280:	d008      	beq.n	8009294 <memmove+0x28>
 8009282:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009286:	f803 2f01 	strb.w	r2, [r3, #1]!
 800928a:	e7f8      	b.n	800927e <memmove+0x12>
 800928c:	4601      	mov	r1, r0
 800928e:	4402      	add	r2, r0
 8009290:	428a      	cmp	r2, r1
 8009292:	d100      	bne.n	8009296 <memmove+0x2a>
 8009294:	bd10      	pop	{r4, pc}
 8009296:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800929a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800929e:	e7f7      	b.n	8009290 <memmove+0x24>

080092a0 <memset>:
 80092a0:	4603      	mov	r3, r0
 80092a2:	4402      	add	r2, r0
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d100      	bne.n	80092aa <memset+0xa>
 80092a8:	4770      	bx	lr
 80092aa:	f803 1b01 	strb.w	r1, [r3], #1
 80092ae:	e7f9      	b.n	80092a4 <memset+0x4>

080092b0 <_free_r>:
 80092b0:	b538      	push	{r3, r4, r5, lr}
 80092b2:	4605      	mov	r5, r0
 80092b4:	2900      	cmp	r1, #0
 80092b6:	d043      	beq.n	8009340 <_free_r+0x90>
 80092b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092bc:	1f0c      	subs	r4, r1, #4
 80092be:	2b00      	cmp	r3, #0
 80092c0:	bfb8      	it	lt
 80092c2:	18e4      	addlt	r4, r4, r3
 80092c4:	f000 f8f0 	bl	80094a8 <__malloc_lock>
 80092c8:	4a1e      	ldr	r2, [pc, #120]	; (8009344 <_free_r+0x94>)
 80092ca:	6813      	ldr	r3, [r2, #0]
 80092cc:	4610      	mov	r0, r2
 80092ce:	b933      	cbnz	r3, 80092de <_free_r+0x2e>
 80092d0:	6063      	str	r3, [r4, #4]
 80092d2:	6014      	str	r4, [r2, #0]
 80092d4:	4628      	mov	r0, r5
 80092d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092da:	f000 b8eb 	b.w	80094b4 <__malloc_unlock>
 80092de:	42a3      	cmp	r3, r4
 80092e0:	d90a      	bls.n	80092f8 <_free_r+0x48>
 80092e2:	6821      	ldr	r1, [r4, #0]
 80092e4:	1862      	adds	r2, r4, r1
 80092e6:	4293      	cmp	r3, r2
 80092e8:	bf01      	itttt	eq
 80092ea:	681a      	ldreq	r2, [r3, #0]
 80092ec:	685b      	ldreq	r3, [r3, #4]
 80092ee:	1852      	addeq	r2, r2, r1
 80092f0:	6022      	streq	r2, [r4, #0]
 80092f2:	6063      	str	r3, [r4, #4]
 80092f4:	6004      	str	r4, [r0, #0]
 80092f6:	e7ed      	b.n	80092d4 <_free_r+0x24>
 80092f8:	461a      	mov	r2, r3
 80092fa:	685b      	ldr	r3, [r3, #4]
 80092fc:	b10b      	cbz	r3, 8009302 <_free_r+0x52>
 80092fe:	42a3      	cmp	r3, r4
 8009300:	d9fa      	bls.n	80092f8 <_free_r+0x48>
 8009302:	6811      	ldr	r1, [r2, #0]
 8009304:	1850      	adds	r0, r2, r1
 8009306:	42a0      	cmp	r0, r4
 8009308:	d10b      	bne.n	8009322 <_free_r+0x72>
 800930a:	6820      	ldr	r0, [r4, #0]
 800930c:	4401      	add	r1, r0
 800930e:	1850      	adds	r0, r2, r1
 8009310:	4283      	cmp	r3, r0
 8009312:	6011      	str	r1, [r2, #0]
 8009314:	d1de      	bne.n	80092d4 <_free_r+0x24>
 8009316:	6818      	ldr	r0, [r3, #0]
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	4401      	add	r1, r0
 800931c:	6011      	str	r1, [r2, #0]
 800931e:	6053      	str	r3, [r2, #4]
 8009320:	e7d8      	b.n	80092d4 <_free_r+0x24>
 8009322:	d902      	bls.n	800932a <_free_r+0x7a>
 8009324:	230c      	movs	r3, #12
 8009326:	602b      	str	r3, [r5, #0]
 8009328:	e7d4      	b.n	80092d4 <_free_r+0x24>
 800932a:	6820      	ldr	r0, [r4, #0]
 800932c:	1821      	adds	r1, r4, r0
 800932e:	428b      	cmp	r3, r1
 8009330:	bf01      	itttt	eq
 8009332:	6819      	ldreq	r1, [r3, #0]
 8009334:	685b      	ldreq	r3, [r3, #4]
 8009336:	1809      	addeq	r1, r1, r0
 8009338:	6021      	streq	r1, [r4, #0]
 800933a:	6063      	str	r3, [r4, #4]
 800933c:	6054      	str	r4, [r2, #4]
 800933e:	e7c9      	b.n	80092d4 <_free_r+0x24>
 8009340:	bd38      	pop	{r3, r4, r5, pc}
 8009342:	bf00      	nop
 8009344:	20000604 	.word	0x20000604

08009348 <_malloc_r>:
 8009348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800934a:	1ccd      	adds	r5, r1, #3
 800934c:	f025 0503 	bic.w	r5, r5, #3
 8009350:	3508      	adds	r5, #8
 8009352:	2d0c      	cmp	r5, #12
 8009354:	bf38      	it	cc
 8009356:	250c      	movcc	r5, #12
 8009358:	2d00      	cmp	r5, #0
 800935a:	4606      	mov	r6, r0
 800935c:	db01      	blt.n	8009362 <_malloc_r+0x1a>
 800935e:	42a9      	cmp	r1, r5
 8009360:	d903      	bls.n	800936a <_malloc_r+0x22>
 8009362:	230c      	movs	r3, #12
 8009364:	6033      	str	r3, [r6, #0]
 8009366:	2000      	movs	r0, #0
 8009368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800936a:	f000 f89d 	bl	80094a8 <__malloc_lock>
 800936e:	4921      	ldr	r1, [pc, #132]	; (80093f4 <_malloc_r+0xac>)
 8009370:	680a      	ldr	r2, [r1, #0]
 8009372:	4614      	mov	r4, r2
 8009374:	b99c      	cbnz	r4, 800939e <_malloc_r+0x56>
 8009376:	4f20      	ldr	r7, [pc, #128]	; (80093f8 <_malloc_r+0xb0>)
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	b923      	cbnz	r3, 8009386 <_malloc_r+0x3e>
 800937c:	4621      	mov	r1, r4
 800937e:	4630      	mov	r0, r6
 8009380:	f000 f83c 	bl	80093fc <_sbrk_r>
 8009384:	6038      	str	r0, [r7, #0]
 8009386:	4629      	mov	r1, r5
 8009388:	4630      	mov	r0, r6
 800938a:	f000 f837 	bl	80093fc <_sbrk_r>
 800938e:	1c43      	adds	r3, r0, #1
 8009390:	d123      	bne.n	80093da <_malloc_r+0x92>
 8009392:	230c      	movs	r3, #12
 8009394:	4630      	mov	r0, r6
 8009396:	6033      	str	r3, [r6, #0]
 8009398:	f000 f88c 	bl	80094b4 <__malloc_unlock>
 800939c:	e7e3      	b.n	8009366 <_malloc_r+0x1e>
 800939e:	6823      	ldr	r3, [r4, #0]
 80093a0:	1b5b      	subs	r3, r3, r5
 80093a2:	d417      	bmi.n	80093d4 <_malloc_r+0x8c>
 80093a4:	2b0b      	cmp	r3, #11
 80093a6:	d903      	bls.n	80093b0 <_malloc_r+0x68>
 80093a8:	6023      	str	r3, [r4, #0]
 80093aa:	441c      	add	r4, r3
 80093ac:	6025      	str	r5, [r4, #0]
 80093ae:	e004      	b.n	80093ba <_malloc_r+0x72>
 80093b0:	6863      	ldr	r3, [r4, #4]
 80093b2:	42a2      	cmp	r2, r4
 80093b4:	bf0c      	ite	eq
 80093b6:	600b      	streq	r3, [r1, #0]
 80093b8:	6053      	strne	r3, [r2, #4]
 80093ba:	4630      	mov	r0, r6
 80093bc:	f000 f87a 	bl	80094b4 <__malloc_unlock>
 80093c0:	f104 000b 	add.w	r0, r4, #11
 80093c4:	1d23      	adds	r3, r4, #4
 80093c6:	f020 0007 	bic.w	r0, r0, #7
 80093ca:	1ac2      	subs	r2, r0, r3
 80093cc:	d0cc      	beq.n	8009368 <_malloc_r+0x20>
 80093ce:	1a1b      	subs	r3, r3, r0
 80093d0:	50a3      	str	r3, [r4, r2]
 80093d2:	e7c9      	b.n	8009368 <_malloc_r+0x20>
 80093d4:	4622      	mov	r2, r4
 80093d6:	6864      	ldr	r4, [r4, #4]
 80093d8:	e7cc      	b.n	8009374 <_malloc_r+0x2c>
 80093da:	1cc4      	adds	r4, r0, #3
 80093dc:	f024 0403 	bic.w	r4, r4, #3
 80093e0:	42a0      	cmp	r0, r4
 80093e2:	d0e3      	beq.n	80093ac <_malloc_r+0x64>
 80093e4:	1a21      	subs	r1, r4, r0
 80093e6:	4630      	mov	r0, r6
 80093e8:	f000 f808 	bl	80093fc <_sbrk_r>
 80093ec:	3001      	adds	r0, #1
 80093ee:	d1dd      	bne.n	80093ac <_malloc_r+0x64>
 80093f0:	e7cf      	b.n	8009392 <_malloc_r+0x4a>
 80093f2:	bf00      	nop
 80093f4:	20000604 	.word	0x20000604
 80093f8:	20000608 	.word	0x20000608

080093fc <_sbrk_r>:
 80093fc:	b538      	push	{r3, r4, r5, lr}
 80093fe:	2300      	movs	r3, #0
 8009400:	4d05      	ldr	r5, [pc, #20]	; (8009418 <_sbrk_r+0x1c>)
 8009402:	4604      	mov	r4, r0
 8009404:	4608      	mov	r0, r1
 8009406:	602b      	str	r3, [r5, #0]
 8009408:	f7f9 fea8 	bl	800315c <_sbrk>
 800940c:	1c43      	adds	r3, r0, #1
 800940e:	d102      	bne.n	8009416 <_sbrk_r+0x1a>
 8009410:	682b      	ldr	r3, [r5, #0]
 8009412:	b103      	cbz	r3, 8009416 <_sbrk_r+0x1a>
 8009414:	6023      	str	r3, [r4, #0]
 8009416:	bd38      	pop	{r3, r4, r5, pc}
 8009418:	2000061c 	.word	0x2000061c

0800941c <_raise_r>:
 800941c:	291f      	cmp	r1, #31
 800941e:	b538      	push	{r3, r4, r5, lr}
 8009420:	4604      	mov	r4, r0
 8009422:	460d      	mov	r5, r1
 8009424:	d904      	bls.n	8009430 <_raise_r+0x14>
 8009426:	2316      	movs	r3, #22
 8009428:	6003      	str	r3, [r0, #0]
 800942a:	f04f 30ff 	mov.w	r0, #4294967295
 800942e:	bd38      	pop	{r3, r4, r5, pc}
 8009430:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009432:	b112      	cbz	r2, 800943a <_raise_r+0x1e>
 8009434:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009438:	b94b      	cbnz	r3, 800944e <_raise_r+0x32>
 800943a:	4620      	mov	r0, r4
 800943c:	f000 f830 	bl	80094a0 <_getpid_r>
 8009440:	462a      	mov	r2, r5
 8009442:	4601      	mov	r1, r0
 8009444:	4620      	mov	r0, r4
 8009446:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800944a:	f000 b817 	b.w	800947c <_kill_r>
 800944e:	2b01      	cmp	r3, #1
 8009450:	d00a      	beq.n	8009468 <_raise_r+0x4c>
 8009452:	1c59      	adds	r1, r3, #1
 8009454:	d103      	bne.n	800945e <_raise_r+0x42>
 8009456:	2316      	movs	r3, #22
 8009458:	6003      	str	r3, [r0, #0]
 800945a:	2001      	movs	r0, #1
 800945c:	e7e7      	b.n	800942e <_raise_r+0x12>
 800945e:	2400      	movs	r4, #0
 8009460:	4628      	mov	r0, r5
 8009462:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009466:	4798      	blx	r3
 8009468:	2000      	movs	r0, #0
 800946a:	e7e0      	b.n	800942e <_raise_r+0x12>

0800946c <raise>:
 800946c:	4b02      	ldr	r3, [pc, #8]	; (8009478 <raise+0xc>)
 800946e:	4601      	mov	r1, r0
 8009470:	6818      	ldr	r0, [r3, #0]
 8009472:	f7ff bfd3 	b.w	800941c <_raise_r>
 8009476:	bf00      	nop
 8009478:	2000000c 	.word	0x2000000c

0800947c <_kill_r>:
 800947c:	b538      	push	{r3, r4, r5, lr}
 800947e:	2300      	movs	r3, #0
 8009480:	4d06      	ldr	r5, [pc, #24]	; (800949c <_kill_r+0x20>)
 8009482:	4604      	mov	r4, r0
 8009484:	4608      	mov	r0, r1
 8009486:	4611      	mov	r1, r2
 8009488:	602b      	str	r3, [r5, #0]
 800948a:	f7f9 fe4c 	bl	8003126 <_kill>
 800948e:	1c43      	adds	r3, r0, #1
 8009490:	d102      	bne.n	8009498 <_kill_r+0x1c>
 8009492:	682b      	ldr	r3, [r5, #0]
 8009494:	b103      	cbz	r3, 8009498 <_kill_r+0x1c>
 8009496:	6023      	str	r3, [r4, #0]
 8009498:	bd38      	pop	{r3, r4, r5, pc}
 800949a:	bf00      	nop
 800949c:	2000061c 	.word	0x2000061c

080094a0 <_getpid_r>:
 80094a0:	f7f9 be3a 	b.w	8003118 <_getpid>

080094a4 <__retarget_lock_acquire_recursive>:
 80094a4:	4770      	bx	lr

080094a6 <__retarget_lock_release_recursive>:
 80094a6:	4770      	bx	lr

080094a8 <__malloc_lock>:
 80094a8:	4801      	ldr	r0, [pc, #4]	; (80094b0 <__malloc_lock+0x8>)
 80094aa:	f7ff bffb 	b.w	80094a4 <__retarget_lock_acquire_recursive>
 80094ae:	bf00      	nop
 80094b0:	20000614 	.word	0x20000614

080094b4 <__malloc_unlock>:
 80094b4:	4801      	ldr	r0, [pc, #4]	; (80094bc <__malloc_unlock+0x8>)
 80094b6:	f7ff bff6 	b.w	80094a6 <__retarget_lock_release_recursive>
 80094ba:	bf00      	nop
 80094bc:	20000614 	.word	0x20000614

080094c0 <_init>:
 80094c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094c2:	bf00      	nop
 80094c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094c6:	bc08      	pop	{r3}
 80094c8:	469e      	mov	lr, r3
 80094ca:	4770      	bx	lr

080094cc <_fini>:
 80094cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ce:	bf00      	nop
 80094d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094d2:	bc08      	pop	{r3}
 80094d4:	469e      	mov	lr, r3
 80094d6:	4770      	bx	lr
