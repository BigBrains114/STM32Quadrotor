
Drone_Controller_3DOF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008670  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08008780  08008780  00018780  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008870  08008870  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08008870  08008870  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008870  08008870  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008870  08008870  00018870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08008878  08008878  00018878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008880  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005f4  20000070  080088f0  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000664  080088f0  00020664  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c0e7  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003832  00000000  00000000  0003c180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b0  00000000  00000000  0003f9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011b0  00000000  00000000  00040c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c5b2  00000000  00000000  00041e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013878  00000000  00000000  0005e3ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095eab  00000000  00000000  00071c42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00107aed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ba4  00000000  00000000  00107b40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08008768 	.word	0x08008768

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08008768 	.word	0x08008768

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_frsub>:
 8000aec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000af0:	e002      	b.n	8000af8 <__addsf3>
 8000af2:	bf00      	nop

08000af4 <__aeabi_fsub>:
 8000af4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000af8 <__addsf3>:
 8000af8:	0042      	lsls	r2, r0, #1
 8000afa:	bf1f      	itttt	ne
 8000afc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b00:	ea92 0f03 	teqne	r2, r3
 8000b04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b0c:	d06a      	beq.n	8000be4 <__addsf3+0xec>
 8000b0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b16:	bfc1      	itttt	gt
 8000b18:	18d2      	addgt	r2, r2, r3
 8000b1a:	4041      	eorgt	r1, r0
 8000b1c:	4048      	eorgt	r0, r1
 8000b1e:	4041      	eorgt	r1, r0
 8000b20:	bfb8      	it	lt
 8000b22:	425b      	neglt	r3, r3
 8000b24:	2b19      	cmp	r3, #25
 8000b26:	bf88      	it	hi
 8000b28:	4770      	bxhi	lr
 8000b2a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4240      	negne	r0, r0
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b42:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4249      	negne	r1, r1
 8000b4a:	ea92 0f03 	teq	r2, r3
 8000b4e:	d03f      	beq.n	8000bd0 <__addsf3+0xd8>
 8000b50:	f1a2 0201 	sub.w	r2, r2, #1
 8000b54:	fa41 fc03 	asr.w	ip, r1, r3
 8000b58:	eb10 000c 	adds.w	r0, r0, ip
 8000b5c:	f1c3 0320 	rsb	r3, r3, #32
 8000b60:	fa01 f103 	lsl.w	r1, r1, r3
 8000b64:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b68:	d502      	bpl.n	8000b70 <__addsf3+0x78>
 8000b6a:	4249      	negs	r1, r1
 8000b6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b74:	d313      	bcc.n	8000b9e <__addsf3+0xa6>
 8000b76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b7a:	d306      	bcc.n	8000b8a <__addsf3+0x92>
 8000b7c:	0840      	lsrs	r0, r0, #1
 8000b7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b82:	f102 0201 	add.w	r2, r2, #1
 8000b86:	2afe      	cmp	r2, #254	; 0xfe
 8000b88:	d251      	bcs.n	8000c2e <__addsf3+0x136>
 8000b8a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b92:	bf08      	it	eq
 8000b94:	f020 0001 	biceq.w	r0, r0, #1
 8000b98:	ea40 0003 	orr.w	r0, r0, r3
 8000b9c:	4770      	bx	lr
 8000b9e:	0049      	lsls	r1, r1, #1
 8000ba0:	eb40 0000 	adc.w	r0, r0, r0
 8000ba4:	3a01      	subs	r2, #1
 8000ba6:	bf28      	it	cs
 8000ba8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bac:	d2ed      	bcs.n	8000b8a <__addsf3+0x92>
 8000bae:	fab0 fc80 	clz	ip, r0
 8000bb2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bb6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bbe:	bfaa      	itet	ge
 8000bc0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc4:	4252      	neglt	r2, r2
 8000bc6:	4318      	orrge	r0, r3
 8000bc8:	bfbc      	itt	lt
 8000bca:	40d0      	lsrlt	r0, r2
 8000bcc:	4318      	orrlt	r0, r3
 8000bce:	4770      	bx	lr
 8000bd0:	f092 0f00 	teq	r2, #0
 8000bd4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bd8:	bf06      	itte	eq
 8000bda:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bde:	3201      	addeq	r2, #1
 8000be0:	3b01      	subne	r3, #1
 8000be2:	e7b5      	b.n	8000b50 <__addsf3+0x58>
 8000be4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bec:	bf18      	it	ne
 8000bee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf2:	d021      	beq.n	8000c38 <__addsf3+0x140>
 8000bf4:	ea92 0f03 	teq	r2, r3
 8000bf8:	d004      	beq.n	8000c04 <__addsf3+0x10c>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	bf08      	it	eq
 8000c00:	4608      	moveq	r0, r1
 8000c02:	4770      	bx	lr
 8000c04:	ea90 0f01 	teq	r0, r1
 8000c08:	bf1c      	itt	ne
 8000c0a:	2000      	movne	r0, #0
 8000c0c:	4770      	bxne	lr
 8000c0e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c12:	d104      	bne.n	8000c1e <__addsf3+0x126>
 8000c14:	0040      	lsls	r0, r0, #1
 8000c16:	bf28      	it	cs
 8000c18:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c1c:	4770      	bx	lr
 8000c1e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c22:	bf3c      	itt	cc
 8000c24:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bxcc	lr
 8000c2a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c2e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c36:	4770      	bx	lr
 8000c38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c3c:	bf16      	itet	ne
 8000c3e:	4608      	movne	r0, r1
 8000c40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c44:	4601      	movne	r1, r0
 8000c46:	0242      	lsls	r2, r0, #9
 8000c48:	bf06      	itte	eq
 8000c4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c4e:	ea90 0f01 	teqeq	r0, r1
 8000c52:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_ui2f>:
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	e004      	b.n	8000c68 <__aeabi_i2f+0x8>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_i2f>:
 8000c60:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c64:	bf48      	it	mi
 8000c66:	4240      	negmi	r0, r0
 8000c68:	ea5f 0c00 	movs.w	ip, r0
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c74:	4601      	mov	r1, r0
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	e01c      	b.n	8000cb6 <__aeabi_l2f+0x2a>

08000c7c <__aeabi_ul2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e00a      	b.n	8000ca0 <__aeabi_l2f+0x14>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_l2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c98:	d502      	bpl.n	8000ca0 <__aeabi_l2f+0x14>
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	ea5f 0c01 	movs.w	ip, r1
 8000ca4:	bf02      	ittt	eq
 8000ca6:	4684      	moveq	ip, r0
 8000ca8:	4601      	moveq	r1, r0
 8000caa:	2000      	moveq	r0, #0
 8000cac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cb0:	bf08      	it	eq
 8000cb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cba:	fabc f28c 	clz	r2, ip
 8000cbe:	3a08      	subs	r2, #8
 8000cc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc4:	db10      	blt.n	8000ce8 <__aeabi_l2f+0x5c>
 8000cc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cca:	4463      	add	r3, ip
 8000ccc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd0:	f1c2 0220 	rsb	r2, r2, #32
 8000cd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cdc:	eb43 0002 	adc.w	r0, r3, r2
 8000ce0:	bf08      	it	eq
 8000ce2:	f020 0001 	biceq.w	r0, r0, #1
 8000ce6:	4770      	bx	lr
 8000ce8:	f102 0220 	add.w	r2, r2, #32
 8000cec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf0:	f1c2 0220 	rsb	r2, r2, #32
 8000cf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cfc:	eb43 0002 	adc.w	r0, r3, r2
 8000d00:	bf08      	it	eq
 8000d02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_fmul>:
 8000d08:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d10:	bf1e      	ittt	ne
 8000d12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d16:	ea92 0f0c 	teqne	r2, ip
 8000d1a:	ea93 0f0c 	teqne	r3, ip
 8000d1e:	d06f      	beq.n	8000e00 <__aeabi_fmul+0xf8>
 8000d20:	441a      	add	r2, r3
 8000d22:	ea80 0c01 	eor.w	ip, r0, r1
 8000d26:	0240      	lsls	r0, r0, #9
 8000d28:	bf18      	it	ne
 8000d2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d2e:	d01e      	beq.n	8000d6e <__aeabi_fmul+0x66>
 8000d30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d3c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d44:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d48:	bf3e      	ittt	cc
 8000d4a:	0049      	lslcc	r1, r1, #1
 8000d4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d50:	005b      	lslcc	r3, r3, #1
 8000d52:	ea40 0001 	orr.w	r0, r0, r1
 8000d56:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d5a:	2afd      	cmp	r2, #253	; 0xfd
 8000d5c:	d81d      	bhi.n	8000d9a <__aeabi_fmul+0x92>
 8000d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d66:	bf08      	it	eq
 8000d68:	f020 0001 	biceq.w	r0, r0, #1
 8000d6c:	4770      	bx	lr
 8000d6e:	f090 0f00 	teq	r0, #0
 8000d72:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d76:	bf08      	it	eq
 8000d78:	0249      	lsleq	r1, r1, #9
 8000d7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d82:	3a7f      	subs	r2, #127	; 0x7f
 8000d84:	bfc2      	ittt	gt
 8000d86:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d8e:	4770      	bxgt	lr
 8000d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	3a01      	subs	r2, #1
 8000d9a:	dc5d      	bgt.n	8000e58 <__aeabi_fmul+0x150>
 8000d9c:	f112 0f19 	cmn.w	r2, #25
 8000da0:	bfdc      	itt	le
 8000da2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000da6:	4770      	bxle	lr
 8000da8:	f1c2 0200 	rsb	r2, r2, #0
 8000dac:	0041      	lsls	r1, r0, #1
 8000dae:	fa21 f102 	lsr.w	r1, r1, r2
 8000db2:	f1c2 0220 	rsb	r2, r2, #32
 8000db6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dba:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dbe:	f140 0000 	adc.w	r0, r0, #0
 8000dc2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dc6:	bf08      	it	eq
 8000dc8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dcc:	4770      	bx	lr
 8000dce:	f092 0f00 	teq	r2, #0
 8000dd2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd6:	bf02      	ittt	eq
 8000dd8:	0040      	lsleq	r0, r0, #1
 8000dda:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dde:	3a01      	subeq	r2, #1
 8000de0:	d0f9      	beq.n	8000dd6 <__aeabi_fmul+0xce>
 8000de2:	ea40 000c 	orr.w	r0, r0, ip
 8000de6:	f093 0f00 	teq	r3, #0
 8000dea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dee:	bf02      	ittt	eq
 8000df0:	0049      	lsleq	r1, r1, #1
 8000df2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df6:	3b01      	subeq	r3, #1
 8000df8:	d0f9      	beq.n	8000dee <__aeabi_fmul+0xe6>
 8000dfa:	ea41 010c 	orr.w	r1, r1, ip
 8000dfe:	e78f      	b.n	8000d20 <__aeabi_fmul+0x18>
 8000e00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e04:	ea92 0f0c 	teq	r2, ip
 8000e08:	bf18      	it	ne
 8000e0a:	ea93 0f0c 	teqne	r3, ip
 8000e0e:	d00a      	beq.n	8000e26 <__aeabi_fmul+0x11e>
 8000e10:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e14:	bf18      	it	ne
 8000e16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	d1d8      	bne.n	8000dce <__aeabi_fmul+0xc6>
 8000e1c:	ea80 0001 	eor.w	r0, r0, r1
 8000e20:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e24:	4770      	bx	lr
 8000e26:	f090 0f00 	teq	r0, #0
 8000e2a:	bf17      	itett	ne
 8000e2c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e30:	4608      	moveq	r0, r1
 8000e32:	f091 0f00 	teqne	r1, #0
 8000e36:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e3a:	d014      	beq.n	8000e66 <__aeabi_fmul+0x15e>
 8000e3c:	ea92 0f0c 	teq	r2, ip
 8000e40:	d101      	bne.n	8000e46 <__aeabi_fmul+0x13e>
 8000e42:	0242      	lsls	r2, r0, #9
 8000e44:	d10f      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e46:	ea93 0f0c 	teq	r3, ip
 8000e4a:	d103      	bne.n	8000e54 <__aeabi_fmul+0x14c>
 8000e4c:	024b      	lsls	r3, r1, #9
 8000e4e:	bf18      	it	ne
 8000e50:	4608      	movne	r0, r1
 8000e52:	d108      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e54:	ea80 0001 	eor.w	r0, r0, r1
 8000e58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e64:	4770      	bx	lr
 8000e66:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e6a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e6e:	4770      	bx	lr

08000e70 <__aeabi_fdiv>:
 8000e70:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e78:	bf1e      	ittt	ne
 8000e7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e7e:	ea92 0f0c 	teqne	r2, ip
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d069      	beq.n	8000f5c <__aeabi_fdiv+0xec>
 8000e88:	eba2 0203 	sub.w	r2, r2, r3
 8000e8c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e90:	0249      	lsls	r1, r1, #9
 8000e92:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e96:	d037      	beq.n	8000f08 <__aeabi_fdiv+0x98>
 8000e98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ea0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ea4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	bf38      	it	cc
 8000eac:	005b      	lslcc	r3, r3, #1
 8000eae:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eb2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	bf24      	itt	cs
 8000eba:	1a5b      	subcs	r3, r3, r1
 8000ebc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ec0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ec4:	bf24      	itt	cs
 8000ec6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ece:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ed2:	bf24      	itt	cs
 8000ed4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ed8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000edc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ee6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eea:	011b      	lsls	r3, r3, #4
 8000eec:	bf18      	it	ne
 8000eee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ef2:	d1e0      	bne.n	8000eb6 <__aeabi_fdiv+0x46>
 8000ef4:	2afd      	cmp	r2, #253	; 0xfd
 8000ef6:	f63f af50 	bhi.w	8000d9a <__aeabi_fmul+0x92>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f00:	bf08      	it	eq
 8000f02:	f020 0001 	biceq.w	r0, r0, #1
 8000f06:	4770      	bx	lr
 8000f08:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f10:	327f      	adds	r2, #127	; 0x7f
 8000f12:	bfc2      	ittt	gt
 8000f14:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f1c:	4770      	bxgt	lr
 8000f1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f22:	f04f 0300 	mov.w	r3, #0
 8000f26:	3a01      	subs	r2, #1
 8000f28:	e737      	b.n	8000d9a <__aeabi_fmul+0x92>
 8000f2a:	f092 0f00 	teq	r2, #0
 8000f2e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f32:	bf02      	ittt	eq
 8000f34:	0040      	lsleq	r0, r0, #1
 8000f36:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f3a:	3a01      	subeq	r2, #1
 8000f3c:	d0f9      	beq.n	8000f32 <__aeabi_fdiv+0xc2>
 8000f3e:	ea40 000c 	orr.w	r0, r0, ip
 8000f42:	f093 0f00 	teq	r3, #0
 8000f46:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f4a:	bf02      	ittt	eq
 8000f4c:	0049      	lsleq	r1, r1, #1
 8000f4e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f52:	3b01      	subeq	r3, #1
 8000f54:	d0f9      	beq.n	8000f4a <__aeabi_fdiv+0xda>
 8000f56:	ea41 010c 	orr.w	r1, r1, ip
 8000f5a:	e795      	b.n	8000e88 <__aeabi_fdiv+0x18>
 8000f5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f60:	ea92 0f0c 	teq	r2, ip
 8000f64:	d108      	bne.n	8000f78 <__aeabi_fdiv+0x108>
 8000f66:	0242      	lsls	r2, r0, #9
 8000f68:	f47f af7d 	bne.w	8000e66 <__aeabi_fmul+0x15e>
 8000f6c:	ea93 0f0c 	teq	r3, ip
 8000f70:	f47f af70 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e776      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f78:	ea93 0f0c 	teq	r3, ip
 8000f7c:	d104      	bne.n	8000f88 <__aeabi_fdiv+0x118>
 8000f7e:	024b      	lsls	r3, r1, #9
 8000f80:	f43f af4c 	beq.w	8000e1c <__aeabi_fmul+0x114>
 8000f84:	4608      	mov	r0, r1
 8000f86:	e76e      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f8c:	bf18      	it	ne
 8000f8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f92:	d1ca      	bne.n	8000f2a <__aeabi_fdiv+0xba>
 8000f94:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f98:	f47f af5c 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f9c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fa0:	f47f af3c 	bne.w	8000e1c <__aeabi_fmul+0x114>
 8000fa4:	e75f      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000fa6:	bf00      	nop

08000fa8 <__gesf2>:
 8000fa8:	f04f 3cff 	mov.w	ip, #4294967295
 8000fac:	e006      	b.n	8000fbc <__cmpsf2+0x4>
 8000fae:	bf00      	nop

08000fb0 <__lesf2>:
 8000fb0:	f04f 0c01 	mov.w	ip, #1
 8000fb4:	e002      	b.n	8000fbc <__cmpsf2+0x4>
 8000fb6:	bf00      	nop

08000fb8 <__cmpsf2>:
 8000fb8:	f04f 0c01 	mov.w	ip, #1
 8000fbc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fc0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fc4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fc8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fcc:	bf18      	it	ne
 8000fce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fd2:	d011      	beq.n	8000ff8 <__cmpsf2+0x40>
 8000fd4:	b001      	add	sp, #4
 8000fd6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fda:	bf18      	it	ne
 8000fdc:	ea90 0f01 	teqne	r0, r1
 8000fe0:	bf58      	it	pl
 8000fe2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fe6:	bf88      	it	hi
 8000fe8:	17c8      	asrhi	r0, r1, #31
 8000fea:	bf38      	it	cc
 8000fec:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ff0:	bf18      	it	ne
 8000ff2:	f040 0001 	orrne.w	r0, r0, #1
 8000ff6:	4770      	bx	lr
 8000ff8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ffc:	d102      	bne.n	8001004 <__cmpsf2+0x4c>
 8000ffe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001002:	d105      	bne.n	8001010 <__cmpsf2+0x58>
 8001004:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001008:	d1e4      	bne.n	8000fd4 <__cmpsf2+0x1c>
 800100a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800100e:	d0e1      	beq.n	8000fd4 <__cmpsf2+0x1c>
 8001010:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <__aeabi_cfrcmple>:
 8001018:	4684      	mov	ip, r0
 800101a:	4608      	mov	r0, r1
 800101c:	4661      	mov	r1, ip
 800101e:	e7ff      	b.n	8001020 <__aeabi_cfcmpeq>

08001020 <__aeabi_cfcmpeq>:
 8001020:	b50f      	push	{r0, r1, r2, r3, lr}
 8001022:	f7ff ffc9 	bl	8000fb8 <__cmpsf2>
 8001026:	2800      	cmp	r0, #0
 8001028:	bf48      	it	mi
 800102a:	f110 0f00 	cmnmi.w	r0, #0
 800102e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001030 <__aeabi_fcmpeq>:
 8001030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001034:	f7ff fff4 	bl	8001020 <__aeabi_cfcmpeq>
 8001038:	bf0c      	ite	eq
 800103a:	2001      	moveq	r0, #1
 800103c:	2000      	movne	r0, #0
 800103e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001042:	bf00      	nop

08001044 <__aeabi_fcmplt>:
 8001044:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001048:	f7ff ffea 	bl	8001020 <__aeabi_cfcmpeq>
 800104c:	bf34      	ite	cc
 800104e:	2001      	movcc	r0, #1
 8001050:	2000      	movcs	r0, #0
 8001052:	f85d fb08 	ldr.w	pc, [sp], #8
 8001056:	bf00      	nop

08001058 <__aeabi_fcmple>:
 8001058:	f84d ed08 	str.w	lr, [sp, #-8]!
 800105c:	f7ff ffe0 	bl	8001020 <__aeabi_cfcmpeq>
 8001060:	bf94      	ite	ls
 8001062:	2001      	movls	r0, #1
 8001064:	2000      	movhi	r0, #0
 8001066:	f85d fb08 	ldr.w	pc, [sp], #8
 800106a:	bf00      	nop

0800106c <__aeabi_fcmpge>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff ffd2 	bl	8001018 <__aeabi_cfrcmple>
 8001074:	bf94      	ite	ls
 8001076:	2001      	movls	r0, #1
 8001078:	2000      	movhi	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmpgt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffc8 	bl	8001018 <__aeabi_cfrcmple>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmpun>:
 8001094:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001098:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800109c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010a0:	d102      	bne.n	80010a8 <__aeabi_fcmpun+0x14>
 80010a2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010a6:	d108      	bne.n	80010ba <__aeabi_fcmpun+0x26>
 80010a8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010ac:	d102      	bne.n	80010b4 <__aeabi_fcmpun+0x20>
 80010ae:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010b2:	d102      	bne.n	80010ba <__aeabi_fcmpun+0x26>
 80010b4:	f04f 0000 	mov.w	r0, #0
 80010b8:	4770      	bx	lr
 80010ba:	f04f 0001 	mov.w	r0, #1
 80010be:	4770      	bx	lr

080010c0 <__aeabi_f2iz>:
 80010c0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010c4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010c8:	d30f      	bcc.n	80010ea <__aeabi_f2iz+0x2a>
 80010ca:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010ce:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010d2:	d90d      	bls.n	80010f0 <__aeabi_f2iz+0x30>
 80010d4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010dc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010e0:	fa23 f002 	lsr.w	r0, r3, r2
 80010e4:	bf18      	it	ne
 80010e6:	4240      	negne	r0, r0
 80010e8:	4770      	bx	lr
 80010ea:	f04f 0000 	mov.w	r0, #0
 80010ee:	4770      	bx	lr
 80010f0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010f4:	d101      	bne.n	80010fa <__aeabi_f2iz+0x3a>
 80010f6:	0242      	lsls	r2, r0, #9
 80010f8:	d105      	bne.n	8001106 <__aeabi_f2iz+0x46>
 80010fa:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010fe:	bf08      	it	eq
 8001100:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001104:	4770      	bx	lr
 8001106:	f04f 0000 	mov.w	r0, #0
 800110a:	4770      	bx	lr

0800110c <_ZSt4asinf>:
  using ::asin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  asin(float __x)
  { return __builtin_asinf(__x); }
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f006 fe67 	bl	8007de8 <asinf>
 800111a:	4603      	mov	r3, r0
 800111c:	4618      	mov	r0, r3
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f006 fe81 	bl	8007e34 <sqrtf>
 8001132:	4603      	mov	r3, r0
 8001134:	4618      	mov	r0, r3
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f000 ffbe 	bl	80020c6 <_ZNSaIdED1Ev>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4618      	mov	r0, r3
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <_ZNSt12_Vector_baseIdSaIdEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4618      	mov	r0, r3
 8001160:	f000 ffa1 	bl	80020a6 <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implC1Ev>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4618      	mov	r0, r3
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <_ZNSt6vectorIdSaIdEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 800116e:	b580      	push	{r7, lr}
 8001170:	b082      	sub	sp, #8
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ffeb 	bl	8001154 <_ZNSt12_Vector_baseIdSaIdEEC1Ev>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4618      	mov	r0, r3
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800118c:	f001 fc10 	bl	80029b0 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(2000);
 8001190:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001194:	f001 fc6e 	bl	8002a74 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001198:	f000 f876 	bl	8001288 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800119c:	f000 fb32 	bl	8001804 <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 80011a0:	f000 f8c0 	bl	8001324 <_ZL12MX_I2C1_Initv>
  MX_TIM2_Init();
 80011a4:	f000 f9bc 	bl	8001520 <_ZL12MX_TIM2_Initv>
  MX_TIM1_Init();
 80011a8:	f000 f8f0 	bl	800138c <_ZL12MX_TIM1_Initv>
  MX_USART2_UART_Init();
 80011ac:	f000 fafc 	bl	80017a8 <_ZL19MX_USART2_UART_Initv>
  MX_TIM3_Init();
 80011b0:	f000 fa12 	bl	80015d8 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 80011b4:	f000 fa9a 	bl	80016ec <_ZL12MX_TIM4_Initv>
  /* USER CODE BEGIN 2 */

  MPU6050_Baslat();
 80011b8:	f000 fba8 	bl	800190c <_Z14MPU6050_Baslatv>
  //Gyro kalibrasyon hatalarını hesapla.
  gyro_e_x = GyroErr(GYRO_X_ADDR);
 80011bc:	2043      	movs	r0, #67	; 0x43
 80011be:	f000 fccb 	bl	8001b58 <_Z7GyroErrh>
 80011c2:	4603      	mov	r3, r0
 80011c4:	4a27      	ldr	r2, [pc, #156]	; (8001264 <main+0xdc>)
 80011c6:	6013      	str	r3, [r2, #0]

  //Kontrolcü Timer'ı
  HAL_TIM_Base_Start_IT(&htim2);
 80011c8:	4827      	ldr	r0, [pc, #156]	; (8001268 <main+0xe0>)
 80011ca:	f003 fbef 	bl	80049ac <HAL_TIM_Base_Start_IT>

  //Micros timer
  HAL_TIM_Base_Start(&htim3);
 80011ce:	4827      	ldr	r0, [pc, #156]	; (800126c <main+0xe4>)
 80011d0:	f003 fba2 	bl	8004918 <HAL_TIM_Base_Start>


  //PWM çıkış timer'ları
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80011d4:	2100      	movs	r1, #0
 80011d6:	4826      	ldr	r0, [pc, #152]	; (8001270 <main+0xe8>)
 80011d8:	f003 fc8a 	bl	8004af0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80011dc:	2104      	movs	r1, #4
 80011de:	4824      	ldr	r0, [pc, #144]	; (8001270 <main+0xe8>)
 80011e0:	f003 fc86 	bl	8004af0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80011e4:	2108      	movs	r1, #8
 80011e6:	4822      	ldr	r0, [pc, #136]	; (8001270 <main+0xe8>)
 80011e8:	f003 fc82 	bl	8004af0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80011ec:	210c      	movs	r1, #12
 80011ee:	4820      	ldr	r0, [pc, #128]	; (8001270 <main+0xe8>)
 80011f0:	f003 fc7e 	bl	8004af0 <HAL_TIM_PWM_Start>

  //PPM Input Capture Kanalları
  //HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 80011f4:	2104      	movs	r1, #4
 80011f6:	481d      	ldr	r0, [pc, #116]	; (800126c <main+0xe4>)
 80011f8:	f003 fd74 	bl	8004ce4 <HAL_TIM_IC_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //micros = __HAL_TIM_GET_COUNTER(&htim3);
	  //sprintf(buf,"%d\r\n",int(roll)); // @suppress("Float formatting support")
	  if(HAL_GetTick()- sent_time > 100) {
 80011fc:	f001 fc30 	bl	8002a60 <HAL_GetTick>
 8001200:	4603      	mov	r3, r0
 8001202:	4a1c      	ldr	r2, [pc, #112]	; (8001274 <main+0xec>)
 8001204:	6812      	ldr	r2, [r2, #0]
 8001206:	1a9b      	subs	r3, r3, r2
 8001208:	2b64      	cmp	r3, #100	; 0x64
 800120a:	bf8c      	ite	hi
 800120c:	2301      	movhi	r3, #1
 800120e:	2300      	movls	r3, #0
 8001210:	b2db      	uxtb	r3, r3
 8001212:	2b00      	cmp	r3, #0
 8001214:	d00e      	beq.n	8001234 <main+0xac>
		  TelemPack();
 8001216:	f000 fc47 	bl	8001aa8 <_Z9TelemPackv>
		  HAL_UART_Transmit(&huart2, (uint8_t*)buf, sizeof(struct telem_pack), 1000);
 800121a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800121e:	2214      	movs	r2, #20
 8001220:	4915      	ldr	r1, [pc, #84]	; (8001278 <main+0xf0>)
 8001222:	4816      	ldr	r0, [pc, #88]	; (800127c <main+0xf4>)
 8001224:	f004 fea2 	bl	8005f6c <HAL_UART_Transmit>
		  sent_time = HAL_GetTick();
 8001228:	f001 fc1a 	bl	8002a60 <HAL_GetTick>
 800122c:	4603      	mov	r3, r0
 800122e:	461a      	mov	r2, r3
 8001230:	4b10      	ldr	r3, [pc, #64]	; (8001274 <main+0xec>)
 8001232:	601a      	str	r2, [r3, #0]

	  }
	  //sprintf(buf,"%s\n","test");

	  Check_Arm();
 8001234:	f000 fb9e 	bl	8001974 <_Z9Check_Armv>
	  Check_Disarm();
 8001238:	f000 fbea 	bl	8001a10 <_Z12Check_Disarmv>
	  if(armed) {
 800123c:	4b10      	ldr	r3, [pc, #64]	; (8001280 <main+0xf8>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d0db      	beq.n	80011fc <main+0x74>
		  if(!motor_start) {
 8001244:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <main+0xfc>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	f083 0301 	eor.w	r3, r3, #1
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b00      	cmp	r3, #0
 8001250:	d004      	beq.n	800125c <main+0xd4>
			  MotorBaslat();
 8001252:	f000 fceb 	bl	8001c2c <_Z11MotorBaslatv>
			  motor_start = true;
 8001256:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <main+0xfc>)
 8001258:	2201      	movs	r2, #1
 800125a:	701a      	strb	r2, [r3, #0]
		  }

		  PWMYaz();
 800125c:	f000 fcaa 	bl	8001bb4 <_Z6PWMYazv>
	  if(HAL_GetTick()- sent_time > 100) {
 8001260:	e7cc      	b.n	80011fc <main+0x74>
 8001262:	bf00      	nop
 8001264:	2000024c 	.word	0x2000024c
 8001268:	20000128 	.word	0x20000128
 800126c:	20000170 	.word	0x20000170
 8001270:	200000e0 	.word	0x200000e0
 8001274:	2000062c 	.word	0x2000062c
 8001278:	200002bc 	.word	0x200002bc
 800127c:	20000200 	.word	0x20000200
 8001280:	20000631 	.word	0x20000631
 8001284:	20000632 	.word	0x20000632

08001288 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b090      	sub	sp, #64	; 0x40
 800128c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800128e:	f107 0318 	add.w	r3, r7, #24
 8001292:	2228      	movs	r2, #40	; 0x28
 8001294:	2100      	movs	r1, #0
 8001296:	4618      	mov	r0, r3
 8001298:	f007 f956 	bl	8008548 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800129c:	1d3b      	adds	r3, r7, #4
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
 80012a4:	609a      	str	r2, [r3, #8]
 80012a6:	60da      	str	r2, [r3, #12]
 80012a8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012aa:	2301      	movs	r3, #1
 80012ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012b4:	2300      	movs	r3, #0
 80012b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012b8:	2301      	movs	r3, #1
 80012ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012bc:	2302      	movs	r3, #2
 80012be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80012c6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80012ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012cc:	f107 0318 	add.w	r3, r7, #24
 80012d0:	4618      	mov	r0, r3
 80012d2:	f002 feb7 	bl	8004044 <HAL_RCC_OscConfig>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	bf14      	ite	ne
 80012dc:	2301      	movne	r3, #1
 80012de:	2300      	moveq	r3, #0
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 80012e6:	f000 fed9 	bl	800209c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ea:	230f      	movs	r3, #15
 80012ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ee:	2302      	movs	r3, #2
 80012f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012f6:	2300      	movs	r3, #0
 80012f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	2101      	movs	r1, #1
 8001302:	4618      	mov	r0, r3
 8001304:	f003 f91e 	bl	8004544 <HAL_RCC_ClockConfig>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	bf14      	ite	ne
 800130e:	2301      	movne	r3, #1
 8001310:	2300      	moveq	r3, #0
 8001312:	b2db      	uxtb	r3, r3
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <_Z18SystemClock_Configv+0x94>
  {
    Error_Handler();
 8001318:	f000 fec0 	bl	800209c <Error_Handler>
  }
}
 800131c:	bf00      	nop
 800131e:	3740      	adds	r7, #64	; 0x40
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001328:	4b15      	ldr	r3, [pc, #84]	; (8001380 <_ZL12MX_I2C1_Initv+0x5c>)
 800132a:	4a16      	ldr	r2, [pc, #88]	; (8001384 <_ZL12MX_I2C1_Initv+0x60>)
 800132c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800132e:	4b14      	ldr	r3, [pc, #80]	; (8001380 <_ZL12MX_I2C1_Initv+0x5c>)
 8001330:	4a15      	ldr	r2, [pc, #84]	; (8001388 <_ZL12MX_I2C1_Initv+0x64>)
 8001332:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001334:	4b12      	ldr	r3, [pc, #72]	; (8001380 <_ZL12MX_I2C1_Initv+0x5c>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800133a:	4b11      	ldr	r3, [pc, #68]	; (8001380 <_ZL12MX_I2C1_Initv+0x5c>)
 800133c:	2200      	movs	r2, #0
 800133e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001340:	4b0f      	ldr	r3, [pc, #60]	; (8001380 <_ZL12MX_I2C1_Initv+0x5c>)
 8001342:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001346:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001348:	4b0d      	ldr	r3, [pc, #52]	; (8001380 <_ZL12MX_I2C1_Initv+0x5c>)
 800134a:	2200      	movs	r2, #0
 800134c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800134e:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <_ZL12MX_I2C1_Initv+0x5c>)
 8001350:	2200      	movs	r2, #0
 8001352:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001354:	4b0a      	ldr	r3, [pc, #40]	; (8001380 <_ZL12MX_I2C1_Initv+0x5c>)
 8001356:	2200      	movs	r2, #0
 8001358:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800135a:	4b09      	ldr	r3, [pc, #36]	; (8001380 <_ZL12MX_I2C1_Initv+0x5c>)
 800135c:	2200      	movs	r2, #0
 800135e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001360:	4807      	ldr	r0, [pc, #28]	; (8001380 <_ZL12MX_I2C1_Initv+0x5c>)
 8001362:	f001 fe6f 	bl	8003044 <HAL_I2C_Init>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	bf14      	ite	ne
 800136c:	2301      	movne	r3, #1
 800136e:	2300      	moveq	r3, #0
 8001370:	b2db      	uxtb	r3, r3
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8001376:	f000 fe91 	bl	800209c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	2000008c 	.word	0x2000008c
 8001384:	40005400 	.word	0x40005400
 8001388:	00061a80 	.word	0x00061a80

0800138c <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b092      	sub	sp, #72	; 0x48
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001392:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800139c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	611a      	str	r2, [r3, #16]
 80013ac:	615a      	str	r2, [r3, #20]
 80013ae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013b0:	1d3b      	adds	r3, r7, #4
 80013b2:	2220      	movs	r2, #32
 80013b4:	2100      	movs	r1, #0
 80013b6:	4618      	mov	r0, r3
 80013b8:	f007 f8c6 	bl	8008548 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013bc:	4b56      	ldr	r3, [pc, #344]	; (8001518 <_ZL12MX_TIM1_Initv+0x18c>)
 80013be:	4a57      	ldr	r2, [pc, #348]	; (800151c <_ZL12MX_TIM1_Initv+0x190>)
 80013c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32-1;
 80013c2:	4b55      	ldr	r3, [pc, #340]	; (8001518 <_ZL12MX_TIM1_Initv+0x18c>)
 80013c4:	221f      	movs	r2, #31
 80013c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c8:	4b53      	ldr	r3, [pc, #332]	; (8001518 <_ZL12MX_TIM1_Initv+0x18c>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 80013ce:	4b52      	ldr	r3, [pc, #328]	; (8001518 <_ZL12MX_TIM1_Initv+0x18c>)
 80013d0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80013d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013d6:	4b50      	ldr	r3, [pc, #320]	; (8001518 <_ZL12MX_TIM1_Initv+0x18c>)
 80013d8:	2200      	movs	r2, #0
 80013da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013dc:	4b4e      	ldr	r3, [pc, #312]	; (8001518 <_ZL12MX_TIM1_Initv+0x18c>)
 80013de:	2200      	movs	r2, #0
 80013e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e2:	4b4d      	ldr	r3, [pc, #308]	; (8001518 <_ZL12MX_TIM1_Initv+0x18c>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013e8:	484b      	ldr	r0, [pc, #300]	; (8001518 <_ZL12MX_TIM1_Initv+0x18c>)
 80013ea:	f003 fb31 	bl	8004a50 <HAL_TIM_PWM_Init>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	bf14      	ite	ne
 80013f4:	2301      	movne	r3, #1
 80013f6:	2300      	moveq	r3, #0
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 80013fe:	f000 fe4d 	bl	800209c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001402:	2300      	movs	r3, #0
 8001404:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001406:	2300      	movs	r3, #0
 8001408:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800140a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800140e:	4619      	mov	r1, r3
 8001410:	4841      	ldr	r0, [pc, #260]	; (8001518 <_ZL12MX_TIM1_Initv+0x18c>)
 8001412:	f004 fc9d 	bl	8005d50 <HAL_TIMEx_MasterConfigSynchronization>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	bf14      	ite	ne
 800141c:	2301      	movne	r3, #1
 800141e:	2300      	moveq	r3, #0
 8001420:	b2db      	uxtb	r3, r3
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 8001426:	f000 fe39 	bl	800209c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800142a:	2360      	movs	r3, #96	; 0x60
 800142c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001432:	2300      	movs	r3, #0
 8001434:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001436:	2300      	movs	r3, #0
 8001438:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800143a:	2300      	movs	r3, #0
 800143c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800143e:	2300      	movs	r3, #0
 8001440:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001442:	2300      	movs	r3, #0
 8001444:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001446:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800144a:	2200      	movs	r2, #0
 800144c:	4619      	mov	r1, r3
 800144e:	4832      	ldr	r0, [pc, #200]	; (8001518 <_ZL12MX_TIM1_Initv+0x18c>)
 8001450:	f003 feea 	bl	8005228 <HAL_TIM_PWM_ConfigChannel>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	bf14      	ite	ne
 800145a:	2301      	movne	r3, #1
 800145c:	2300      	moveq	r3, #0
 800145e:	b2db      	uxtb	r3, r3
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <_ZL12MX_TIM1_Initv+0xdc>
  {
    Error_Handler();
 8001464:	f000 fe1a 	bl	800209c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001468:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800146c:	2204      	movs	r2, #4
 800146e:	4619      	mov	r1, r3
 8001470:	4829      	ldr	r0, [pc, #164]	; (8001518 <_ZL12MX_TIM1_Initv+0x18c>)
 8001472:	f003 fed9 	bl	8005228 <HAL_TIM_PWM_ConfigChannel>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	bf14      	ite	ne
 800147c:	2301      	movne	r3, #1
 800147e:	2300      	moveq	r3, #0
 8001480:	b2db      	uxtb	r3, r3
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <_ZL12MX_TIM1_Initv+0xfe>
  {
    Error_Handler();
 8001486:	f000 fe09 	bl	800209c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800148a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800148e:	2208      	movs	r2, #8
 8001490:	4619      	mov	r1, r3
 8001492:	4821      	ldr	r0, [pc, #132]	; (8001518 <_ZL12MX_TIM1_Initv+0x18c>)
 8001494:	f003 fec8 	bl	8005228 <HAL_TIM_PWM_ConfigChannel>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	bf14      	ite	ne
 800149e:	2301      	movne	r3, #1
 80014a0:	2300      	moveq	r3, #0
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <_ZL12MX_TIM1_Initv+0x120>
  {
    Error_Handler();
 80014a8:	f000 fdf8 	bl	800209c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b0:	220c      	movs	r2, #12
 80014b2:	4619      	mov	r1, r3
 80014b4:	4818      	ldr	r0, [pc, #96]	; (8001518 <_ZL12MX_TIM1_Initv+0x18c>)
 80014b6:	f003 feb7 	bl	8005228 <HAL_TIM_PWM_ConfigChannel>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	bf14      	ite	ne
 80014c0:	2301      	movne	r3, #1
 80014c2:	2300      	moveq	r3, #0
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <_ZL12MX_TIM1_Initv+0x142>
  {
    Error_Handler();
 80014ca:	f000 fde7 	bl	800209c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014ce:	2300      	movs	r3, #0
 80014d0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014d2:	2300      	movs	r3, #0
 80014d4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014de:	2300      	movs	r3, #0
 80014e0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014e6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014e8:	2300      	movs	r3, #0
 80014ea:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014ec:	1d3b      	adds	r3, r7, #4
 80014ee:	4619      	mov	r1, r3
 80014f0:	4809      	ldr	r0, [pc, #36]	; (8001518 <_ZL12MX_TIM1_Initv+0x18c>)
 80014f2:	f004 fc8b 	bl	8005e0c <HAL_TIMEx_ConfigBreakDeadTime>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	bf14      	ite	ne
 80014fc:	2301      	movne	r3, #1
 80014fe:	2300      	moveq	r3, #0
 8001500:	b2db      	uxtb	r3, r3
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <_ZL12MX_TIM1_Initv+0x17e>
  {
    Error_Handler();
 8001506:	f000 fdc9 	bl	800209c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800150a:	4803      	ldr	r0, [pc, #12]	; (8001518 <_ZL12MX_TIM1_Initv+0x18c>)
 800150c:	f001 f912 	bl	8002734 <HAL_TIM_MspPostInit>

}
 8001510:	bf00      	nop
 8001512:	3748      	adds	r7, #72	; 0x48
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	200000e0 	.word	0x200000e0
 800151c:	40012c00 	.word	0x40012c00

08001520 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001526:	f107 0308 	add.w	r3, r7, #8
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	605a      	str	r2, [r3, #4]
 8001530:	609a      	str	r2, [r3, #8]
 8001532:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001534:	463b      	mov	r3, r7
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800153c:	4b25      	ldr	r3, [pc, #148]	; (80015d4 <_ZL12MX_TIM2_Initv+0xb4>)
 800153e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001542:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 8001544:	4b23      	ldr	r3, [pc, #140]	; (80015d4 <_ZL12MX_TIM2_Initv+0xb4>)
 8001546:	221f      	movs	r2, #31
 8001548:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800154a:	4b22      	ldr	r3, [pc, #136]	; (80015d4 <_ZL12MX_TIM2_Initv+0xb4>)
 800154c:	2200      	movs	r2, #0
 800154e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 8001550:	4b20      	ldr	r3, [pc, #128]	; (80015d4 <_ZL12MX_TIM2_Initv+0xb4>)
 8001552:	f241 3288 	movw	r2, #5000	; 0x1388
 8001556:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001558:	4b1e      	ldr	r3, [pc, #120]	; (80015d4 <_ZL12MX_TIM2_Initv+0xb4>)
 800155a:	2200      	movs	r2, #0
 800155c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800155e:	4b1d      	ldr	r3, [pc, #116]	; (80015d4 <_ZL12MX_TIM2_Initv+0xb4>)
 8001560:	2200      	movs	r2, #0
 8001562:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001564:	481b      	ldr	r0, [pc, #108]	; (80015d4 <_ZL12MX_TIM2_Initv+0xb4>)
 8001566:	f003 f987 	bl	8004878 <HAL_TIM_Base_Init>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	bf14      	ite	ne
 8001570:	2301      	movne	r3, #1
 8001572:	2300      	moveq	r3, #0
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 800157a:	f000 fd8f 	bl	800209c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800157e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001582:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001584:	f107 0308 	add.w	r3, r7, #8
 8001588:	4619      	mov	r1, r3
 800158a:	4812      	ldr	r0, [pc, #72]	; (80015d4 <_ZL12MX_TIM2_Initv+0xb4>)
 800158c:	f003 ff0a 	bl	80053a4 <HAL_TIM_ConfigClockSource>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	bf14      	ite	ne
 8001596:	2301      	movne	r3, #1
 8001598:	2300      	moveq	r3, #0
 800159a:	b2db      	uxtb	r3, r3
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 80015a0:	f000 fd7c 	bl	800209c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015a4:	2300      	movs	r3, #0
 80015a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a8:	2300      	movs	r3, #0
 80015aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015ac:	463b      	mov	r3, r7
 80015ae:	4619      	mov	r1, r3
 80015b0:	4808      	ldr	r0, [pc, #32]	; (80015d4 <_ZL12MX_TIM2_Initv+0xb4>)
 80015b2:	f004 fbcd 	bl	8005d50 <HAL_TIMEx_MasterConfigSynchronization>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	bf14      	ite	ne
 80015bc:	2301      	movne	r3, #1
 80015be:	2300      	moveq	r3, #0
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 80015c6:	f000 fd69 	bl	800209c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015ca:	bf00      	nop
 80015cc:	3718      	adds	r7, #24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000128 	.word	0x20000128

080015d8 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08a      	sub	sp, #40	; 0x28
 80015dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015de:	f107 0318 	add.w	r3, r7, #24
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	609a      	str	r2, [r3, #8]
 80015ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015ec:	f107 0310 	add.w	r3, r7, #16
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80015f6:	463b      	mov	r3, r7
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001602:	4b38      	ldr	r3, [pc, #224]	; (80016e4 <_ZL12MX_TIM3_Initv+0x10c>)
 8001604:	4a38      	ldr	r2, [pc, #224]	; (80016e8 <_ZL12MX_TIM3_Initv+0x110>)
 8001606:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32-1;
 8001608:	4b36      	ldr	r3, [pc, #216]	; (80016e4 <_ZL12MX_TIM3_Initv+0x10c>)
 800160a:	221f      	movs	r2, #31
 800160c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800160e:	4b35      	ldr	r3, [pc, #212]	; (80016e4 <_ZL12MX_TIM3_Initv+0x10c>)
 8001610:	2200      	movs	r2, #0
 8001612:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001614:	4b33      	ldr	r3, [pc, #204]	; (80016e4 <_ZL12MX_TIM3_Initv+0x10c>)
 8001616:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800161a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800161c:	4b31      	ldr	r3, [pc, #196]	; (80016e4 <_ZL12MX_TIM3_Initv+0x10c>)
 800161e:	2200      	movs	r2, #0
 8001620:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001622:	4b30      	ldr	r3, [pc, #192]	; (80016e4 <_ZL12MX_TIM3_Initv+0x10c>)
 8001624:	2200      	movs	r2, #0
 8001626:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001628:	482e      	ldr	r0, [pc, #184]	; (80016e4 <_ZL12MX_TIM3_Initv+0x10c>)
 800162a:	f003 f925 	bl	8004878 <HAL_TIM_Base_Init>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	bf14      	ite	ne
 8001634:	2301      	movne	r3, #1
 8001636:	2300      	moveq	r3, #0
 8001638:	b2db      	uxtb	r3, r3
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <_ZL12MX_TIM3_Initv+0x6a>
  {
    Error_Handler();
 800163e:	f000 fd2d 	bl	800209c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001642:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001646:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001648:	f107 0318 	add.w	r3, r7, #24
 800164c:	4619      	mov	r1, r3
 800164e:	4825      	ldr	r0, [pc, #148]	; (80016e4 <_ZL12MX_TIM3_Initv+0x10c>)
 8001650:	f003 fea8 	bl	80053a4 <HAL_TIM_ConfigClockSource>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	bf14      	ite	ne
 800165a:	2301      	movne	r3, #1
 800165c:	2300      	moveq	r3, #0
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <_ZL12MX_TIM3_Initv+0x90>
  {
    Error_Handler();
 8001664:	f000 fd1a 	bl	800209c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001668:	481e      	ldr	r0, [pc, #120]	; (80016e4 <_ZL12MX_TIM3_Initv+0x10c>)
 800166a:	f003 fae3 	bl	8004c34 <HAL_TIM_IC_Init>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	bf14      	ite	ne
 8001674:	2301      	movne	r3, #1
 8001676:	2300      	moveq	r3, #0
 8001678:	b2db      	uxtb	r3, r3
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <_ZL12MX_TIM3_Initv+0xaa>
  {
    Error_Handler();
 800167e:	f000 fd0d 	bl	800209c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001682:	2300      	movs	r3, #0
 8001684:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001686:	2300      	movs	r3, #0
 8001688:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800168a:	f107 0310 	add.w	r3, r7, #16
 800168e:	4619      	mov	r1, r3
 8001690:	4814      	ldr	r0, [pc, #80]	; (80016e4 <_ZL12MX_TIM3_Initv+0x10c>)
 8001692:	f004 fb5d 	bl	8005d50 <HAL_TIMEx_MasterConfigSynchronization>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	bf14      	ite	ne
 800169c:	2301      	movne	r3, #1
 800169e:	2300      	moveq	r3, #0
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <_ZL12MX_TIM3_Initv+0xd2>
  {
    Error_Handler();
 80016a6:	f000 fcf9 	bl	800209c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80016aa:	2300      	movs	r3, #0
 80016ac:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80016ae:	2301      	movs	r3, #1
 80016b0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80016b2:	2300      	movs	r3, #0
 80016b4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80016b6:	2300      	movs	r3, #0
 80016b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80016ba:	463b      	mov	r3, r7
 80016bc:	2204      	movs	r2, #4
 80016be:	4619      	mov	r1, r3
 80016c0:	4808      	ldr	r0, [pc, #32]	; (80016e4 <_ZL12MX_TIM3_Initv+0x10c>)
 80016c2:	f003 fd1d 	bl	8005100 <HAL_TIM_IC_ConfigChannel>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	bf14      	ite	ne
 80016cc:	2301      	movne	r3, #1
 80016ce:	2300      	moveq	r3, #0
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <_ZL12MX_TIM3_Initv+0x102>
  {
    Error_Handler();
 80016d6:	f000 fce1 	bl	800209c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80016da:	bf00      	nop
 80016dc:	3728      	adds	r7, #40	; 0x28
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000170 	.word	0x20000170
 80016e8:	40000400 	.word	0x40000400

080016ec <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016f2:	f107 0308 	add.w	r3, r7, #8
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	605a      	str	r2, [r3, #4]
 80016fc:	609a      	str	r2, [r3, #8]
 80016fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001700:	463b      	mov	r3, r7
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001708:	4b25      	ldr	r3, [pc, #148]	; (80017a0 <_ZL12MX_TIM4_Initv+0xb4>)
 800170a:	4a26      	ldr	r2, [pc, #152]	; (80017a4 <_ZL12MX_TIM4_Initv+0xb8>)
 800170c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 32000-1;
 800170e:	4b24      	ldr	r3, [pc, #144]	; (80017a0 <_ZL12MX_TIM4_Initv+0xb4>)
 8001710:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8001714:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001716:	4b22      	ldr	r3, [pc, #136]	; (80017a0 <_ZL12MX_TIM4_Initv+0xb4>)
 8001718:	2200      	movs	r2, #0
 800171a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800171c:	4b20      	ldr	r3, [pc, #128]	; (80017a0 <_ZL12MX_TIM4_Initv+0xb4>)
 800171e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001722:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001724:	4b1e      	ldr	r3, [pc, #120]	; (80017a0 <_ZL12MX_TIM4_Initv+0xb4>)
 8001726:	2200      	movs	r2, #0
 8001728:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800172a:	4b1d      	ldr	r3, [pc, #116]	; (80017a0 <_ZL12MX_TIM4_Initv+0xb4>)
 800172c:	2200      	movs	r2, #0
 800172e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001730:	481b      	ldr	r0, [pc, #108]	; (80017a0 <_ZL12MX_TIM4_Initv+0xb4>)
 8001732:	f003 f8a1 	bl	8004878 <HAL_TIM_Base_Init>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	bf14      	ite	ne
 800173c:	2301      	movne	r3, #1
 800173e:	2300      	moveq	r3, #0
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <_ZL12MX_TIM4_Initv+0x5e>
  {
    Error_Handler();
 8001746:	f000 fca9 	bl	800209c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800174a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800174e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001750:	f107 0308 	add.w	r3, r7, #8
 8001754:	4619      	mov	r1, r3
 8001756:	4812      	ldr	r0, [pc, #72]	; (80017a0 <_ZL12MX_TIM4_Initv+0xb4>)
 8001758:	f003 fe24 	bl	80053a4 <HAL_TIM_ConfigClockSource>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	bf14      	ite	ne
 8001762:	2301      	movne	r3, #1
 8001764:	2300      	moveq	r3, #0
 8001766:	b2db      	uxtb	r3, r3
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <_ZL12MX_TIM4_Initv+0x84>
  {
    Error_Handler();
 800176c:	f000 fc96 	bl	800209c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001770:	2300      	movs	r3, #0
 8001772:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001774:	2300      	movs	r3, #0
 8001776:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001778:	463b      	mov	r3, r7
 800177a:	4619      	mov	r1, r3
 800177c:	4808      	ldr	r0, [pc, #32]	; (80017a0 <_ZL12MX_TIM4_Initv+0xb4>)
 800177e:	f004 fae7 	bl	8005d50 <HAL_TIMEx_MasterConfigSynchronization>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	bf14      	ite	ne
 8001788:	2301      	movne	r3, #1
 800178a:	2300      	moveq	r3, #0
 800178c:	b2db      	uxtb	r3, r3
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <_ZL12MX_TIM4_Initv+0xaa>
  {
    Error_Handler();
 8001792:	f000 fc83 	bl	800209c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001796:	bf00      	nop
 8001798:	3718      	adds	r7, #24
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	200001b8 	.word	0x200001b8
 80017a4:	40000800 	.word	0x40000800

080017a8 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017ac:	4b13      	ldr	r3, [pc, #76]	; (80017fc <_ZL19MX_USART2_UART_Initv+0x54>)
 80017ae:	4a14      	ldr	r2, [pc, #80]	; (8001800 <_ZL19MX_USART2_UART_Initv+0x58>)
 80017b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80017b2:	4b12      	ldr	r3, [pc, #72]	; (80017fc <_ZL19MX_USART2_UART_Initv+0x54>)
 80017b4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017ba:	4b10      	ldr	r3, [pc, #64]	; (80017fc <_ZL19MX_USART2_UART_Initv+0x54>)
 80017bc:	2200      	movs	r2, #0
 80017be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017c0:	4b0e      	ldr	r3, [pc, #56]	; (80017fc <_ZL19MX_USART2_UART_Initv+0x54>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017c6:	4b0d      	ldr	r3, [pc, #52]	; (80017fc <_ZL19MX_USART2_UART_Initv+0x54>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017cc:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <_ZL19MX_USART2_UART_Initv+0x54>)
 80017ce:	220c      	movs	r2, #12
 80017d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017d2:	4b0a      	ldr	r3, [pc, #40]	; (80017fc <_ZL19MX_USART2_UART_Initv+0x54>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017d8:	4b08      	ldr	r3, [pc, #32]	; (80017fc <_ZL19MX_USART2_UART_Initv+0x54>)
 80017da:	2200      	movs	r2, #0
 80017dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017de:	4807      	ldr	r0, [pc, #28]	; (80017fc <_ZL19MX_USART2_UART_Initv+0x54>)
 80017e0:	f004 fb77 	bl	8005ed2 <HAL_UART_Init>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	bf14      	ite	ne
 80017ea:	2301      	movne	r3, #1
 80017ec:	2300      	moveq	r3, #0
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 80017f4:	f000 fc52 	bl	800209c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017f8:	bf00      	nop
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20000200 	.word	0x20000200
 8001800:	40004400 	.word	0x40004400

08001804 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b088      	sub	sp, #32
 8001808:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180a:	f107 0310 	add.w	r3, r7, #16
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	605a      	str	r2, [r3, #4]
 8001814:	609a      	str	r2, [r3, #8]
 8001816:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001818:	4b38      	ldr	r3, [pc, #224]	; (80018fc <_ZL12MX_GPIO_Initv+0xf8>)
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	4a37      	ldr	r2, [pc, #220]	; (80018fc <_ZL12MX_GPIO_Initv+0xf8>)
 800181e:	f043 0310 	orr.w	r3, r3, #16
 8001822:	6193      	str	r3, [r2, #24]
 8001824:	4b35      	ldr	r3, [pc, #212]	; (80018fc <_ZL12MX_GPIO_Initv+0xf8>)
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	f003 0310 	and.w	r3, r3, #16
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001830:	4b32      	ldr	r3, [pc, #200]	; (80018fc <_ZL12MX_GPIO_Initv+0xf8>)
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	4a31      	ldr	r2, [pc, #196]	; (80018fc <_ZL12MX_GPIO_Initv+0xf8>)
 8001836:	f043 0320 	orr.w	r3, r3, #32
 800183a:	6193      	str	r3, [r2, #24]
 800183c:	4b2f      	ldr	r3, [pc, #188]	; (80018fc <_ZL12MX_GPIO_Initv+0xf8>)
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	f003 0320 	and.w	r3, r3, #32
 8001844:	60bb      	str	r3, [r7, #8]
 8001846:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001848:	4b2c      	ldr	r3, [pc, #176]	; (80018fc <_ZL12MX_GPIO_Initv+0xf8>)
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	4a2b      	ldr	r2, [pc, #172]	; (80018fc <_ZL12MX_GPIO_Initv+0xf8>)
 800184e:	f043 0304 	orr.w	r3, r3, #4
 8001852:	6193      	str	r3, [r2, #24]
 8001854:	4b29      	ldr	r3, [pc, #164]	; (80018fc <_ZL12MX_GPIO_Initv+0xf8>)
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	f003 0304 	and.w	r3, r3, #4
 800185c:	607b      	str	r3, [r7, #4]
 800185e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001860:	4b26      	ldr	r3, [pc, #152]	; (80018fc <_ZL12MX_GPIO_Initv+0xf8>)
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	4a25      	ldr	r2, [pc, #148]	; (80018fc <_ZL12MX_GPIO_Initv+0xf8>)
 8001866:	f043 0308 	orr.w	r3, r3, #8
 800186a:	6193      	str	r3, [r2, #24]
 800186c:	4b23      	ldr	r3, [pc, #140]	; (80018fc <_ZL12MX_GPIO_Initv+0xf8>)
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	f003 0308 	and.w	r3, r3, #8
 8001874:	603b      	str	r3, [r7, #0]
 8001876:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001878:	2200      	movs	r2, #0
 800187a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800187e:	4820      	ldr	r0, [pc, #128]	; (8001900 <_ZL12MX_GPIO_Initv+0xfc>)
 8001880:	f001 fbae 	bl	8002fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8001884:	2200      	movs	r2, #0
 8001886:	2102      	movs	r1, #2
 8001888:	481e      	ldr	r0, [pc, #120]	; (8001904 <_ZL12MX_GPIO_Initv+0x100>)
 800188a:	f001 fba9 	bl	8002fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 800188e:	2200      	movs	r2, #0
 8001890:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001894:	481c      	ldr	r0, [pc, #112]	; (8001908 <_ZL12MX_GPIO_Initv+0x104>)
 8001896:	f001 fba3 	bl	8002fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800189a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800189e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a0:	2301      	movs	r3, #1
 80018a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a8:	2302      	movs	r3, #2
 80018aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80018ac:	f107 0310 	add.w	r3, r7, #16
 80018b0:	4619      	mov	r1, r3
 80018b2:	4813      	ldr	r0, [pc, #76]	; (8001900 <_ZL12MX_GPIO_Initv+0xfc>)
 80018b4:	f001 fa10 	bl	8002cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80018b8:	2302      	movs	r3, #2
 80018ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018bc:	2301      	movs	r3, #1
 80018be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c4:	2302      	movs	r3, #2
 80018c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c8:	f107 0310 	add.w	r3, r7, #16
 80018cc:	4619      	mov	r1, r3
 80018ce:	480d      	ldr	r0, [pc, #52]	; (8001904 <_ZL12MX_GPIO_Initv+0x100>)
 80018d0:	f001 fa02 	bl	8002cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80018d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018da:	2301      	movs	r3, #1
 80018dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e2:	2302      	movs	r3, #2
 80018e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e6:	f107 0310 	add.w	r3, r7, #16
 80018ea:	4619      	mov	r1, r3
 80018ec:	4806      	ldr	r0, [pc, #24]	; (8001908 <_ZL12MX_GPIO_Initv+0x104>)
 80018ee:	f001 f9f3 	bl	8002cd8 <HAL_GPIO_Init>

}
 80018f2:	bf00      	nop
 80018f4:	3720      	adds	r7, #32
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40021000 	.word	0x40021000
 8001900:	40011000 	.word	0x40011000
 8001904:	40010c00 	.word	0x40010c00
 8001908:	40010800 	.word	0x40010800

0800190c <_Z14MPU6050_Baslatv>:

/* USER CODE BEGIN 4 */
void MPU6050_Baslat(void) {
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af04      	add	r7, sp, #16
	uint8_t config = 0x00;
 8001912:	2300      	movs	r3, #0
 8001914:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, MPU6050_POW_REG, 1, &config, 1, 5); //Güç registerını aktif et
 8001916:	2305      	movs	r3, #5
 8001918:	9302      	str	r3, [sp, #8]
 800191a:	2301      	movs	r3, #1
 800191c:	9301      	str	r3, [sp, #4]
 800191e:	1dfb      	adds	r3, r7, #7
 8001920:	9300      	str	r3, [sp, #0]
 8001922:	2301      	movs	r3, #1
 8001924:	226b      	movs	r2, #107	; 0x6b
 8001926:	21d0      	movs	r1, #208	; 0xd0
 8001928:	4811      	ldr	r0, [pc, #68]	; (8001970 <_Z14MPU6050_Baslatv+0x64>)
 800192a:	f001 fccf 	bl	80032cc <HAL_I2C_Mem_Write>
	config = 0x18;
 800192e:	2318      	movs	r3, #24
 8001930:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, GYRO_CONF_REG, 1, &config, 1, 5); //Gyro 250 d/s'ye ayarlandi.
 8001932:	2305      	movs	r3, #5
 8001934:	9302      	str	r3, [sp, #8]
 8001936:	2301      	movs	r3, #1
 8001938:	9301      	str	r3, [sp, #4]
 800193a:	1dfb      	adds	r3, r7, #7
 800193c:	9300      	str	r3, [sp, #0]
 800193e:	2301      	movs	r3, #1
 8001940:	221b      	movs	r2, #27
 8001942:	21d0      	movs	r1, #208	; 0xd0
 8001944:	480a      	ldr	r0, [pc, #40]	; (8001970 <_Z14MPU6050_Baslatv+0x64>)
 8001946:	f001 fcc1 	bl	80032cc <HAL_I2C_Mem_Write>
	config = 0x08;
 800194a:	2308      	movs	r3, #8
 800194c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, ACC_CONF_REG, 1, &config, 1, 5); //Acc +-8g'ye ayarlandi.
 800194e:	2305      	movs	r3, #5
 8001950:	9302      	str	r3, [sp, #8]
 8001952:	2301      	movs	r3, #1
 8001954:	9301      	str	r3, [sp, #4]
 8001956:	1dfb      	adds	r3, r7, #7
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	2301      	movs	r3, #1
 800195c:	221c      	movs	r2, #28
 800195e:	21d0      	movs	r1, #208	; 0xd0
 8001960:	4803      	ldr	r0, [pc, #12]	; (8001970 <_Z14MPU6050_Baslatv+0x64>)
 8001962:	f001 fcb3 	bl	80032cc <HAL_I2C_Mem_Write>
}
 8001966:	bf00      	nop
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	2000008c 	.word	0x2000008c

08001974 <_Z9Check_Armv>:


void Check_Arm() {
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
	if(!armed) {
 8001978:	4b20      	ldr	r3, [pc, #128]	; (80019fc <_Z9Check_Armv+0x88>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	f083 0301 	eor.w	r3, r3, #1
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b00      	cmp	r3, #0
 8001984:	d038      	beq.n	80019f8 <_Z9Check_Armv+0x84>
		if((ch[2] < 1100) && (ch[3] > 1700)) {
 8001986:	4b1e      	ldr	r3, [pc, #120]	; (8001a00 <_Z9Check_Armv+0x8c>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f240 424b 	movw	r2, #1099	; 0x44b
 800198e:	4293      	cmp	r3, r2
 8001990:	dc2e      	bgt.n	80019f0 <_Z9Check_Armv+0x7c>
 8001992:	4b1b      	ldr	r3, [pc, #108]	; (8001a00 <_Z9Check_Armv+0x8c>)
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	f240 62a4 	movw	r2, #1700	; 0x6a4
 800199a:	4293      	cmp	r3, r2
 800199c:	dd28      	ble.n	80019f0 <_Z9Check_Armv+0x7c>
				if(!arm_start){
 800199e:	4b19      	ldr	r3, [pc, #100]	; (8001a04 <_Z9Check_Armv+0x90>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	f083 0301 	eor.w	r3, r3, #1
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d008      	beq.n	80019be <_Z9Check_Armv+0x4a>
					arm_timer = HAL_GetTick();
 80019ac:	f001 f858 	bl	8002a60 <HAL_GetTick>
 80019b0:	4603      	mov	r3, r0
 80019b2:	461a      	mov	r2, r3
 80019b4:	4b14      	ldr	r3, [pc, #80]	; (8001a08 <_Z9Check_Armv+0x94>)
 80019b6:	601a      	str	r2, [r3, #0]
					arm_start = true;
 80019b8:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <_Z9Check_Armv+0x90>)
 80019ba:	2201      	movs	r2, #1
 80019bc:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GetTick() - arm_timer > 3000) {
 80019be:	f001 f84f 	bl	8002a60 <HAL_GetTick>
 80019c2:	4603      	mov	r3, r0
 80019c4:	4a10      	ldr	r2, [pc, #64]	; (8001a08 <_Z9Check_Armv+0x94>)
 80019c6:	6812      	ldr	r2, [r2, #0]
 80019c8:	1a9b      	subs	r3, r3, r2
 80019ca:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80019ce:	4293      	cmp	r3, r2
 80019d0:	bf8c      	ite	hi
 80019d2:	2301      	movhi	r3, #1
 80019d4:	2300      	movls	r3, #0
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d00d      	beq.n	80019f8 <_Z9Check_Armv+0x84>
					armed = true;
 80019dc:	4b07      	ldr	r3, [pc, #28]	; (80019fc <_Z9Check_Armv+0x88>)
 80019de:	2201      	movs	r2, #1
 80019e0:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 80019e2:	2201      	movs	r2, #1
 80019e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019e8:	4808      	ldr	r0, [pc, #32]	; (8001a0c <_Z9Check_Armv+0x98>)
 80019ea:	f001 faf9 	bl	8002fe0 <HAL_GPIO_WritePin>
				if(HAL_GetTick() - arm_timer > 3000) {
 80019ee:	e003      	b.n	80019f8 <_Z9Check_Armv+0x84>
				}

		}

		else {
			arm_start = false;
 80019f0:	4b04      	ldr	r3, [pc, #16]	; (8001a04 <_Z9Check_Armv+0x90>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	701a      	strb	r2, [r3, #0]
		}
	}

}
 80019f6:	e7ff      	b.n	80019f8 <_Z9Check_Armv+0x84>
 80019f8:	bf00      	nop
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	20000631 	.word	0x20000631
 8001a00:	200005fc 	.word	0x200005fc
 8001a04:	20000630 	.word	0x20000630
 8001a08:	20000624 	.word	0x20000624
 8001a0c:	40010800 	.word	0x40010800

08001a10 <_Z12Check_Disarmv>:

void Check_Disarm() {
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
	if(armed) {
 8001a14:	4b1f      	ldr	r3, [pc, #124]	; (8001a94 <_Z12Check_Disarmv+0x84>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d038      	beq.n	8001a8e <_Z12Check_Disarmv+0x7e>
		if((ch[2] < 1100) && (ch[3] < 1100)) {
 8001a1c:	4b1e      	ldr	r3, [pc, #120]	; (8001a98 <_Z12Check_Disarmv+0x88>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f240 424b 	movw	r2, #1099	; 0x44b
 8001a24:	4293      	cmp	r3, r2
 8001a26:	dc2e      	bgt.n	8001a86 <_Z12Check_Disarmv+0x76>
 8001a28:	4b1b      	ldr	r3, [pc, #108]	; (8001a98 <_Z12Check_Disarmv+0x88>)
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	f240 424b 	movw	r2, #1099	; 0x44b
 8001a30:	4293      	cmp	r3, r2
 8001a32:	dc28      	bgt.n	8001a86 <_Z12Check_Disarmv+0x76>
				if(!disarm_start){
 8001a34:	4b19      	ldr	r3, [pc, #100]	; (8001a9c <_Z12Check_Disarmv+0x8c>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	f083 0301 	eor.w	r3, r3, #1
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d008      	beq.n	8001a54 <_Z12Check_Disarmv+0x44>
					disarm_timer = HAL_GetTick();
 8001a42:	f001 f80d 	bl	8002a60 <HAL_GetTick>
 8001a46:	4603      	mov	r3, r0
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <_Z12Check_Disarmv+0x90>)
 8001a4c:	601a      	str	r2, [r3, #0]
					disarm_start = true;
 8001a4e:	4b13      	ldr	r3, [pc, #76]	; (8001a9c <_Z12Check_Disarmv+0x8c>)
 8001a50:	2201      	movs	r2, #1
 8001a52:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GetTick() - disarm_timer > 3000) {
 8001a54:	f001 f804 	bl	8002a60 <HAL_GetTick>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	4a11      	ldr	r2, [pc, #68]	; (8001aa0 <_Z12Check_Disarmv+0x90>)
 8001a5c:	6812      	ldr	r2, [r2, #0]
 8001a5e:	1a9b      	subs	r3, r3, r2
 8001a60:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001a64:	4293      	cmp	r3, r2
 8001a66:	bf8c      	ite	hi
 8001a68:	2301      	movhi	r3, #1
 8001a6a:	2300      	movls	r3, #0
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d00d      	beq.n	8001a8e <_Z12Check_Disarmv+0x7e>
					armed = false;
 8001a72:	4b08      	ldr	r3, [pc, #32]	; (8001a94 <_Z12Check_Disarmv+0x84>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a7e:	4809      	ldr	r0, [pc, #36]	; (8001aa4 <_Z12Check_Disarmv+0x94>)
 8001a80:	f001 faae 	bl	8002fe0 <HAL_GPIO_WritePin>
				if(HAL_GetTick() - disarm_timer > 3000) {
 8001a84:	e003      	b.n	8001a8e <_Z12Check_Disarmv+0x7e>
				}

		}

		else {
			disarm_start = false;
 8001a86:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <_Z12Check_Disarmv+0x8c>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001a8c:	e7ff      	b.n	8001a8e <_Z12Check_Disarmv+0x7e>
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20000631 	.word	0x20000631
 8001a98:	200005fc 	.word	0x200005fc
 8001a9c:	20000633 	.word	0x20000633
 8001aa0:	20000628 	.word	0x20000628
 8001aa4:	40010800 	.word	0x40010800

08001aa8 <_Z9TelemPackv>:

void TelemPack() {
 8001aa8:	b4b0      	push	{r4, r5, r7}
 8001aaa:	af00      	add	r7, sp, #0
	  telem_pack.attitude.roll  = state.angles[0];
 8001aac:	4b15      	ldr	r3, [pc, #84]	; (8001b04 <_Z9TelemPackv+0x5c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a15      	ldr	r2, [pc, #84]	; (8001b08 <_Z9TelemPackv+0x60>)
 8001ab2:	6013      	str	r3, [r2, #0]
	  telem_pack.attitude.pitch = state.angles[1];
 8001ab4:	4b13      	ldr	r3, [pc, #76]	; (8001b04 <_Z9TelemPackv+0x5c>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	4a13      	ldr	r2, [pc, #76]	; (8001b08 <_Z9TelemPackv+0x60>)
 8001aba:	6053      	str	r3, [r2, #4]
	  telem_pack.attitude.yaw   = state.angles[2];
 8001abc:	4b11      	ldr	r3, [pc, #68]	; (8001b04 <_Z9TelemPackv+0x5c>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	4a11      	ldr	r2, [pc, #68]	; (8001b08 <_Z9TelemPackv+0x60>)
 8001ac2:	6093      	str	r3, [r2, #8]

	  telem_pack.pwm.w1 = controller_output[0];
 8001ac4:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <_Z9TelemPackv+0x64>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	b29a      	uxth	r2, r3
 8001aca:	4b0f      	ldr	r3, [pc, #60]	; (8001b08 <_Z9TelemPackv+0x60>)
 8001acc:	819a      	strh	r2, [r3, #12]
	  telem_pack.pwm.w2 = controller_output[1];
 8001ace:	4b0f      	ldr	r3, [pc, #60]	; (8001b0c <_Z9TelemPackv+0x64>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <_Z9TelemPackv+0x60>)
 8001ad6:	81da      	strh	r2, [r3, #14]
	  telem_pack.pwm.w3 = controller_output[2];
 8001ad8:	4b0c      	ldr	r3, [pc, #48]	; (8001b0c <_Z9TelemPackv+0x64>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	4b0a      	ldr	r3, [pc, #40]	; (8001b08 <_Z9TelemPackv+0x60>)
 8001ae0:	821a      	strh	r2, [r3, #16]
	  telem_pack.pwm.w4 = controller_output[3];
 8001ae2:	4b0a      	ldr	r3, [pc, #40]	; (8001b0c <_Z9TelemPackv+0x64>)
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	4b07      	ldr	r3, [pc, #28]	; (8001b08 <_Z9TelemPackv+0x60>)
 8001aea:	825a      	strh	r2, [r3, #18]
	  memcpy(buf,&telem_pack,sizeof(telem_pack));
 8001aec:	4a08      	ldr	r2, [pc, #32]	; (8001b10 <_Z9TelemPackv+0x68>)
 8001aee:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <_Z9TelemPackv+0x60>)
 8001af0:	4614      	mov	r4, r2
 8001af2:	461d      	mov	r5, r3
 8001af4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001af6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001af8:	682b      	ldr	r3, [r5, #0]
 8001afa:	6023      	str	r3, [r4, #0]
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bcb0      	pop	{r4, r5, r7}
 8001b02:	4770      	bx	lr
 8001b04:	20000284 	.word	0x20000284
 8001b08:	200002a8 	.word	0x200002a8
 8001b0c:	200005c8 	.word	0x200005c8
 8001b10:	200002bc 	.word	0x200002bc

08001b14 <_Z7GyroOkuh>:

int16_t GyroOku (uint8_t addr) {
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b088      	sub	sp, #32
 8001b18:	af04      	add	r7, sp, #16
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	71fb      	strb	r3, [r7, #7]
	uint8_t gyro_data[2];
	HAL_I2C_Mem_Read(&hi2c1, (uint16_t)MPU6050 | I2C_READ, addr, 1, gyro_data, 2, 1);
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	2301      	movs	r3, #1
 8001b24:	9302      	str	r3, [sp, #8]
 8001b26:	2302      	movs	r3, #2
 8001b28:	9301      	str	r3, [sp, #4]
 8001b2a:	f107 030c 	add.w	r3, r7, #12
 8001b2e:	9300      	str	r3, [sp, #0]
 8001b30:	2301      	movs	r3, #1
 8001b32:	21d1      	movs	r1, #209	; 0xd1
 8001b34:	4807      	ldr	r0, [pc, #28]	; (8001b54 <_Z7GyroOkuh+0x40>)
 8001b36:	f001 fcc3 	bl	80034c0 <HAL_I2C_Mem_Read>
	int16_t gyro = gyro_data[0]<<8 | gyro_data[1];
 8001b3a:	7b3b      	ldrb	r3, [r7, #12]
 8001b3c:	021b      	lsls	r3, r3, #8
 8001b3e:	b21a      	sxth	r2, r3
 8001b40:	7b7b      	ldrb	r3, [r7, #13]
 8001b42:	b21b      	sxth	r3, r3
 8001b44:	4313      	orrs	r3, r2
 8001b46:	81fb      	strh	r3, [r7, #14]
	return gyro;
 8001b48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3710      	adds	r7, #16
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	2000008c 	.word	0x2000008c

08001b58 <_Z7GyroErrh>:

float GyroErr(uint8_t addr) {
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	71fb      	strb	r3, [r7, #7]
	float GyroXe=0;
 8001b62:	f04f 0300 	mov.w	r3, #0
 8001b66:	60fb      	str	r3, [r7, #12]
	//2000 ornek al ve kayma degerini kaydet.
	for (int i=0; i<2000; i++)
 8001b68:	2300      	movs	r3, #0
 8001b6a:	60bb      	str	r3, [r7, #8]
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001b72:	da12      	bge.n	8001b9a <_Z7GyroErrh+0x42>
	{
		GyroXe += (float)GyroOku(addr);
 8001b74:	79fb      	ldrb	r3, [r7, #7]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff ffcc 	bl	8001b14 <_Z7GyroOkuh>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff f86e 	bl	8000c60 <__aeabi_i2f>
 8001b84:	4603      	mov	r3, r0
 8001b86:	4619      	mov	r1, r3
 8001b88:	68f8      	ldr	r0, [r7, #12]
 8001b8a:	f7fe ffb5 	bl	8000af8 <__addsf3>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2000; i++)
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	3301      	adds	r3, #1
 8001b96:	60bb      	str	r3, [r7, #8]
 8001b98:	e7e8      	b.n	8001b6c <_Z7GyroErrh+0x14>

		} //Haberleşmeyi durdur.
	GyroXe=GyroXe/2000; //Son okunan değeri 2000'e böl.
 8001b9a:	4905      	ldr	r1, [pc, #20]	; (8001bb0 <_Z7GyroErrh+0x58>)
 8001b9c:	68f8      	ldr	r0, [r7, #12]
 8001b9e:	f7ff f967 	bl	8000e70 <__aeabi_fdiv>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	60fb      	str	r3, [r7, #12]
	return GyroXe;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3710      	adds	r7, #16
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	44fa0000 	.word	0x44fa0000

08001bb4 <_Z6PWMYazv>:


void PWMYaz() {
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
	  if(ch[EMERGENCY_CH-1] < 1500) {
 8001bb8:	4b19      	ldr	r3, [pc, #100]	; (8001c20 <_Z6PWMYazv+0x6c>)
 8001bba:	691b      	ldr	r3, [r3, #16]
 8001bbc:	f240 52db 	movw	r2, #1499	; 0x5db
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	dc14      	bgt.n	8001bee <_Z6PWMYazv+0x3a>
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,controller_output[0]);
 8001bc4:	4b17      	ldr	r3, [pc, #92]	; (8001c24 <_Z6PWMYazv+0x70>)
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	4b17      	ldr	r3, [pc, #92]	; (8001c28 <_Z6PWMYazv+0x74>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,controller_output[1]);
 8001bce:	4b15      	ldr	r3, [pc, #84]	; (8001c24 <_Z6PWMYazv+0x70>)
 8001bd0:	685a      	ldr	r2, [r3, #4]
 8001bd2:	4b15      	ldr	r3, [pc, #84]	; (8001c28 <_Z6PWMYazv+0x74>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	639a      	str	r2, [r3, #56]	; 0x38
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,controller_output[2]);
 8001bd8:	4b12      	ldr	r3, [pc, #72]	; (8001c24 <_Z6PWMYazv+0x70>)
 8001bda:	689a      	ldr	r2, [r3, #8]
 8001bdc:	4b12      	ldr	r3, [pc, #72]	; (8001c28 <_Z6PWMYazv+0x74>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	63da      	str	r2, [r3, #60]	; 0x3c
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,controller_output[3]);
 8001be2:	4b10      	ldr	r3, [pc, #64]	; (8001c24 <_Z6PWMYazv+0x70>)
 8001be4:	68da      	ldr	r2, [r3, #12]
 8001be6:	4b10      	ldr	r3, [pc, #64]	; (8001c28 <_Z6PWMYazv+0x74>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	641a      	str	r2, [r3, #64]	; 0x40
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
	  }
}
 8001bec:	e013      	b.n	8001c16 <_Z6PWMYazv+0x62>
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 8001bee:	4b0e      	ldr	r3, [pc, #56]	; (8001c28 <_Z6PWMYazv+0x74>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001bf6:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 8001bf8:	4b0b      	ldr	r3, [pc, #44]	; (8001c28 <_Z6PWMYazv+0x74>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c00:	639a      	str	r2, [r3, #56]	; 0x38
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
 8001c02:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <_Z6PWMYazv+0x74>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c0a:	63da      	str	r2, [r3, #60]	; 0x3c
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
 8001c0c:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <_Z6PWMYazv+0x74>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c14:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001c16:	bf00      	nop
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bc80      	pop	{r7}
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	200005fc 	.word	0x200005fc
 8001c24:	200005c8 	.word	0x200005c8
 8001c28:	200000e0 	.word	0x200000e0

08001c2c <_Z11MotorBaslatv>:




void MotorBaslat(void) {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 8001c30:	4b0c      	ldr	r3, [pc, #48]	; (8001c64 <_Z11MotorBaslatv+0x38>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c38:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 8001c3a:	4b0a      	ldr	r3, [pc, #40]	; (8001c64 <_Z11MotorBaslatv+0x38>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c42:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
 8001c44:	4b07      	ldr	r3, [pc, #28]	; (8001c64 <_Z11MotorBaslatv+0x38>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c4c:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
 8001c4e:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <_Z11MotorBaslatv+0x38>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c56:	641a      	str	r2, [r3, #64]	; 0x40
	 // Delay(600);
	HAL_Delay(1000);
 8001c58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c5c:	f000 ff0a 	bl	8002a74 <HAL_Delay>
}
 8001c60:	bf00      	nop
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	200000e0 	.word	0x200000e0

08001c68 <HAL_TIM_PeriodElapsedCallback>:
		ITM_SendChar((*ptr++));
	}
	return len;
}

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim) {
 8001c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c6a:	b09f      	sub	sp, #124	; 0x7c
 8001c6c:	af12      	add	r7, sp, #72	; 0x48
 8001c6e:	6078      	str	r0, [r7, #4]

	if(htim == &htim2) {
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4aa5      	ldr	r2, [pc, #660]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	f040 8138 	bne.w	8001eea <HAL_TIM_PeriodElapsedCallback+0x282>


		  gyroX = (GyroOku(GYRO_X_ADDR))/32.8;
 8001c7a:	2043      	movs	r0, #67	; 0x43
 8001c7c:	f7ff ff4a 	bl	8001b14 <_Z7GyroOkuh>
 8001c80:	4603      	mov	r3, r0
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7fe fbb6 	bl	80003f4 <__aeabi_i2d>
 8001c88:	a39b      	add	r3, pc, #620	; (adr r3, 8001ef8 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c8e:	f7fe fd45 	bl	800071c <__aeabi_ddiv>
 8001c92:	4602      	mov	r2, r0
 8001c94:	460b      	mov	r3, r1
 8001c96:	4610      	mov	r0, r2
 8001c98:	4619      	mov	r1, r3
 8001c9a:	f7fe fed7 	bl	8000a4c <__aeabi_d2f>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	4a9a      	ldr	r2, [pc, #616]	; (8001f0c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001ca2:	6013      	str	r3, [r2, #0]
		  gyroY = (GyroOku(GYRO_Y_ADDR))/32.8;
 8001ca4:	2045      	movs	r0, #69	; 0x45
 8001ca6:	f7ff ff35 	bl	8001b14 <_Z7GyroOkuh>
 8001caa:	4603      	mov	r3, r0
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7fe fba1 	bl	80003f4 <__aeabi_i2d>
 8001cb2:	a391      	add	r3, pc, #580	; (adr r3, 8001ef8 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb8:	f7fe fd30 	bl	800071c <__aeabi_ddiv>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	4610      	mov	r0, r2
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	f7fe fec2 	bl	8000a4c <__aeabi_d2f>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	4a91      	ldr	r2, [pc, #580]	; (8001f10 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001ccc:	6013      	str	r3, [r2, #0]
		  gyroZ = (GyroOku(GYRO_Z_ADDR))/32.8;
 8001cce:	2047      	movs	r0, #71	; 0x47
 8001cd0:	f7ff ff20 	bl	8001b14 <_Z7GyroOkuh>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7fe fb8c 	bl	80003f4 <__aeabi_i2d>
 8001cdc:	a386      	add	r3, pc, #536	; (adr r3, 8001ef8 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce2:	f7fe fd1b 	bl	800071c <__aeabi_ddiv>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	460b      	mov	r3, r1
 8001cea:	4610      	mov	r0, r2
 8001cec:	4619      	mov	r1, r3
 8001cee:	f7fe fead 	bl	8000a4c <__aeabi_d2f>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	4a87      	ldr	r2, [pc, #540]	; (8001f14 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001cf6:	6013      	str	r3, [r2, #0]
		  //gyroX_a_x = (GyroOku(GYRO_X_ADDR)-gyro_e_x)/65.5;
		  //gyroX_a += gyroX_a_x * st;

		  float gyro[3];
		  gyro[0] = gyroX;
 8001cf8:	4b84      	ldr	r3, [pc, #528]	; (8001f0c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	617b      	str	r3, [r7, #20]
		  gyro[1] = -1*gyroY;
 8001cfe:	4b84      	ldr	r3, [pc, #528]	; (8001f10 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001d06:	61bb      	str	r3, [r7, #24]
		  gyro[2] = gyroZ;
 8001d08:	4b82      	ldr	r3, [pc, #520]	; (8001f14 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	61fb      	str	r3, [r7, #28]

		  //İvmeölçer degerlerini oku
		  accX = GyroOku(ACC_X_ADDR);
 8001d0e:	203b      	movs	r0, #59	; 0x3b
 8001d10:	f7ff ff00 	bl	8001b14 <_Z7GyroOkuh>
 8001d14:	4603      	mov	r3, r0
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7fe ffa2 	bl	8000c60 <__aeabi_i2f>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	4a7e      	ldr	r2, [pc, #504]	; (8001f18 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001d20:	6013      	str	r3, [r2, #0]
		  accY = GyroOku(ACC_Y_ADDR);
 8001d22:	203d      	movs	r0, #61	; 0x3d
 8001d24:	f7ff fef6 	bl	8001b14 <_Z7GyroOkuh>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7fe ff98 	bl	8000c60 <__aeabi_i2f>
 8001d30:	4603      	mov	r3, r0
 8001d32:	4a7a      	ldr	r2, [pc, #488]	; (8001f1c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001d34:	6013      	str	r3, [r2, #0]
		  accZ = GyroOku(ACC_Z_ADDR);
 8001d36:	203f      	movs	r0, #63	; 0x3f
 8001d38:	f7ff feec 	bl	8001b14 <_Z7GyroOkuh>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7fe ff8e 	bl	8000c60 <__aeabi_i2f>
 8001d44:	4603      	mov	r3, r0
 8001d46:	4a76      	ldr	r2, [pc, #472]	; (8001f20 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001d48:	6013      	str	r3, [r2, #0]

		  float acc[3];
		  acc[0] = accX;
 8001d4a:	4b73      	ldr	r3, [pc, #460]	; (8001f18 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	60bb      	str	r3, [r7, #8]
		  acc[1] = accY;
 8001d50:	4b72      	ldr	r3, [pc, #456]	; (8001f1c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	60fb      	str	r3, [r7, #12]
		  acc[2] = accZ;
 8001d56:	4b72      	ldr	r3, [pc, #456]	; (8001f20 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	613b      	str	r3, [r7, #16]

		  float acctop=sqrt(accX*accX+accY*accY+accZ*accZ);		//Toplam ivme
 8001d5c:	4b6e      	ldr	r3, [pc, #440]	; (8001f18 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a6d      	ldr	r2, [pc, #436]	; (8001f18 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001d62:	6812      	ldr	r2, [r2, #0]
 8001d64:	4611      	mov	r1, r2
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe ffce 	bl	8000d08 <__aeabi_fmul>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	461c      	mov	r4, r3
 8001d70:	4b6a      	ldr	r3, [pc, #424]	; (8001f1c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a69      	ldr	r2, [pc, #420]	; (8001f1c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001d76:	6812      	ldr	r2, [r2, #0]
 8001d78:	4611      	mov	r1, r2
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7fe ffc4 	bl	8000d08 <__aeabi_fmul>
 8001d80:	4603      	mov	r3, r0
 8001d82:	4619      	mov	r1, r3
 8001d84:	4620      	mov	r0, r4
 8001d86:	f7fe feb7 	bl	8000af8 <__addsf3>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	461c      	mov	r4, r3
 8001d8e:	4b64      	ldr	r3, [pc, #400]	; (8001f20 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a63      	ldr	r2, [pc, #396]	; (8001f20 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001d94:	6812      	ldr	r2, [r2, #0]
 8001d96:	4611      	mov	r1, r2
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7fe ffb5 	bl	8000d08 <__aeabi_fmul>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	4619      	mov	r1, r3
 8001da2:	4620      	mov	r0, r4
 8001da4:	f7fe fea8 	bl	8000af8 <__addsf3>
 8001da8:	4603      	mov	r3, r0
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7ff f9ba 	bl	8001124 <_ZSt4sqrtf>
 8001db0:	62f8      	str	r0, [r7, #44]	; 0x2c
		  pitch_acc=asin(accY/acctop)*57.324;					//İvme ölçerden hesaplanan pitch açısı
 8001db2:	4b5a      	ldr	r3, [pc, #360]	; (8001f1c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff f859 	bl	8000e70 <__aeabi_fdiv>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff f9a3 	bl	800110c <_ZSt4asinf>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7fe fb25 	bl	8000418 <__aeabi_f2d>
 8001dce:	a34c      	add	r3, pc, #304	; (adr r3, 8001f00 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd4:	f7fe fb78 	bl	80004c8 <__aeabi_dmul>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	460b      	mov	r3, r1
 8001ddc:	4610      	mov	r0, r2
 8001dde:	4619      	mov	r1, r3
 8001de0:	f7fe fe34 	bl	8000a4c <__aeabi_d2f>
 8001de4:	4603      	mov	r3, r0
 8001de6:	4a4f      	ldr	r2, [pc, #316]	; (8001f24 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001de8:	6013      	str	r3, [r2, #0]

		  EKF.Run(gyro,acc);
 8001dea:	f107 0208 	add.w	r2, r7, #8
 8001dee:	f107 0314 	add.w	r3, r7, #20
 8001df2:	4619      	mov	r1, r3
 8001df4:	484c      	ldr	r0, [pc, #304]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001df6:	f005 f81d 	bl	8006e34 <_ZN15Kalman_Filtresi3RunEPfS0_>
		  state.angles[0]  	  = EKF.state.angles[0];
 8001dfa:	4b4b      	ldr	r3, [pc, #300]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001dfc:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001e00:	4a4a      	ldr	r2, [pc, #296]	; (8001f2c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001e02:	6013      	str	r3, [r2, #0]
		  state.angles[1] 	  = EKF.state.angles[1];
 8001e04:	4b48      	ldr	r3, [pc, #288]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001e06:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8001e0a:	4a48      	ldr	r2, [pc, #288]	; (8001f2c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001e0c:	6053      	str	r3, [r2, #4]
		  state.angles[2]   = 	EKF.state.angles[2];
 8001e0e:	4b46      	ldr	r3, [pc, #280]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001e10:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001e14:	4a45      	ldr	r2, [pc, #276]	; (8001f2c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001e16:	6093      	str	r3, [r2, #8]

		  state.rates[0] = gyroX;
 8001e18:	4b3c      	ldr	r3, [pc, #240]	; (8001f0c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a43      	ldr	r2, [pc, #268]	; (8001f2c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001e1e:	60d3      	str	r3, [r2, #12]
		  state.rates[1] = -1*gyroY;
 8001e20:	4b3b      	ldr	r3, [pc, #236]	; (8001f10 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001e28:	4a40      	ldr	r2, [pc, #256]	; (8001f2c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001e2a:	6113      	str	r3, [r2, #16]
		  state.rates[2] = gyroZ;
 8001e2c:	4b39      	ldr	r3, [pc, #228]	; (8001f14 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a3e      	ldr	r2, [pc, #248]	; (8001f2c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001e32:	6153      	str	r3, [r2, #20]
		 // alpha_des = 0;
		 // printf("roll: %d\r\n",int(roll));


		  controller_output_ang = controller.Run(state, state_des, ch[2]);
 8001e34:	4b3e      	ldr	r3, [pc, #248]	; (8001f30 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f107 0c20 	add.w	ip, r7, #32
 8001e3c:	4e3b      	ldr	r6, [pc, #236]	; (8001f2c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001e3e:	9310      	str	r3, [sp, #64]	; 0x40
 8001e40:	4b3c      	ldr	r3, [pc, #240]	; (8001f34 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001e42:	ac07      	add	r4, sp, #28
 8001e44:	461d      	mov	r5, r3
 8001e46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e4e:	682b      	ldr	r3, [r5, #0]
 8001e50:	6023      	str	r3, [r4, #0]
 8001e52:	466d      	mov	r5, sp
 8001e54:	f106 0408 	add.w	r4, r6, #8
 8001e58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e5c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001e60:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001e64:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001e68:	4933      	ldr	r1, [pc, #204]	; (8001f38 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001e6a:	4660      	mov	r0, ip
 8001e6c:	f004 faa6 	bl	80063bc <_ZN10Controller3RunE5stateS0_i>
 8001e70:	f107 0320 	add.w	r3, r7, #32
 8001e74:	4619      	mov	r1, r3
 8001e76:	4831      	ldr	r0, [pc, #196]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001e78:	f000 f965 	bl	8002146 <_ZNSt6vectorIdSaIdEEaSEOS1_>
 8001e7c:	f107 0320 	add.w	r3, r7, #32
 8001e80:	4618      	mov	r0, r3
 8001e82:	f000 f945 	bl	8002110 <_ZNSt6vectorIdSaIdEED1Ev>
		  controller_output[0] = controller.controller_output_pwm[0];
 8001e86:	4b2c      	ldr	r3, [pc, #176]	; (8001f38 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001e88:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8001e8c:	4a2c      	ldr	r2, [pc, #176]	; (8001f40 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001e8e:	6013      	str	r3, [r2, #0]
		  controller_output[1] = controller.controller_output_pwm[1];
 8001e90:	4b29      	ldr	r3, [pc, #164]	; (8001f38 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001e92:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001e96:	4a2a      	ldr	r2, [pc, #168]	; (8001f40 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001e98:	6053      	str	r3, [r2, #4]
		  controller_output[2] = controller.controller_output_pwm[2];
 8001e9a:	4b27      	ldr	r3, [pc, #156]	; (8001f38 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001e9c:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8001ea0:	4a27      	ldr	r2, [pc, #156]	; (8001f40 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001ea2:	6093      	str	r3, [r2, #8]
		  controller_output[3] = controller.controller_output_pwm[3];
 8001ea4:	4b24      	ldr	r3, [pc, #144]	; (8001f38 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001ea6:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8001eaa:	4a25      	ldr	r2, [pc, #148]	; (8001f40 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001eac:	60d3      	str	r3, [r2, #12]

		  w_ang = controller.pd_roll;
 8001eae:	4b22      	ldr	r3, [pc, #136]	; (8001f38 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001eb0:	e9d3 235c 	ldrd	r2, r3, [r3, #368]	; 0x170
 8001eb4:	4923      	ldr	r1, [pc, #140]	; (8001f44 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001eb6:	e9c1 2300 	strd	r2, r3, [r1]

		  w1 = controller_output[0];
 8001eba:	4b21      	ldr	r3, [pc, #132]	; (8001f40 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	4b21      	ldr	r3, [pc, #132]	; (8001f48 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001ec2:	801a      	strh	r2, [r3, #0]
		  w2 = controller_output[1];
 8001ec4:	4b1e      	ldr	r3, [pc, #120]	; (8001f40 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	4b20      	ldr	r3, [pc, #128]	; (8001f4c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001ecc:	801a      	strh	r2, [r3, #0]
		  w3 = controller_output[2];
 8001ece:	4b1c      	ldr	r3, [pc, #112]	; (8001f40 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	b29a      	uxth	r2, r3
 8001ed4:	4b1e      	ldr	r3, [pc, #120]	; (8001f50 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001ed6:	801a      	strh	r2, [r3, #0]
		  w4 = controller_output[3];
 8001ed8:	4b19      	ldr	r3, [pc, #100]	; (8001f40 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	b29a      	uxth	r2, r3
 8001ede:	4b1d      	ldr	r3, [pc, #116]	; (8001f54 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001ee0:	801a      	strh	r2, [r3, #0]

		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8001ee2:	2102      	movs	r1, #2
 8001ee4:	481c      	ldr	r0, [pc, #112]	; (8001f58 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001ee6:	f001 f893 	bl	8003010 <HAL_GPIO_TogglePin>

		}
	}
 8001eea:	bf00      	nop
 8001eec:	3734      	adds	r7, #52	; 0x34
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	f3af 8000 	nop.w
 8001ef8:	66666666 	.word	0x66666666
 8001efc:	40406666 	.word	0x40406666
 8001f00:	d4fdf3b6 	.word	0xd4fdf3b6
 8001f04:	404ca978 	.word	0x404ca978
 8001f08:	20000128 	.word	0x20000128
 8001f0c:	20000240 	.word	0x20000240
 8001f10:	20000244 	.word	0x20000244
 8001f14:	20000248 	.word	0x20000248
 8001f18:	20000250 	.word	0x20000250
 8001f1c:	20000254 	.word	0x20000254
 8001f20:	20000258 	.word	0x20000258
 8001f24:	2000025c 	.word	0x2000025c
 8001f28:	200002d0 	.word	0x200002d0
 8001f2c:	20000284 	.word	0x20000284
 8001f30:	200005fc 	.word	0x200005fc
 8001f34:	20000260 	.word	0x20000260
 8001f38:	20000440 	.word	0x20000440
 8001f3c:	200005d8 	.word	0x200005d8
 8001f40:	200005c8 	.word	0x200005c8
 8001f44:	20000638 	.word	0x20000638
 8001f48:	200005e4 	.word	0x200005e4
 8001f4c:	200005e6 	.word	0x200005e6
 8001f50:	200005e8 	.word	0x200005e8
 8001f54:	200005ea 	.word	0x200005ea
 8001f58:	40010c00 	.word	0x40010c00

08001f5c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)

{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]

 if(htim == &htim3) {
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4a43      	ldr	r2, [pc, #268]	; (8002074 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d17f      	bne.n	800206c <HAL_TIM_IC_CaptureCallback+0x110>

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)  // if the interrupt source is channel1
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	7f1b      	ldrb	r3, [r3, #28]
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d17b      	bne.n	800206c <HAL_TIM_IC_CaptureCallback+0x110>
	{
				IC_Val1 = IC_Val2;
 8001f74:	4b40      	ldr	r3, [pc, #256]	; (8002078 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a40      	ldr	r2, [pc, #256]	; (800207c <HAL_TIM_IC_CaptureCallback+0x120>)
 8001f7a:	6013      	str	r3, [r2, #0]
				IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);  // read second value
 8001f7c:	2104      	movs	r1, #4
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f003 fad4 	bl	800552c <HAL_TIM_ReadCapturedValue>
 8001f84:	4603      	mov	r3, r0
 8001f86:	461a      	mov	r2, r3
 8001f88:	4b3b      	ldr	r3, [pc, #236]	; (8002078 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8001f8a:	601a      	str	r2, [r3, #0]
				Diff = IC_Val2-IC_Val1;
 8001f8c:	4b3a      	ldr	r3, [pc, #232]	; (8002078 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	4b3a      	ldr	r3, [pc, #232]	; (800207c <HAL_TIM_IC_CaptureCallback+0x120>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	4a3a      	ldr	r2, [pc, #232]	; (8002080 <HAL_TIM_IC_CaptureCallback+0x124>)
 8001f98:	6013      	str	r3, [r2, #0]
				if(Diff < 0) {
 8001f9a:	4b39      	ldr	r3, [pc, #228]	; (8002080 <HAL_TIM_IC_CaptureCallback+0x124>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	0fdb      	lsrs	r3, r3, #31
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d006      	beq.n	8001fb4 <HAL_TIM_IC_CaptureCallback+0x58>
					Diff+=65535;
 8001fa6:	4b36      	ldr	r3, [pc, #216]	; (8002080 <HAL_TIM_IC_CaptureCallback+0x124>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001fae:	33ff      	adds	r3, #255	; 0xff
 8001fb0:	4a33      	ldr	r2, [pc, #204]	; (8002080 <HAL_TIM_IC_CaptureCallback+0x124>)
 8001fb2:	6013      	str	r3, [r2, #0]

				}
				//printf("Diff: %d\n",Diff);
				ch[i] = Diff;
 8001fb4:	4b33      	ldr	r3, [pc, #204]	; (8002084 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001fb6:	881b      	ldrh	r3, [r3, #0]
 8001fb8:	b21b      	sxth	r3, r3
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4b30      	ldr	r3, [pc, #192]	; (8002080 <HAL_TIM_IC_CaptureCallback+0x124>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a31      	ldr	r2, [pc, #196]	; (8002088 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001fc2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				if(1) {
					if(ch[i] > CH0) {
 8001fc6:	4b2f      	ldr	r3, [pc, #188]	; (8002084 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001fc8:	881b      	ldrh	r3, [r3, #0]
 8001fca:	b21b      	sxth	r3, r3
 8001fcc:	461a      	mov	r2, r3
 8001fce:	4b2e      	ldr	r3, [pc, #184]	; (8002088 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	bfcc      	ite	gt
 8001fdc:	2301      	movgt	r3, #1
 8001fde:	2300      	movle	r3, #0
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d006      	beq.n	8001ff4 <HAL_TIM_IC_CaptureCallback+0x98>
						//ch[CH_NUM] = ch[i];
						i = -1;
 8001fe6:	4b27      	ldr	r3, [pc, #156]	; (8002084 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001fe8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fec:	801a      	strh	r2, [r3, #0]
						sync = 1;
 8001fee:	4b27      	ldr	r3, [pc, #156]	; (800208c <HAL_TIM_IC_CaptureCallback+0x130>)
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	801a      	strh	r2, [r3, #0]
					}
				}



				state_des.angles[0] =  pid.pwm2ang(ch[0]);
 8001ff4:	4b24      	ldr	r3, [pc, #144]	; (8002088 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4824      	ldr	r0, [pc, #144]	; (8002090 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001ffe:	f005 fdec 	bl	8007bda <_ZN3PID7pwm2angEt>
 8002002:	4603      	mov	r3, r0
 8002004:	4a23      	ldr	r2, [pc, #140]	; (8002094 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002006:	6013      	str	r3, [r2, #0]
				state_des.angles[1] =  pid.pwm2ang(ch[1]);
 8002008:	4b1f      	ldr	r3, [pc, #124]	; (8002088 <HAL_TIM_IC_CaptureCallback+0x12c>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	b29b      	uxth	r3, r3
 800200e:	4619      	mov	r1, r3
 8002010:	481f      	ldr	r0, [pc, #124]	; (8002090 <HAL_TIM_IC_CaptureCallback+0x134>)
 8002012:	f005 fde2 	bl	8007bda <_ZN3PID7pwm2angEt>
 8002016:	4603      	mov	r3, r0
 8002018:	4a1e      	ldr	r2, [pc, #120]	; (8002094 <HAL_TIM_IC_CaptureCallback+0x138>)
 800201a:	6053      	str	r3, [r2, #4]
				state_des.angles[2] =  0;
 800201c:	4b1d      	ldr	r3, [pc, #116]	; (8002094 <HAL_TIM_IC_CaptureCallback+0x138>)
 800201e:	f04f 0200 	mov.w	r2, #0
 8002022:	609a      	str	r2, [r3, #8]
				state_des.rates[2] = pid.pwm2rate(ch[3]);
 8002024:	4b18      	ldr	r3, [pc, #96]	; (8002088 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	b29b      	uxth	r3, r3
 800202a:	4619      	mov	r1, r3
 800202c:	4818      	ldr	r0, [pc, #96]	; (8002090 <HAL_TIM_IC_CaptureCallback+0x134>)
 800202e:	f005 fdfc 	bl	8007c2a <_ZN3PID8pwm2rateEt>
 8002032:	4603      	mov	r3, r0
 8002034:	4a17      	ldr	r2, [pc, #92]	; (8002094 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002036:	6153      	str	r3, [r2, #20]

				i++;
 8002038:	4b12      	ldr	r3, [pc, #72]	; (8002084 <HAL_TIM_IC_CaptureCallback+0x128>)
 800203a:	881b      	ldrh	r3, [r3, #0]
 800203c:	b21b      	sxth	r3, r3
 800203e:	b29b      	uxth	r3, r3
 8002040:	3301      	adds	r3, #1
 8002042:	b29b      	uxth	r3, r3
 8002044:	b21a      	sxth	r2, r3
 8002046:	4b0f      	ldr	r3, [pc, #60]	; (8002084 <HAL_TIM_IC_CaptureCallback+0x128>)
 8002048:	801a      	strh	r2, [r3, #0]
				i = i % (CH_NUM+1);
 800204a:	4b0e      	ldr	r3, [pc, #56]	; (8002084 <HAL_TIM_IC_CaptureCallback+0x128>)
 800204c:	881b      	ldrh	r3, [r3, #0]
 800204e:	b21b      	sxth	r3, r3
 8002050:	4619      	mov	r1, r3
 8002052:	4b11      	ldr	r3, [pc, #68]	; (8002098 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8002054:	fb83 2301 	smull	r2, r3, r3, r1
 8002058:	105a      	asrs	r2, r3, #1
 800205a:	17cb      	asrs	r3, r1, #31
 800205c:	1ad2      	subs	r2, r2, r3
 800205e:	4613      	mov	r3, r2
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	4413      	add	r3, r2
 8002064:	1aca      	subs	r2, r1, r3
 8002066:	b212      	sxth	r2, r2
 8002068:	4b06      	ldr	r3, [pc, #24]	; (8002084 <HAL_TIM_IC_CaptureCallback+0x128>)
 800206a:	801a      	strh	r2, [r3, #0]
			//	__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_2,TIM_INPUTCHANNELPOLARITY_RISING);


	 }
	}
}
 800206c:	bf00      	nop
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	20000170 	.word	0x20000170
 8002078:	200005ec 	.word	0x200005ec
 800207c:	200005f0 	.word	0x200005f0
 8002080:	200005f4 	.word	0x200005f4
 8002084:	200005f8 	.word	0x200005f8
 8002088:	200005fc 	.word	0x200005fc
 800208c:	20000620 	.word	0x20000620
 8002090:	20000400 	.word	0x20000400
 8002094:	20000260 	.word	0x20000260
 8002098:	38e38e39 	.word	0x38e38e39

0800209c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020a0:	b672      	cpsid	i
}
 80020a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020a4:	e7fe      	b.n	80020a4 <Error_Handler+0x8>

080020a6 <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b082      	sub	sp, #8
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 f85e 	bl	8002170 <_ZNSaIdEC1Ev>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f000 f866 	bl	8002188 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_dataC1Ev>
	{ }
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4618      	mov	r0, r3
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <_ZNSaIdED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b082      	sub	sp, #8
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f86d 	bl	80021ae <_ZN9__gnu_cxx13new_allocatorIdED1Ev>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4618      	mov	r0, r3
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <_ZNSt12_Vector_baseIdSaIdEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80020de:	b580      	push	{r7, lr}
 80020e0:	b082      	sub	sp, #8
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689a      	ldr	r2, [r3, #8]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 80020f6:	461a      	mov	r2, r3
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f000 f862 	bl	80021c2 <_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdj>
      }
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff f81b 	bl	800113c <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implD1Ev>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4618      	mov	r0, r3
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <_ZNSt6vectorIdSaIdEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8002110:	b5b0      	push	{r4, r5, r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681c      	ldr	r4, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4618      	mov	r0, r3
 8002124:	f000 f860 	bl	80021e8 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8002128:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800212a:	461a      	mov	r2, r3
 800212c:	4629      	mov	r1, r5
 800212e:	4620      	mov	r0, r4
 8002130:	f000 f864 	bl	80021fc <_ZSt8_DestroyIPddEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff ffd1 	bl	80020de <_ZNSt12_Vector_baseIdSaIdEED1Ev>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4618      	mov	r0, r3
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bdb0      	pop	{r4, r5, r7, pc}

08002146 <_ZNSt6vectorIdSaIdEEaSEOS1_>:
       *  Afterwards @a __x is a valid, but unspecified %vector.
       *
       *  Whether the allocator is moved depends on the allocator traits.
       */
      vector&
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 8002146:	b590      	push	{r4, r7, lr}
 8002148:	b085      	sub	sp, #20
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
 800214e:	6039      	str	r1, [r7, #0]
      {
	constexpr bool __move_storage =
 8002150:	2301      	movs	r3, #1
 8002152:	73fb      	strb	r3, [r7, #15]
	  _Alloc_traits::_S_propagate_on_move_assign()
	  || _Alloc_traits::_S_always_equal();
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 8002154:	6838      	ldr	r0, [r7, #0]
 8002156:	f000 f85f 	bl	8002218 <_ZSt4moveIRSt6vectorIdSaIdEEEONSt16remove_referenceIT_E4typeEOS5_>
 800215a:	4603      	mov	r3, r0
 800215c:	4622      	mov	r2, r4
 800215e:	4619      	mov	r1, r3
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f000 f863 	bl	800222c <_ZNSt6vectorIdSaIdEE14_M_move_assignEOS1_St17integral_constantIbLb1EE>
	return *this;
 8002166:	687b      	ldr	r3, [r7, #4]
      }
 8002168:	4618      	mov	r0, r3
 800216a:	3714      	adds	r7, #20
 800216c:	46bd      	mov	sp, r7
 800216e:	bd90      	pop	{r4, r7, pc}

08002170 <_ZNSaIdEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f000 f895 	bl	80022a8 <_ZN9__gnu_cxx13new_allocatorIdEC1Ev>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4618      	mov	r0, r3
 8002182:	3708      	adds	r7, #8
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	605a      	str	r2, [r3, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	609a      	str	r2, [r3, #8]
	{ }
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4618      	mov	r0, r3
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bc80      	pop	{r7}
 80021ac:	4770      	bx	lr

080021ae <_ZN9__gnu_cxx13new_allocatorIdED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80021ae:	b480      	push	{r7}
 80021b0:	b083      	sub	sp, #12
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4618      	mov	r0, r3
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	bc80      	pop	{r7}
 80021c0:	4770      	bx	lr

080021c2 <_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdj>:
      _M_deallocate(pointer __p, size_t __n)
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b084      	sub	sp, #16
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	60f8      	str	r0, [r7, #12]
 80021ca:	60b9      	str	r1, [r7, #8]
 80021cc:	607a      	str	r2, [r7, #4]
	if (__p)
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d005      	beq.n	80021e0 <_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	68b9      	ldr	r1, [r7, #8]
 80021da:	4618      	mov	r0, r3
 80021dc:	f000 f86e 	bl	80022bc <_ZNSt16allocator_traitsISaIdEE10deallocateERS0_Pdj>
      }
 80021e0:	bf00      	nop
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4618      	mov	r0, r3
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bc80      	pop	{r7}
 80021fa:	4770      	bx	lr

080021fc <_ZSt8_DestroyIPddEvT_S1_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8002208:	68b9      	ldr	r1, [r7, #8]
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	f000 f865 	bl	80022da <_ZSt8_DestroyIPdEvT_S1_>
    }
 8002210:	bf00      	nop
 8002212:	3710      	adds	r7, #16
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <_ZSt4moveIRSt6vectorIdSaIdEEEONSt16remove_referenceIT_E4typeEOS5_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4618      	mov	r0, r3
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	bc80      	pop	{r7}
 800222a:	4770      	bx	lr

0800222c <_ZNSt6vectorIdSaIdEE14_M_move_assignEOS1_St17integral_constantIbLb1EE>:
    private:
      // Constant-time move assignment when source object's memory can be
      // moved, either because the source's allocator will move too
      // or because the allocators are equal.
      void
      _M_move_assign(vector&& __x, true_type) noexcept
 800222c:	b590      	push	{r4, r7, lr}
 800222e:	b089      	sub	sp, #36	; 0x24
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	713a      	strb	r2, [r7, #4]
      {
	vector __tmp(get_allocator());
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	f107 031c 	add.w	r3, r7, #28
 800223e:	4611      	mov	r1, r2
 8002240:	4618      	mov	r0, r3
 8002242:	f000 f857 	bl	80022f4 <_ZNKSt12_Vector_baseIdSaIdEE13get_allocatorEv>
 8002246:	f107 021c 	add.w	r2, r7, #28
 800224a:	f107 0310 	add.w	r3, r7, #16
 800224e:	4611      	mov	r1, r2
 8002250:	4618      	mov	r0, r3
 8002252:	f000 f860 	bl	8002316 <_ZNSt6vectorIdSaIdEEC1ERKS0_>
 8002256:	f107 031c 	add.w	r3, r7, #28
 800225a:	4618      	mov	r0, r3
 800225c:	f7ff ff33 	bl	80020c6 <_ZNSaIdED1Ev>
	this->_M_impl._M_swap_data(__x._M_impl);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	68ba      	ldr	r2, [r7, #8]
 8002264:	4611      	mov	r1, r2
 8002266:	4618      	mov	r0, r3
 8002268:	f000 f864 	bl	8002334 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_data12_M_swap_dataERS2_>
	__tmp._M_impl._M_swap_data(__x._M_impl);
 800226c:	68ba      	ldr	r2, [r7, #8]
 800226e:	f107 0310 	add.w	r3, r7, #16
 8002272:	4611      	mov	r1, r2
 8002274:	4618      	mov	r0, r3
 8002276:	f000 f85d 	bl	8002334 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_data12_M_swap_dataERS2_>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff ffb3 	bl	80021e8 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8002282:	4604      	mov	r4, r0
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	4618      	mov	r0, r3
 8002288:	f7ff ffae 	bl	80021e8 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 800228c:	4603      	mov	r3, r0
 800228e:	4619      	mov	r1, r3
 8002290:	4620      	mov	r0, r4
 8002292:	f000 f86d 	bl	8002370 <_ZSt15__alloc_on_moveISaIdEEvRT_S2_>
	vector __tmp(get_allocator());
 8002296:	f107 0310 	add.w	r3, r7, #16
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff ff38 	bl	8002110 <_ZNSt6vectorIdSaIdEED1Ev>
      }
 80022a0:	bf00      	nop
 80022a2:	3724      	adds	r7, #36	; 0x24
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd90      	pop	{r4, r7, pc}

080022a8 <_ZN9__gnu_cxx13new_allocatorIdEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4618      	mov	r0, r3
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bc80      	pop	{r7}
 80022ba:	4770      	bx	lr

080022bc <_ZNSt16allocator_traitsISaIdEE10deallocateERS0_Pdj>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	68b9      	ldr	r1, [r7, #8]
 80022cc:	68f8      	ldr	r0, [r7, #12]
 80022ce:	f000 f85d 	bl	800238c <_ZN9__gnu_cxx13new_allocatorIdE10deallocateEPdj>
 80022d2:	bf00      	nop
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <_ZSt8_DestroyIPdEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80022da:	b580      	push	{r7, lr}
 80022dc:	b082      	sub	sp, #8
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
 80022e2:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80022e4:	6839      	ldr	r1, [r7, #0]
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 f85d 	bl	80023a6 <_ZNSt12_Destroy_auxILb1EE9__destroyIPdEEvT_S3_>
    }
 80022ec:	bf00      	nop
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <_ZNKSt12_Vector_baseIdSaIdEE13get_allocatorEv>:
      get_allocator() const _GLIBCXX_NOEXCEPT
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
      { return allocator_type(_M_get_Tp_allocator()); }
 80022fe:	6838      	ldr	r0, [r7, #0]
 8002300:	f000 f85b 	bl	80023ba <_ZNKSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8002304:	4603      	mov	r3, r0
 8002306:	4619      	mov	r1, r3
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f000 f860 	bl	80023ce <_ZNSaIdEC1ERKS_>
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <_ZNSt6vectorIdSaIdEEC1ERKS0_>:
      vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8002316:	b580      	push	{r7, lr}
 8002318:	b082      	sub	sp, #8
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
 800231e:	6039      	str	r1, [r7, #0]
      : _Base(__a) { }
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6839      	ldr	r1, [r7, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f000 f860 	bl	80023ea <_ZNSt12_Vector_baseIdSaIdEEC1ERKS0_>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4618      	mov	r0, r3
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_data12_M_swap_dataERS2_>:
	_M_swap_data(_Vector_impl_data& __x) _GLIBCXX_NOEXCEPT
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
	  _Vector_impl_data __tmp;
 800233e:	f107 030c 	add.w	r3, r7, #12
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff ff20 	bl	8002188 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_dataC1Ev>
	  __tmp._M_copy_data(*this);
 8002348:	f107 030c 	add.w	r3, r7, #12
 800234c:	6879      	ldr	r1, [r7, #4]
 800234e:	4618      	mov	r0, r3
 8002350:	f000 f85a 	bl	8002408 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_data12_M_copy_dataERKS2_>
	  _M_copy_data(__x);
 8002354:	6839      	ldr	r1, [r7, #0]
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 f856 	bl	8002408 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_data12_M_copy_dataERKS2_>
	  __x._M_copy_data(__tmp);
 800235c:	f107 030c 	add.w	r3, r7, #12
 8002360:	4619      	mov	r1, r3
 8002362:	6838      	ldr	r0, [r7, #0]
 8002364:	f000 f850 	bl	8002408 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_data12_M_copy_dataERKS2_>
	}
 8002368:	bf00      	nop
 800236a:	3718      	adds	r7, #24
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <_ZSt15__alloc_on_moveISaIdEEvRT_S2_>:
  template<typename _Alloc>
    inline void __do_alloc_on_move(_Alloc&, _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_move(_Alloc& __one, _Alloc& __two)
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_move_assignment __pocma;
      __do_alloc_on_move(__one, __two, __pocma());
 800237a:	461a      	mov	r2, r3
 800237c:	6839      	ldr	r1, [r7, #0]
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 f858 	bl	8002434 <_ZSt18__do_alloc_on_moveISaIdEEvRT_S2_St17integral_constantIbLb1EE>
    }
 8002384:	bf00      	nop
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <_ZN9__gnu_cxx13new_allocatorIdE10deallocateEPdj>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 8002398:	68b8      	ldr	r0, [r7, #8]
 800239a:	f005 fcc1 	bl	8007d20 <_ZdlPv>
      }
 800239e:	bf00      	nop
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <_ZNSt12_Destroy_auxILb1EE9__destroyIPdEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80023a6:	b480      	push	{r7}
 80023a8:	b083      	sub	sp, #12
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
 80023ae:	6039      	str	r1, [r7, #0]
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bc80      	pop	{r7}
 80023b8:	4770      	bx	lr

080023ba <_ZNKSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80023ba:	b480      	push	{r7}
 80023bc:	b083      	sub	sp, #12
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4618      	mov	r0, r3
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bc80      	pop	{r7}
 80023cc:	4770      	bx	lr

080023ce <_ZNSaIdEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b082      	sub	sp, #8
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
 80023d6:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80023d8:	6839      	ldr	r1, [r7, #0]
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 f837 	bl	800244e <_ZN9__gnu_cxx13new_allocatorIdEC1ERKS1_>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4618      	mov	r0, r3
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <_ZNSt12_Vector_baseIdSaIdEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b082      	sub	sp, #8
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
 80023f2:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6839      	ldr	r1, [r7, #0]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f000 f833 	bl	8002464 <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implC1ERKS0_>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4618      	mov	r0, r3
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_data12_M_copy_dataERKS2_>:
	_M_copy_data(_Vector_impl_data const& __x) _GLIBCXX_NOEXCEPT
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
	  _M_start = __x._M_start;
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	601a      	str	r2, [r3, #0]
	  _M_finish = __x._M_finish;
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	605a      	str	r2, [r3, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	689a      	ldr	r2, [r3, #8]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	609a      	str	r2, [r3, #8]
	}
 800242a:	bf00      	nop
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr

08002434 <_ZSt18__do_alloc_on_moveISaIdEEvRT_S2_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 8002440:	68b8      	ldr	r0, [r7, #8]
 8002442:	f000 f821 	bl	8002488 <_ZSt4moveIRSaIdEEONSt16remove_referenceIT_E4typeEOS3_>
 8002446:	bf00      	nop
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <_ZN9__gnu_cxx13new_allocatorIdEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800244e:	b480      	push	{r7}
 8002450:	b083      	sub	sp, #12
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
 8002456:	6039      	str	r1, [r7, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4618      	mov	r0, r3
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	bc80      	pop	{r7}
 8002462:	4770      	bx	lr

08002464 <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 800246e:	6839      	ldr	r1, [r7, #0]
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f7ff ffac 	bl	80023ce <_ZNSaIdEC1ERKS_>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4618      	mov	r0, r3
 800247a:	f7ff fe85 	bl	8002188 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_dataC1Ev>
	{ }
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4618      	mov	r0, r3
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <_ZSt4moveIRSaIdEEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4618      	mov	r0, r3
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	bc80      	pop	{r7}
 800249a:	4770      	bx	lr

0800249c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d110      	bne.n	80024ce <_Z41__static_initialization_and_destruction_0ii+0x32>
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d10b      	bne.n	80024ce <_Z41__static_initialization_and_destruction_0ii+0x32>
Kalman_Filtresi EKF;
 80024b6:	4812      	ldr	r0, [pc, #72]	; (8002500 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80024b8:	f004 fc5e 	bl	8006d78 <_ZN15Kalman_FiltresiC1Ev>
PID pid;
 80024bc:	4811      	ldr	r0, [pc, #68]	; (8002504 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80024be:	f005 f989 	bl	80077d4 <_ZN3PIDC1Ev>
Controller controller;
 80024c2:	4811      	ldr	r0, [pc, #68]	; (8002508 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80024c4:	f003 febc 	bl	8006240 <_ZN10ControllerC1Ev>
std::vector<double> controller_output_ang;
 80024c8:	4810      	ldr	r0, [pc, #64]	; (800250c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 80024ca:	f7fe fe50 	bl	800116e <_ZNSt6vectorIdSaIdEEC1Ev>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d110      	bne.n	80024f6 <_Z41__static_initialization_and_destruction_0ii+0x5a>
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024da:	4293      	cmp	r3, r2
 80024dc:	d10b      	bne.n	80024f6 <_Z41__static_initialization_and_destruction_0ii+0x5a>
 80024de:	480b      	ldr	r0, [pc, #44]	; (800250c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 80024e0:	f7ff fe16 	bl	8002110 <_ZNSt6vectorIdSaIdEED1Ev>
Controller controller;
 80024e4:	4808      	ldr	r0, [pc, #32]	; (8002508 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80024e6:	f004 fa0b 	bl	8006900 <_ZN10ControllerD1Ev>
PID pid;
 80024ea:	4806      	ldr	r0, [pc, #24]	; (8002504 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80024ec:	f005 fc0e 	bl	8007d0c <_ZN3PIDD1Ev>
Kalman_Filtresi EKF;
 80024f0:	4803      	ldr	r0, [pc, #12]	; (8002500 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80024f2:	f005 f8f5 	bl	80076e0 <_ZN15Kalman_FiltresiD1Ev>
}
 80024f6:	bf00      	nop
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	200002d0 	.word	0x200002d0
 8002504:	20000400 	.word	0x20000400
 8002508:	20000440 	.word	0x20000440
 800250c:	200005d8 	.word	0x200005d8

08002510 <_GLOBAL__sub_I_hi2c1>:
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
 8002514:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002518:	2001      	movs	r0, #1
 800251a:	f7ff ffbf 	bl	800249c <_Z41__static_initialization_and_destruction_0ii>
 800251e:	bd80      	pop	{r7, pc}

08002520 <_GLOBAL__sub_D_hi2c1>:
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
 8002524:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002528:	2000      	movs	r0, #0
 800252a:	f7ff ffb7 	bl	800249c <_Z41__static_initialization_and_destruction_0ii>
 800252e:	bd80      	pop	{r7, pc}

08002530 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002536:	4b15      	ldr	r3, [pc, #84]	; (800258c <HAL_MspInit+0x5c>)
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	4a14      	ldr	r2, [pc, #80]	; (800258c <HAL_MspInit+0x5c>)
 800253c:	f043 0301 	orr.w	r3, r3, #1
 8002540:	6193      	str	r3, [r2, #24]
 8002542:	4b12      	ldr	r3, [pc, #72]	; (800258c <HAL_MspInit+0x5c>)
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	60bb      	str	r3, [r7, #8]
 800254c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800254e:	4b0f      	ldr	r3, [pc, #60]	; (800258c <HAL_MspInit+0x5c>)
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	4a0e      	ldr	r2, [pc, #56]	; (800258c <HAL_MspInit+0x5c>)
 8002554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002558:	61d3      	str	r3, [r2, #28]
 800255a:	4b0c      	ldr	r3, [pc, #48]	; (800258c <HAL_MspInit+0x5c>)
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002562:	607b      	str	r3, [r7, #4]
 8002564:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002566:	4b0a      	ldr	r3, [pc, #40]	; (8002590 <HAL_MspInit+0x60>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800257a:	60fb      	str	r3, [r7, #12]
 800257c:	4a04      	ldr	r2, [pc, #16]	; (8002590 <HAL_MspInit+0x60>)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002582:	bf00      	nop
 8002584:	3714      	adds	r7, #20
 8002586:	46bd      	mov	sp, r7
 8002588:	bc80      	pop	{r7}
 800258a:	4770      	bx	lr
 800258c:	40021000 	.word	0x40021000
 8002590:	40010000 	.word	0x40010000

08002594 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b088      	sub	sp, #32
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800259c:	f107 0310 	add.w	r3, r7, #16
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	605a      	str	r2, [r3, #4]
 80025a6:	609a      	str	r2, [r3, #8]
 80025a8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a15      	ldr	r2, [pc, #84]	; (8002604 <HAL_I2C_MspInit+0x70>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d123      	bne.n	80025fc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025b4:	4b14      	ldr	r3, [pc, #80]	; (8002608 <HAL_I2C_MspInit+0x74>)
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	4a13      	ldr	r2, [pc, #76]	; (8002608 <HAL_I2C_MspInit+0x74>)
 80025ba:	f043 0308 	orr.w	r3, r3, #8
 80025be:	6193      	str	r3, [r2, #24]
 80025c0:	4b11      	ldr	r3, [pc, #68]	; (8002608 <HAL_I2C_MspInit+0x74>)
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	f003 0308 	and.w	r3, r3, #8
 80025c8:	60fb      	str	r3, [r7, #12]
 80025ca:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80025cc:	23c0      	movs	r3, #192	; 0xc0
 80025ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025d0:	2312      	movs	r3, #18
 80025d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025d4:	2303      	movs	r3, #3
 80025d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025d8:	f107 0310 	add.w	r3, r7, #16
 80025dc:	4619      	mov	r1, r3
 80025de:	480b      	ldr	r0, [pc, #44]	; (800260c <HAL_I2C_MspInit+0x78>)
 80025e0:	f000 fb7a 	bl	8002cd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025e4:	4b08      	ldr	r3, [pc, #32]	; (8002608 <HAL_I2C_MspInit+0x74>)
 80025e6:	69db      	ldr	r3, [r3, #28]
 80025e8:	4a07      	ldr	r2, [pc, #28]	; (8002608 <HAL_I2C_MspInit+0x74>)
 80025ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025ee:	61d3      	str	r3, [r2, #28]
 80025f0:	4b05      	ldr	r3, [pc, #20]	; (8002608 <HAL_I2C_MspInit+0x74>)
 80025f2:	69db      	ldr	r3, [r3, #28]
 80025f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025f8:	60bb      	str	r3, [r7, #8]
 80025fa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80025fc:	bf00      	nop
 80025fe:	3720      	adds	r7, #32
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	40005400 	.word	0x40005400
 8002608:	40021000 	.word	0x40021000
 800260c:	40010c00 	.word	0x40010c00

08002610 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a09      	ldr	r2, [pc, #36]	; (8002644 <HAL_TIM_PWM_MspInit+0x34>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d10b      	bne.n	800263a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002622:	4b09      	ldr	r3, [pc, #36]	; (8002648 <HAL_TIM_PWM_MspInit+0x38>)
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	4a08      	ldr	r2, [pc, #32]	; (8002648 <HAL_TIM_PWM_MspInit+0x38>)
 8002628:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800262c:	6193      	str	r3, [r2, #24]
 800262e:	4b06      	ldr	r3, [pc, #24]	; (8002648 <HAL_TIM_PWM_MspInit+0x38>)
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800263a:	bf00      	nop
 800263c:	3714      	adds	r7, #20
 800263e:	46bd      	mov	sp, r7
 8002640:	bc80      	pop	{r7}
 8002642:	4770      	bx	lr
 8002644:	40012c00 	.word	0x40012c00
 8002648:	40021000 	.word	0x40021000

0800264c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b08a      	sub	sp, #40	; 0x28
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002654:	f107 0318 	add.w	r3, r7, #24
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	605a      	str	r2, [r3, #4]
 800265e:	609a      	str	r2, [r3, #8]
 8002660:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800266a:	d114      	bne.n	8002696 <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800266c:	4b2d      	ldr	r3, [pc, #180]	; (8002724 <HAL_TIM_Base_MspInit+0xd8>)
 800266e:	69db      	ldr	r3, [r3, #28]
 8002670:	4a2c      	ldr	r2, [pc, #176]	; (8002724 <HAL_TIM_Base_MspInit+0xd8>)
 8002672:	f043 0301 	orr.w	r3, r3, #1
 8002676:	61d3      	str	r3, [r2, #28]
 8002678:	4b2a      	ldr	r3, [pc, #168]	; (8002724 <HAL_TIM_Base_MspInit+0xd8>)
 800267a:	69db      	ldr	r3, [r3, #28]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	617b      	str	r3, [r7, #20]
 8002682:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002684:	2200      	movs	r2, #0
 8002686:	2101      	movs	r1, #1
 8002688:	201c      	movs	r0, #28
 800268a:	f000 faee 	bl	8002c6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800268e:	201c      	movs	r0, #28
 8002690:	f000 fb07 	bl	8002ca2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002694:	e042      	b.n	800271c <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM3)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a23      	ldr	r2, [pc, #140]	; (8002728 <HAL_TIM_Base_MspInit+0xdc>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d12c      	bne.n	80026fa <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026a0:	4b20      	ldr	r3, [pc, #128]	; (8002724 <HAL_TIM_Base_MspInit+0xd8>)
 80026a2:	69db      	ldr	r3, [r3, #28]
 80026a4:	4a1f      	ldr	r2, [pc, #124]	; (8002724 <HAL_TIM_Base_MspInit+0xd8>)
 80026a6:	f043 0302 	orr.w	r3, r3, #2
 80026aa:	61d3      	str	r3, [r2, #28]
 80026ac:	4b1d      	ldr	r3, [pc, #116]	; (8002724 <HAL_TIM_Base_MspInit+0xd8>)
 80026ae:	69db      	ldr	r3, [r3, #28]
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	613b      	str	r3, [r7, #16]
 80026b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026b8:	4b1a      	ldr	r3, [pc, #104]	; (8002724 <HAL_TIM_Base_MspInit+0xd8>)
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	4a19      	ldr	r2, [pc, #100]	; (8002724 <HAL_TIM_Base_MspInit+0xd8>)
 80026be:	f043 0304 	orr.w	r3, r3, #4
 80026c2:	6193      	str	r3, [r2, #24]
 80026c4:	4b17      	ldr	r3, [pc, #92]	; (8002724 <HAL_TIM_Base_MspInit+0xd8>)
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	60fb      	str	r3, [r7, #12]
 80026ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80026d0:	2380      	movs	r3, #128	; 0x80
 80026d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026d4:	2300      	movs	r3, #0
 80026d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d8:	2300      	movs	r3, #0
 80026da:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026dc:	f107 0318 	add.w	r3, r7, #24
 80026e0:	4619      	mov	r1, r3
 80026e2:	4812      	ldr	r0, [pc, #72]	; (800272c <HAL_TIM_Base_MspInit+0xe0>)
 80026e4:	f000 faf8 	bl	8002cd8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80026e8:	2200      	movs	r2, #0
 80026ea:	2100      	movs	r1, #0
 80026ec:	201d      	movs	r0, #29
 80026ee:	f000 fabc 	bl	8002c6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80026f2:	201d      	movs	r0, #29
 80026f4:	f000 fad5 	bl	8002ca2 <HAL_NVIC_EnableIRQ>
}
 80026f8:	e010      	b.n	800271c <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM4)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a0c      	ldr	r2, [pc, #48]	; (8002730 <HAL_TIM_Base_MspInit+0xe4>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d10b      	bne.n	800271c <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002704:	4b07      	ldr	r3, [pc, #28]	; (8002724 <HAL_TIM_Base_MspInit+0xd8>)
 8002706:	69db      	ldr	r3, [r3, #28]
 8002708:	4a06      	ldr	r2, [pc, #24]	; (8002724 <HAL_TIM_Base_MspInit+0xd8>)
 800270a:	f043 0304 	orr.w	r3, r3, #4
 800270e:	61d3      	str	r3, [r2, #28]
 8002710:	4b04      	ldr	r3, [pc, #16]	; (8002724 <HAL_TIM_Base_MspInit+0xd8>)
 8002712:	69db      	ldr	r3, [r3, #28]
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	60bb      	str	r3, [r7, #8]
 800271a:	68bb      	ldr	r3, [r7, #8]
}
 800271c:	bf00      	nop
 800271e:	3728      	adds	r7, #40	; 0x28
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	40021000 	.word	0x40021000
 8002728:	40000400 	.word	0x40000400
 800272c:	40010800 	.word	0x40010800
 8002730:	40000800 	.word	0x40000800

08002734 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b088      	sub	sp, #32
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800273c:	f107 0310 	add.w	r3, r7, #16
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	605a      	str	r2, [r3, #4]
 8002746:	609a      	str	r2, [r3, #8]
 8002748:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a10      	ldr	r2, [pc, #64]	; (8002790 <HAL_TIM_MspPostInit+0x5c>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d118      	bne.n	8002786 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002754:	4b0f      	ldr	r3, [pc, #60]	; (8002794 <HAL_TIM_MspPostInit+0x60>)
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	4a0e      	ldr	r2, [pc, #56]	; (8002794 <HAL_TIM_MspPostInit+0x60>)
 800275a:	f043 0304 	orr.w	r3, r3, #4
 800275e:	6193      	str	r3, [r2, #24]
 8002760:	4b0c      	ldr	r3, [pc, #48]	; (8002794 <HAL_TIM_MspPostInit+0x60>)
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	f003 0304 	and.w	r3, r3, #4
 8002768:	60fb      	str	r3, [r7, #12]
 800276a:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800276c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002770:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002772:	2302      	movs	r3, #2
 8002774:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002776:	2302      	movs	r3, #2
 8002778:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800277a:	f107 0310 	add.w	r3, r7, #16
 800277e:	4619      	mov	r1, r3
 8002780:	4805      	ldr	r0, [pc, #20]	; (8002798 <HAL_TIM_MspPostInit+0x64>)
 8002782:	f000 faa9 	bl	8002cd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002786:	bf00      	nop
 8002788:	3720      	adds	r7, #32
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	40012c00 	.word	0x40012c00
 8002794:	40021000 	.word	0x40021000
 8002798:	40010800 	.word	0x40010800

0800279c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b088      	sub	sp, #32
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a4:	f107 0310 	add.w	r3, r7, #16
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]
 80027ac:	605a      	str	r2, [r3, #4]
 80027ae:	609a      	str	r2, [r3, #8]
 80027b0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a1b      	ldr	r2, [pc, #108]	; (8002824 <HAL_UART_MspInit+0x88>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d12f      	bne.n	800281c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80027bc:	4b1a      	ldr	r3, [pc, #104]	; (8002828 <HAL_UART_MspInit+0x8c>)
 80027be:	69db      	ldr	r3, [r3, #28]
 80027c0:	4a19      	ldr	r2, [pc, #100]	; (8002828 <HAL_UART_MspInit+0x8c>)
 80027c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027c6:	61d3      	str	r3, [r2, #28]
 80027c8:	4b17      	ldr	r3, [pc, #92]	; (8002828 <HAL_UART_MspInit+0x8c>)
 80027ca:	69db      	ldr	r3, [r3, #28]
 80027cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d0:	60fb      	str	r3, [r7, #12]
 80027d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027d4:	4b14      	ldr	r3, [pc, #80]	; (8002828 <HAL_UART_MspInit+0x8c>)
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	4a13      	ldr	r2, [pc, #76]	; (8002828 <HAL_UART_MspInit+0x8c>)
 80027da:	f043 0304 	orr.w	r3, r3, #4
 80027de:	6193      	str	r3, [r2, #24]
 80027e0:	4b11      	ldr	r3, [pc, #68]	; (8002828 <HAL_UART_MspInit+0x8c>)
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	f003 0304 	and.w	r3, r3, #4
 80027e8:	60bb      	str	r3, [r7, #8]
 80027ea:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80027ec:	2304      	movs	r3, #4
 80027ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f0:	2302      	movs	r3, #2
 80027f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027f4:	2303      	movs	r3, #3
 80027f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027f8:	f107 0310 	add.w	r3, r7, #16
 80027fc:	4619      	mov	r1, r3
 80027fe:	480b      	ldr	r0, [pc, #44]	; (800282c <HAL_UART_MspInit+0x90>)
 8002800:	f000 fa6a 	bl	8002cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002804:	2308      	movs	r3, #8
 8002806:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002808:	2300      	movs	r3, #0
 800280a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280c:	2300      	movs	r3, #0
 800280e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002810:	f107 0310 	add.w	r3, r7, #16
 8002814:	4619      	mov	r1, r3
 8002816:	4805      	ldr	r0, [pc, #20]	; (800282c <HAL_UART_MspInit+0x90>)
 8002818:	f000 fa5e 	bl	8002cd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800281c:	bf00      	nop
 800281e:	3720      	adds	r7, #32
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	40004400 	.word	0x40004400
 8002828:	40021000 	.word	0x40021000
 800282c:	40010800 	.word	0x40010800

08002830 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002834:	e7fe      	b.n	8002834 <NMI_Handler+0x4>

08002836 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002836:	b480      	push	{r7}
 8002838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800283a:	e7fe      	b.n	800283a <HardFault_Handler+0x4>

0800283c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002840:	e7fe      	b.n	8002840 <MemManage_Handler+0x4>

08002842 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002842:	b480      	push	{r7}
 8002844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002846:	e7fe      	b.n	8002846 <BusFault_Handler+0x4>

08002848 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800284c:	e7fe      	b.n	800284c <UsageFault_Handler+0x4>

0800284e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800284e:	b480      	push	{r7}
 8002850:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002852:	bf00      	nop
 8002854:	46bd      	mov	sp, r7
 8002856:	bc80      	pop	{r7}
 8002858:	4770      	bx	lr

0800285a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800285a:	b480      	push	{r7}
 800285c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800285e:	bf00      	nop
 8002860:	46bd      	mov	sp, r7
 8002862:	bc80      	pop	{r7}
 8002864:	4770      	bx	lr

08002866 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002866:	b480      	push	{r7}
 8002868:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800286a:	bf00      	nop
 800286c:	46bd      	mov	sp, r7
 800286e:	bc80      	pop	{r7}
 8002870:	4770      	bx	lr

08002872 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002876:	f000 f8e1 	bl	8002a3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800287a:	bf00      	nop
 800287c:	bd80      	pop	{r7, pc}
	...

08002880 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002884:	4802      	ldr	r0, [pc, #8]	; (8002890 <TIM2_IRQHandler+0x10>)
 8002886:	f002 fb33 	bl	8004ef0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800288a:	bf00      	nop
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	20000128 	.word	0x20000128

08002894 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002898:	4802      	ldr	r0, [pc, #8]	; (80028a4 <TIM3_IRQHandler+0x10>)
 800289a:	f002 fb29 	bl	8004ef0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800289e:	bf00      	nop
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	20000170 	.word	0x20000170

080028a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
	return 1;
 80028ac:	2301      	movs	r3, #1
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bc80      	pop	{r7}
 80028b4:	4770      	bx	lr

080028b6 <_kill>:

int _kill(int pid, int sig)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b082      	sub	sp, #8
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
 80028be:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80028c0:	f005 fdee 	bl	80084a0 <__errno>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2216      	movs	r2, #22
 80028c8:	601a      	str	r2, [r3, #0]
	return -1;
 80028ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <_exit>:

void _exit (int status)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b082      	sub	sp, #8
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80028de:	f04f 31ff 	mov.w	r1, #4294967295
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7ff ffe7 	bl	80028b6 <_kill>
	while (1) {}		/* Make sure we hang here */
 80028e8:	e7fe      	b.n	80028e8 <_exit+0x12>
	...

080028ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028f4:	4a14      	ldr	r2, [pc, #80]	; (8002948 <_sbrk+0x5c>)
 80028f6:	4b15      	ldr	r3, [pc, #84]	; (800294c <_sbrk+0x60>)
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002900:	4b13      	ldr	r3, [pc, #76]	; (8002950 <_sbrk+0x64>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d102      	bne.n	800290e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002908:	4b11      	ldr	r3, [pc, #68]	; (8002950 <_sbrk+0x64>)
 800290a:	4a12      	ldr	r2, [pc, #72]	; (8002954 <_sbrk+0x68>)
 800290c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800290e:	4b10      	ldr	r3, [pc, #64]	; (8002950 <_sbrk+0x64>)
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4413      	add	r3, r2
 8002916:	693a      	ldr	r2, [r7, #16]
 8002918:	429a      	cmp	r2, r3
 800291a:	d207      	bcs.n	800292c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800291c:	f005 fdc0 	bl	80084a0 <__errno>
 8002920:	4603      	mov	r3, r0
 8002922:	220c      	movs	r2, #12
 8002924:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002926:	f04f 33ff 	mov.w	r3, #4294967295
 800292a:	e009      	b.n	8002940 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800292c:	4b08      	ldr	r3, [pc, #32]	; (8002950 <_sbrk+0x64>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002932:	4b07      	ldr	r3, [pc, #28]	; (8002950 <_sbrk+0x64>)
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4413      	add	r3, r2
 800293a:	4a05      	ldr	r2, [pc, #20]	; (8002950 <_sbrk+0x64>)
 800293c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800293e:	68fb      	ldr	r3, [r7, #12]
}
 8002940:	4618      	mov	r0, r3
 8002942:	3718      	adds	r7, #24
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	20005000 	.word	0x20005000
 800294c:	00000400 	.word	0x00000400
 8002950:	20000640 	.word	0x20000640
 8002954:	20000668 	.word	0x20000668

08002958 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800295c:	bf00      	nop
 800295e:	46bd      	mov	sp, r7
 8002960:	bc80      	pop	{r7}
 8002962:	4770      	bx	lr

08002964 <Reset_Handler>:
 8002964:	2100      	movs	r1, #0
 8002966:	e003      	b.n	8002970 <LoopCopyDataInit>

08002968 <CopyDataInit>:
 8002968:	4b0b      	ldr	r3, [pc, #44]	; (8002998 <LoopFillZerobss+0x14>)
 800296a:	585b      	ldr	r3, [r3, r1]
 800296c:	5043      	str	r3, [r0, r1]
 800296e:	3104      	adds	r1, #4

08002970 <LoopCopyDataInit>:
 8002970:	480a      	ldr	r0, [pc, #40]	; (800299c <LoopFillZerobss+0x18>)
 8002972:	4b0b      	ldr	r3, [pc, #44]	; (80029a0 <LoopFillZerobss+0x1c>)
 8002974:	1842      	adds	r2, r0, r1
 8002976:	429a      	cmp	r2, r3
 8002978:	d3f6      	bcc.n	8002968 <CopyDataInit>
 800297a:	4a0a      	ldr	r2, [pc, #40]	; (80029a4 <LoopFillZerobss+0x20>)
 800297c:	e002      	b.n	8002984 <LoopFillZerobss>

0800297e <FillZerobss>:
 800297e:	2300      	movs	r3, #0
 8002980:	f842 3b04 	str.w	r3, [r2], #4

08002984 <LoopFillZerobss>:
 8002984:	4b08      	ldr	r3, [pc, #32]	; (80029a8 <LoopFillZerobss+0x24>)
 8002986:	429a      	cmp	r2, r3
 8002988:	d3f9      	bcc.n	800297e <FillZerobss>
 800298a:	f7ff ffe5 	bl	8002958 <SystemInit>
 800298e:	f005 fd8d 	bl	80084ac <__libc_init_array>
 8002992:	f7fe fbf9 	bl	8001188 <main>
 8002996:	4770      	bx	lr
 8002998:	08008880 	.word	0x08008880
 800299c:	20000000 	.word	0x20000000
 80029a0:	20000070 	.word	0x20000070
 80029a4:	20000070 	.word	0x20000070
 80029a8:	20000664 	.word	0x20000664

080029ac <ADC1_2_IRQHandler>:
 80029ac:	e7fe      	b.n	80029ac <ADC1_2_IRQHandler>
	...

080029b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029b4:	4b08      	ldr	r3, [pc, #32]	; (80029d8 <HAL_Init+0x28>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a07      	ldr	r2, [pc, #28]	; (80029d8 <HAL_Init+0x28>)
 80029ba:	f043 0310 	orr.w	r3, r3, #16
 80029be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029c0:	2003      	movs	r0, #3
 80029c2:	f000 f947 	bl	8002c54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029c6:	2000      	movs	r0, #0
 80029c8:	f000 f808 	bl	80029dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029cc:	f7ff fdb0 	bl	8002530 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40022000 	.word	0x40022000

080029dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029e4:	4b12      	ldr	r3, [pc, #72]	; (8002a30 <HAL_InitTick+0x54>)
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	4b12      	ldr	r3, [pc, #72]	; (8002a34 <HAL_InitTick+0x58>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	4619      	mov	r1, r3
 80029ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80029f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029fa:	4618      	mov	r0, r3
 80029fc:	f000 f95f 	bl	8002cbe <HAL_SYSTICK_Config>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e00e      	b.n	8002a28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2b0f      	cmp	r3, #15
 8002a0e:	d80a      	bhi.n	8002a26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a10:	2200      	movs	r2, #0
 8002a12:	6879      	ldr	r1, [r7, #4]
 8002a14:	f04f 30ff 	mov.w	r0, #4294967295
 8002a18:	f000 f927 	bl	8002c6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a1c:	4a06      	ldr	r2, [pc, #24]	; (8002a38 <HAL_InitTick+0x5c>)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
 8002a24:	e000      	b.n	8002a28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3708      	adds	r7, #8
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	20000000 	.word	0x20000000
 8002a34:	20000008 	.word	0x20000008
 8002a38:	20000004 	.word	0x20000004

08002a3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a40:	4b05      	ldr	r3, [pc, #20]	; (8002a58 <HAL_IncTick+0x1c>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	461a      	mov	r2, r3
 8002a46:	4b05      	ldr	r3, [pc, #20]	; (8002a5c <HAL_IncTick+0x20>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	4a03      	ldr	r2, [pc, #12]	; (8002a5c <HAL_IncTick+0x20>)
 8002a4e:	6013      	str	r3, [r2, #0]
}
 8002a50:	bf00      	nop
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bc80      	pop	{r7}
 8002a56:	4770      	bx	lr
 8002a58:	20000008 	.word	0x20000008
 8002a5c:	20000650 	.word	0x20000650

08002a60 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  return uwTick;
 8002a64:	4b02      	ldr	r3, [pc, #8]	; (8002a70 <HAL_GetTick+0x10>)
 8002a66:	681b      	ldr	r3, [r3, #0]
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bc80      	pop	{r7}
 8002a6e:	4770      	bx	lr
 8002a70:	20000650 	.word	0x20000650

08002a74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a7c:	f7ff fff0 	bl	8002a60 <HAL_GetTick>
 8002a80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a8c:	d005      	beq.n	8002a9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a8e:	4b0a      	ldr	r3, [pc, #40]	; (8002ab8 <HAL_Delay+0x44>)
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	461a      	mov	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	4413      	add	r3, r2
 8002a98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a9a:	bf00      	nop
 8002a9c:	f7ff ffe0 	bl	8002a60 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d8f7      	bhi.n	8002a9c <HAL_Delay+0x28>
  {
  }
}
 8002aac:	bf00      	nop
 8002aae:	bf00      	nop
 8002ab0:	3710      	adds	r7, #16
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	20000008 	.word	0x20000008

08002abc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f003 0307 	and.w	r3, r3, #7
 8002aca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002acc:	4b0c      	ldr	r3, [pc, #48]	; (8002b00 <__NVIC_SetPriorityGrouping+0x44>)
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ad2:	68ba      	ldr	r2, [r7, #8]
 8002ad4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ad8:	4013      	ands	r3, r2
 8002ada:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ae4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ae8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aee:	4a04      	ldr	r2, [pc, #16]	; (8002b00 <__NVIC_SetPriorityGrouping+0x44>)
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	60d3      	str	r3, [r2, #12]
}
 8002af4:	bf00      	nop
 8002af6:	3714      	adds	r7, #20
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bc80      	pop	{r7}
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	e000ed00 	.word	0xe000ed00

08002b04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b08:	4b04      	ldr	r3, [pc, #16]	; (8002b1c <__NVIC_GetPriorityGrouping+0x18>)
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	0a1b      	lsrs	r3, r3, #8
 8002b0e:	f003 0307 	and.w	r3, r3, #7
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bc80      	pop	{r7}
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	e000ed00 	.word	0xe000ed00

08002b20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	4603      	mov	r3, r0
 8002b28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	db0b      	blt.n	8002b4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b32:	79fb      	ldrb	r3, [r7, #7]
 8002b34:	f003 021f 	and.w	r2, r3, #31
 8002b38:	4906      	ldr	r1, [pc, #24]	; (8002b54 <__NVIC_EnableIRQ+0x34>)
 8002b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3e:	095b      	lsrs	r3, r3, #5
 8002b40:	2001      	movs	r0, #1
 8002b42:	fa00 f202 	lsl.w	r2, r0, r2
 8002b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b4a:	bf00      	nop
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bc80      	pop	{r7}
 8002b52:	4770      	bx	lr
 8002b54:	e000e100 	.word	0xe000e100

08002b58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	4603      	mov	r3, r0
 8002b60:	6039      	str	r1, [r7, #0]
 8002b62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	db0a      	blt.n	8002b82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	490c      	ldr	r1, [pc, #48]	; (8002ba4 <__NVIC_SetPriority+0x4c>)
 8002b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b76:	0112      	lsls	r2, r2, #4
 8002b78:	b2d2      	uxtb	r2, r2
 8002b7a:	440b      	add	r3, r1
 8002b7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b80:	e00a      	b.n	8002b98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	4908      	ldr	r1, [pc, #32]	; (8002ba8 <__NVIC_SetPriority+0x50>)
 8002b88:	79fb      	ldrb	r3, [r7, #7]
 8002b8a:	f003 030f 	and.w	r3, r3, #15
 8002b8e:	3b04      	subs	r3, #4
 8002b90:	0112      	lsls	r2, r2, #4
 8002b92:	b2d2      	uxtb	r2, r2
 8002b94:	440b      	add	r3, r1
 8002b96:	761a      	strb	r2, [r3, #24]
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bc80      	pop	{r7}
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	e000e100 	.word	0xe000e100
 8002ba8:	e000ed00 	.word	0xe000ed00

08002bac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b089      	sub	sp, #36	; 0x24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f003 0307 	and.w	r3, r3, #7
 8002bbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	f1c3 0307 	rsb	r3, r3, #7
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	bf28      	it	cs
 8002bca:	2304      	movcs	r3, #4
 8002bcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	2b06      	cmp	r3, #6
 8002bd4:	d902      	bls.n	8002bdc <NVIC_EncodePriority+0x30>
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	3b03      	subs	r3, #3
 8002bda:	e000      	b.n	8002bde <NVIC_EncodePriority+0x32>
 8002bdc:	2300      	movs	r3, #0
 8002bde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002be0:	f04f 32ff 	mov.w	r2, #4294967295
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bea:	43da      	mvns	r2, r3
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	401a      	ands	r2, r3
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bf4:	f04f 31ff 	mov.w	r1, #4294967295
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8002bfe:	43d9      	mvns	r1, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c04:	4313      	orrs	r3, r2
         );
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3724      	adds	r7, #36	; 0x24
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bc80      	pop	{r7}
 8002c0e:	4770      	bx	lr

08002c10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c20:	d301      	bcc.n	8002c26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c22:	2301      	movs	r3, #1
 8002c24:	e00f      	b.n	8002c46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c26:	4a0a      	ldr	r2, [pc, #40]	; (8002c50 <SysTick_Config+0x40>)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c2e:	210f      	movs	r1, #15
 8002c30:	f04f 30ff 	mov.w	r0, #4294967295
 8002c34:	f7ff ff90 	bl	8002b58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c38:	4b05      	ldr	r3, [pc, #20]	; (8002c50 <SysTick_Config+0x40>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c3e:	4b04      	ldr	r3, [pc, #16]	; (8002c50 <SysTick_Config+0x40>)
 8002c40:	2207      	movs	r2, #7
 8002c42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	e000e010 	.word	0xe000e010

08002c54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f7ff ff2d 	bl	8002abc <__NVIC_SetPriorityGrouping>
}
 8002c62:	bf00      	nop
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b086      	sub	sp, #24
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	4603      	mov	r3, r0
 8002c72:	60b9      	str	r1, [r7, #8]
 8002c74:	607a      	str	r2, [r7, #4]
 8002c76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c7c:	f7ff ff42 	bl	8002b04 <__NVIC_GetPriorityGrouping>
 8002c80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	68b9      	ldr	r1, [r7, #8]
 8002c86:	6978      	ldr	r0, [r7, #20]
 8002c88:	f7ff ff90 	bl	8002bac <NVIC_EncodePriority>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c92:	4611      	mov	r1, r2
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff ff5f 	bl	8002b58 <__NVIC_SetPriority>
}
 8002c9a:	bf00      	nop
 8002c9c:	3718      	adds	r7, #24
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b082      	sub	sp, #8
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	4603      	mov	r3, r0
 8002caa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff ff35 	bl	8002b20 <__NVIC_EnableIRQ>
}
 8002cb6:	bf00      	nop
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b082      	sub	sp, #8
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7ff ffa2 	bl	8002c10 <SysTick_Config>
 8002ccc:	4603      	mov	r3, r0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3708      	adds	r7, #8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
	...

08002cd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b08b      	sub	sp, #44	; 0x2c
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cea:	e169      	b.n	8002fc0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002cec:	2201      	movs	r2, #1
 8002cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	69fa      	ldr	r2, [r7, #28]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	f040 8158 	bne.w	8002fba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	4a9a      	ldr	r2, [pc, #616]	; (8002f78 <HAL_GPIO_Init+0x2a0>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d05e      	beq.n	8002dd2 <HAL_GPIO_Init+0xfa>
 8002d14:	4a98      	ldr	r2, [pc, #608]	; (8002f78 <HAL_GPIO_Init+0x2a0>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d875      	bhi.n	8002e06 <HAL_GPIO_Init+0x12e>
 8002d1a:	4a98      	ldr	r2, [pc, #608]	; (8002f7c <HAL_GPIO_Init+0x2a4>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d058      	beq.n	8002dd2 <HAL_GPIO_Init+0xfa>
 8002d20:	4a96      	ldr	r2, [pc, #600]	; (8002f7c <HAL_GPIO_Init+0x2a4>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d86f      	bhi.n	8002e06 <HAL_GPIO_Init+0x12e>
 8002d26:	4a96      	ldr	r2, [pc, #600]	; (8002f80 <HAL_GPIO_Init+0x2a8>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d052      	beq.n	8002dd2 <HAL_GPIO_Init+0xfa>
 8002d2c:	4a94      	ldr	r2, [pc, #592]	; (8002f80 <HAL_GPIO_Init+0x2a8>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d869      	bhi.n	8002e06 <HAL_GPIO_Init+0x12e>
 8002d32:	4a94      	ldr	r2, [pc, #592]	; (8002f84 <HAL_GPIO_Init+0x2ac>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d04c      	beq.n	8002dd2 <HAL_GPIO_Init+0xfa>
 8002d38:	4a92      	ldr	r2, [pc, #584]	; (8002f84 <HAL_GPIO_Init+0x2ac>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d863      	bhi.n	8002e06 <HAL_GPIO_Init+0x12e>
 8002d3e:	4a92      	ldr	r2, [pc, #584]	; (8002f88 <HAL_GPIO_Init+0x2b0>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d046      	beq.n	8002dd2 <HAL_GPIO_Init+0xfa>
 8002d44:	4a90      	ldr	r2, [pc, #576]	; (8002f88 <HAL_GPIO_Init+0x2b0>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d85d      	bhi.n	8002e06 <HAL_GPIO_Init+0x12e>
 8002d4a:	2b12      	cmp	r3, #18
 8002d4c:	d82a      	bhi.n	8002da4 <HAL_GPIO_Init+0xcc>
 8002d4e:	2b12      	cmp	r3, #18
 8002d50:	d859      	bhi.n	8002e06 <HAL_GPIO_Init+0x12e>
 8002d52:	a201      	add	r2, pc, #4	; (adr r2, 8002d58 <HAL_GPIO_Init+0x80>)
 8002d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d58:	08002dd3 	.word	0x08002dd3
 8002d5c:	08002dad 	.word	0x08002dad
 8002d60:	08002dbf 	.word	0x08002dbf
 8002d64:	08002e01 	.word	0x08002e01
 8002d68:	08002e07 	.word	0x08002e07
 8002d6c:	08002e07 	.word	0x08002e07
 8002d70:	08002e07 	.word	0x08002e07
 8002d74:	08002e07 	.word	0x08002e07
 8002d78:	08002e07 	.word	0x08002e07
 8002d7c:	08002e07 	.word	0x08002e07
 8002d80:	08002e07 	.word	0x08002e07
 8002d84:	08002e07 	.word	0x08002e07
 8002d88:	08002e07 	.word	0x08002e07
 8002d8c:	08002e07 	.word	0x08002e07
 8002d90:	08002e07 	.word	0x08002e07
 8002d94:	08002e07 	.word	0x08002e07
 8002d98:	08002e07 	.word	0x08002e07
 8002d9c:	08002db5 	.word	0x08002db5
 8002da0:	08002dc9 	.word	0x08002dc9
 8002da4:	4a79      	ldr	r2, [pc, #484]	; (8002f8c <HAL_GPIO_Init+0x2b4>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d013      	beq.n	8002dd2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002daa:	e02c      	b.n	8002e06 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	623b      	str	r3, [r7, #32]
          break;
 8002db2:	e029      	b.n	8002e08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	3304      	adds	r3, #4
 8002dba:	623b      	str	r3, [r7, #32]
          break;
 8002dbc:	e024      	b.n	8002e08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	3308      	adds	r3, #8
 8002dc4:	623b      	str	r3, [r7, #32]
          break;
 8002dc6:	e01f      	b.n	8002e08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	330c      	adds	r3, #12
 8002dce:	623b      	str	r3, [r7, #32]
          break;
 8002dd0:	e01a      	b.n	8002e08 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d102      	bne.n	8002de0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002dda:	2304      	movs	r3, #4
 8002ddc:	623b      	str	r3, [r7, #32]
          break;
 8002dde:	e013      	b.n	8002e08 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d105      	bne.n	8002df4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002de8:	2308      	movs	r3, #8
 8002dea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	69fa      	ldr	r2, [r7, #28]
 8002df0:	611a      	str	r2, [r3, #16]
          break;
 8002df2:	e009      	b.n	8002e08 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002df4:	2308      	movs	r3, #8
 8002df6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	69fa      	ldr	r2, [r7, #28]
 8002dfc:	615a      	str	r2, [r3, #20]
          break;
 8002dfe:	e003      	b.n	8002e08 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002e00:	2300      	movs	r3, #0
 8002e02:	623b      	str	r3, [r7, #32]
          break;
 8002e04:	e000      	b.n	8002e08 <HAL_GPIO_Init+0x130>
          break;
 8002e06:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	2bff      	cmp	r3, #255	; 0xff
 8002e0c:	d801      	bhi.n	8002e12 <HAL_GPIO_Init+0x13a>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	e001      	b.n	8002e16 <HAL_GPIO_Init+0x13e>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	3304      	adds	r3, #4
 8002e16:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	2bff      	cmp	r3, #255	; 0xff
 8002e1c:	d802      	bhi.n	8002e24 <HAL_GPIO_Init+0x14c>
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	e002      	b.n	8002e2a <HAL_GPIO_Init+0x152>
 8002e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e26:	3b08      	subs	r3, #8
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	210f      	movs	r1, #15
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	fa01 f303 	lsl.w	r3, r1, r3
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	401a      	ands	r2, r3
 8002e3c:	6a39      	ldr	r1, [r7, #32]
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	fa01 f303 	lsl.w	r3, r1, r3
 8002e44:	431a      	orrs	r2, r3
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f000 80b1 	beq.w	8002fba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e58:	4b4d      	ldr	r3, [pc, #308]	; (8002f90 <HAL_GPIO_Init+0x2b8>)
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	4a4c      	ldr	r2, [pc, #304]	; (8002f90 <HAL_GPIO_Init+0x2b8>)
 8002e5e:	f043 0301 	orr.w	r3, r3, #1
 8002e62:	6193      	str	r3, [r2, #24]
 8002e64:	4b4a      	ldr	r3, [pc, #296]	; (8002f90 <HAL_GPIO_Init+0x2b8>)
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	f003 0301 	and.w	r3, r3, #1
 8002e6c:	60bb      	str	r3, [r7, #8]
 8002e6e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e70:	4a48      	ldr	r2, [pc, #288]	; (8002f94 <HAL_GPIO_Init+0x2bc>)
 8002e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e74:	089b      	lsrs	r3, r3, #2
 8002e76:	3302      	adds	r3, #2
 8002e78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e7c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e80:	f003 0303 	and.w	r3, r3, #3
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	220f      	movs	r2, #15
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	4013      	ands	r3, r2
 8002e92:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4a40      	ldr	r2, [pc, #256]	; (8002f98 <HAL_GPIO_Init+0x2c0>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d013      	beq.n	8002ec4 <HAL_GPIO_Init+0x1ec>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a3f      	ldr	r2, [pc, #252]	; (8002f9c <HAL_GPIO_Init+0x2c4>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d00d      	beq.n	8002ec0 <HAL_GPIO_Init+0x1e8>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a3e      	ldr	r2, [pc, #248]	; (8002fa0 <HAL_GPIO_Init+0x2c8>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d007      	beq.n	8002ebc <HAL_GPIO_Init+0x1e4>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a3d      	ldr	r2, [pc, #244]	; (8002fa4 <HAL_GPIO_Init+0x2cc>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d101      	bne.n	8002eb8 <HAL_GPIO_Init+0x1e0>
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e006      	b.n	8002ec6 <HAL_GPIO_Init+0x1ee>
 8002eb8:	2304      	movs	r3, #4
 8002eba:	e004      	b.n	8002ec6 <HAL_GPIO_Init+0x1ee>
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	e002      	b.n	8002ec6 <HAL_GPIO_Init+0x1ee>
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e000      	b.n	8002ec6 <HAL_GPIO_Init+0x1ee>
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ec8:	f002 0203 	and.w	r2, r2, #3
 8002ecc:	0092      	lsls	r2, r2, #2
 8002ece:	4093      	lsls	r3, r2
 8002ed0:	68fa      	ldr	r2, [r7, #12]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002ed6:	492f      	ldr	r1, [pc, #188]	; (8002f94 <HAL_GPIO_Init+0x2bc>)
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eda:	089b      	lsrs	r3, r3, #2
 8002edc:	3302      	adds	r3, #2
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d006      	beq.n	8002efe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ef0:	4b2d      	ldr	r3, [pc, #180]	; (8002fa8 <HAL_GPIO_Init+0x2d0>)
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	492c      	ldr	r1, [pc, #176]	; (8002fa8 <HAL_GPIO_Init+0x2d0>)
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	600b      	str	r3, [r1, #0]
 8002efc:	e006      	b.n	8002f0c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002efe:	4b2a      	ldr	r3, [pc, #168]	; (8002fa8 <HAL_GPIO_Init+0x2d0>)
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	43db      	mvns	r3, r3
 8002f06:	4928      	ldr	r1, [pc, #160]	; (8002fa8 <HAL_GPIO_Init+0x2d0>)
 8002f08:	4013      	ands	r3, r2
 8002f0a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d006      	beq.n	8002f26 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002f18:	4b23      	ldr	r3, [pc, #140]	; (8002fa8 <HAL_GPIO_Init+0x2d0>)
 8002f1a:	685a      	ldr	r2, [r3, #4]
 8002f1c:	4922      	ldr	r1, [pc, #136]	; (8002fa8 <HAL_GPIO_Init+0x2d0>)
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	604b      	str	r3, [r1, #4]
 8002f24:	e006      	b.n	8002f34 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002f26:	4b20      	ldr	r3, [pc, #128]	; (8002fa8 <HAL_GPIO_Init+0x2d0>)
 8002f28:	685a      	ldr	r2, [r3, #4]
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	43db      	mvns	r3, r3
 8002f2e:	491e      	ldr	r1, [pc, #120]	; (8002fa8 <HAL_GPIO_Init+0x2d0>)
 8002f30:	4013      	ands	r3, r2
 8002f32:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d006      	beq.n	8002f4e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f40:	4b19      	ldr	r3, [pc, #100]	; (8002fa8 <HAL_GPIO_Init+0x2d0>)
 8002f42:	689a      	ldr	r2, [r3, #8]
 8002f44:	4918      	ldr	r1, [pc, #96]	; (8002fa8 <HAL_GPIO_Init+0x2d0>)
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	608b      	str	r3, [r1, #8]
 8002f4c:	e006      	b.n	8002f5c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f4e:	4b16      	ldr	r3, [pc, #88]	; (8002fa8 <HAL_GPIO_Init+0x2d0>)
 8002f50:	689a      	ldr	r2, [r3, #8]
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	43db      	mvns	r3, r3
 8002f56:	4914      	ldr	r1, [pc, #80]	; (8002fa8 <HAL_GPIO_Init+0x2d0>)
 8002f58:	4013      	ands	r3, r2
 8002f5a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d021      	beq.n	8002fac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f68:	4b0f      	ldr	r3, [pc, #60]	; (8002fa8 <HAL_GPIO_Init+0x2d0>)
 8002f6a:	68da      	ldr	r2, [r3, #12]
 8002f6c:	490e      	ldr	r1, [pc, #56]	; (8002fa8 <HAL_GPIO_Init+0x2d0>)
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	60cb      	str	r3, [r1, #12]
 8002f74:	e021      	b.n	8002fba <HAL_GPIO_Init+0x2e2>
 8002f76:	bf00      	nop
 8002f78:	10320000 	.word	0x10320000
 8002f7c:	10310000 	.word	0x10310000
 8002f80:	10220000 	.word	0x10220000
 8002f84:	10210000 	.word	0x10210000
 8002f88:	10120000 	.word	0x10120000
 8002f8c:	10110000 	.word	0x10110000
 8002f90:	40021000 	.word	0x40021000
 8002f94:	40010000 	.word	0x40010000
 8002f98:	40010800 	.word	0x40010800
 8002f9c:	40010c00 	.word	0x40010c00
 8002fa0:	40011000 	.word	0x40011000
 8002fa4:	40011400 	.word	0x40011400
 8002fa8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002fac:	4b0b      	ldr	r3, [pc, #44]	; (8002fdc <HAL_GPIO_Init+0x304>)
 8002fae:	68da      	ldr	r2, [r3, #12]
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	43db      	mvns	r3, r3
 8002fb4:	4909      	ldr	r1, [pc, #36]	; (8002fdc <HAL_GPIO_Init+0x304>)
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f47f ae8e 	bne.w	8002cec <HAL_GPIO_Init+0x14>
  }
}
 8002fd0:	bf00      	nop
 8002fd2:	bf00      	nop
 8002fd4:	372c      	adds	r7, #44	; 0x2c
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bc80      	pop	{r7}
 8002fda:	4770      	bx	lr
 8002fdc:	40010400 	.word	0x40010400

08002fe0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	460b      	mov	r3, r1
 8002fea:	807b      	strh	r3, [r7, #2]
 8002fec:	4613      	mov	r3, r2
 8002fee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ff0:	787b      	ldrb	r3, [r7, #1]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d003      	beq.n	8002ffe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ff6:	887a      	ldrh	r2, [r7, #2]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ffc:	e003      	b.n	8003006 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ffe:	887b      	ldrh	r3, [r7, #2]
 8003000:	041a      	lsls	r2, r3, #16
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	611a      	str	r2, [r3, #16]
}
 8003006:	bf00      	nop
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	bc80      	pop	{r7}
 800300e:	4770      	bx	lr

08003010 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	460b      	mov	r3, r1
 800301a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003022:	887a      	ldrh	r2, [r7, #2]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	4013      	ands	r3, r2
 8003028:	041a      	lsls	r2, r3, #16
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	43d9      	mvns	r1, r3
 800302e:	887b      	ldrh	r3, [r7, #2]
 8003030:	400b      	ands	r3, r1
 8003032:	431a      	orrs	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	611a      	str	r2, [r3, #16]
}
 8003038:	bf00      	nop
 800303a:	3714      	adds	r7, #20
 800303c:	46bd      	mov	sp, r7
 800303e:	bc80      	pop	{r7}
 8003040:	4770      	bx	lr
	...

08003044 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e12b      	b.n	80032ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d106      	bne.n	8003070 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f7ff fa92 	bl	8002594 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2224      	movs	r2, #36	; 0x24
 8003074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f022 0201 	bic.w	r2, r2, #1
 8003086:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003096:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030a8:	f001 fba0 	bl	80047ec <HAL_RCC_GetPCLK1Freq>
 80030ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	4a81      	ldr	r2, [pc, #516]	; (80032b8 <HAL_I2C_Init+0x274>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d807      	bhi.n	80030c8 <HAL_I2C_Init+0x84>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	4a80      	ldr	r2, [pc, #512]	; (80032bc <HAL_I2C_Init+0x278>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	bf94      	ite	ls
 80030c0:	2301      	movls	r3, #1
 80030c2:	2300      	movhi	r3, #0
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	e006      	b.n	80030d6 <HAL_I2C_Init+0x92>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	4a7d      	ldr	r2, [pc, #500]	; (80032c0 <HAL_I2C_Init+0x27c>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	bf94      	ite	ls
 80030d0:	2301      	movls	r3, #1
 80030d2:	2300      	movhi	r3, #0
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e0e7      	b.n	80032ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	4a78      	ldr	r2, [pc, #480]	; (80032c4 <HAL_I2C_Init+0x280>)
 80030e2:	fba2 2303 	umull	r2, r3, r2, r3
 80030e6:	0c9b      	lsrs	r3, r3, #18
 80030e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	430a      	orrs	r2, r1
 80030fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	6a1b      	ldr	r3, [r3, #32]
 8003104:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	4a6a      	ldr	r2, [pc, #424]	; (80032b8 <HAL_I2C_Init+0x274>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d802      	bhi.n	8003118 <HAL_I2C_Init+0xd4>
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	3301      	adds	r3, #1
 8003116:	e009      	b.n	800312c <HAL_I2C_Init+0xe8>
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800311e:	fb02 f303 	mul.w	r3, r2, r3
 8003122:	4a69      	ldr	r2, [pc, #420]	; (80032c8 <HAL_I2C_Init+0x284>)
 8003124:	fba2 2303 	umull	r2, r3, r2, r3
 8003128:	099b      	lsrs	r3, r3, #6
 800312a:	3301      	adds	r3, #1
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	6812      	ldr	r2, [r2, #0]
 8003130:	430b      	orrs	r3, r1
 8003132:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	69db      	ldr	r3, [r3, #28]
 800313a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800313e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	495c      	ldr	r1, [pc, #368]	; (80032b8 <HAL_I2C_Init+0x274>)
 8003148:	428b      	cmp	r3, r1
 800314a:	d819      	bhi.n	8003180 <HAL_I2C_Init+0x13c>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	1e59      	subs	r1, r3, #1
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	fbb1 f3f3 	udiv	r3, r1, r3
 800315a:	1c59      	adds	r1, r3, #1
 800315c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003160:	400b      	ands	r3, r1
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00a      	beq.n	800317c <HAL_I2C_Init+0x138>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	1e59      	subs	r1, r3, #1
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	fbb1 f3f3 	udiv	r3, r1, r3
 8003174:	3301      	adds	r3, #1
 8003176:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800317a:	e051      	b.n	8003220 <HAL_I2C_Init+0x1dc>
 800317c:	2304      	movs	r3, #4
 800317e:	e04f      	b.n	8003220 <HAL_I2C_Init+0x1dc>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d111      	bne.n	80031ac <HAL_I2C_Init+0x168>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	1e58      	subs	r0, r3, #1
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6859      	ldr	r1, [r3, #4]
 8003190:	460b      	mov	r3, r1
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	440b      	add	r3, r1
 8003196:	fbb0 f3f3 	udiv	r3, r0, r3
 800319a:	3301      	adds	r3, #1
 800319c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	bf0c      	ite	eq
 80031a4:	2301      	moveq	r3, #1
 80031a6:	2300      	movne	r3, #0
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	e012      	b.n	80031d2 <HAL_I2C_Init+0x18e>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	1e58      	subs	r0, r3, #1
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6859      	ldr	r1, [r3, #4]
 80031b4:	460b      	mov	r3, r1
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	440b      	add	r3, r1
 80031ba:	0099      	lsls	r1, r3, #2
 80031bc:	440b      	add	r3, r1
 80031be:	fbb0 f3f3 	udiv	r3, r0, r3
 80031c2:	3301      	adds	r3, #1
 80031c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	bf0c      	ite	eq
 80031cc:	2301      	moveq	r3, #1
 80031ce:	2300      	movne	r3, #0
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <HAL_I2C_Init+0x196>
 80031d6:	2301      	movs	r3, #1
 80031d8:	e022      	b.n	8003220 <HAL_I2C_Init+0x1dc>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10e      	bne.n	8003200 <HAL_I2C_Init+0x1bc>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	1e58      	subs	r0, r3, #1
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6859      	ldr	r1, [r3, #4]
 80031ea:	460b      	mov	r3, r1
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	440b      	add	r3, r1
 80031f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80031f4:	3301      	adds	r3, #1
 80031f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031fe:	e00f      	b.n	8003220 <HAL_I2C_Init+0x1dc>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	1e58      	subs	r0, r3, #1
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6859      	ldr	r1, [r3, #4]
 8003208:	460b      	mov	r3, r1
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	440b      	add	r3, r1
 800320e:	0099      	lsls	r1, r3, #2
 8003210:	440b      	add	r3, r1
 8003212:	fbb0 f3f3 	udiv	r3, r0, r3
 8003216:	3301      	adds	r3, #1
 8003218:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800321c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003220:	6879      	ldr	r1, [r7, #4]
 8003222:	6809      	ldr	r1, [r1, #0]
 8003224:	4313      	orrs	r3, r2
 8003226:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	69da      	ldr	r2, [r3, #28]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	431a      	orrs	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	430a      	orrs	r2, r1
 8003242:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800324e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	6911      	ldr	r1, [r2, #16]
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	68d2      	ldr	r2, [r2, #12]
 800325a:	4311      	orrs	r1, r2
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	6812      	ldr	r2, [r2, #0]
 8003260:	430b      	orrs	r3, r1
 8003262:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	695a      	ldr	r2, [r3, #20]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	431a      	orrs	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	430a      	orrs	r2, r1
 800327e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f042 0201 	orr.w	r2, r2, #1
 800328e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2220      	movs	r2, #32
 800329a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	000186a0 	.word	0x000186a0
 80032bc:	001e847f 	.word	0x001e847f
 80032c0:	003d08ff 	.word	0x003d08ff
 80032c4:	431bde83 	.word	0x431bde83
 80032c8:	10624dd3 	.word	0x10624dd3

080032cc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b088      	sub	sp, #32
 80032d0:	af02      	add	r7, sp, #8
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	4608      	mov	r0, r1
 80032d6:	4611      	mov	r1, r2
 80032d8:	461a      	mov	r2, r3
 80032da:	4603      	mov	r3, r0
 80032dc:	817b      	strh	r3, [r7, #10]
 80032de:	460b      	mov	r3, r1
 80032e0:	813b      	strh	r3, [r7, #8]
 80032e2:	4613      	mov	r3, r2
 80032e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032e6:	f7ff fbbb 	bl	8002a60 <HAL_GetTick>
 80032ea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	2b20      	cmp	r3, #32
 80032f6:	f040 80d9 	bne.w	80034ac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	9300      	str	r3, [sp, #0]
 80032fe:	2319      	movs	r3, #25
 8003300:	2201      	movs	r2, #1
 8003302:	496d      	ldr	r1, [pc, #436]	; (80034b8 <HAL_I2C_Mem_Write+0x1ec>)
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f000 fcc1 	bl	8003c8c <I2C_WaitOnFlagUntilTimeout>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d001      	beq.n	8003314 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003310:	2302      	movs	r3, #2
 8003312:	e0cc      	b.n	80034ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800331a:	2b01      	cmp	r3, #1
 800331c:	d101      	bne.n	8003322 <HAL_I2C_Mem_Write+0x56>
 800331e:	2302      	movs	r3, #2
 8003320:	e0c5      	b.n	80034ae <HAL_I2C_Mem_Write+0x1e2>
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2201      	movs	r2, #1
 8003326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0301 	and.w	r3, r3, #1
 8003334:	2b01      	cmp	r3, #1
 8003336:	d007      	beq.n	8003348 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f042 0201 	orr.w	r2, r2, #1
 8003346:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003356:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2221      	movs	r2, #33	; 0x21
 800335c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2240      	movs	r2, #64	; 0x40
 8003364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6a3a      	ldr	r2, [r7, #32]
 8003372:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003378:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800337e:	b29a      	uxth	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	4a4d      	ldr	r2, [pc, #308]	; (80034bc <HAL_I2C_Mem_Write+0x1f0>)
 8003388:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800338a:	88f8      	ldrh	r0, [r7, #6]
 800338c:	893a      	ldrh	r2, [r7, #8]
 800338e:	8979      	ldrh	r1, [r7, #10]
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	9301      	str	r3, [sp, #4]
 8003394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003396:	9300      	str	r3, [sp, #0]
 8003398:	4603      	mov	r3, r0
 800339a:	68f8      	ldr	r0, [r7, #12]
 800339c:	f000 faf8 	bl	8003990 <I2C_RequestMemoryWrite>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d052      	beq.n	800344c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e081      	b.n	80034ae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f000 fd42 	bl	8003e38 <I2C_WaitOnTXEFlagUntilTimeout>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00d      	beq.n	80033d6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033be:	2b04      	cmp	r3, #4
 80033c0:	d107      	bne.n	80033d2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e06b      	b.n	80034ae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033da:	781a      	ldrb	r2, [r3, #0]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e6:	1c5a      	adds	r2, r3, #1
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033f0:	3b01      	subs	r3, #1
 80033f2:	b29a      	uxth	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	3b01      	subs	r3, #1
 8003400:	b29a      	uxth	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	695b      	ldr	r3, [r3, #20]
 800340c:	f003 0304 	and.w	r3, r3, #4
 8003410:	2b04      	cmp	r3, #4
 8003412:	d11b      	bne.n	800344c <HAL_I2C_Mem_Write+0x180>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003418:	2b00      	cmp	r3, #0
 800341a:	d017      	beq.n	800344c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003420:	781a      	ldrb	r2, [r3, #0]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342c:	1c5a      	adds	r2, r3, #1
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003436:	3b01      	subs	r3, #1
 8003438:	b29a      	uxth	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003442:	b29b      	uxth	r3, r3
 8003444:	3b01      	subs	r3, #1
 8003446:	b29a      	uxth	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1aa      	bne.n	80033aa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003458:	68f8      	ldr	r0, [r7, #12]
 800345a:	f000 fd2e 	bl	8003eba <I2C_WaitOnBTFFlagUntilTimeout>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00d      	beq.n	8003480 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003468:	2b04      	cmp	r3, #4
 800346a:	d107      	bne.n	800347c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800347a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e016      	b.n	80034ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800348e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2220      	movs	r2, #32
 8003494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80034a8:	2300      	movs	r3, #0
 80034aa:	e000      	b.n	80034ae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80034ac:	2302      	movs	r3, #2
  }
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3718      	adds	r7, #24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	00100002 	.word	0x00100002
 80034bc:	ffff0000 	.word	0xffff0000

080034c0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b08c      	sub	sp, #48	; 0x30
 80034c4:	af02      	add	r7, sp, #8
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	4608      	mov	r0, r1
 80034ca:	4611      	mov	r1, r2
 80034cc:	461a      	mov	r2, r3
 80034ce:	4603      	mov	r3, r0
 80034d0:	817b      	strh	r3, [r7, #10]
 80034d2:	460b      	mov	r3, r1
 80034d4:	813b      	strh	r3, [r7, #8]
 80034d6:	4613      	mov	r3, r2
 80034d8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80034da:	2300      	movs	r3, #0
 80034dc:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034de:	f7ff fabf 	bl	8002a60 <HAL_GetTick>
 80034e2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	2b20      	cmp	r3, #32
 80034ee:	f040 8244 	bne.w	800397a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f4:	9300      	str	r3, [sp, #0]
 80034f6:	2319      	movs	r3, #25
 80034f8:	2201      	movs	r2, #1
 80034fa:	4982      	ldr	r1, [pc, #520]	; (8003704 <HAL_I2C_Mem_Read+0x244>)
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f000 fbc5 	bl	8003c8c <I2C_WaitOnFlagUntilTimeout>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d001      	beq.n	800350c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003508:	2302      	movs	r3, #2
 800350a:	e237      	b.n	800397c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003512:	2b01      	cmp	r3, #1
 8003514:	d101      	bne.n	800351a <HAL_I2C_Mem_Read+0x5a>
 8003516:	2302      	movs	r3, #2
 8003518:	e230      	b.n	800397c <HAL_I2C_Mem_Read+0x4bc>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2201      	movs	r2, #1
 800351e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	2b01      	cmp	r3, #1
 800352e:	d007      	beq.n	8003540 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f042 0201 	orr.w	r2, r2, #1
 800353e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800354e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2222      	movs	r2, #34	; 0x22
 8003554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2240      	movs	r2, #64	; 0x40
 800355c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800356a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003570:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003576:	b29a      	uxth	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	4a62      	ldr	r2, [pc, #392]	; (8003708 <HAL_I2C_Mem_Read+0x248>)
 8003580:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003582:	88f8      	ldrh	r0, [r7, #6]
 8003584:	893a      	ldrh	r2, [r7, #8]
 8003586:	8979      	ldrh	r1, [r7, #10]
 8003588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358a:	9301      	str	r3, [sp, #4]
 800358c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800358e:	9300      	str	r3, [sp, #0]
 8003590:	4603      	mov	r3, r0
 8003592:	68f8      	ldr	r0, [r7, #12]
 8003594:	f000 fa92 	bl	8003abc <I2C_RequestMemoryRead>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e1ec      	b.n	800397c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d113      	bne.n	80035d2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035aa:	2300      	movs	r3, #0
 80035ac:	61fb      	str	r3, [r7, #28]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	695b      	ldr	r3, [r3, #20]
 80035b4:	61fb      	str	r3, [r7, #28]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	61fb      	str	r3, [r7, #28]
 80035be:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035ce:	601a      	str	r2, [r3, #0]
 80035d0:	e1c0      	b.n	8003954 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d11e      	bne.n	8003618 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035e8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80035ea:	b672      	cpsid	i
}
 80035ec:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ee:	2300      	movs	r3, #0
 80035f0:	61bb      	str	r3, [r7, #24]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	61bb      	str	r3, [r7, #24]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	61bb      	str	r3, [r7, #24]
 8003602:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003612:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003614:	b662      	cpsie	i
}
 8003616:	e035      	b.n	8003684 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800361c:	2b02      	cmp	r3, #2
 800361e:	d11e      	bne.n	800365e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800362e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003630:	b672      	cpsid	i
}
 8003632:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003634:	2300      	movs	r3, #0
 8003636:	617b      	str	r3, [r7, #20]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	617b      	str	r3, [r7, #20]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	699b      	ldr	r3, [r3, #24]
 8003646:	617b      	str	r3, [r7, #20]
 8003648:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003658:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800365a:	b662      	cpsie	i
}
 800365c:	e012      	b.n	8003684 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800366c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800366e:	2300      	movs	r3, #0
 8003670:	613b      	str	r3, [r7, #16]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	613b      	str	r3, [r7, #16]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	613b      	str	r3, [r7, #16]
 8003682:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003684:	e166      	b.n	8003954 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800368a:	2b03      	cmp	r3, #3
 800368c:	f200 811f 	bhi.w	80038ce <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003694:	2b01      	cmp	r3, #1
 8003696:	d123      	bne.n	80036e0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800369a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f000 fc4d 	bl	8003f3c <I2C_WaitOnRXNEFlagUntilTimeout>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d001      	beq.n	80036ac <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e167      	b.n	800397c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	691a      	ldr	r2, [r3, #16]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b6:	b2d2      	uxtb	r2, r2
 80036b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036be:	1c5a      	adds	r2, r3, #1
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c8:	3b01      	subs	r3, #1
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	3b01      	subs	r3, #1
 80036d8:	b29a      	uxth	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80036de:	e139      	b.n	8003954 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d152      	bne.n	800378e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ea:	9300      	str	r3, [sp, #0]
 80036ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ee:	2200      	movs	r2, #0
 80036f0:	4906      	ldr	r1, [pc, #24]	; (800370c <HAL_I2C_Mem_Read+0x24c>)
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	f000 faca 	bl	8003c8c <I2C_WaitOnFlagUntilTimeout>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d008      	beq.n	8003710 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e13c      	b.n	800397c <HAL_I2C_Mem_Read+0x4bc>
 8003702:	bf00      	nop
 8003704:	00100002 	.word	0x00100002
 8003708:	ffff0000 	.word	0xffff0000
 800370c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003710:	b672      	cpsid	i
}
 8003712:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003722:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	691a      	ldr	r2, [r3, #16]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372e:	b2d2      	uxtb	r2, r2
 8003730:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003736:	1c5a      	adds	r2, r3, #1
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003740:	3b01      	subs	r3, #1
 8003742:	b29a      	uxth	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800374c:	b29b      	uxth	r3, r3
 800374e:	3b01      	subs	r3, #1
 8003750:	b29a      	uxth	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003756:	b662      	cpsie	i
}
 8003758:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	691a      	ldr	r2, [r3, #16]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003764:	b2d2      	uxtb	r2, r2
 8003766:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376c:	1c5a      	adds	r2, r3, #1
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003776:	3b01      	subs	r3, #1
 8003778:	b29a      	uxth	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003782:	b29b      	uxth	r3, r3
 8003784:	3b01      	subs	r3, #1
 8003786:	b29a      	uxth	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800378c:	e0e2      	b.n	8003954 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800378e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003790:	9300      	str	r3, [sp, #0]
 8003792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003794:	2200      	movs	r2, #0
 8003796:	497b      	ldr	r1, [pc, #492]	; (8003984 <HAL_I2C_Mem_Read+0x4c4>)
 8003798:	68f8      	ldr	r0, [r7, #12]
 800379a:	f000 fa77 	bl	8003c8c <I2C_WaitOnFlagUntilTimeout>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d001      	beq.n	80037a8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e0e9      	b.n	800397c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037b6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80037b8:	b672      	cpsid	i
}
 80037ba:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	691a      	ldr	r2, [r3, #16]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c6:	b2d2      	uxtb	r2, r2
 80037c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ce:	1c5a      	adds	r2, r3, #1
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d8:	3b01      	subs	r3, #1
 80037da:	b29a      	uxth	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	3b01      	subs	r3, #1
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80037ee:	4b66      	ldr	r3, [pc, #408]	; (8003988 <HAL_I2C_Mem_Read+0x4c8>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	08db      	lsrs	r3, r3, #3
 80037f4:	4a65      	ldr	r2, [pc, #404]	; (800398c <HAL_I2C_Mem_Read+0x4cc>)
 80037f6:	fba2 2303 	umull	r2, r3, r2, r3
 80037fa:	0a1a      	lsrs	r2, r3, #8
 80037fc:	4613      	mov	r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	4413      	add	r3, r2
 8003802:	00da      	lsls	r2, r3, #3
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003808:	6a3b      	ldr	r3, [r7, #32]
 800380a:	3b01      	subs	r3, #1
 800380c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800380e:	6a3b      	ldr	r3, [r7, #32]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d118      	bne.n	8003846 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2220      	movs	r2, #32
 800381e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382e:	f043 0220 	orr.w	r2, r3, #32
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003836:	b662      	cpsie	i
}
 8003838:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e09a      	b.n	800397c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	695b      	ldr	r3, [r3, #20]
 800384c:	f003 0304 	and.w	r3, r3, #4
 8003850:	2b04      	cmp	r3, #4
 8003852:	d1d9      	bne.n	8003808 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003862:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	691a      	ldr	r2, [r3, #16]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386e:	b2d2      	uxtb	r2, r2
 8003870:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003876:	1c5a      	adds	r2, r3, #1
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003880:	3b01      	subs	r3, #1
 8003882:	b29a      	uxth	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800388c:	b29b      	uxth	r3, r3
 800388e:	3b01      	subs	r3, #1
 8003890:	b29a      	uxth	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003896:	b662      	cpsie	i
}
 8003898:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	691a      	ldr	r2, [r3, #16]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a4:	b2d2      	uxtb	r2, r2
 80038a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ac:	1c5a      	adds	r2, r3, #1
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b6:	3b01      	subs	r3, #1
 80038b8:	b29a      	uxth	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	3b01      	subs	r3, #1
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038cc:	e042      	b.n	8003954 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80038d2:	68f8      	ldr	r0, [r7, #12]
 80038d4:	f000 fb32 	bl	8003f3c <I2C_WaitOnRXNEFlagUntilTimeout>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e04c      	b.n	800397c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	691a      	ldr	r2, [r3, #16]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ec:	b2d2      	uxtb	r2, r2
 80038ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f4:	1c5a      	adds	r2, r3, #1
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038fe:	3b01      	subs	r3, #1
 8003900:	b29a      	uxth	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800390a:	b29b      	uxth	r3, r3
 800390c:	3b01      	subs	r3, #1
 800390e:	b29a      	uxth	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	f003 0304 	and.w	r3, r3, #4
 800391e:	2b04      	cmp	r3, #4
 8003920:	d118      	bne.n	8003954 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	691a      	ldr	r2, [r3, #16]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392c:	b2d2      	uxtb	r2, r2
 800392e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003934:	1c5a      	adds	r2, r3, #1
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800393e:	3b01      	subs	r3, #1
 8003940:	b29a      	uxth	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800394a:	b29b      	uxth	r3, r3
 800394c:	3b01      	subs	r3, #1
 800394e:	b29a      	uxth	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003958:	2b00      	cmp	r3, #0
 800395a:	f47f ae94 	bne.w	8003686 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2220      	movs	r2, #32
 8003962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003976:	2300      	movs	r3, #0
 8003978:	e000      	b.n	800397c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800397a:	2302      	movs	r3, #2
  }
}
 800397c:	4618      	mov	r0, r3
 800397e:	3728      	adds	r7, #40	; 0x28
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	00010004 	.word	0x00010004
 8003988:	20000000 	.word	0x20000000
 800398c:	14f8b589 	.word	0x14f8b589

08003990 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b088      	sub	sp, #32
 8003994:	af02      	add	r7, sp, #8
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	4608      	mov	r0, r1
 800399a:	4611      	mov	r1, r2
 800399c:	461a      	mov	r2, r3
 800399e:	4603      	mov	r3, r0
 80039a0:	817b      	strh	r3, [r7, #10]
 80039a2:	460b      	mov	r3, r1
 80039a4:	813b      	strh	r3, [r7, #8]
 80039a6:	4613      	mov	r3, r2
 80039a8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039bc:	9300      	str	r3, [sp, #0]
 80039be:	6a3b      	ldr	r3, [r7, #32]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f000 f960 	bl	8003c8c <I2C_WaitOnFlagUntilTimeout>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00d      	beq.n	80039ee <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039e0:	d103      	bne.n	80039ea <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039e8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e05f      	b.n	8003aae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039ee:	897b      	ldrh	r3, [r7, #10]
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	461a      	mov	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a00:	6a3a      	ldr	r2, [r7, #32]
 8003a02:	492d      	ldr	r1, [pc, #180]	; (8003ab8 <I2C_RequestMemoryWrite+0x128>)
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f000 f998 	bl	8003d3a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d001      	beq.n	8003a14 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e04c      	b.n	8003aae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a14:	2300      	movs	r3, #0
 8003a16:	617b      	str	r3, [r7, #20]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	617b      	str	r3, [r7, #20]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	617b      	str	r3, [r7, #20]
 8003a28:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a2c:	6a39      	ldr	r1, [r7, #32]
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	f000 fa02 	bl	8003e38 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00d      	beq.n	8003a56 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3e:	2b04      	cmp	r3, #4
 8003a40:	d107      	bne.n	8003a52 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a50:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e02b      	b.n	8003aae <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a56:	88fb      	ldrh	r3, [r7, #6]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d105      	bne.n	8003a68 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a5c:	893b      	ldrh	r3, [r7, #8]
 8003a5e:	b2da      	uxtb	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	611a      	str	r2, [r3, #16]
 8003a66:	e021      	b.n	8003aac <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a68:	893b      	ldrh	r3, [r7, #8]
 8003a6a:	0a1b      	lsrs	r3, r3, #8
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	b2da      	uxtb	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a78:	6a39      	ldr	r1, [r7, #32]
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f000 f9dc 	bl	8003e38 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00d      	beq.n	8003aa2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	2b04      	cmp	r3, #4
 8003a8c:	d107      	bne.n	8003a9e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a9c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e005      	b.n	8003aae <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003aa2:	893b      	ldrh	r3, [r7, #8]
 8003aa4:	b2da      	uxtb	r2, r3
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3718      	adds	r7, #24
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	00010002 	.word	0x00010002

08003abc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b088      	sub	sp, #32
 8003ac0:	af02      	add	r7, sp, #8
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	4608      	mov	r0, r1
 8003ac6:	4611      	mov	r1, r2
 8003ac8:	461a      	mov	r2, r3
 8003aca:	4603      	mov	r3, r0
 8003acc:	817b      	strh	r3, [r7, #10]
 8003ace:	460b      	mov	r3, r1
 8003ad0:	813b      	strh	r3, [r7, #8]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ae4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003af4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af8:	9300      	str	r3, [sp, #0]
 8003afa:	6a3b      	ldr	r3, [r7, #32]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f000 f8c2 	bl	8003c8c <I2C_WaitOnFlagUntilTimeout>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00d      	beq.n	8003b2a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b1c:	d103      	bne.n	8003b26 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b24:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e0aa      	b.n	8003c80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b2a:	897b      	ldrh	r3, [r7, #10]
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	461a      	mov	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b38:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3c:	6a3a      	ldr	r2, [r7, #32]
 8003b3e:	4952      	ldr	r1, [pc, #328]	; (8003c88 <I2C_RequestMemoryRead+0x1cc>)
 8003b40:	68f8      	ldr	r0, [r7, #12]
 8003b42:	f000 f8fa 	bl	8003d3a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d001      	beq.n	8003b50 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e097      	b.n	8003c80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b50:	2300      	movs	r3, #0
 8003b52:	617b      	str	r3, [r7, #20]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	617b      	str	r3, [r7, #20]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	617b      	str	r3, [r7, #20]
 8003b64:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b68:	6a39      	ldr	r1, [r7, #32]
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f000 f964 	bl	8003e38 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00d      	beq.n	8003b92 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7a:	2b04      	cmp	r3, #4
 8003b7c:	d107      	bne.n	8003b8e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b8c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e076      	b.n	8003c80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b92:	88fb      	ldrh	r3, [r7, #6]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d105      	bne.n	8003ba4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b98:	893b      	ldrh	r3, [r7, #8]
 8003b9a:	b2da      	uxtb	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	611a      	str	r2, [r3, #16]
 8003ba2:	e021      	b.n	8003be8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ba4:	893b      	ldrh	r3, [r7, #8]
 8003ba6:	0a1b      	lsrs	r3, r3, #8
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	b2da      	uxtb	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bb4:	6a39      	ldr	r1, [r7, #32]
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	f000 f93e 	bl	8003e38 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00d      	beq.n	8003bde <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc6:	2b04      	cmp	r3, #4
 8003bc8:	d107      	bne.n	8003bda <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bd8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e050      	b.n	8003c80 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bde:	893b      	ldrh	r3, [r7, #8]
 8003be0:	b2da      	uxtb	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bea:	6a39      	ldr	r1, [r7, #32]
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f000 f923 	bl	8003e38 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00d      	beq.n	8003c14 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfc:	2b04      	cmp	r3, #4
 8003bfe:	d107      	bne.n	8003c10 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c0e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e035      	b.n	8003c80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c22:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c26:	9300      	str	r3, [sp, #0]
 8003c28:	6a3b      	ldr	r3, [r7, #32]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c30:	68f8      	ldr	r0, [r7, #12]
 8003c32:	f000 f82b 	bl	8003c8c <I2C_WaitOnFlagUntilTimeout>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00d      	beq.n	8003c58 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c4a:	d103      	bne.n	8003c54 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c52:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e013      	b.n	8003c80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003c58:	897b      	ldrh	r3, [r7, #10]
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	f043 0301 	orr.w	r3, r3, #1
 8003c60:	b2da      	uxtb	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6a:	6a3a      	ldr	r2, [r7, #32]
 8003c6c:	4906      	ldr	r1, [pc, #24]	; (8003c88 <I2C_RequestMemoryRead+0x1cc>)
 8003c6e:	68f8      	ldr	r0, [r7, #12]
 8003c70:	f000 f863 	bl	8003d3a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e000      	b.n	8003c80 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3718      	adds	r7, #24
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	00010002 	.word	0x00010002

08003c8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	603b      	str	r3, [r7, #0]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c9c:	e025      	b.n	8003cea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca4:	d021      	beq.n	8003cea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ca6:	f7fe fedb 	bl	8002a60 <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	683a      	ldr	r2, [r7, #0]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d302      	bcc.n	8003cbc <I2C_WaitOnFlagUntilTimeout+0x30>
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d116      	bne.n	8003cea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2220      	movs	r2, #32
 8003cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd6:	f043 0220 	orr.w	r2, r3, #32
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e023      	b.n	8003d32 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	0c1b      	lsrs	r3, r3, #16
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d10d      	bne.n	8003d10 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	43da      	mvns	r2, r3
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	4013      	ands	r3, r2
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	bf0c      	ite	eq
 8003d06:	2301      	moveq	r3, #1
 8003d08:	2300      	movne	r3, #0
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	e00c      	b.n	8003d2a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	43da      	mvns	r2, r3
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	bf0c      	ite	eq
 8003d22:	2301      	moveq	r3, #1
 8003d24:	2300      	movne	r3, #0
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	461a      	mov	r2, r3
 8003d2a:	79fb      	ldrb	r3, [r7, #7]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d0b6      	beq.n	8003c9e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b084      	sub	sp, #16
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	60f8      	str	r0, [r7, #12]
 8003d42:	60b9      	str	r1, [r7, #8]
 8003d44:	607a      	str	r2, [r7, #4]
 8003d46:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d48:	e051      	b.n	8003dee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	695b      	ldr	r3, [r3, #20]
 8003d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d58:	d123      	bne.n	8003da2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d68:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d72:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2220      	movs	r2, #32
 8003d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8e:	f043 0204 	orr.w	r2, r3, #4
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e046      	b.n	8003e30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da8:	d021      	beq.n	8003dee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003daa:	f7fe fe59 	bl	8002a60 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d302      	bcc.n	8003dc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d116      	bne.n	8003dee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2220      	movs	r2, #32
 8003dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	f043 0220 	orr.w	r2, r3, #32
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e020      	b.n	8003e30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	0c1b      	lsrs	r3, r3, #16
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d10c      	bne.n	8003e12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	43da      	mvns	r2, r3
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	4013      	ands	r3, r2
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	bf14      	ite	ne
 8003e0a:	2301      	movne	r3, #1
 8003e0c:	2300      	moveq	r3, #0
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	e00b      	b.n	8003e2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	43da      	mvns	r2, r3
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	bf14      	ite	ne
 8003e24:	2301      	movne	r3, #1
 8003e26:	2300      	moveq	r3, #0
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d18d      	bne.n	8003d4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3710      	adds	r7, #16
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e44:	e02d      	b.n	8003ea2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f000 f8ce 	bl	8003fe8 <I2C_IsAcknowledgeFailed>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d001      	beq.n	8003e56 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e02d      	b.n	8003eb2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e5c:	d021      	beq.n	8003ea2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e5e:	f7fe fdff 	bl	8002a60 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	68ba      	ldr	r2, [r7, #8]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d302      	bcc.n	8003e74 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d116      	bne.n	8003ea2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2220      	movs	r2, #32
 8003e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8e:	f043 0220 	orr.w	r2, r3, #32
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e007      	b.n	8003eb2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	695b      	ldr	r3, [r3, #20]
 8003ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eac:	2b80      	cmp	r3, #128	; 0x80
 8003eae:	d1ca      	bne.n	8003e46 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3710      	adds	r7, #16
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003eba:	b580      	push	{r7, lr}
 8003ebc:	b084      	sub	sp, #16
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	60f8      	str	r0, [r7, #12]
 8003ec2:	60b9      	str	r1, [r7, #8]
 8003ec4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ec6:	e02d      	b.n	8003f24 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f000 f88d 	bl	8003fe8 <I2C_IsAcknowledgeFailed>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d001      	beq.n	8003ed8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e02d      	b.n	8003f34 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ede:	d021      	beq.n	8003f24 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ee0:	f7fe fdbe 	bl	8002a60 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	68ba      	ldr	r2, [r7, #8]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d302      	bcc.n	8003ef6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d116      	bne.n	8003f24 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2220      	movs	r2, #32
 8003f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f10:	f043 0220 	orr.w	r2, r3, #32
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e007      	b.n	8003f34 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	f003 0304 	and.w	r3, r3, #4
 8003f2e:	2b04      	cmp	r3, #4
 8003f30:	d1ca      	bne.n	8003ec8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3710      	adds	r7, #16
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f48:	e042      	b.n	8003fd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	695b      	ldr	r3, [r3, #20]
 8003f50:	f003 0310 	and.w	r3, r3, #16
 8003f54:	2b10      	cmp	r3, #16
 8003f56:	d119      	bne.n	8003f8c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f06f 0210 	mvn.w	r2, #16
 8003f60:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2220      	movs	r2, #32
 8003f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e029      	b.n	8003fe0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f8c:	f7fe fd68 	bl	8002a60 <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	68ba      	ldr	r2, [r7, #8]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d302      	bcc.n	8003fa2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d116      	bne.n	8003fd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2220      	movs	r2, #32
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbc:	f043 0220 	orr.w	r2, r3, #32
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e007      	b.n	8003fe0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fda:	2b40      	cmp	r3, #64	; 0x40
 8003fdc:	d1b5      	bne.n	8003f4a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ffa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ffe:	d11b      	bne.n	8004038 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004008:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2220      	movs	r2, #32
 8004014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004024:	f043 0204 	orr.w	r2, r3, #4
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e000      	b.n	800403a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	370c      	adds	r7, #12
 800403e:	46bd      	mov	sp, r7
 8004040:	bc80      	pop	{r7}
 8004042:	4770      	bx	lr

08004044 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b086      	sub	sp, #24
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d101      	bne.n	8004056 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e26c      	b.n	8004530 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	2b00      	cmp	r3, #0
 8004060:	f000 8087 	beq.w	8004172 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004064:	4b92      	ldr	r3, [pc, #584]	; (80042b0 <HAL_RCC_OscConfig+0x26c>)
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f003 030c 	and.w	r3, r3, #12
 800406c:	2b04      	cmp	r3, #4
 800406e:	d00c      	beq.n	800408a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004070:	4b8f      	ldr	r3, [pc, #572]	; (80042b0 <HAL_RCC_OscConfig+0x26c>)
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f003 030c 	and.w	r3, r3, #12
 8004078:	2b08      	cmp	r3, #8
 800407a:	d112      	bne.n	80040a2 <HAL_RCC_OscConfig+0x5e>
 800407c:	4b8c      	ldr	r3, [pc, #560]	; (80042b0 <HAL_RCC_OscConfig+0x26c>)
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004084:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004088:	d10b      	bne.n	80040a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800408a:	4b89      	ldr	r3, [pc, #548]	; (80042b0 <HAL_RCC_OscConfig+0x26c>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d06c      	beq.n	8004170 <HAL_RCC_OscConfig+0x12c>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d168      	bne.n	8004170 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e246      	b.n	8004530 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040aa:	d106      	bne.n	80040ba <HAL_RCC_OscConfig+0x76>
 80040ac:	4b80      	ldr	r3, [pc, #512]	; (80042b0 <HAL_RCC_OscConfig+0x26c>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a7f      	ldr	r2, [pc, #508]	; (80042b0 <HAL_RCC_OscConfig+0x26c>)
 80040b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040b6:	6013      	str	r3, [r2, #0]
 80040b8:	e02e      	b.n	8004118 <HAL_RCC_OscConfig+0xd4>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d10c      	bne.n	80040dc <HAL_RCC_OscConfig+0x98>
 80040c2:	4b7b      	ldr	r3, [pc, #492]	; (80042b0 <HAL_RCC_OscConfig+0x26c>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a7a      	ldr	r2, [pc, #488]	; (80042b0 <HAL_RCC_OscConfig+0x26c>)
 80040c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040cc:	6013      	str	r3, [r2, #0]
 80040ce:	4b78      	ldr	r3, [pc, #480]	; (80042b0 <HAL_RCC_OscConfig+0x26c>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a77      	ldr	r2, [pc, #476]	; (80042b0 <HAL_RCC_OscConfig+0x26c>)
 80040d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040d8:	6013      	str	r3, [r2, #0]
 80040da:	e01d      	b.n	8004118 <HAL_RCC_OscConfig+0xd4>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040e4:	d10c      	bne.n	8004100 <HAL_RCC_OscConfig+0xbc>
 80040e6:	4b72      	ldr	r3, [pc, #456]	; (80042b0 <HAL_RCC_OscConfig+0x26c>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a71      	ldr	r2, [pc, #452]	; (80042b0 <HAL_RCC_OscConfig+0x26c>)
 80040ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040f0:	6013      	str	r3, [r2, #0]
 80040f2:	4b6f      	ldr	r3, [pc, #444]	; (80042b0 <HAL_RCC_OscConfig+0x26c>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a6e      	ldr	r2, [pc, #440]	; (80042b0 <HAL_RCC_OscConfig+0x26c>)
 80040f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040fc:	6013      	str	r3, [r2, #0]
 80040fe:	e00b      	b.n	8004118 <HAL_RCC_OscConfig+0xd4>
 8004100:	4b6b      	ldr	r3, [pc, #428]	; (80042b0 <HAL_RCC_OscConfig+0x26c>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a6a      	ldr	r2, [pc, #424]	; (80042b0 <HAL_RCC_OscConfig+0x26c>)
 8004106:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800410a:	6013      	str	r3, [r2, #0]
 800410c:	4b68      	ldr	r3, [pc, #416]	; (80042b0 <HAL_RCC_OscConfig+0x26c>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a67      	ldr	r2, [pc, #412]	; (80042b0 <HAL_RCC_OscConfig+0x26c>)
 8004112:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004116:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d013      	beq.n	8004148 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004120:	f7fe fc9e 	bl	8002a60 <HAL_GetTick>
 8004124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004126:	e008      	b.n	800413a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004128:	f7fe fc9a 	bl	8002a60 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b64      	cmp	r3, #100	; 0x64
 8004134:	d901      	bls.n	800413a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e1fa      	b.n	8004530 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800413a:	4b5d      	ldr	r3, [pc, #372]	; (80042b0 <HAL_RCC_OscConfig+0x26c>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d0f0      	beq.n	8004128 <HAL_RCC_OscConfig+0xe4>
 8004146:	e014      	b.n	8004172 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004148:	f7fe fc8a 	bl	8002a60 <HAL_GetTick>
 800414c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800414e:	e008      	b.n	8004162 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004150:	f7fe fc86 	bl	8002a60 <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	2b64      	cmp	r3, #100	; 0x64
 800415c:	d901      	bls.n	8004162 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e1e6      	b.n	8004530 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004162:	4b53      	ldr	r3, [pc, #332]	; (80042b0 <HAL_RCC_OscConfig+0x26c>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1f0      	bne.n	8004150 <HAL_RCC_OscConfig+0x10c>
 800416e:	e000      	b.n	8004172 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004170:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d063      	beq.n	8004246 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800417e:	4b4c      	ldr	r3, [pc, #304]	; (80042b0 <HAL_RCC_OscConfig+0x26c>)
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f003 030c 	and.w	r3, r3, #12
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00b      	beq.n	80041a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800418a:	4b49      	ldr	r3, [pc, #292]	; (80042b0 <HAL_RCC_OscConfig+0x26c>)
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f003 030c 	and.w	r3, r3, #12
 8004192:	2b08      	cmp	r3, #8
 8004194:	d11c      	bne.n	80041d0 <HAL_RCC_OscConfig+0x18c>
 8004196:	4b46      	ldr	r3, [pc, #280]	; (80042b0 <HAL_RCC_OscConfig+0x26c>)
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d116      	bne.n	80041d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041a2:	4b43      	ldr	r3, [pc, #268]	; (80042b0 <HAL_RCC_OscConfig+0x26c>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d005      	beq.n	80041ba <HAL_RCC_OscConfig+0x176>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d001      	beq.n	80041ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e1ba      	b.n	8004530 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ba:	4b3d      	ldr	r3, [pc, #244]	; (80042b0 <HAL_RCC_OscConfig+0x26c>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	00db      	lsls	r3, r3, #3
 80041c8:	4939      	ldr	r1, [pc, #228]	; (80042b0 <HAL_RCC_OscConfig+0x26c>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041ce:	e03a      	b.n	8004246 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d020      	beq.n	800421a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041d8:	4b36      	ldr	r3, [pc, #216]	; (80042b4 <HAL_RCC_OscConfig+0x270>)
 80041da:	2201      	movs	r2, #1
 80041dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041de:	f7fe fc3f 	bl	8002a60 <HAL_GetTick>
 80041e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041e4:	e008      	b.n	80041f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041e6:	f7fe fc3b 	bl	8002a60 <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d901      	bls.n	80041f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e19b      	b.n	8004530 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041f8:	4b2d      	ldr	r3, [pc, #180]	; (80042b0 <HAL_RCC_OscConfig+0x26c>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0302 	and.w	r3, r3, #2
 8004200:	2b00      	cmp	r3, #0
 8004202:	d0f0      	beq.n	80041e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004204:	4b2a      	ldr	r3, [pc, #168]	; (80042b0 <HAL_RCC_OscConfig+0x26c>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	695b      	ldr	r3, [r3, #20]
 8004210:	00db      	lsls	r3, r3, #3
 8004212:	4927      	ldr	r1, [pc, #156]	; (80042b0 <HAL_RCC_OscConfig+0x26c>)
 8004214:	4313      	orrs	r3, r2
 8004216:	600b      	str	r3, [r1, #0]
 8004218:	e015      	b.n	8004246 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800421a:	4b26      	ldr	r3, [pc, #152]	; (80042b4 <HAL_RCC_OscConfig+0x270>)
 800421c:	2200      	movs	r2, #0
 800421e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004220:	f7fe fc1e 	bl	8002a60 <HAL_GetTick>
 8004224:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004226:	e008      	b.n	800423a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004228:	f7fe fc1a 	bl	8002a60 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b02      	cmp	r3, #2
 8004234:	d901      	bls.n	800423a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e17a      	b.n	8004530 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800423a:	4b1d      	ldr	r3, [pc, #116]	; (80042b0 <HAL_RCC_OscConfig+0x26c>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1f0      	bne.n	8004228 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0308 	and.w	r3, r3, #8
 800424e:	2b00      	cmp	r3, #0
 8004250:	d03a      	beq.n	80042c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d019      	beq.n	800428e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800425a:	4b17      	ldr	r3, [pc, #92]	; (80042b8 <HAL_RCC_OscConfig+0x274>)
 800425c:	2201      	movs	r2, #1
 800425e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004260:	f7fe fbfe 	bl	8002a60 <HAL_GetTick>
 8004264:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004266:	e008      	b.n	800427a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004268:	f7fe fbfa 	bl	8002a60 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	2b02      	cmp	r3, #2
 8004274:	d901      	bls.n	800427a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e15a      	b.n	8004530 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800427a:	4b0d      	ldr	r3, [pc, #52]	; (80042b0 <HAL_RCC_OscConfig+0x26c>)
 800427c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427e:	f003 0302 	and.w	r3, r3, #2
 8004282:	2b00      	cmp	r3, #0
 8004284:	d0f0      	beq.n	8004268 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004286:	2001      	movs	r0, #1
 8004288:	f000 fad8 	bl	800483c <RCC_Delay>
 800428c:	e01c      	b.n	80042c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800428e:	4b0a      	ldr	r3, [pc, #40]	; (80042b8 <HAL_RCC_OscConfig+0x274>)
 8004290:	2200      	movs	r2, #0
 8004292:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004294:	f7fe fbe4 	bl	8002a60 <HAL_GetTick>
 8004298:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800429a:	e00f      	b.n	80042bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800429c:	f7fe fbe0 	bl	8002a60 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d908      	bls.n	80042bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e140      	b.n	8004530 <HAL_RCC_OscConfig+0x4ec>
 80042ae:	bf00      	nop
 80042b0:	40021000 	.word	0x40021000
 80042b4:	42420000 	.word	0x42420000
 80042b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042bc:	4b9e      	ldr	r3, [pc, #632]	; (8004538 <HAL_RCC_OscConfig+0x4f4>)
 80042be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c0:	f003 0302 	and.w	r3, r3, #2
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1e9      	bne.n	800429c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0304 	and.w	r3, r3, #4
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f000 80a6 	beq.w	8004422 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042d6:	2300      	movs	r3, #0
 80042d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042da:	4b97      	ldr	r3, [pc, #604]	; (8004538 <HAL_RCC_OscConfig+0x4f4>)
 80042dc:	69db      	ldr	r3, [r3, #28]
 80042de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d10d      	bne.n	8004302 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042e6:	4b94      	ldr	r3, [pc, #592]	; (8004538 <HAL_RCC_OscConfig+0x4f4>)
 80042e8:	69db      	ldr	r3, [r3, #28]
 80042ea:	4a93      	ldr	r2, [pc, #588]	; (8004538 <HAL_RCC_OscConfig+0x4f4>)
 80042ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042f0:	61d3      	str	r3, [r2, #28]
 80042f2:	4b91      	ldr	r3, [pc, #580]	; (8004538 <HAL_RCC_OscConfig+0x4f4>)
 80042f4:	69db      	ldr	r3, [r3, #28]
 80042f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042fa:	60bb      	str	r3, [r7, #8]
 80042fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042fe:	2301      	movs	r3, #1
 8004300:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004302:	4b8e      	ldr	r3, [pc, #568]	; (800453c <HAL_RCC_OscConfig+0x4f8>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800430a:	2b00      	cmp	r3, #0
 800430c:	d118      	bne.n	8004340 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800430e:	4b8b      	ldr	r3, [pc, #556]	; (800453c <HAL_RCC_OscConfig+0x4f8>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a8a      	ldr	r2, [pc, #552]	; (800453c <HAL_RCC_OscConfig+0x4f8>)
 8004314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004318:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800431a:	f7fe fba1 	bl	8002a60 <HAL_GetTick>
 800431e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004320:	e008      	b.n	8004334 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004322:	f7fe fb9d 	bl	8002a60 <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	2b64      	cmp	r3, #100	; 0x64
 800432e:	d901      	bls.n	8004334 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e0fd      	b.n	8004530 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004334:	4b81      	ldr	r3, [pc, #516]	; (800453c <HAL_RCC_OscConfig+0x4f8>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800433c:	2b00      	cmp	r3, #0
 800433e:	d0f0      	beq.n	8004322 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d106      	bne.n	8004356 <HAL_RCC_OscConfig+0x312>
 8004348:	4b7b      	ldr	r3, [pc, #492]	; (8004538 <HAL_RCC_OscConfig+0x4f4>)
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	4a7a      	ldr	r2, [pc, #488]	; (8004538 <HAL_RCC_OscConfig+0x4f4>)
 800434e:	f043 0301 	orr.w	r3, r3, #1
 8004352:	6213      	str	r3, [r2, #32]
 8004354:	e02d      	b.n	80043b2 <HAL_RCC_OscConfig+0x36e>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d10c      	bne.n	8004378 <HAL_RCC_OscConfig+0x334>
 800435e:	4b76      	ldr	r3, [pc, #472]	; (8004538 <HAL_RCC_OscConfig+0x4f4>)
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	4a75      	ldr	r2, [pc, #468]	; (8004538 <HAL_RCC_OscConfig+0x4f4>)
 8004364:	f023 0301 	bic.w	r3, r3, #1
 8004368:	6213      	str	r3, [r2, #32]
 800436a:	4b73      	ldr	r3, [pc, #460]	; (8004538 <HAL_RCC_OscConfig+0x4f4>)
 800436c:	6a1b      	ldr	r3, [r3, #32]
 800436e:	4a72      	ldr	r2, [pc, #456]	; (8004538 <HAL_RCC_OscConfig+0x4f4>)
 8004370:	f023 0304 	bic.w	r3, r3, #4
 8004374:	6213      	str	r3, [r2, #32]
 8004376:	e01c      	b.n	80043b2 <HAL_RCC_OscConfig+0x36e>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	2b05      	cmp	r3, #5
 800437e:	d10c      	bne.n	800439a <HAL_RCC_OscConfig+0x356>
 8004380:	4b6d      	ldr	r3, [pc, #436]	; (8004538 <HAL_RCC_OscConfig+0x4f4>)
 8004382:	6a1b      	ldr	r3, [r3, #32]
 8004384:	4a6c      	ldr	r2, [pc, #432]	; (8004538 <HAL_RCC_OscConfig+0x4f4>)
 8004386:	f043 0304 	orr.w	r3, r3, #4
 800438a:	6213      	str	r3, [r2, #32]
 800438c:	4b6a      	ldr	r3, [pc, #424]	; (8004538 <HAL_RCC_OscConfig+0x4f4>)
 800438e:	6a1b      	ldr	r3, [r3, #32]
 8004390:	4a69      	ldr	r2, [pc, #420]	; (8004538 <HAL_RCC_OscConfig+0x4f4>)
 8004392:	f043 0301 	orr.w	r3, r3, #1
 8004396:	6213      	str	r3, [r2, #32]
 8004398:	e00b      	b.n	80043b2 <HAL_RCC_OscConfig+0x36e>
 800439a:	4b67      	ldr	r3, [pc, #412]	; (8004538 <HAL_RCC_OscConfig+0x4f4>)
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	4a66      	ldr	r2, [pc, #408]	; (8004538 <HAL_RCC_OscConfig+0x4f4>)
 80043a0:	f023 0301 	bic.w	r3, r3, #1
 80043a4:	6213      	str	r3, [r2, #32]
 80043a6:	4b64      	ldr	r3, [pc, #400]	; (8004538 <HAL_RCC_OscConfig+0x4f4>)
 80043a8:	6a1b      	ldr	r3, [r3, #32]
 80043aa:	4a63      	ldr	r2, [pc, #396]	; (8004538 <HAL_RCC_OscConfig+0x4f4>)
 80043ac:	f023 0304 	bic.w	r3, r3, #4
 80043b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d015      	beq.n	80043e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043ba:	f7fe fb51 	bl	8002a60 <HAL_GetTick>
 80043be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043c0:	e00a      	b.n	80043d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043c2:	f7fe fb4d 	bl	8002a60 <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d901      	bls.n	80043d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e0ab      	b.n	8004530 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043d8:	4b57      	ldr	r3, [pc, #348]	; (8004538 <HAL_RCC_OscConfig+0x4f4>)
 80043da:	6a1b      	ldr	r3, [r3, #32]
 80043dc:	f003 0302 	and.w	r3, r3, #2
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d0ee      	beq.n	80043c2 <HAL_RCC_OscConfig+0x37e>
 80043e4:	e014      	b.n	8004410 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043e6:	f7fe fb3b 	bl	8002a60 <HAL_GetTick>
 80043ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043ec:	e00a      	b.n	8004404 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ee:	f7fe fb37 	bl	8002a60 <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d901      	bls.n	8004404 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e095      	b.n	8004530 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004404:	4b4c      	ldr	r3, [pc, #304]	; (8004538 <HAL_RCC_OscConfig+0x4f4>)
 8004406:	6a1b      	ldr	r3, [r3, #32]
 8004408:	f003 0302 	and.w	r3, r3, #2
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1ee      	bne.n	80043ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004410:	7dfb      	ldrb	r3, [r7, #23]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d105      	bne.n	8004422 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004416:	4b48      	ldr	r3, [pc, #288]	; (8004538 <HAL_RCC_OscConfig+0x4f4>)
 8004418:	69db      	ldr	r3, [r3, #28]
 800441a:	4a47      	ldr	r2, [pc, #284]	; (8004538 <HAL_RCC_OscConfig+0x4f4>)
 800441c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004420:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	69db      	ldr	r3, [r3, #28]
 8004426:	2b00      	cmp	r3, #0
 8004428:	f000 8081 	beq.w	800452e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800442c:	4b42      	ldr	r3, [pc, #264]	; (8004538 <HAL_RCC_OscConfig+0x4f4>)
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f003 030c 	and.w	r3, r3, #12
 8004434:	2b08      	cmp	r3, #8
 8004436:	d061      	beq.n	80044fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	69db      	ldr	r3, [r3, #28]
 800443c:	2b02      	cmp	r3, #2
 800443e:	d146      	bne.n	80044ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004440:	4b3f      	ldr	r3, [pc, #252]	; (8004540 <HAL_RCC_OscConfig+0x4fc>)
 8004442:	2200      	movs	r2, #0
 8004444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004446:	f7fe fb0b 	bl	8002a60 <HAL_GetTick>
 800444a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800444c:	e008      	b.n	8004460 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800444e:	f7fe fb07 	bl	8002a60 <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	2b02      	cmp	r3, #2
 800445a:	d901      	bls.n	8004460 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e067      	b.n	8004530 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004460:	4b35      	ldr	r3, [pc, #212]	; (8004538 <HAL_RCC_OscConfig+0x4f4>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d1f0      	bne.n	800444e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a1b      	ldr	r3, [r3, #32]
 8004470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004474:	d108      	bne.n	8004488 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004476:	4b30      	ldr	r3, [pc, #192]	; (8004538 <HAL_RCC_OscConfig+0x4f4>)
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	492d      	ldr	r1, [pc, #180]	; (8004538 <HAL_RCC_OscConfig+0x4f4>)
 8004484:	4313      	orrs	r3, r2
 8004486:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004488:	4b2b      	ldr	r3, [pc, #172]	; (8004538 <HAL_RCC_OscConfig+0x4f4>)
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a19      	ldr	r1, [r3, #32]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004498:	430b      	orrs	r3, r1
 800449a:	4927      	ldr	r1, [pc, #156]	; (8004538 <HAL_RCC_OscConfig+0x4f4>)
 800449c:	4313      	orrs	r3, r2
 800449e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044a0:	4b27      	ldr	r3, [pc, #156]	; (8004540 <HAL_RCC_OscConfig+0x4fc>)
 80044a2:	2201      	movs	r2, #1
 80044a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a6:	f7fe fadb 	bl	8002a60 <HAL_GetTick>
 80044aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044ac:	e008      	b.n	80044c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044ae:	f7fe fad7 	bl	8002a60 <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d901      	bls.n	80044c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e037      	b.n	8004530 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044c0:	4b1d      	ldr	r3, [pc, #116]	; (8004538 <HAL_RCC_OscConfig+0x4f4>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d0f0      	beq.n	80044ae <HAL_RCC_OscConfig+0x46a>
 80044cc:	e02f      	b.n	800452e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ce:	4b1c      	ldr	r3, [pc, #112]	; (8004540 <HAL_RCC_OscConfig+0x4fc>)
 80044d0:	2200      	movs	r2, #0
 80044d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d4:	f7fe fac4 	bl	8002a60 <HAL_GetTick>
 80044d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044da:	e008      	b.n	80044ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044dc:	f7fe fac0 	bl	8002a60 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d901      	bls.n	80044ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e020      	b.n	8004530 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044ee:	4b12      	ldr	r3, [pc, #72]	; (8004538 <HAL_RCC_OscConfig+0x4f4>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1f0      	bne.n	80044dc <HAL_RCC_OscConfig+0x498>
 80044fa:	e018      	b.n	800452e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	69db      	ldr	r3, [r3, #28]
 8004500:	2b01      	cmp	r3, #1
 8004502:	d101      	bne.n	8004508 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e013      	b.n	8004530 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004508:	4b0b      	ldr	r3, [pc, #44]	; (8004538 <HAL_RCC_OscConfig+0x4f4>)
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a1b      	ldr	r3, [r3, #32]
 8004518:	429a      	cmp	r2, r3
 800451a:	d106      	bne.n	800452a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004526:	429a      	cmp	r2, r3
 8004528:	d001      	beq.n	800452e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e000      	b.n	8004530 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800452e:	2300      	movs	r3, #0
}
 8004530:	4618      	mov	r0, r3
 8004532:	3718      	adds	r7, #24
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	40021000 	.word	0x40021000
 800453c:	40007000 	.word	0x40007000
 8004540:	42420060 	.word	0x42420060

08004544 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d101      	bne.n	8004558 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e0d0      	b.n	80046fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004558:	4b6a      	ldr	r3, [pc, #424]	; (8004704 <HAL_RCC_ClockConfig+0x1c0>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0307 	and.w	r3, r3, #7
 8004560:	683a      	ldr	r2, [r7, #0]
 8004562:	429a      	cmp	r2, r3
 8004564:	d910      	bls.n	8004588 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004566:	4b67      	ldr	r3, [pc, #412]	; (8004704 <HAL_RCC_ClockConfig+0x1c0>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f023 0207 	bic.w	r2, r3, #7
 800456e:	4965      	ldr	r1, [pc, #404]	; (8004704 <HAL_RCC_ClockConfig+0x1c0>)
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	4313      	orrs	r3, r2
 8004574:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004576:	4b63      	ldr	r3, [pc, #396]	; (8004704 <HAL_RCC_ClockConfig+0x1c0>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0307 	and.w	r3, r3, #7
 800457e:	683a      	ldr	r2, [r7, #0]
 8004580:	429a      	cmp	r2, r3
 8004582:	d001      	beq.n	8004588 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e0b8      	b.n	80046fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0302 	and.w	r3, r3, #2
 8004590:	2b00      	cmp	r3, #0
 8004592:	d020      	beq.n	80045d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0304 	and.w	r3, r3, #4
 800459c:	2b00      	cmp	r3, #0
 800459e:	d005      	beq.n	80045ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045a0:	4b59      	ldr	r3, [pc, #356]	; (8004708 <HAL_RCC_ClockConfig+0x1c4>)
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	4a58      	ldr	r2, [pc, #352]	; (8004708 <HAL_RCC_ClockConfig+0x1c4>)
 80045a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80045aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0308 	and.w	r3, r3, #8
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d005      	beq.n	80045c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045b8:	4b53      	ldr	r3, [pc, #332]	; (8004708 <HAL_RCC_ClockConfig+0x1c4>)
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	4a52      	ldr	r2, [pc, #328]	; (8004708 <HAL_RCC_ClockConfig+0x1c4>)
 80045be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80045c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045c4:	4b50      	ldr	r3, [pc, #320]	; (8004708 <HAL_RCC_ClockConfig+0x1c4>)
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	494d      	ldr	r1, [pc, #308]	; (8004708 <HAL_RCC_ClockConfig+0x1c4>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d040      	beq.n	8004664 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d107      	bne.n	80045fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ea:	4b47      	ldr	r3, [pc, #284]	; (8004708 <HAL_RCC_ClockConfig+0x1c4>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d115      	bne.n	8004622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e07f      	b.n	80046fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d107      	bne.n	8004612 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004602:	4b41      	ldr	r3, [pc, #260]	; (8004708 <HAL_RCC_ClockConfig+0x1c4>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d109      	bne.n	8004622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e073      	b.n	80046fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004612:	4b3d      	ldr	r3, [pc, #244]	; (8004708 <HAL_RCC_ClockConfig+0x1c4>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0302 	and.w	r3, r3, #2
 800461a:	2b00      	cmp	r3, #0
 800461c:	d101      	bne.n	8004622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e06b      	b.n	80046fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004622:	4b39      	ldr	r3, [pc, #228]	; (8004708 <HAL_RCC_ClockConfig+0x1c4>)
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f023 0203 	bic.w	r2, r3, #3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	4936      	ldr	r1, [pc, #216]	; (8004708 <HAL_RCC_ClockConfig+0x1c4>)
 8004630:	4313      	orrs	r3, r2
 8004632:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004634:	f7fe fa14 	bl	8002a60 <HAL_GetTick>
 8004638:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800463a:	e00a      	b.n	8004652 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800463c:	f7fe fa10 	bl	8002a60 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	f241 3288 	movw	r2, #5000	; 0x1388
 800464a:	4293      	cmp	r3, r2
 800464c:	d901      	bls.n	8004652 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e053      	b.n	80046fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004652:	4b2d      	ldr	r3, [pc, #180]	; (8004708 <HAL_RCC_ClockConfig+0x1c4>)
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f003 020c 	and.w	r2, r3, #12
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	429a      	cmp	r2, r3
 8004662:	d1eb      	bne.n	800463c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004664:	4b27      	ldr	r3, [pc, #156]	; (8004704 <HAL_RCC_ClockConfig+0x1c0>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0307 	and.w	r3, r3, #7
 800466c:	683a      	ldr	r2, [r7, #0]
 800466e:	429a      	cmp	r2, r3
 8004670:	d210      	bcs.n	8004694 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004672:	4b24      	ldr	r3, [pc, #144]	; (8004704 <HAL_RCC_ClockConfig+0x1c0>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f023 0207 	bic.w	r2, r3, #7
 800467a:	4922      	ldr	r1, [pc, #136]	; (8004704 <HAL_RCC_ClockConfig+0x1c0>)
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	4313      	orrs	r3, r2
 8004680:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004682:	4b20      	ldr	r3, [pc, #128]	; (8004704 <HAL_RCC_ClockConfig+0x1c0>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0307 	and.w	r3, r3, #7
 800468a:	683a      	ldr	r2, [r7, #0]
 800468c:	429a      	cmp	r2, r3
 800468e:	d001      	beq.n	8004694 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e032      	b.n	80046fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0304 	and.w	r3, r3, #4
 800469c:	2b00      	cmp	r3, #0
 800469e:	d008      	beq.n	80046b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046a0:	4b19      	ldr	r3, [pc, #100]	; (8004708 <HAL_RCC_ClockConfig+0x1c4>)
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	4916      	ldr	r1, [pc, #88]	; (8004708 <HAL_RCC_ClockConfig+0x1c4>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0308 	and.w	r3, r3, #8
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d009      	beq.n	80046d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80046be:	4b12      	ldr	r3, [pc, #72]	; (8004708 <HAL_RCC_ClockConfig+0x1c4>)
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	00db      	lsls	r3, r3, #3
 80046cc:	490e      	ldr	r1, [pc, #56]	; (8004708 <HAL_RCC_ClockConfig+0x1c4>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80046d2:	f000 f821 	bl	8004718 <HAL_RCC_GetSysClockFreq>
 80046d6:	4602      	mov	r2, r0
 80046d8:	4b0b      	ldr	r3, [pc, #44]	; (8004708 <HAL_RCC_ClockConfig+0x1c4>)
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	091b      	lsrs	r3, r3, #4
 80046de:	f003 030f 	and.w	r3, r3, #15
 80046e2:	490a      	ldr	r1, [pc, #40]	; (800470c <HAL_RCC_ClockConfig+0x1c8>)
 80046e4:	5ccb      	ldrb	r3, [r1, r3]
 80046e6:	fa22 f303 	lsr.w	r3, r2, r3
 80046ea:	4a09      	ldr	r2, [pc, #36]	; (8004710 <HAL_RCC_ClockConfig+0x1cc>)
 80046ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80046ee:	4b09      	ldr	r3, [pc, #36]	; (8004714 <HAL_RCC_ClockConfig+0x1d0>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7fe f972 	bl	80029dc <HAL_InitTick>

  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3710      	adds	r7, #16
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	40022000 	.word	0x40022000
 8004708:	40021000 	.word	0x40021000
 800470c:	080087c4 	.word	0x080087c4
 8004710:	20000000 	.word	0x20000000
 8004714:	20000004 	.word	0x20000004

08004718 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004718:	b490      	push	{r4, r7}
 800471a:	b08a      	sub	sp, #40	; 0x28
 800471c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800471e:	4b2a      	ldr	r3, [pc, #168]	; (80047c8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004720:	1d3c      	adds	r4, r7, #4
 8004722:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004724:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004728:	f240 2301 	movw	r3, #513	; 0x201
 800472c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800472e:	2300      	movs	r3, #0
 8004730:	61fb      	str	r3, [r7, #28]
 8004732:	2300      	movs	r3, #0
 8004734:	61bb      	str	r3, [r7, #24]
 8004736:	2300      	movs	r3, #0
 8004738:	627b      	str	r3, [r7, #36]	; 0x24
 800473a:	2300      	movs	r3, #0
 800473c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800473e:	2300      	movs	r3, #0
 8004740:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004742:	4b22      	ldr	r3, [pc, #136]	; (80047cc <HAL_RCC_GetSysClockFreq+0xb4>)
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	f003 030c 	and.w	r3, r3, #12
 800474e:	2b04      	cmp	r3, #4
 8004750:	d002      	beq.n	8004758 <HAL_RCC_GetSysClockFreq+0x40>
 8004752:	2b08      	cmp	r3, #8
 8004754:	d003      	beq.n	800475e <HAL_RCC_GetSysClockFreq+0x46>
 8004756:	e02d      	b.n	80047b4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004758:	4b1d      	ldr	r3, [pc, #116]	; (80047d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800475a:	623b      	str	r3, [r7, #32]
      break;
 800475c:	e02d      	b.n	80047ba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	0c9b      	lsrs	r3, r3, #18
 8004762:	f003 030f 	and.w	r3, r3, #15
 8004766:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800476a:	4413      	add	r3, r2
 800476c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004770:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d013      	beq.n	80047a4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800477c:	4b13      	ldr	r3, [pc, #76]	; (80047cc <HAL_RCC_GetSysClockFreq+0xb4>)
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	0c5b      	lsrs	r3, r3, #17
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800478a:	4413      	add	r3, r2
 800478c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004790:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	4a0e      	ldr	r2, [pc, #56]	; (80047d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004796:	fb02 f203 	mul.w	r2, r2, r3
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a0:	627b      	str	r3, [r7, #36]	; 0x24
 80047a2:	e004      	b.n	80047ae <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	4a0b      	ldr	r2, [pc, #44]	; (80047d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80047a8:	fb02 f303 	mul.w	r3, r2, r3
 80047ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80047ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b0:	623b      	str	r3, [r7, #32]
      break;
 80047b2:	e002      	b.n	80047ba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80047b4:	4b06      	ldr	r3, [pc, #24]	; (80047d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047b6:	623b      	str	r3, [r7, #32]
      break;
 80047b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047ba:	6a3b      	ldr	r3, [r7, #32]
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3728      	adds	r7, #40	; 0x28
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bc90      	pop	{r4, r7}
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	08008780 	.word	0x08008780
 80047cc:	40021000 	.word	0x40021000
 80047d0:	007a1200 	.word	0x007a1200
 80047d4:	003d0900 	.word	0x003d0900

080047d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047d8:	b480      	push	{r7}
 80047da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047dc:	4b02      	ldr	r3, [pc, #8]	; (80047e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80047de:	681b      	ldr	r3, [r3, #0]
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bc80      	pop	{r7}
 80047e6:	4770      	bx	lr
 80047e8:	20000000 	.word	0x20000000

080047ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80047f0:	f7ff fff2 	bl	80047d8 <HAL_RCC_GetHCLKFreq>
 80047f4:	4602      	mov	r2, r0
 80047f6:	4b05      	ldr	r3, [pc, #20]	; (800480c <HAL_RCC_GetPCLK1Freq+0x20>)
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	0a1b      	lsrs	r3, r3, #8
 80047fc:	f003 0307 	and.w	r3, r3, #7
 8004800:	4903      	ldr	r1, [pc, #12]	; (8004810 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004802:	5ccb      	ldrb	r3, [r1, r3]
 8004804:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004808:	4618      	mov	r0, r3
 800480a:	bd80      	pop	{r7, pc}
 800480c:	40021000 	.word	0x40021000
 8004810:	080087d4 	.word	0x080087d4

08004814 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004818:	f7ff ffde 	bl	80047d8 <HAL_RCC_GetHCLKFreq>
 800481c:	4602      	mov	r2, r0
 800481e:	4b05      	ldr	r3, [pc, #20]	; (8004834 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	0adb      	lsrs	r3, r3, #11
 8004824:	f003 0307 	and.w	r3, r3, #7
 8004828:	4903      	ldr	r1, [pc, #12]	; (8004838 <HAL_RCC_GetPCLK2Freq+0x24>)
 800482a:	5ccb      	ldrb	r3, [r1, r3]
 800482c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004830:	4618      	mov	r0, r3
 8004832:	bd80      	pop	{r7, pc}
 8004834:	40021000 	.word	0x40021000
 8004838:	080087d4 	.word	0x080087d4

0800483c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004844:	4b0a      	ldr	r3, [pc, #40]	; (8004870 <RCC_Delay+0x34>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a0a      	ldr	r2, [pc, #40]	; (8004874 <RCC_Delay+0x38>)
 800484a:	fba2 2303 	umull	r2, r3, r2, r3
 800484e:	0a5b      	lsrs	r3, r3, #9
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	fb02 f303 	mul.w	r3, r2, r3
 8004856:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004858:	bf00      	nop
  }
  while (Delay --);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	1e5a      	subs	r2, r3, #1
 800485e:	60fa      	str	r2, [r7, #12]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d1f9      	bne.n	8004858 <RCC_Delay+0x1c>
}
 8004864:	bf00      	nop
 8004866:	bf00      	nop
 8004868:	3714      	adds	r7, #20
 800486a:	46bd      	mov	sp, r7
 800486c:	bc80      	pop	{r7}
 800486e:	4770      	bx	lr
 8004870:	20000000 	.word	0x20000000
 8004874:	10624dd3 	.word	0x10624dd3

08004878 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e041      	b.n	800490e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004890:	b2db      	uxtb	r3, r3
 8004892:	2b00      	cmp	r3, #0
 8004894:	d106      	bne.n	80048a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f7fd fed4 	bl	800264c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2202      	movs	r2, #2
 80048a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	3304      	adds	r3, #4
 80048b4:	4619      	mov	r1, r3
 80048b6:	4610      	mov	r0, r2
 80048b8:	f000 fe98 	bl	80055ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3708      	adds	r7, #8
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
	...

08004918 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004926:	b2db      	uxtb	r3, r3
 8004928:	2b01      	cmp	r3, #1
 800492a:	d001      	beq.n	8004930 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e032      	b.n	8004996 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2202      	movs	r2, #2
 8004934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a18      	ldr	r2, [pc, #96]	; (80049a0 <HAL_TIM_Base_Start+0x88>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d00e      	beq.n	8004960 <HAL_TIM_Base_Start+0x48>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800494a:	d009      	beq.n	8004960 <HAL_TIM_Base_Start+0x48>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a14      	ldr	r2, [pc, #80]	; (80049a4 <HAL_TIM_Base_Start+0x8c>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d004      	beq.n	8004960 <HAL_TIM_Base_Start+0x48>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a13      	ldr	r2, [pc, #76]	; (80049a8 <HAL_TIM_Base_Start+0x90>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d111      	bne.n	8004984 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f003 0307 	and.w	r3, r3, #7
 800496a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2b06      	cmp	r3, #6
 8004970:	d010      	beq.n	8004994 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f042 0201 	orr.w	r2, r2, #1
 8004980:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004982:	e007      	b.n	8004994 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f042 0201 	orr.w	r2, r2, #1
 8004992:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3714      	adds	r7, #20
 800499a:	46bd      	mov	sp, r7
 800499c:	bc80      	pop	{r7}
 800499e:	4770      	bx	lr
 80049a0:	40012c00 	.word	0x40012c00
 80049a4:	40000400 	.word	0x40000400
 80049a8:	40000800 	.word	0x40000800

080049ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b085      	sub	sp, #20
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d001      	beq.n	80049c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e03a      	b.n	8004a3a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2202      	movs	r2, #2
 80049c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68da      	ldr	r2, [r3, #12]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f042 0201 	orr.w	r2, r2, #1
 80049da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a18      	ldr	r2, [pc, #96]	; (8004a44 <HAL_TIM_Base_Start_IT+0x98>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d00e      	beq.n	8004a04 <HAL_TIM_Base_Start_IT+0x58>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ee:	d009      	beq.n	8004a04 <HAL_TIM_Base_Start_IT+0x58>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a14      	ldr	r2, [pc, #80]	; (8004a48 <HAL_TIM_Base_Start_IT+0x9c>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d004      	beq.n	8004a04 <HAL_TIM_Base_Start_IT+0x58>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a13      	ldr	r2, [pc, #76]	; (8004a4c <HAL_TIM_Base_Start_IT+0xa0>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d111      	bne.n	8004a28 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f003 0307 	and.w	r3, r3, #7
 8004a0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2b06      	cmp	r3, #6
 8004a14:	d010      	beq.n	8004a38 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f042 0201 	orr.w	r2, r2, #1
 8004a24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a26:	e007      	b.n	8004a38 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f042 0201 	orr.w	r2, r2, #1
 8004a36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3714      	adds	r7, #20
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bc80      	pop	{r7}
 8004a42:	4770      	bx	lr
 8004a44:	40012c00 	.word	0x40012c00
 8004a48:	40000400 	.word	0x40000400
 8004a4c:	40000800 	.word	0x40000800

08004a50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d101      	bne.n	8004a62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e041      	b.n	8004ae6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d106      	bne.n	8004a7c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f7fd fdca 	bl	8002610 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2202      	movs	r2, #2
 8004a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	3304      	adds	r3, #4
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	4610      	mov	r0, r2
 8004a90:	f000 fdac 	bl	80055ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3708      	adds	r7, #8
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
	...

08004af0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d109      	bne.n	8004b14 <HAL_TIM_PWM_Start+0x24>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	bf14      	ite	ne
 8004b0c:	2301      	movne	r3, #1
 8004b0e:	2300      	moveq	r3, #0
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	e022      	b.n	8004b5a <HAL_TIM_PWM_Start+0x6a>
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	2b04      	cmp	r3, #4
 8004b18:	d109      	bne.n	8004b2e <HAL_TIM_PWM_Start+0x3e>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	bf14      	ite	ne
 8004b26:	2301      	movne	r3, #1
 8004b28:	2300      	moveq	r3, #0
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	e015      	b.n	8004b5a <HAL_TIM_PWM_Start+0x6a>
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	2b08      	cmp	r3, #8
 8004b32:	d109      	bne.n	8004b48 <HAL_TIM_PWM_Start+0x58>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	bf14      	ite	ne
 8004b40:	2301      	movne	r3, #1
 8004b42:	2300      	moveq	r3, #0
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	e008      	b.n	8004b5a <HAL_TIM_PWM_Start+0x6a>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	bf14      	ite	ne
 8004b54:	2301      	movne	r3, #1
 8004b56:	2300      	moveq	r3, #0
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d001      	beq.n	8004b62 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e05e      	b.n	8004c20 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d104      	bne.n	8004b72 <HAL_TIM_PWM_Start+0x82>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b70:	e013      	b.n	8004b9a <HAL_TIM_PWM_Start+0xaa>
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	2b04      	cmp	r3, #4
 8004b76:	d104      	bne.n	8004b82 <HAL_TIM_PWM_Start+0x92>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2202      	movs	r2, #2
 8004b7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b80:	e00b      	b.n	8004b9a <HAL_TIM_PWM_Start+0xaa>
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	2b08      	cmp	r3, #8
 8004b86:	d104      	bne.n	8004b92 <HAL_TIM_PWM_Start+0xa2>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2202      	movs	r2, #2
 8004b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b90:	e003      	b.n	8004b9a <HAL_TIM_PWM_Start+0xaa>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2202      	movs	r2, #2
 8004b96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	6839      	ldr	r1, [r7, #0]
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f001 f8af 	bl	8005d06 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a1e      	ldr	r2, [pc, #120]	; (8004c28 <HAL_TIM_PWM_Start+0x138>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d107      	bne.n	8004bc2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bc0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a18      	ldr	r2, [pc, #96]	; (8004c28 <HAL_TIM_PWM_Start+0x138>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d00e      	beq.n	8004bea <HAL_TIM_PWM_Start+0xfa>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bd4:	d009      	beq.n	8004bea <HAL_TIM_PWM_Start+0xfa>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a14      	ldr	r2, [pc, #80]	; (8004c2c <HAL_TIM_PWM_Start+0x13c>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d004      	beq.n	8004bea <HAL_TIM_PWM_Start+0xfa>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a12      	ldr	r2, [pc, #72]	; (8004c30 <HAL_TIM_PWM_Start+0x140>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d111      	bne.n	8004c0e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f003 0307 	and.w	r3, r3, #7
 8004bf4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2b06      	cmp	r3, #6
 8004bfa:	d010      	beq.n	8004c1e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f042 0201 	orr.w	r2, r2, #1
 8004c0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c0c:	e007      	b.n	8004c1e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f042 0201 	orr.w	r2, r2, #1
 8004c1c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3710      	adds	r7, #16
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	40012c00 	.word	0x40012c00
 8004c2c:	40000400 	.word	0x40000400
 8004c30:	40000800 	.word	0x40000800

08004c34 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d101      	bne.n	8004c46 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e041      	b.n	8004cca <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d106      	bne.n	8004c60 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f839 	bl	8004cd2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2202      	movs	r2, #2
 8004c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	3304      	adds	r3, #4
 8004c70:	4619      	mov	r1, r3
 8004c72:	4610      	mov	r0, r2
 8004c74:	f000 fcba 	bl	80055ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3708      	adds	r7, #8
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004cd2:	b480      	push	{r7}
 8004cd4:	b083      	sub	sp, #12
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004cda:	bf00      	nop
 8004cdc:	370c      	adds	r7, #12
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bc80      	pop	{r7}
 8004ce2:	4770      	bx	lr

08004ce4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d104      	bne.n	8004cfe <HAL_TIM_IC_Start_IT+0x1a>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	e013      	b.n	8004d26 <HAL_TIM_IC_Start_IT+0x42>
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	2b04      	cmp	r3, #4
 8004d02:	d104      	bne.n	8004d0e <HAL_TIM_IC_Start_IT+0x2a>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	e00b      	b.n	8004d26 <HAL_TIM_IC_Start_IT+0x42>
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	2b08      	cmp	r3, #8
 8004d12:	d104      	bne.n	8004d1e <HAL_TIM_IC_Start_IT+0x3a>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	e003      	b.n	8004d26 <HAL_TIM_IC_Start_IT+0x42>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d104      	bne.n	8004d38 <HAL_TIM_IC_Start_IT+0x54>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	e013      	b.n	8004d60 <HAL_TIM_IC_Start_IT+0x7c>
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	2b04      	cmp	r3, #4
 8004d3c:	d104      	bne.n	8004d48 <HAL_TIM_IC_Start_IT+0x64>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	e00b      	b.n	8004d60 <HAL_TIM_IC_Start_IT+0x7c>
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	2b08      	cmp	r3, #8
 8004d4c:	d104      	bne.n	8004d58 <HAL_TIM_IC_Start_IT+0x74>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	e003      	b.n	8004d60 <HAL_TIM_IC_Start_IT+0x7c>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d62:	7bfb      	ldrb	r3, [r7, #15]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d102      	bne.n	8004d6e <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d68:	7bbb      	ldrb	r3, [r7, #14]
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d001      	beq.n	8004d72 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e0b3      	b.n	8004eda <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d104      	bne.n	8004d82 <HAL_TIM_IC_Start_IT+0x9e>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2202      	movs	r2, #2
 8004d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d80:	e013      	b.n	8004daa <HAL_TIM_IC_Start_IT+0xc6>
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	2b04      	cmp	r3, #4
 8004d86:	d104      	bne.n	8004d92 <HAL_TIM_IC_Start_IT+0xae>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d90:	e00b      	b.n	8004daa <HAL_TIM_IC_Start_IT+0xc6>
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	2b08      	cmp	r3, #8
 8004d96:	d104      	bne.n	8004da2 <HAL_TIM_IC_Start_IT+0xbe>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004da0:	e003      	b.n	8004daa <HAL_TIM_IC_Start_IT+0xc6>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2202      	movs	r2, #2
 8004da6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d104      	bne.n	8004dba <HAL_TIM_IC_Start_IT+0xd6>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2202      	movs	r2, #2
 8004db4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004db8:	e013      	b.n	8004de2 <HAL_TIM_IC_Start_IT+0xfe>
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	2b04      	cmp	r3, #4
 8004dbe:	d104      	bne.n	8004dca <HAL_TIM_IC_Start_IT+0xe6>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2202      	movs	r2, #2
 8004dc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004dc8:	e00b      	b.n	8004de2 <HAL_TIM_IC_Start_IT+0xfe>
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	2b08      	cmp	r3, #8
 8004dce:	d104      	bne.n	8004dda <HAL_TIM_IC_Start_IT+0xf6>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2202      	movs	r2, #2
 8004dd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dd8:	e003      	b.n	8004de2 <HAL_TIM_IC_Start_IT+0xfe>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2202      	movs	r2, #2
 8004dde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	2b0c      	cmp	r3, #12
 8004de6:	d841      	bhi.n	8004e6c <HAL_TIM_IC_Start_IT+0x188>
 8004de8:	a201      	add	r2, pc, #4	; (adr r2, 8004df0 <HAL_TIM_IC_Start_IT+0x10c>)
 8004dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dee:	bf00      	nop
 8004df0:	08004e25 	.word	0x08004e25
 8004df4:	08004e6d 	.word	0x08004e6d
 8004df8:	08004e6d 	.word	0x08004e6d
 8004dfc:	08004e6d 	.word	0x08004e6d
 8004e00:	08004e37 	.word	0x08004e37
 8004e04:	08004e6d 	.word	0x08004e6d
 8004e08:	08004e6d 	.word	0x08004e6d
 8004e0c:	08004e6d 	.word	0x08004e6d
 8004e10:	08004e49 	.word	0x08004e49
 8004e14:	08004e6d 	.word	0x08004e6d
 8004e18:	08004e6d 	.word	0x08004e6d
 8004e1c:	08004e6d 	.word	0x08004e6d
 8004e20:	08004e5b 	.word	0x08004e5b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68da      	ldr	r2, [r3, #12]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f042 0202 	orr.w	r2, r2, #2
 8004e32:	60da      	str	r2, [r3, #12]
      break;
 8004e34:	e01b      	b.n	8004e6e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68da      	ldr	r2, [r3, #12]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f042 0204 	orr.w	r2, r2, #4
 8004e44:	60da      	str	r2, [r3, #12]
      break;
 8004e46:	e012      	b.n	8004e6e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68da      	ldr	r2, [r3, #12]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f042 0208 	orr.w	r2, r2, #8
 8004e56:	60da      	str	r2, [r3, #12]
      break;
 8004e58:	e009      	b.n	8004e6e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68da      	ldr	r2, [r3, #12]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f042 0210 	orr.w	r2, r2, #16
 8004e68:	60da      	str	r2, [r3, #12]
      break;
 8004e6a:	e000      	b.n	8004e6e <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8004e6c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2201      	movs	r2, #1
 8004e74:	6839      	ldr	r1, [r7, #0]
 8004e76:	4618      	mov	r0, r3
 8004e78:	f000 ff45 	bl	8005d06 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a18      	ldr	r2, [pc, #96]	; (8004ee4 <HAL_TIM_IC_Start_IT+0x200>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d00e      	beq.n	8004ea4 <HAL_TIM_IC_Start_IT+0x1c0>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e8e:	d009      	beq.n	8004ea4 <HAL_TIM_IC_Start_IT+0x1c0>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a14      	ldr	r2, [pc, #80]	; (8004ee8 <HAL_TIM_IC_Start_IT+0x204>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d004      	beq.n	8004ea4 <HAL_TIM_IC_Start_IT+0x1c0>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a13      	ldr	r2, [pc, #76]	; (8004eec <HAL_TIM_IC_Start_IT+0x208>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d111      	bne.n	8004ec8 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f003 0307 	and.w	r3, r3, #7
 8004eae:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	2b06      	cmp	r3, #6
 8004eb4:	d010      	beq.n	8004ed8 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f042 0201 	orr.w	r2, r2, #1
 8004ec4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ec6:	e007      	b.n	8004ed8 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f042 0201 	orr.w	r2, r2, #1
 8004ed6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3710      	adds	r7, #16
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	40012c00 	.word	0x40012c00
 8004ee8:	40000400 	.word	0x40000400
 8004eec:	40000800 	.word	0x40000800

08004ef0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	f003 0302 	and.w	r3, r3, #2
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d122      	bne.n	8004f4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	f003 0302 	and.w	r3, r3, #2
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d11b      	bne.n	8004f4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f06f 0202 	mvn.w	r2, #2
 8004f1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2201      	movs	r2, #1
 8004f22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	699b      	ldr	r3, [r3, #24]
 8004f2a:	f003 0303 	and.w	r3, r3, #3
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d003      	beq.n	8004f3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f7fd f812 	bl	8001f5c <HAL_TIM_IC_CaptureCallback>
 8004f38:	e005      	b.n	8004f46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 fb3a 	bl	80055b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f000 fb40 	bl	80055c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	f003 0304 	and.w	r3, r3, #4
 8004f56:	2b04      	cmp	r3, #4
 8004f58:	d122      	bne.n	8004fa0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	f003 0304 	and.w	r3, r3, #4
 8004f64:	2b04      	cmp	r3, #4
 8004f66:	d11b      	bne.n	8004fa0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f06f 0204 	mvn.w	r2, #4
 8004f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2202      	movs	r2, #2
 8004f76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d003      	beq.n	8004f8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f7fc ffe8 	bl	8001f5c <HAL_TIM_IC_CaptureCallback>
 8004f8c:	e005      	b.n	8004f9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 fb10 	bl	80055b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f000 fb16 	bl	80055c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	f003 0308 	and.w	r3, r3, #8
 8004faa:	2b08      	cmp	r3, #8
 8004fac:	d122      	bne.n	8004ff4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	f003 0308 	and.w	r3, r3, #8
 8004fb8:	2b08      	cmp	r3, #8
 8004fba:	d11b      	bne.n	8004ff4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f06f 0208 	mvn.w	r2, #8
 8004fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2204      	movs	r2, #4
 8004fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	69db      	ldr	r3, [r3, #28]
 8004fd2:	f003 0303 	and.w	r3, r3, #3
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d003      	beq.n	8004fe2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f7fc ffbe 	bl	8001f5c <HAL_TIM_IC_CaptureCallback>
 8004fe0:	e005      	b.n	8004fee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 fae6 	bl	80055b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 faec 	bl	80055c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	f003 0310 	and.w	r3, r3, #16
 8004ffe:	2b10      	cmp	r3, #16
 8005000:	d122      	bne.n	8005048 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	f003 0310 	and.w	r3, r3, #16
 800500c:	2b10      	cmp	r3, #16
 800500e:	d11b      	bne.n	8005048 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f06f 0210 	mvn.w	r2, #16
 8005018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2208      	movs	r2, #8
 800501e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	69db      	ldr	r3, [r3, #28]
 8005026:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800502a:	2b00      	cmp	r3, #0
 800502c:	d003      	beq.n	8005036 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f7fc ff94 	bl	8001f5c <HAL_TIM_IC_CaptureCallback>
 8005034:	e005      	b.n	8005042 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 fabc 	bl	80055b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f000 fac2 	bl	80055c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	f003 0301 	and.w	r3, r3, #1
 8005052:	2b01      	cmp	r3, #1
 8005054:	d10e      	bne.n	8005074 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	f003 0301 	and.w	r3, r3, #1
 8005060:	2b01      	cmp	r3, #1
 8005062:	d107      	bne.n	8005074 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f06f 0201 	mvn.w	r2, #1
 800506c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f7fc fdfa 	bl	8001c68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800507e:	2b80      	cmp	r3, #128	; 0x80
 8005080:	d10e      	bne.n	80050a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800508c:	2b80      	cmp	r3, #128	; 0x80
 800508e:	d107      	bne.n	80050a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f000 ff10 	bl	8005ec0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050aa:	2b40      	cmp	r3, #64	; 0x40
 80050ac:	d10e      	bne.n	80050cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b8:	2b40      	cmp	r3, #64	; 0x40
 80050ba:	d107      	bne.n	80050cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80050c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 fa86 	bl	80055d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	f003 0320 	and.w	r3, r3, #32
 80050d6:	2b20      	cmp	r3, #32
 80050d8:	d10e      	bne.n	80050f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	f003 0320 	and.w	r3, r3, #32
 80050e4:	2b20      	cmp	r3, #32
 80050e6:	d107      	bne.n	80050f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f06f 0220 	mvn.w	r2, #32
 80050f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 fedb 	bl	8005eae <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050f8:	bf00      	nop
 80050fa:	3708      	adds	r7, #8
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005112:	2b01      	cmp	r3, #1
 8005114:	d101      	bne.n	800511a <HAL_TIM_IC_ConfigChannel+0x1a>
 8005116:	2302      	movs	r3, #2
 8005118:	e082      	b.n	8005220 <HAL_TIM_IC_ConfigChannel+0x120>
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2201      	movs	r2, #1
 800511e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d11b      	bne.n	8005160 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6818      	ldr	r0, [r3, #0]
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	6819      	ldr	r1, [r3, #0]
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	685a      	ldr	r2, [r3, #4]
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	f000 fc42 	bl	80059c0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	699a      	ldr	r2, [r3, #24]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f022 020c 	bic.w	r2, r2, #12
 800514a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	6999      	ldr	r1, [r3, #24]
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	689a      	ldr	r2, [r3, #8]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	430a      	orrs	r2, r1
 800515c:	619a      	str	r2, [r3, #24]
 800515e:	e05a      	b.n	8005216 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2b04      	cmp	r3, #4
 8005164:	d11c      	bne.n	80051a0 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6818      	ldr	r0, [r3, #0]
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	6819      	ldr	r1, [r3, #0]
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	685a      	ldr	r2, [r3, #4]
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	f000 fcab 	bl	8005ad0 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	699a      	ldr	r2, [r3, #24]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005188:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	6999      	ldr	r1, [r3, #24]
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	021a      	lsls	r2, r3, #8
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	430a      	orrs	r2, r1
 800519c:	619a      	str	r2, [r3, #24]
 800519e:	e03a      	b.n	8005216 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2b08      	cmp	r3, #8
 80051a4:	d11b      	bne.n	80051de <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6818      	ldr	r0, [r3, #0]
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	6819      	ldr	r1, [r3, #0]
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	685a      	ldr	r2, [r3, #4]
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	f000 fcf6 	bl	8005ba6 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	69da      	ldr	r2, [r3, #28]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f022 020c 	bic.w	r2, r2, #12
 80051c8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	69d9      	ldr	r1, [r3, #28]
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	689a      	ldr	r2, [r3, #8]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	430a      	orrs	r2, r1
 80051da:	61da      	str	r2, [r3, #28]
 80051dc:	e01b      	b.n	8005216 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6818      	ldr	r0, [r3, #0]
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	6819      	ldr	r1, [r3, #0]
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	685a      	ldr	r2, [r3, #4]
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	f000 fd15 	bl	8005c1c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	69da      	ldr	r2, [r3, #28]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005200:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	69d9      	ldr	r1, [r3, #28]
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	021a      	lsls	r2, r3, #8
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	430a      	orrs	r2, r1
 8005214:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800521e:	2300      	movs	r3, #0
}
 8005220:	4618      	mov	r0, r3
 8005222:	3710      	adds	r7, #16
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800523a:	2b01      	cmp	r3, #1
 800523c:	d101      	bne.n	8005242 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800523e:	2302      	movs	r3, #2
 8005240:	e0ac      	b.n	800539c <HAL_TIM_PWM_ConfigChannel+0x174>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2201      	movs	r2, #1
 8005246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2b0c      	cmp	r3, #12
 800524e:	f200 809f 	bhi.w	8005390 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005252:	a201      	add	r2, pc, #4	; (adr r2, 8005258 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005258:	0800528d 	.word	0x0800528d
 800525c:	08005391 	.word	0x08005391
 8005260:	08005391 	.word	0x08005391
 8005264:	08005391 	.word	0x08005391
 8005268:	080052cd 	.word	0x080052cd
 800526c:	08005391 	.word	0x08005391
 8005270:	08005391 	.word	0x08005391
 8005274:	08005391 	.word	0x08005391
 8005278:	0800530f 	.word	0x0800530f
 800527c:	08005391 	.word	0x08005391
 8005280:	08005391 	.word	0x08005391
 8005284:	08005391 	.word	0x08005391
 8005288:	0800534f 	.word	0x0800534f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68b9      	ldr	r1, [r7, #8]
 8005292:	4618      	mov	r0, r3
 8005294:	f000 fa0c 	bl	80056b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	699a      	ldr	r2, [r3, #24]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f042 0208 	orr.w	r2, r2, #8
 80052a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	699a      	ldr	r2, [r3, #24]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f022 0204 	bic.w	r2, r2, #4
 80052b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	6999      	ldr	r1, [r3, #24]
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	691a      	ldr	r2, [r3, #16]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	430a      	orrs	r2, r1
 80052c8:	619a      	str	r2, [r3, #24]
      break;
 80052ca:	e062      	b.n	8005392 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68b9      	ldr	r1, [r7, #8]
 80052d2:	4618      	mov	r0, r3
 80052d4:	f000 fa52 	bl	800577c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	699a      	ldr	r2, [r3, #24]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	699a      	ldr	r2, [r3, #24]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	6999      	ldr	r1, [r3, #24]
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	021a      	lsls	r2, r3, #8
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	430a      	orrs	r2, r1
 800530a:	619a      	str	r2, [r3, #24]
      break;
 800530c:	e041      	b.n	8005392 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68b9      	ldr	r1, [r7, #8]
 8005314:	4618      	mov	r0, r3
 8005316:	f000 fa9b 	bl	8005850 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	69da      	ldr	r2, [r3, #28]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f042 0208 	orr.w	r2, r2, #8
 8005328:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	69da      	ldr	r2, [r3, #28]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f022 0204 	bic.w	r2, r2, #4
 8005338:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	69d9      	ldr	r1, [r3, #28]
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	691a      	ldr	r2, [r3, #16]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	430a      	orrs	r2, r1
 800534a:	61da      	str	r2, [r3, #28]
      break;
 800534c:	e021      	b.n	8005392 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68b9      	ldr	r1, [r7, #8]
 8005354:	4618      	mov	r0, r3
 8005356:	f000 fae5 	bl	8005924 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	69da      	ldr	r2, [r3, #28]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005368:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	69da      	ldr	r2, [r3, #28]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005378:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	69d9      	ldr	r1, [r3, #28]
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	691b      	ldr	r3, [r3, #16]
 8005384:	021a      	lsls	r2, r3, #8
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	430a      	orrs	r2, r1
 800538c:	61da      	str	r2, [r3, #28]
      break;
 800538e:	e000      	b.n	8005392 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005390:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800539a:	2300      	movs	r3, #0
}
 800539c:	4618      	mov	r0, r3
 800539e:	3710      	adds	r7, #16
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d101      	bne.n	80053bc <HAL_TIM_ConfigClockSource+0x18>
 80053b8:	2302      	movs	r3, #2
 80053ba:	e0b3      	b.n	8005524 <HAL_TIM_ConfigClockSource+0x180>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2202      	movs	r2, #2
 80053c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80053da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053e2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053f4:	d03e      	beq.n	8005474 <HAL_TIM_ConfigClockSource+0xd0>
 80053f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053fa:	f200 8087 	bhi.w	800550c <HAL_TIM_ConfigClockSource+0x168>
 80053fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005402:	f000 8085 	beq.w	8005510 <HAL_TIM_ConfigClockSource+0x16c>
 8005406:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800540a:	d87f      	bhi.n	800550c <HAL_TIM_ConfigClockSource+0x168>
 800540c:	2b70      	cmp	r3, #112	; 0x70
 800540e:	d01a      	beq.n	8005446 <HAL_TIM_ConfigClockSource+0xa2>
 8005410:	2b70      	cmp	r3, #112	; 0x70
 8005412:	d87b      	bhi.n	800550c <HAL_TIM_ConfigClockSource+0x168>
 8005414:	2b60      	cmp	r3, #96	; 0x60
 8005416:	d050      	beq.n	80054ba <HAL_TIM_ConfigClockSource+0x116>
 8005418:	2b60      	cmp	r3, #96	; 0x60
 800541a:	d877      	bhi.n	800550c <HAL_TIM_ConfigClockSource+0x168>
 800541c:	2b50      	cmp	r3, #80	; 0x50
 800541e:	d03c      	beq.n	800549a <HAL_TIM_ConfigClockSource+0xf6>
 8005420:	2b50      	cmp	r3, #80	; 0x50
 8005422:	d873      	bhi.n	800550c <HAL_TIM_ConfigClockSource+0x168>
 8005424:	2b40      	cmp	r3, #64	; 0x40
 8005426:	d058      	beq.n	80054da <HAL_TIM_ConfigClockSource+0x136>
 8005428:	2b40      	cmp	r3, #64	; 0x40
 800542a:	d86f      	bhi.n	800550c <HAL_TIM_ConfigClockSource+0x168>
 800542c:	2b30      	cmp	r3, #48	; 0x30
 800542e:	d064      	beq.n	80054fa <HAL_TIM_ConfigClockSource+0x156>
 8005430:	2b30      	cmp	r3, #48	; 0x30
 8005432:	d86b      	bhi.n	800550c <HAL_TIM_ConfigClockSource+0x168>
 8005434:	2b20      	cmp	r3, #32
 8005436:	d060      	beq.n	80054fa <HAL_TIM_ConfigClockSource+0x156>
 8005438:	2b20      	cmp	r3, #32
 800543a:	d867      	bhi.n	800550c <HAL_TIM_ConfigClockSource+0x168>
 800543c:	2b00      	cmp	r3, #0
 800543e:	d05c      	beq.n	80054fa <HAL_TIM_ConfigClockSource+0x156>
 8005440:	2b10      	cmp	r3, #16
 8005442:	d05a      	beq.n	80054fa <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005444:	e062      	b.n	800550c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6818      	ldr	r0, [r3, #0]
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	6899      	ldr	r1, [r3, #8]
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	685a      	ldr	r2, [r3, #4]
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	f000 fc37 	bl	8005cc8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005468:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68fa      	ldr	r2, [r7, #12]
 8005470:	609a      	str	r2, [r3, #8]
      break;
 8005472:	e04e      	b.n	8005512 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6818      	ldr	r0, [r3, #0]
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	6899      	ldr	r1, [r3, #8]
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	685a      	ldr	r2, [r3, #4]
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	f000 fc20 	bl	8005cc8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	689a      	ldr	r2, [r3, #8]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005496:	609a      	str	r2, [r3, #8]
      break;
 8005498:	e03b      	b.n	8005512 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6818      	ldr	r0, [r3, #0]
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	6859      	ldr	r1, [r3, #4]
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	461a      	mov	r2, r3
 80054a8:	f000 fae4 	bl	8005a74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2150      	movs	r1, #80	; 0x50
 80054b2:	4618      	mov	r0, r3
 80054b4:	f000 fbee 	bl	8005c94 <TIM_ITRx_SetConfig>
      break;
 80054b8:	e02b      	b.n	8005512 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6818      	ldr	r0, [r3, #0]
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	6859      	ldr	r1, [r3, #4]
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	461a      	mov	r2, r3
 80054c8:	f000 fb3e 	bl	8005b48 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2160      	movs	r1, #96	; 0x60
 80054d2:	4618      	mov	r0, r3
 80054d4:	f000 fbde 	bl	8005c94 <TIM_ITRx_SetConfig>
      break;
 80054d8:	e01b      	b.n	8005512 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6818      	ldr	r0, [r3, #0]
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	6859      	ldr	r1, [r3, #4]
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	461a      	mov	r2, r3
 80054e8:	f000 fac4 	bl	8005a74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2140      	movs	r1, #64	; 0x40
 80054f2:	4618      	mov	r0, r3
 80054f4:	f000 fbce 	bl	8005c94 <TIM_ITRx_SetConfig>
      break;
 80054f8:	e00b      	b.n	8005512 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4619      	mov	r1, r3
 8005504:	4610      	mov	r0, r2
 8005506:	f000 fbc5 	bl	8005c94 <TIM_ITRx_SetConfig>
        break;
 800550a:	e002      	b.n	8005512 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800550c:	bf00      	nop
 800550e:	e000      	b.n	8005512 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005510:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2201      	movs	r2, #1
 8005516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3710      	adds	r7, #16
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800552c:	b480      	push	{r7}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005536:	2300      	movs	r3, #0
 8005538:	60fb      	str	r3, [r7, #12]
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	2b0c      	cmp	r3, #12
 800553e:	d831      	bhi.n	80055a4 <HAL_TIM_ReadCapturedValue+0x78>
 8005540:	a201      	add	r2, pc, #4	; (adr r2, 8005548 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005546:	bf00      	nop
 8005548:	0800557d 	.word	0x0800557d
 800554c:	080055a5 	.word	0x080055a5
 8005550:	080055a5 	.word	0x080055a5
 8005554:	080055a5 	.word	0x080055a5
 8005558:	08005587 	.word	0x08005587
 800555c:	080055a5 	.word	0x080055a5
 8005560:	080055a5 	.word	0x080055a5
 8005564:	080055a5 	.word	0x080055a5
 8005568:	08005591 	.word	0x08005591
 800556c:	080055a5 	.word	0x080055a5
 8005570:	080055a5 	.word	0x080055a5
 8005574:	080055a5 	.word	0x080055a5
 8005578:	0800559b 	.word	0x0800559b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005582:	60fb      	str	r3, [r7, #12]

      break;
 8005584:	e00f      	b.n	80055a6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558c:	60fb      	str	r3, [r7, #12]

      break;
 800558e:	e00a      	b.n	80055a6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005596:	60fb      	str	r3, [r7, #12]

      break;
 8005598:	e005      	b.n	80055a6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a0:	60fb      	str	r3, [r7, #12]

      break;
 80055a2:	e000      	b.n	80055a6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80055a4:	bf00      	nop
  }

  return tmpreg;
 80055a6:	68fb      	ldr	r3, [r7, #12]
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3714      	adds	r7, #20
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bc80      	pop	{r7}
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop

080055b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055bc:	bf00      	nop
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bc80      	pop	{r7}
 80055c4:	4770      	bx	lr

080055c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055c6:	b480      	push	{r7}
 80055c8:	b083      	sub	sp, #12
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055ce:	bf00      	nop
 80055d0:	370c      	adds	r7, #12
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bc80      	pop	{r7}
 80055d6:	4770      	bx	lr

080055d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055e0:	bf00      	nop
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bc80      	pop	{r7}
 80055e8:	4770      	bx	lr
	...

080055ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b085      	sub	sp, #20
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a29      	ldr	r2, [pc, #164]	; (80056a4 <TIM_Base_SetConfig+0xb8>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d00b      	beq.n	800561c <TIM_Base_SetConfig+0x30>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800560a:	d007      	beq.n	800561c <TIM_Base_SetConfig+0x30>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	4a26      	ldr	r2, [pc, #152]	; (80056a8 <TIM_Base_SetConfig+0xbc>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d003      	beq.n	800561c <TIM_Base_SetConfig+0x30>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	4a25      	ldr	r2, [pc, #148]	; (80056ac <TIM_Base_SetConfig+0xc0>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d108      	bne.n	800562e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005622:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	4313      	orrs	r3, r2
 800562c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a1c      	ldr	r2, [pc, #112]	; (80056a4 <TIM_Base_SetConfig+0xb8>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d00b      	beq.n	800564e <TIM_Base_SetConfig+0x62>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800563c:	d007      	beq.n	800564e <TIM_Base_SetConfig+0x62>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a19      	ldr	r2, [pc, #100]	; (80056a8 <TIM_Base_SetConfig+0xbc>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d003      	beq.n	800564e <TIM_Base_SetConfig+0x62>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a18      	ldr	r2, [pc, #96]	; (80056ac <TIM_Base_SetConfig+0xc0>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d108      	bne.n	8005660 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005654:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	4313      	orrs	r3, r2
 800565e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	695b      	ldr	r3, [r3, #20]
 800566a:	4313      	orrs	r3, r2
 800566c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	68fa      	ldr	r2, [r7, #12]
 8005672:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	689a      	ldr	r2, [r3, #8]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a07      	ldr	r2, [pc, #28]	; (80056a4 <TIM_Base_SetConfig+0xb8>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d103      	bne.n	8005694 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	691a      	ldr	r2, [r3, #16]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	615a      	str	r2, [r3, #20]
}
 800569a:	bf00      	nop
 800569c:	3714      	adds	r7, #20
 800569e:	46bd      	mov	sp, r7
 80056a0:	bc80      	pop	{r7}
 80056a2:	4770      	bx	lr
 80056a4:	40012c00 	.word	0x40012c00
 80056a8:	40000400 	.word	0x40000400
 80056ac:	40000800 	.word	0x40000800

080056b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b087      	sub	sp, #28
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a1b      	ldr	r3, [r3, #32]
 80056be:	f023 0201 	bic.w	r2, r3, #1
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a1b      	ldr	r3, [r3, #32]
 80056ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	699b      	ldr	r3, [r3, #24]
 80056d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f023 0303 	bic.w	r3, r3, #3
 80056e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	f023 0302 	bic.w	r3, r3, #2
 80056f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	697a      	ldr	r2, [r7, #20]
 8005700:	4313      	orrs	r3, r2
 8005702:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a1c      	ldr	r2, [pc, #112]	; (8005778 <TIM_OC1_SetConfig+0xc8>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d10c      	bne.n	8005726 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	f023 0308 	bic.w	r3, r3, #8
 8005712:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	697a      	ldr	r2, [r7, #20]
 800571a:	4313      	orrs	r3, r2
 800571c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	f023 0304 	bic.w	r3, r3, #4
 8005724:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a13      	ldr	r2, [pc, #76]	; (8005778 <TIM_OC1_SetConfig+0xc8>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d111      	bne.n	8005752 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005734:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800573c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	695b      	ldr	r3, [r3, #20]
 8005742:	693a      	ldr	r2, [r7, #16]
 8005744:	4313      	orrs	r3, r2
 8005746:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	699b      	ldr	r3, [r3, #24]
 800574c:	693a      	ldr	r2, [r7, #16]
 800574e:	4313      	orrs	r3, r2
 8005750:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	693a      	ldr	r2, [r7, #16]
 8005756:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	685a      	ldr	r2, [r3, #4]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	697a      	ldr	r2, [r7, #20]
 800576a:	621a      	str	r2, [r3, #32]
}
 800576c:	bf00      	nop
 800576e:	371c      	adds	r7, #28
 8005770:	46bd      	mov	sp, r7
 8005772:	bc80      	pop	{r7}
 8005774:	4770      	bx	lr
 8005776:	bf00      	nop
 8005778:	40012c00 	.word	0x40012c00

0800577c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800577c:	b480      	push	{r7}
 800577e:	b087      	sub	sp, #28
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a1b      	ldr	r3, [r3, #32]
 800578a:	f023 0210 	bic.w	r2, r3, #16
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a1b      	ldr	r3, [r3, #32]
 8005796:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	699b      	ldr	r3, [r3, #24]
 80057a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	021b      	lsls	r3, r3, #8
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	4313      	orrs	r3, r2
 80057be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	f023 0320 	bic.w	r3, r3, #32
 80057c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	011b      	lsls	r3, r3, #4
 80057ce:	697a      	ldr	r2, [r7, #20]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a1d      	ldr	r2, [pc, #116]	; (800584c <TIM_OC2_SetConfig+0xd0>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d10d      	bne.n	80057f8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	011b      	lsls	r3, r3, #4
 80057ea:	697a      	ldr	r2, [r7, #20]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a14      	ldr	r2, [pc, #80]	; (800584c <TIM_OC2_SetConfig+0xd0>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d113      	bne.n	8005828 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005806:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800580e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	695b      	ldr	r3, [r3, #20]
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	693a      	ldr	r2, [r7, #16]
 8005818:	4313      	orrs	r3, r2
 800581a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	699b      	ldr	r3, [r3, #24]
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	693a      	ldr	r2, [r7, #16]
 8005824:	4313      	orrs	r3, r2
 8005826:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	693a      	ldr	r2, [r7, #16]
 800582c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	685a      	ldr	r2, [r3, #4]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	621a      	str	r2, [r3, #32]
}
 8005842:	bf00      	nop
 8005844:	371c      	adds	r7, #28
 8005846:	46bd      	mov	sp, r7
 8005848:	bc80      	pop	{r7}
 800584a:	4770      	bx	lr
 800584c:	40012c00 	.word	0x40012c00

08005850 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005850:	b480      	push	{r7}
 8005852:	b087      	sub	sp, #28
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a1b      	ldr	r3, [r3, #32]
 800585e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	69db      	ldr	r3, [r3, #28]
 8005876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800587e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f023 0303 	bic.w	r3, r3, #3
 8005886:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	4313      	orrs	r3, r2
 8005890:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005898:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	021b      	lsls	r3, r3, #8
 80058a0:	697a      	ldr	r2, [r7, #20]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a1d      	ldr	r2, [pc, #116]	; (8005920 <TIM_OC3_SetConfig+0xd0>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d10d      	bne.n	80058ca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	021b      	lsls	r3, r3, #8
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	4313      	orrs	r3, r2
 80058c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a14      	ldr	r2, [pc, #80]	; (8005920 <TIM_OC3_SetConfig+0xd0>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d113      	bne.n	80058fa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	695b      	ldr	r3, [r3, #20]
 80058e6:	011b      	lsls	r3, r3, #4
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	699b      	ldr	r3, [r3, #24]
 80058f2:	011b      	lsls	r3, r3, #4
 80058f4:	693a      	ldr	r2, [r7, #16]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	693a      	ldr	r2, [r7, #16]
 80058fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	685a      	ldr	r2, [r3, #4]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	697a      	ldr	r2, [r7, #20]
 8005912:	621a      	str	r2, [r3, #32]
}
 8005914:	bf00      	nop
 8005916:	371c      	adds	r7, #28
 8005918:	46bd      	mov	sp, r7
 800591a:	bc80      	pop	{r7}
 800591c:	4770      	bx	lr
 800591e:	bf00      	nop
 8005920:	40012c00 	.word	0x40012c00

08005924 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005924:	b480      	push	{r7}
 8005926:	b087      	sub	sp, #28
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a1b      	ldr	r3, [r3, #32]
 8005932:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a1b      	ldr	r3, [r3, #32]
 800593e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	69db      	ldr	r3, [r3, #28]
 800594a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005952:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800595a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	021b      	lsls	r3, r3, #8
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	4313      	orrs	r3, r2
 8005966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800596e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	031b      	lsls	r3, r3, #12
 8005976:	693a      	ldr	r2, [r7, #16]
 8005978:	4313      	orrs	r3, r2
 800597a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a0f      	ldr	r2, [pc, #60]	; (80059bc <TIM_OC4_SetConfig+0x98>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d109      	bne.n	8005998 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800598a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	695b      	ldr	r3, [r3, #20]
 8005990:	019b      	lsls	r3, r3, #6
 8005992:	697a      	ldr	r2, [r7, #20]
 8005994:	4313      	orrs	r3, r2
 8005996:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	697a      	ldr	r2, [r7, #20]
 800599c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	685a      	ldr	r2, [r3, #4]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	693a      	ldr	r2, [r7, #16]
 80059b0:	621a      	str	r2, [r3, #32]
}
 80059b2:	bf00      	nop
 80059b4:	371c      	adds	r7, #28
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bc80      	pop	{r7}
 80059ba:	4770      	bx	lr
 80059bc:	40012c00 	.word	0x40012c00

080059c0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b087      	sub	sp, #28
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	60b9      	str	r1, [r7, #8]
 80059ca:	607a      	str	r2, [r7, #4]
 80059cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6a1b      	ldr	r3, [r3, #32]
 80059d2:	f023 0201 	bic.w	r2, r3, #1
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	699b      	ldr	r3, [r3, #24]
 80059de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6a1b      	ldr	r3, [r3, #32]
 80059e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	4a1f      	ldr	r2, [pc, #124]	; (8005a68 <TIM_TI1_SetConfig+0xa8>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d00b      	beq.n	8005a06 <TIM_TI1_SetConfig+0x46>
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059f4:	d007      	beq.n	8005a06 <TIM_TI1_SetConfig+0x46>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	4a1c      	ldr	r2, [pc, #112]	; (8005a6c <TIM_TI1_SetConfig+0xac>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d003      	beq.n	8005a06 <TIM_TI1_SetConfig+0x46>
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	4a1b      	ldr	r2, [pc, #108]	; (8005a70 <TIM_TI1_SetConfig+0xb0>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d101      	bne.n	8005a0a <TIM_TI1_SetConfig+0x4a>
 8005a06:	2301      	movs	r3, #1
 8005a08:	e000      	b.n	8005a0c <TIM_TI1_SetConfig+0x4c>
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d008      	beq.n	8005a22 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	f023 0303 	bic.w	r3, r3, #3
 8005a16:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005a18:	697a      	ldr	r2, [r7, #20]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	617b      	str	r3, [r7, #20]
 8005a20:	e003      	b.n	8005a2a <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	f043 0301 	orr.w	r3, r3, #1
 8005a28:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	011b      	lsls	r3, r3, #4
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	697a      	ldr	r2, [r7, #20]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	f023 030a 	bic.w	r3, r3, #10
 8005a44:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	f003 030a 	and.w	r3, r3, #10
 8005a4c:	693a      	ldr	r2, [r7, #16]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	697a      	ldr	r2, [r7, #20]
 8005a56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	693a      	ldr	r2, [r7, #16]
 8005a5c:	621a      	str	r2, [r3, #32]
}
 8005a5e:	bf00      	nop
 8005a60:	371c      	adds	r7, #28
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bc80      	pop	{r7}
 8005a66:	4770      	bx	lr
 8005a68:	40012c00 	.word	0x40012c00
 8005a6c:	40000400 	.word	0x40000400
 8005a70:	40000800 	.word	0x40000800

08005a74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b087      	sub	sp, #28
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6a1b      	ldr	r3, [r3, #32]
 8005a84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6a1b      	ldr	r3, [r3, #32]
 8005a8a:	f023 0201 	bic.w	r2, r3, #1
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	699b      	ldr	r3, [r3, #24]
 8005a96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	011b      	lsls	r3, r3, #4
 8005aa4:	693a      	ldr	r2, [r7, #16]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	f023 030a 	bic.w	r3, r3, #10
 8005ab0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ab2:	697a      	ldr	r2, [r7, #20]
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	693a      	ldr	r2, [r7, #16]
 8005abe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	697a      	ldr	r2, [r7, #20]
 8005ac4:	621a      	str	r2, [r3, #32]
}
 8005ac6:	bf00      	nop
 8005ac8:	371c      	adds	r7, #28
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bc80      	pop	{r7}
 8005ace:	4770      	bx	lr

08005ad0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b087      	sub	sp, #28
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	607a      	str	r2, [r7, #4]
 8005adc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	6a1b      	ldr	r3, [r3, #32]
 8005ae2:	f023 0210 	bic.w	r2, r3, #16
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	699b      	ldr	r3, [r3, #24]
 8005aee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6a1b      	ldr	r3, [r3, #32]
 8005af4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005afc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	021b      	lsls	r3, r3, #8
 8005b02:	697a      	ldr	r2, [r7, #20]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b0e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	031b      	lsls	r3, r3, #12
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	697a      	ldr	r2, [r7, #20]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b22:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	011b      	lsls	r3, r3, #4
 8005b28:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005b2c:	693a      	ldr	r2, [r7, #16]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	697a      	ldr	r2, [r7, #20]
 8005b36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	693a      	ldr	r2, [r7, #16]
 8005b3c:	621a      	str	r2, [r3, #32]
}
 8005b3e:	bf00      	nop
 8005b40:	371c      	adds	r7, #28
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bc80      	pop	{r7}
 8005b46:	4770      	bx	lr

08005b48 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b087      	sub	sp, #28
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6a1b      	ldr	r3, [r3, #32]
 8005b58:	f023 0210 	bic.w	r2, r3, #16
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	699b      	ldr	r3, [r3, #24]
 8005b64:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6a1b      	ldr	r3, [r3, #32]
 8005b6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b72:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	031b      	lsls	r3, r3, #12
 8005b78:	697a      	ldr	r2, [r7, #20]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b84:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	011b      	lsls	r3, r3, #4
 8005b8a:	693a      	ldr	r2, [r7, #16]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	697a      	ldr	r2, [r7, #20]
 8005b94:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	693a      	ldr	r2, [r7, #16]
 8005b9a:	621a      	str	r2, [r3, #32]
}
 8005b9c:	bf00      	nop
 8005b9e:	371c      	adds	r7, #28
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bc80      	pop	{r7}
 8005ba4:	4770      	bx	lr

08005ba6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005ba6:	b480      	push	{r7}
 8005ba8:	b087      	sub	sp, #28
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	60f8      	str	r0, [r7, #12]
 8005bae:	60b9      	str	r1, [r7, #8]
 8005bb0:	607a      	str	r2, [r7, #4]
 8005bb2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6a1b      	ldr	r3, [r3, #32]
 8005bb8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	69db      	ldr	r3, [r3, #28]
 8005bc4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6a1b      	ldr	r3, [r3, #32]
 8005bca:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	f023 0303 	bic.w	r3, r3, #3
 8005bd2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005bd4:	697a      	ldr	r2, [r7, #20]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005be2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	011b      	lsls	r3, r3, #4
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bf6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	021b      	lsls	r3, r3, #8
 8005bfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c00:	693a      	ldr	r2, [r7, #16]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	697a      	ldr	r2, [r7, #20]
 8005c0a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	693a      	ldr	r2, [r7, #16]
 8005c10:	621a      	str	r2, [r3, #32]
}
 8005c12:	bf00      	nop
 8005c14:	371c      	adds	r7, #28
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bc80      	pop	{r7}
 8005c1a:	4770      	bx	lr

08005c1c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b087      	sub	sp, #28
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	607a      	str	r2, [r7, #4]
 8005c28:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6a1b      	ldr	r3, [r3, #32]
 8005c2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	69db      	ldr	r3, [r3, #28]
 8005c3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6a1b      	ldr	r3, [r3, #32]
 8005c40:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c48:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	021b      	lsls	r3, r3, #8
 8005c4e:	697a      	ldr	r2, [r7, #20]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c5a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	031b      	lsls	r3, r3, #12
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	697a      	ldr	r2, [r7, #20]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c6e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	031b      	lsls	r3, r3, #12
 8005c74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c78:	693a      	ldr	r2, [r7, #16]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	697a      	ldr	r2, [r7, #20]
 8005c82:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	693a      	ldr	r2, [r7, #16]
 8005c88:	621a      	str	r2, [r3, #32]
}
 8005c8a:	bf00      	nop
 8005c8c:	371c      	adds	r7, #28
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bc80      	pop	{r7}
 8005c92:	4770      	bx	lr

08005c94 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b085      	sub	sp, #20
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005caa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005cac:	683a      	ldr	r2, [r7, #0]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	f043 0307 	orr.w	r3, r3, #7
 8005cb6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	609a      	str	r2, [r3, #8]
}
 8005cbe:	bf00      	nop
 8005cc0:	3714      	adds	r7, #20
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bc80      	pop	{r7}
 8005cc6:	4770      	bx	lr

08005cc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b087      	sub	sp, #28
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	607a      	str	r2, [r7, #4]
 8005cd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ce2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	021a      	lsls	r2, r3, #8
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	431a      	orrs	r2, r3
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	697a      	ldr	r2, [r7, #20]
 8005cfa:	609a      	str	r2, [r3, #8]
}
 8005cfc:	bf00      	nop
 8005cfe:	371c      	adds	r7, #28
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bc80      	pop	{r7}
 8005d04:	4770      	bx	lr

08005d06 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d06:	b480      	push	{r7}
 8005d08:	b087      	sub	sp, #28
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	60f8      	str	r0, [r7, #12]
 8005d0e:	60b9      	str	r1, [r7, #8]
 8005d10:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	f003 031f 	and.w	r3, r3, #31
 8005d18:	2201      	movs	r2, #1
 8005d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d1e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6a1a      	ldr	r2, [r3, #32]
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	43db      	mvns	r3, r3
 8005d28:	401a      	ands	r2, r3
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6a1a      	ldr	r2, [r3, #32]
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	f003 031f 	and.w	r3, r3, #31
 8005d38:	6879      	ldr	r1, [r7, #4]
 8005d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d3e:	431a      	orrs	r2, r3
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	621a      	str	r2, [r3, #32]
}
 8005d44:	bf00      	nop
 8005d46:	371c      	adds	r7, #28
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bc80      	pop	{r7}
 8005d4c:	4770      	bx	lr
	...

08005d50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b085      	sub	sp, #20
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d101      	bne.n	8005d68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d64:	2302      	movs	r3, #2
 8005d66:	e046      	b.n	8005df6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2202      	movs	r2, #2
 8005d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68fa      	ldr	r2, [r7, #12]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a16      	ldr	r2, [pc, #88]	; (8005e00 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d00e      	beq.n	8005dca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005db4:	d009      	beq.n	8005dca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a12      	ldr	r2, [pc, #72]	; (8005e04 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d004      	beq.n	8005dca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a10      	ldr	r2, [pc, #64]	; (8005e08 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d10c      	bne.n	8005de4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	68ba      	ldr	r2, [r7, #8]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68ba      	ldr	r2, [r7, #8]
 8005de2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3714      	adds	r7, #20
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bc80      	pop	{r7}
 8005dfe:	4770      	bx	lr
 8005e00:	40012c00 	.word	0x40012c00
 8005e04:	40000400 	.word	0x40000400
 8005e08:	40000800 	.word	0x40000800

08005e0c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b085      	sub	sp, #20
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005e16:	2300      	movs	r3, #0
 8005e18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d101      	bne.n	8005e28 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005e24:	2302      	movs	r3, #2
 8005e26:	e03d      	b.n	8005ea4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	695b      	ldr	r3, [r3, #20]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	69db      	ldr	r3, [r3, #28]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3714      	adds	r7, #20
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bc80      	pop	{r7}
 8005eac:	4770      	bx	lr

08005eae <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005eae:	b480      	push	{r7}
 8005eb0:	b083      	sub	sp, #12
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005eb6:	bf00      	nop
 8005eb8:	370c      	adds	r7, #12
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bc80      	pop	{r7}
 8005ebe:	4770      	bx	lr

08005ec0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ec8:	bf00      	nop
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bc80      	pop	{r7}
 8005ed0:	4770      	bx	lr

08005ed2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ed2:	b580      	push	{r7, lr}
 8005ed4:	b082      	sub	sp, #8
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d101      	bne.n	8005ee4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e03f      	b.n	8005f64 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d106      	bne.n	8005efe <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f7fc fc4f 	bl	800279c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2224      	movs	r2, #36	; 0x24
 8005f02:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68da      	ldr	r2, [r3, #12]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f14:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 f904 	bl	8006124 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	691a      	ldr	r2, [r3, #16]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f2a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	695a      	ldr	r2, [r3, #20]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f3a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	68da      	ldr	r2, [r3, #12]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f4a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2220      	movs	r2, #32
 8005f56:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2220      	movs	r2, #32
 8005f5e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005f62:	2300      	movs	r3, #0
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3708      	adds	r7, #8
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b08a      	sub	sp, #40	; 0x28
 8005f70:	af02      	add	r7, sp, #8
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	603b      	str	r3, [r7, #0]
 8005f78:	4613      	mov	r3, r2
 8005f7a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	2b20      	cmp	r3, #32
 8005f8a:	d17c      	bne.n	8006086 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d002      	beq.n	8005f98 <HAL_UART_Transmit+0x2c>
 8005f92:	88fb      	ldrh	r3, [r7, #6]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d101      	bne.n	8005f9c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e075      	b.n	8006088 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d101      	bne.n	8005faa <HAL_UART_Transmit+0x3e>
 8005fa6:	2302      	movs	r3, #2
 8005fa8:	e06e      	b.n	8006088 <HAL_UART_Transmit+0x11c>
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2201      	movs	r2, #1
 8005fae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2221      	movs	r2, #33	; 0x21
 8005fbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005fc0:	f7fc fd4e 	bl	8002a60 <HAL_GetTick>
 8005fc4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	88fa      	ldrh	r2, [r7, #6]
 8005fca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	88fa      	ldrh	r2, [r7, #6]
 8005fd0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fda:	d108      	bne.n	8005fee <HAL_UART_Transmit+0x82>
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d104      	bne.n	8005fee <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	61bb      	str	r3, [r7, #24]
 8005fec:	e003      	b.n	8005ff6 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005ffe:	e02a      	b.n	8006056 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	9300      	str	r3, [sp, #0]
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	2200      	movs	r2, #0
 8006008:	2180      	movs	r1, #128	; 0x80
 800600a:	68f8      	ldr	r0, [r7, #12]
 800600c:	f000 f840 	bl	8006090 <UART_WaitOnFlagUntilTimeout>
 8006010:	4603      	mov	r3, r0
 8006012:	2b00      	cmp	r3, #0
 8006014:	d001      	beq.n	800601a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006016:	2303      	movs	r3, #3
 8006018:	e036      	b.n	8006088 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800601a:	69fb      	ldr	r3, [r7, #28]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d10b      	bne.n	8006038 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	881b      	ldrh	r3, [r3, #0]
 8006024:	461a      	mov	r2, r3
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800602e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	3302      	adds	r3, #2
 8006034:	61bb      	str	r3, [r7, #24]
 8006036:	e007      	b.n	8006048 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	781a      	ldrb	r2, [r3, #0]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	3301      	adds	r3, #1
 8006046:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800604c:	b29b      	uxth	r3, r3
 800604e:	3b01      	subs	r3, #1
 8006050:	b29a      	uxth	r2, r3
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800605a:	b29b      	uxth	r3, r3
 800605c:	2b00      	cmp	r3, #0
 800605e:	d1cf      	bne.n	8006000 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	9300      	str	r3, [sp, #0]
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	2200      	movs	r2, #0
 8006068:	2140      	movs	r1, #64	; 0x40
 800606a:	68f8      	ldr	r0, [r7, #12]
 800606c:	f000 f810 	bl	8006090 <UART_WaitOnFlagUntilTimeout>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d001      	beq.n	800607a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006076:	2303      	movs	r3, #3
 8006078:	e006      	b.n	8006088 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2220      	movs	r2, #32
 800607e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8006082:	2300      	movs	r3, #0
 8006084:	e000      	b.n	8006088 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006086:	2302      	movs	r3, #2
  }
}
 8006088:	4618      	mov	r0, r3
 800608a:	3720      	adds	r7, #32
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	603b      	str	r3, [r7, #0]
 800609c:	4613      	mov	r3, r2
 800609e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060a0:	e02c      	b.n	80060fc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a8:	d028      	beq.n	80060fc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d007      	beq.n	80060c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80060b0:	f7fc fcd6 	bl	8002a60 <HAL_GetTick>
 80060b4:	4602      	mov	r2, r0
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	69ba      	ldr	r2, [r7, #24]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d21d      	bcs.n	80060fc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68da      	ldr	r2, [r3, #12]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80060ce:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	695a      	ldr	r2, [r3, #20]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f022 0201 	bic.w	r2, r2, #1
 80060de:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2220      	movs	r2, #32
 80060e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2220      	movs	r2, #32
 80060ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80060f8:	2303      	movs	r3, #3
 80060fa:	e00f      	b.n	800611c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	4013      	ands	r3, r2
 8006106:	68ba      	ldr	r2, [r7, #8]
 8006108:	429a      	cmp	r2, r3
 800610a:	bf0c      	ite	eq
 800610c:	2301      	moveq	r3, #1
 800610e:	2300      	movne	r3, #0
 8006110:	b2db      	uxtb	r3, r3
 8006112:	461a      	mov	r2, r3
 8006114:	79fb      	ldrb	r3, [r7, #7]
 8006116:	429a      	cmp	r2, r3
 8006118:	d0c3      	beq.n	80060a2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800611a:	2300      	movs	r3, #0
}
 800611c:	4618      	mov	r0, r3
 800611e:	3710      	adds	r7, #16
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b084      	sub	sp, #16
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	68da      	ldr	r2, [r3, #12]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	430a      	orrs	r2, r1
 8006140:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	689a      	ldr	r2, [r3, #8]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	431a      	orrs	r2, r3
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	695b      	ldr	r3, [r3, #20]
 8006150:	4313      	orrs	r3, r2
 8006152:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800615e:	f023 030c 	bic.w	r3, r3, #12
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	6812      	ldr	r2, [r2, #0]
 8006166:	68b9      	ldr	r1, [r7, #8]
 8006168:	430b      	orrs	r3, r1
 800616a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	695b      	ldr	r3, [r3, #20]
 8006172:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	699a      	ldr	r2, [r3, #24]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	430a      	orrs	r2, r1
 8006180:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a2c      	ldr	r2, [pc, #176]	; (8006238 <UART_SetConfig+0x114>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d103      	bne.n	8006194 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800618c:	f7fe fb42 	bl	8004814 <HAL_RCC_GetPCLK2Freq>
 8006190:	60f8      	str	r0, [r7, #12]
 8006192:	e002      	b.n	800619a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006194:	f7fe fb2a 	bl	80047ec <HAL_RCC_GetPCLK1Freq>
 8006198:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	4613      	mov	r3, r2
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	4413      	add	r3, r2
 80061a2:	009a      	lsls	r2, r3, #2
 80061a4:	441a      	add	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80061b0:	4a22      	ldr	r2, [pc, #136]	; (800623c <UART_SetConfig+0x118>)
 80061b2:	fba2 2303 	umull	r2, r3, r2, r3
 80061b6:	095b      	lsrs	r3, r3, #5
 80061b8:	0119      	lsls	r1, r3, #4
 80061ba:	68fa      	ldr	r2, [r7, #12]
 80061bc:	4613      	mov	r3, r2
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	4413      	add	r3, r2
 80061c2:	009a      	lsls	r2, r3, #2
 80061c4:	441a      	add	r2, r3
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80061d0:	4b1a      	ldr	r3, [pc, #104]	; (800623c <UART_SetConfig+0x118>)
 80061d2:	fba3 0302 	umull	r0, r3, r3, r2
 80061d6:	095b      	lsrs	r3, r3, #5
 80061d8:	2064      	movs	r0, #100	; 0x64
 80061da:	fb00 f303 	mul.w	r3, r0, r3
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	011b      	lsls	r3, r3, #4
 80061e2:	3332      	adds	r3, #50	; 0x32
 80061e4:	4a15      	ldr	r2, [pc, #84]	; (800623c <UART_SetConfig+0x118>)
 80061e6:	fba2 2303 	umull	r2, r3, r2, r3
 80061ea:	095b      	lsrs	r3, r3, #5
 80061ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061f0:	4419      	add	r1, r3
 80061f2:	68fa      	ldr	r2, [r7, #12]
 80061f4:	4613      	mov	r3, r2
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	4413      	add	r3, r2
 80061fa:	009a      	lsls	r2, r3, #2
 80061fc:	441a      	add	r2, r3
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	fbb2 f2f3 	udiv	r2, r2, r3
 8006208:	4b0c      	ldr	r3, [pc, #48]	; (800623c <UART_SetConfig+0x118>)
 800620a:	fba3 0302 	umull	r0, r3, r3, r2
 800620e:	095b      	lsrs	r3, r3, #5
 8006210:	2064      	movs	r0, #100	; 0x64
 8006212:	fb00 f303 	mul.w	r3, r0, r3
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	011b      	lsls	r3, r3, #4
 800621a:	3332      	adds	r3, #50	; 0x32
 800621c:	4a07      	ldr	r2, [pc, #28]	; (800623c <UART_SetConfig+0x118>)
 800621e:	fba2 2303 	umull	r2, r3, r2, r3
 8006222:	095b      	lsrs	r3, r3, #5
 8006224:	f003 020f 	and.w	r2, r3, #15
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	440a      	add	r2, r1
 800622e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006230:	bf00      	nop
 8006232:	3710      	adds	r7, #16
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}
 8006238:	40013800 	.word	0x40013800
 800623c:	51eb851f 	.word	0x51eb851f

08006240 <_ZN10ControllerC1Ev>:
    float angles[3];
    float rates[3];
    float bias[3];
};

Controller::Controller() {}
 8006240:	b580      	push	{r7, lr}
 8006242:	b082      	sub	sp, #8
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a59      	ldr	r2, [pc, #356]	; (80063b0 <_ZN10ControllerC1Ev+0x170>)
 800624c:	651a      	str	r2, [r3, #80]	; 0x50
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4a58      	ldr	r2, [pc, #352]	; (80063b4 <_ZN10ControllerC1Ev+0x174>)
 8006252:	655a      	str	r2, [r3, #84]	; 0x54
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	22c8      	movs	r2, #200	; 0xc8
 8006258:	659a      	str	r2, [r3, #88]	; 0x58
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800625e:	4618      	mov	r0, r3
 8006260:	f7fa fcfe 	bl	8000c60 <__aeabi_i2f>
 8006264:	4603      	mov	r3, r0
 8006266:	4619      	mov	r1, r3
 8006268:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800626c:	f7fa fe00 	bl	8000e70 <__aeabi_fdiv>
 8006270:	4603      	mov	r3, r0
 8006272:	461a      	mov	r2, r3
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	65da      	str	r2, [r3, #92]	; 0x5c
 8006278:	6879      	ldr	r1, [r7, #4]
 800627a:	a347      	add	r3, pc, #284	; (adr r3, 8006398 <_ZN10ControllerC1Ev+0x158>)
 800627c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006280:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006288:	4618      	mov	r0, r3
 800628a:	f7fa fce9 	bl	8000c60 <__aeabi_i2f>
 800628e:	4603      	mov	r3, r0
 8006290:	4618      	mov	r0, r3
 8006292:	f7fa f8c1 	bl	8000418 <__aeabi_f2d>
 8006296:	4602      	mov	r2, r0
 8006298:	460b      	mov	r3, r1
 800629a:	f04f 0000 	mov.w	r0, #0
 800629e:	f04f 0100 	mov.w	r1, #0
 80062a2:	f7fa fa3b 	bl	800071c <__aeabi_ddiv>
 80062a6:	4602      	mov	r2, r0
 80062a8:	460b      	mov	r3, r1
 80062aa:	6879      	ldr	r1, [r7, #4]
 80062ac:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062b4:	4618      	mov	r0, r3
 80062b6:	f7fa fcd3 	bl	8000c60 <__aeabi_i2f>
 80062ba:	4603      	mov	r3, r0
 80062bc:	4618      	mov	r0, r3
 80062be:	f7fa f8ab 	bl	8000418 <__aeabi_f2d>
 80062c2:	a337      	add	r3, pc, #220	; (adr r3, 80063a0 <_ZN10ControllerC1Ev+0x160>)
 80062c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c8:	f7fa f8fe 	bl	80004c8 <__aeabi_dmul>
 80062cc:	4602      	mov	r2, r0
 80062ce:	460b      	mov	r3, r1
 80062d0:	6879      	ldr	r1, [r7, #4]
 80062d2:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
 80062d6:	6879      	ldr	r1, [r7, #4]
 80062d8:	a32f      	add	r3, pc, #188	; (adr r3, 8006398 <_ZN10ControllerC1Ev+0x158>)
 80062da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062de:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062e6:	4618      	mov	r0, r3
 80062e8:	f7fa fcba 	bl	8000c60 <__aeabi_i2f>
 80062ec:	4603      	mov	r3, r0
 80062ee:	4618      	mov	r0, r3
 80062f0:	f7fa f892 	bl	8000418 <__aeabi_f2d>
 80062f4:	4602      	mov	r2, r0
 80062f6:	460b      	mov	r3, r1
 80062f8:	f04f 0000 	mov.w	r0, #0
 80062fc:	f04f 0100 	mov.w	r1, #0
 8006300:	f7fa fa0c 	bl	800071c <__aeabi_ddiv>
 8006304:	4602      	mov	r2, r0
 8006306:	460b      	mov	r3, r1
 8006308:	6879      	ldr	r1, [r7, #4]
 800630a:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006312:	4618      	mov	r0, r3
 8006314:	f7fa fca4 	bl	8000c60 <__aeabi_i2f>
 8006318:	4603      	mov	r3, r0
 800631a:	4618      	mov	r0, r3
 800631c:	f7fa f87c 	bl	8000418 <__aeabi_f2d>
 8006320:	a31f      	add	r3, pc, #124	; (adr r3, 80063a0 <_ZN10ControllerC1Ev+0x160>)
 8006322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006326:	f7fa f8cf 	bl	80004c8 <__aeabi_dmul>
 800632a:	4602      	mov	r2, r0
 800632c:	460b      	mov	r3, r1
 800632e:	6879      	ldr	r1, [r7, #4]
 8006330:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
 8006334:	6879      	ldr	r1, [r7, #4]
 8006336:	f04f 0200 	mov.w	r2, #0
 800633a:	4b1f      	ldr	r3, [pc, #124]	; (80063b8 <_ZN10ControllerC1Ev+0x178>)
 800633c:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006344:	4618      	mov	r0, r3
 8006346:	f7fa f855 	bl	80003f4 <__aeabi_i2d>
 800634a:	a317      	add	r3, pc, #92	; (adr r3, 80063a8 <_ZN10ControllerC1Ev+0x168>)
 800634c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006350:	f7fa f8ba 	bl	80004c8 <__aeabi_dmul>
 8006354:	4602      	mov	r2, r0
 8006356:	460b      	mov	r3, r1
 8006358:	4610      	mov	r0, r2
 800635a:	4619      	mov	r1, r3
 800635c:	f7fa fb76 	bl	8000a4c <__aeabi_d2f>
 8006360:	4602      	mov	r2, r0
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	339c      	adds	r3, #156	; 0x9c
 800636c:	4618      	mov	r0, r3
 800636e:	f001 fa31 	bl	80077d4 <_ZN3PIDC1Ev>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	33dc      	adds	r3, #220	; 0xdc
 8006376:	4618      	mov	r0, r3
 8006378:	f001 fa2c 	bl	80077d4 <_ZN3PIDC1Ev>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006382:	4618      	mov	r0, r3
 8006384:	f001 fa26 	bl	80077d4 <_ZN3PIDC1Ev>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4618      	mov	r0, r3
 800638c:	3708      	adds	r7, #8
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
 8006392:	bf00      	nop
 8006394:	f3af 8000 	nop.w
 8006398:	9999999a 	.word	0x9999999a
 800639c:	3fd99999 	.word	0x3fd99999
 80063a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80063a4:	3f50624d 	.word	0x3f50624d
 80063a8:	47ae147b 	.word	0x47ae147b
 80063ac:	3f947ae1 	.word	0x3f947ae1
 80063b0:	44c1c000 	.word	0x44c1c000
 80063b4:	42654ca3 	.word	0x42654ca3
 80063b8:	40100000 	.word	0x40100000

080063bc <_ZN10Controller3RunE5stateS0_i>:

std::vector<double> Controller::Run (struct state state, struct state state_des, int thr) {
 80063bc:	b082      	sub	sp, #8
 80063be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063c2:	b0a1      	sub	sp, #132	; 0x84
 80063c4:	af08      	add	r7, sp, #32
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	60b9      	str	r1, [r7, #8]
 80063ca:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80063ce:	e881 000c 	stmia.w	r1, {r2, r3}
        //printf("\ngyroX: %.2f",gyro[0]);
        //printf("\naccX: %.2f",acc[0]);
        
        roll  = state.angles[0];
 80063d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80063d6:	4618      	mov	r0, r3
 80063d8:	f7fa f81e 	bl	8000418 <__aeabi_f2d>
 80063dc:	4602      	mov	r2, r0
 80063de:	460b      	mov	r3, r1
 80063e0:	68b9      	ldr	r1, [r7, #8]
 80063e2:	e9c1 2304 	strd	r2, r3, [r1, #16]
        pitch = state.angles[1];
 80063e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80063ea:	4618      	mov	r0, r3
 80063ec:	f7fa f814 	bl	8000418 <__aeabi_f2d>
 80063f0:	4602      	mov	r2, r0
 80063f2:	460b      	mov	r3, r1
 80063f4:	68b9      	ldr	r1, [r7, #8]
 80063f6:	e9c1 2306 	strd	r2, r3, [r1, #24]
        yaw    = state.angles[2];
 80063fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80063fe:	4618      	mov	r0, r3
 8006400:	f7fa f80a 	bl	8000418 <__aeabi_f2d>
 8006404:	4602      	mov	r2, r0
 8006406:	460b      	mov	r3, r1
 8006408:	68b9      	ldr	r1, [r7, #8]
 800640a:	e9c1 2308 	strd	r2, r3, [r1, #32]
        //printf("\nroll: %.2f",roll);
        //printf("\npitch: %.2f",pitch);

        roll_rate  = state.rates[0];
 800640e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006412:	4618      	mov	r0, r3
 8006414:	f7fa f800 	bl	8000418 <__aeabi_f2d>
 8006418:	4602      	mov	r2, r0
 800641a:	460b      	mov	r3, r1
 800641c:	68b9      	ldr	r1, [r7, #8]
 800641e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
        pitch_rate = state.rates[1];
 8006422:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006426:	4618      	mov	r0, r3
 8006428:	f7f9 fff6 	bl	8000418 <__aeabi_f2d>
 800642c:	4602      	mov	r2, r0
 800642e:	460b      	mov	r3, r1
 8006430:	68b9      	ldr	r1, [r7, #8]
 8006432:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
        yaw_rate   = state.rates[2];
 8006436:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800643a:	4618      	mov	r0, r3
 800643c:	f7f9 ffec 	bl	8000418 <__aeabi_f2d>
 8006440:	4602      	mov	r2, r0
 8006442:	460b      	mov	r3, r1
 8006444:	68b9      	ldr	r1, [r7, #8]
 8006446:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

        roll_bias = state.bias[0];
 800644a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	605a      	str	r2, [r3, #4]
        pitch_bias = state.bias[1];
 8006452:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	601a      	str	r2, [r3, #0]
        yaw_bias = state.bias[2];
 800645a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	609a      	str	r2, [r3, #8]
        
        float roll_des     = state_des.angles[0];
 8006462:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006466:	65fb      	str	r3, [r7, #92]	; 0x5c
        float pitch_des 	 = state_des.angles[1];
 8006468:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800646c:	65bb      	str	r3, [r7, #88]	; 0x58
        float yaw_rate_des = state_des.rates[2];
 800646e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006472:	657b      	str	r3, [r7, #84]	; 0x54

    float roll_rate_des = pid_roll.P_Angle(roll_des,roll, Kp_angle);
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	f103 069c 	add.w	r6, r3, #156	; 0x9c
 800647a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800647c:	f7f9 ffcc 	bl	8000418 <__aeabi_f2d>
 8006480:	4680      	mov	r8, r0
 8006482:	4689      	mov	r9, r1
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006490:	4618      	mov	r0, r3
 8006492:	f7f9 ffc1 	bl	8000418 <__aeabi_f2d>
 8006496:	4602      	mov	r2, r0
 8006498:	460b      	mov	r3, r1
 800649a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800649e:	e9cd 4500 	strd	r4, r5, [sp]
 80064a2:	4642      	mov	r2, r8
 80064a4:	464b      	mov	r3, r9
 80064a6:	4630      	mov	r0, r6
 80064a8:	f001 f9ba 	bl	8007820 <_ZN3PID7P_AngleEddd>
 80064ac:	4602      	mov	r2, r0
 80064ae:	460b      	mov	r3, r1
 80064b0:	4610      	mov	r0, r2
 80064b2:	4619      	mov	r1, r3
 80064b4:	f7fa faca 	bl	8000a4c <__aeabi_d2f>
 80064b8:	4603      	mov	r3, r0
 80064ba:	653b      	str	r3, [r7, #80]	; 0x50
    float pitch_rate_des = pid_pitch.P_Angle(pitch_des,pitch, Kp_angle);
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	f103 06dc 	add.w	r6, r3, #220	; 0xdc
 80064c2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80064c4:	f7f9 ffa8 	bl	8000418 <__aeabi_f2d>
 80064c8:	4680      	mov	r8, r0
 80064ca:	4689      	mov	r9, r1
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80064d8:	4618      	mov	r0, r3
 80064da:	f7f9 ff9d 	bl	8000418 <__aeabi_f2d>
 80064de:	4602      	mov	r2, r0
 80064e0:	460b      	mov	r3, r1
 80064e2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80064e6:	e9cd 4500 	strd	r4, r5, [sp]
 80064ea:	4642      	mov	r2, r8
 80064ec:	464b      	mov	r3, r9
 80064ee:	4630      	mov	r0, r6
 80064f0:	f001 f996 	bl	8007820 <_ZN3PID7P_AngleEddd>
 80064f4:	4602      	mov	r2, r0
 80064f6:	460b      	mov	r3, r1
 80064f8:	4610      	mov	r0, r2
 80064fa:	4619      	mov	r1, r3
 80064fc:	f7fa faa6 	bl	8000a4c <__aeabi_d2f>
 8006500:	4603      	mov	r3, r0
 8006502:	64fb      	str	r3, [r7, #76]	; 0x4c
/*
    //printf("\nroll_rate_des: %.2f",roll_rate_des);
    //printf("\npitch_rate_des: %.2f",pitch_rate_des);
    //printf("\nyaw_rate_des: %.2f",yaw_rate_des);
*/  //printf("\nroll_rate_des: %.2f",roll_rate_des);
    pd_roll  = pid_roll.PD_Rate(roll_rate_des,roll_rate, Kp_roll, Ki_roll, Kd_roll);
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	339c      	adds	r3, #156	; 0x9c
 8006508:	607b      	str	r3, [r7, #4]
 800650a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800650c:	f7f9 ff84 	bl	8000418 <__aeabi_f2d>
 8006510:	4682      	mov	sl, r0
 8006512:	468b      	mov	fp, r1
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800651a:	68b9      	ldr	r1, [r7, #8]
 800651c:	e9d1 011e 	ldrd	r0, r1, [r1, #120]	; 0x78
 8006520:	68bc      	ldr	r4, [r7, #8]
 8006522:	f104 0580 	add.w	r5, r4, #128	; 0x80
 8006526:	e9d5 4500 	ldrd	r4, r5, [r5]
 800652a:	68be      	ldr	r6, [r7, #8]
 800652c:	e9d6 8922 	ldrd	r8, r9, [r6, #136]	; 0x88
 8006530:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8006534:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8006538:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800653c:	e9cd 2300 	strd	r2, r3, [sp]
 8006540:	4652      	mov	r2, sl
 8006542:	465b      	mov	r3, fp
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f001 f98c 	bl	8007862 <_ZN3PID7PD_RateEddddd>
 800654a:	4602      	mov	r2, r0
 800654c:	460b      	mov	r3, r1
 800654e:	68b9      	ldr	r1, [r7, #8]
 8006550:	e9c1 235c 	strd	r2, r3, [r1, #368]	; 0x170
    //printf("\npitch_rate_des: %.2f",pitch_rate_des);
    pd_pitch = pid_pitch.PD_Rate(pitch_rate_des,pitch_rate,Kp_pitch,Ki_pitch,Kd_pitch);
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	33dc      	adds	r3, #220	; 0xdc
 8006558:	607b      	str	r3, [r7, #4]
 800655a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800655c:	f7f9 ff5c 	bl	8000418 <__aeabi_f2d>
 8006560:	4682      	mov	sl, r0
 8006562:	468b      	mov	fp, r1
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800656a:	68b9      	ldr	r1, [r7, #8]
 800656c:	e9d1 0118 	ldrd	r0, r1, [r1, #96]	; 0x60
 8006570:	68bc      	ldr	r4, [r7, #8]
 8006572:	f104 0568 	add.w	r5, r4, #104	; 0x68
 8006576:	e9d5 4500 	ldrd	r4, r5, [r5]
 800657a:	68be      	ldr	r6, [r7, #8]
 800657c:	e9d6 891c 	ldrd	r8, r9, [r6, #112]	; 0x70
 8006580:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8006584:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8006588:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800658c:	e9cd 2300 	strd	r2, r3, [sp]
 8006590:	4652      	mov	r2, sl
 8006592:	465b      	mov	r3, fp
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f001 f964 	bl	8007862 <_ZN3PID7PD_RateEddddd>
 800659a:	4602      	mov	r2, r0
 800659c:	460b      	mov	r3, r1
 800659e:	68b9      	ldr	r1, [r7, #8]
 80065a0:	e9c1 235e 	strd	r2, r3, [r1, #376]	; 0x178
    p_yaw    = pid_yaw.P_Rate_Yaw(yaw_rate_des,yaw_rate,Kp_yaw);
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	f503 768e 	add.w	r6, r3, #284	; 0x11c
 80065aa:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80065ac:	f7f9 ff34 	bl	8000418 <__aeabi_f2d>
 80065b0:	4604      	mov	r4, r0
 80065b2:	460d      	mov	r5, r1
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80065ba:	68b9      	ldr	r1, [r7, #8]
 80065bc:	e9d1 0124 	ldrd	r0, r1, [r1, #144]	; 0x90
 80065c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065c4:	e9cd 2300 	strd	r2, r3, [sp]
 80065c8:	4622      	mov	r2, r4
 80065ca:	462b      	mov	r3, r5
 80065cc:	4630      	mov	r0, r6
 80065ce:	f001 fa23 	bl	8007a18 <_ZN3PID10P_Rate_YawEddd>
 80065d2:	4602      	mov	r2, r0
 80065d4:	460b      	mov	r3, r1
 80065d6:	68b9      	ldr	r1, [r7, #8]
 80065d8:	e9c1 2360 	strd	r2, r3, [r1, #384]	; 0x180
    //printf("\npd_pitch: %.2f",pd_pitch);
    //printf("\np_yaw: %.2f",p_yaw);

    ////printf("\nst: %.3f",st);

    int pwm1 = thr + pd_pitch - pd_roll  - p_yaw;
 80065dc:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80065e0:	f7f9 ff08 	bl	80003f4 <__aeabi_i2d>
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 80065ea:	f7f9 fdb7 	bl	800015c <__adddf3>
 80065ee:	4602      	mov	r2, r0
 80065f0:	460b      	mov	r3, r1
 80065f2:	4610      	mov	r0, r2
 80065f4:	4619      	mov	r1, r3
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	e9d3 235c 	ldrd	r2, r3, [r3, #368]	; 0x170
 80065fc:	f7f9 fdac 	bl	8000158 <__aeabi_dsub>
 8006600:	4602      	mov	r2, r0
 8006602:	460b      	mov	r3, r1
 8006604:	4610      	mov	r0, r2
 8006606:	4619      	mov	r1, r3
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	e9d3 2360 	ldrd	r2, r3, [r3, #384]	; 0x180
 800660e:	f7f9 fda3 	bl	8000158 <__aeabi_dsub>
 8006612:	4602      	mov	r2, r0
 8006614:	460b      	mov	r3, r1
 8006616:	4610      	mov	r0, r2
 8006618:	4619      	mov	r1, r3
 800661a:	f7fa f9ef 	bl	80009fc <__aeabi_d2iz>
 800661e:	4603      	mov	r3, r0
 8006620:	64bb      	str	r3, [r7, #72]	; 0x48
    int pwm2 = thr - pd_pitch + pd_roll  - p_yaw  + 20;
 8006622:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8006626:	f7f9 fee5 	bl	80003f4 <__aeabi_i2d>
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 8006630:	f7f9 fd92 	bl	8000158 <__aeabi_dsub>
 8006634:	4602      	mov	r2, r0
 8006636:	460b      	mov	r3, r1
 8006638:	4610      	mov	r0, r2
 800663a:	4619      	mov	r1, r3
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	e9d3 235c 	ldrd	r2, r3, [r3, #368]	; 0x170
 8006642:	f7f9 fd8b 	bl	800015c <__adddf3>
 8006646:	4602      	mov	r2, r0
 8006648:	460b      	mov	r3, r1
 800664a:	4610      	mov	r0, r2
 800664c:	4619      	mov	r1, r3
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	e9d3 2360 	ldrd	r2, r3, [r3, #384]	; 0x180
 8006654:	f7f9 fd80 	bl	8000158 <__aeabi_dsub>
 8006658:	4602      	mov	r2, r0
 800665a:	460b      	mov	r3, r1
 800665c:	4610      	mov	r0, r2
 800665e:	4619      	mov	r1, r3
 8006660:	f04f 0200 	mov.w	r2, #0
 8006664:	4ba5      	ldr	r3, [pc, #660]	; (80068fc <_ZN10Controller3RunE5stateS0_i+0x540>)
 8006666:	f7f9 fd79 	bl	800015c <__adddf3>
 800666a:	4602      	mov	r2, r0
 800666c:	460b      	mov	r3, r1
 800666e:	4610      	mov	r0, r2
 8006670:	4619      	mov	r1, r3
 8006672:	f7fa f9c3 	bl	80009fc <__aeabi_d2iz>
 8006676:	4603      	mov	r3, r0
 8006678:	647b      	str	r3, [r7, #68]	; 0x44
    int pwm3 = thr + pd_pitch + pd_roll  + p_yaw + 20;
 800667a:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800667e:	f7f9 feb9 	bl	80003f4 <__aeabi_i2d>
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 8006688:	f7f9 fd68 	bl	800015c <__adddf3>
 800668c:	4602      	mov	r2, r0
 800668e:	460b      	mov	r3, r1
 8006690:	4610      	mov	r0, r2
 8006692:	4619      	mov	r1, r3
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	e9d3 235c 	ldrd	r2, r3, [r3, #368]	; 0x170
 800669a:	f7f9 fd5f 	bl	800015c <__adddf3>
 800669e:	4602      	mov	r2, r0
 80066a0:	460b      	mov	r3, r1
 80066a2:	4610      	mov	r0, r2
 80066a4:	4619      	mov	r1, r3
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	e9d3 2360 	ldrd	r2, r3, [r3, #384]	; 0x180
 80066ac:	f7f9 fd56 	bl	800015c <__adddf3>
 80066b0:	4602      	mov	r2, r0
 80066b2:	460b      	mov	r3, r1
 80066b4:	4610      	mov	r0, r2
 80066b6:	4619      	mov	r1, r3
 80066b8:	f04f 0200 	mov.w	r2, #0
 80066bc:	4b8f      	ldr	r3, [pc, #572]	; (80068fc <_ZN10Controller3RunE5stateS0_i+0x540>)
 80066be:	f7f9 fd4d 	bl	800015c <__adddf3>
 80066c2:	4602      	mov	r2, r0
 80066c4:	460b      	mov	r3, r1
 80066c6:	4610      	mov	r0, r2
 80066c8:	4619      	mov	r1, r3
 80066ca:	f7fa f997 	bl	80009fc <__aeabi_d2iz>
 80066ce:	4603      	mov	r3, r0
 80066d0:	643b      	str	r3, [r7, #64]	; 0x40
    int pwm4 = thr - pd_pitch - pd_roll  + p_yaw ;
 80066d2:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80066d6:	f7f9 fe8d 	bl	80003f4 <__aeabi_i2d>
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 80066e0:	f7f9 fd3a 	bl	8000158 <__aeabi_dsub>
 80066e4:	4602      	mov	r2, r0
 80066e6:	460b      	mov	r3, r1
 80066e8:	4610      	mov	r0, r2
 80066ea:	4619      	mov	r1, r3
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	e9d3 235c 	ldrd	r2, r3, [r3, #368]	; 0x170
 80066f2:	f7f9 fd31 	bl	8000158 <__aeabi_dsub>
 80066f6:	4602      	mov	r2, r0
 80066f8:	460b      	mov	r3, r1
 80066fa:	4610      	mov	r0, r2
 80066fc:	4619      	mov	r1, r3
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	e9d3 2360 	ldrd	r2, r3, [r3, #384]	; 0x180
 8006704:	f7f9 fd2a 	bl	800015c <__adddf3>
 8006708:	4602      	mov	r2, r0
 800670a:	460b      	mov	r3, r1
 800670c:	4610      	mov	r0, r2
 800670e:	4619      	mov	r1, r3
 8006710:	f7fa f974 	bl	80009fc <__aeabi_d2iz>
 8006714:	4603      	mov	r3, r0
 8006716:	63fb      	str	r3, [r7, #60]	; 0x3c


    //Saturate pwm values
    pwm1 = (int)pid_roll.Sat(pwm1,PWM_UPPER,PWM_LOWER,thr);
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 800671e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8006720:	f7f9 fe68 	bl	80003f4 <__aeabi_i2d>
 8006724:	4602      	mov	r2, r0
 8006726:	460b      	mov	r3, r1
 8006728:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800672c:	9102      	str	r1, [sp, #8]
 800672e:	f240 414c 	movw	r1, #1100	; 0x44c
 8006732:	9101      	str	r1, [sp, #4]
 8006734:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006738:	9100      	str	r1, [sp, #0]
 800673a:	4620      	mov	r0, r4
 800673c:	f001 f9ce 	bl	8007adc <_ZN3PID3SatEdiii>
 8006740:	4602      	mov	r2, r0
 8006742:	460b      	mov	r3, r1
 8006744:	4610      	mov	r0, r2
 8006746:	4619      	mov	r1, r3
 8006748:	f7fa f958 	bl	80009fc <__aeabi_d2iz>
 800674c:	4603      	mov	r3, r0
 800674e:	64bb      	str	r3, [r7, #72]	; 0x48
    pwm2 = (int)pid_roll.Sat(pwm2,PWM_UPPER,PWM_LOWER,thr);
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 8006756:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8006758:	f7f9 fe4c 	bl	80003f4 <__aeabi_i2d>
 800675c:	4602      	mov	r2, r0
 800675e:	460b      	mov	r3, r1
 8006760:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8006764:	9102      	str	r1, [sp, #8]
 8006766:	f240 414c 	movw	r1, #1100	; 0x44c
 800676a:	9101      	str	r1, [sp, #4]
 800676c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006770:	9100      	str	r1, [sp, #0]
 8006772:	4620      	mov	r0, r4
 8006774:	f001 f9b2 	bl	8007adc <_ZN3PID3SatEdiii>
 8006778:	4602      	mov	r2, r0
 800677a:	460b      	mov	r3, r1
 800677c:	4610      	mov	r0, r2
 800677e:	4619      	mov	r1, r3
 8006780:	f7fa f93c 	bl	80009fc <__aeabi_d2iz>
 8006784:	4603      	mov	r3, r0
 8006786:	647b      	str	r3, [r7, #68]	; 0x44
    pwm3 = (int)pid_roll.Sat(pwm3,PWM_UPPER,PWM_LOWER,thr);
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 800678e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8006790:	f7f9 fe30 	bl	80003f4 <__aeabi_i2d>
 8006794:	4602      	mov	r2, r0
 8006796:	460b      	mov	r3, r1
 8006798:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800679c:	9102      	str	r1, [sp, #8]
 800679e:	f240 414c 	movw	r1, #1100	; 0x44c
 80067a2:	9101      	str	r1, [sp, #4]
 80067a4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80067a8:	9100      	str	r1, [sp, #0]
 80067aa:	4620      	mov	r0, r4
 80067ac:	f001 f996 	bl	8007adc <_ZN3PID3SatEdiii>
 80067b0:	4602      	mov	r2, r0
 80067b2:	460b      	mov	r3, r1
 80067b4:	4610      	mov	r0, r2
 80067b6:	4619      	mov	r1, r3
 80067b8:	f7fa f920 	bl	80009fc <__aeabi_d2iz>
 80067bc:	4603      	mov	r3, r0
 80067be:	643b      	str	r3, [r7, #64]	; 0x40
    pwm4 = (int)pid_roll.Sat(pwm4,PWM_UPPER,PWM_LOWER,thr);
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 80067c6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80067c8:	f7f9 fe14 	bl	80003f4 <__aeabi_i2d>
 80067cc:	4602      	mov	r2, r0
 80067ce:	460b      	mov	r3, r1
 80067d0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80067d4:	9102      	str	r1, [sp, #8]
 80067d6:	f240 414c 	movw	r1, #1100	; 0x44c
 80067da:	9101      	str	r1, [sp, #4]
 80067dc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80067e0:	9100      	str	r1, [sp, #0]
 80067e2:	4620      	mov	r0, r4
 80067e4:	f001 f97a 	bl	8007adc <_ZN3PID3SatEdiii>
 80067e8:	4602      	mov	r2, r0
 80067ea:	460b      	mov	r3, r1
 80067ec:	4610      	mov	r0, r2
 80067ee:	4619      	mov	r1, r3
 80067f0:	f7fa f904 	bl	80009fc <__aeabi_d2iz>
 80067f4:	4603      	mov	r3, r0
 80067f6:	63fb      	str	r3, [r7, #60]	; 0x3c

    //Convert pwm to motor speed 
    w1 = pid_roll.pwm2mot(pwm1, 1);
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	339c      	adds	r3, #156	; 0x9c
 80067fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067fe:	b291      	uxth	r1, r2
 8006800:	2201      	movs	r2, #1
 8006802:	4618      	mov	r0, r3
 8006804:	f001 fa3a 	bl	8007c7c <_ZN3PID7pwm2motEti>
 8006808:	4602      	mov	r2, r0
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	641a      	str	r2, [r3, #64]	; 0x40
    w2 = pid_roll.pwm2mot(pwm2, 1);
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	339c      	adds	r3, #156	; 0x9c
 8006812:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006814:	b291      	uxth	r1, r2
 8006816:	2201      	movs	r2, #1
 8006818:	4618      	mov	r0, r3
 800681a:	f001 fa2f 	bl	8007c7c <_ZN3PID7pwm2motEti>
 800681e:	4602      	mov	r2, r0
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	645a      	str	r2, [r3, #68]	; 0x44
    w3 = pid_roll.pwm2mot(pwm3,-1);
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	339c      	adds	r3, #156	; 0x9c
 8006828:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800682a:	b291      	uxth	r1, r2
 800682c:	f04f 32ff 	mov.w	r2, #4294967295
 8006830:	4618      	mov	r0, r3
 8006832:	f001 fa23 	bl	8007c7c <_ZN3PID7pwm2motEti>
 8006836:	4602      	mov	r2, r0
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	649a      	str	r2, [r3, #72]	; 0x48
    w4 = pid_roll.pwm2mot(pwm4,-1);
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	339c      	adds	r3, #156	; 0x9c
 8006840:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006842:	b291      	uxth	r1, r2
 8006844:	f04f 32ff 	mov.w	r2, #4294967295
 8006848:	4618      	mov	r0, r3
 800684a:	f001 fa17 	bl	8007c7c <_ZN3PID7pwm2motEti>
 800684e:	4602      	mov	r2, r0
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	64da      	str	r2, [r3, #76]	; 0x4c


    std::vector<double> controller_output = 	{w1,w2,w3,w4};
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006858:	4618      	mov	r0, r3
 800685a:	f7f9 fddd 	bl	8000418 <__aeabi_f2d>
 800685e:	4602      	mov	r2, r0
 8006860:	460b      	mov	r3, r1
 8006862:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800686a:	4618      	mov	r0, r3
 800686c:	f7f9 fdd4 	bl	8000418 <__aeabi_f2d>
 8006870:	4602      	mov	r2, r0
 8006872:	460b      	mov	r3, r1
 8006874:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800687c:	4618      	mov	r0, r3
 800687e:	f7f9 fdcb 	bl	8000418 <__aeabi_f2d>
 8006882:	4602      	mov	r2, r0
 8006884:	460b      	mov	r3, r1
 8006886:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800688e:	4618      	mov	r0, r3
 8006890:	f7f9 fdc2 	bl	8000418 <__aeabi_f2d>
 8006894:	4602      	mov	r2, r0
 8006896:	460b      	mov	r3, r1
 8006898:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800689c:	f107 0318 	add.w	r3, r7, #24
 80068a0:	613b      	str	r3, [r7, #16]
 80068a2:	2304      	movs	r3, #4
 80068a4:	617b      	str	r3, [r7, #20]
 80068a6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80068aa:	4618      	mov	r0, r3
 80068ac:	f7fb fc60 	bl	8002170 <_ZNSaIdEC1Ev>
 80068b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80068b4:	f107 0210 	add.w	r2, r7, #16
 80068b8:	ca06      	ldmia	r2, {r1, r2}
 80068ba:	68f8      	ldr	r0, [r7, #12]
 80068bc:	f000 f839 	bl	8006932 <_ZNSt6vectorIdSaIdEEC1ESt16initializer_listIdERKS0_>
 80068c0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80068c4:	4618      	mov	r0, r3
 80068c6:	f7fb fbfe 	bl	80020c6 <_ZNSaIdED1Ev>
    controller_output_pwm[0] = pwm1;
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068ce:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
    controller_output_pwm[1] = pwm2;
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068d6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    controller_output_pwm[2] = pwm3;
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80068de:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
    controller_output_pwm[3] = pwm4;
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80068e6:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168

    return controller_output;
 80068ea:	bf00      	nop
}
 80068ec:	68f8      	ldr	r0, [r7, #12]
 80068ee:	3764      	adds	r7, #100	; 0x64
 80068f0:	46bd      	mov	sp, r7
 80068f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068f6:	b002      	add	sp, #8
 80068f8:	4770      	bx	lr
 80068fa:	bf00      	nop
 80068fc:	40340000 	.word	0x40340000

08006900 <_ZN10ControllerD1Ev>:

Controller::~Controller() {}
 8006900:	b580      	push	{r7, lr}
 8006902:	b082      	sub	sp, #8
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800690e:	4618      	mov	r0, r3
 8006910:	f001 f9fc 	bl	8007d0c <_ZN3PIDD1Ev>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	33dc      	adds	r3, #220	; 0xdc
 8006918:	4618      	mov	r0, r3
 800691a:	f001 f9f7 	bl	8007d0c <_ZN3PIDD1Ev>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	339c      	adds	r3, #156	; 0x9c
 8006922:	4618      	mov	r0, r3
 8006924:	f001 f9f2 	bl	8007d0c <_ZN3PIDD1Ev>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	4618      	mov	r0, r3
 800692c:	3708      	adds	r7, #8
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}

08006932 <_ZNSt6vectorIdSaIdEEC1ESt16initializer_listIdERKS0_>:
      vector(initializer_list<value_type> __l,
 8006932:	b5b0      	push	{r4, r5, r7, lr}
 8006934:	b086      	sub	sp, #24
 8006936:	af00      	add	r7, sp, #0
 8006938:	60f8      	str	r0, [r7, #12]
 800693a:	1d38      	adds	r0, r7, #4
 800693c:	e880 0006 	stmia.w	r0, {r1, r2}
 8006940:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6839      	ldr	r1, [r7, #0]
 8006946:	4618      	mov	r0, r3
 8006948:	f7fb fd4f 	bl	80023ea <_ZNSt12_Vector_baseIdSaIdEEC1ERKS0_>
	_M_range_initialize(__l.begin(), __l.end(),
 800694c:	1d3b      	adds	r3, r7, #4
 800694e:	4618      	mov	r0, r3
 8006950:	f000 f810 	bl	8006974 <_ZNKSt16initializer_listIdE5beginEv>
 8006954:	4604      	mov	r4, r0
 8006956:	1d3b      	adds	r3, r7, #4
 8006958:	4618      	mov	r0, r3
 800695a:	f000 f816 	bl	800698a <_ZNKSt16initializer_listIdE3endEv>
 800695e:	4602      	mov	r2, r0
 8006960:	462b      	mov	r3, r5
 8006962:	4621      	mov	r1, r4
 8006964:	68f8      	ldr	r0, [r7, #12]
 8006966:	f000 f822 	bl	80069ae <_ZNSt6vectorIdSaIdEE19_M_range_initializeIPKdEEvT_S5_St20forward_iterator_tag>
      }
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	4618      	mov	r0, r3
 800696e:	3718      	adds	r7, #24
 8006970:	46bd      	mov	sp, r7
 8006972:	bdb0      	pop	{r4, r5, r7, pc}

08006974 <_ZNKSt16initializer_listIdE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4618      	mov	r0, r3
 8006982:	370c      	adds	r7, #12
 8006984:	46bd      	mov	sp, r7
 8006986:	bc80      	pop	{r7}
 8006988:	4770      	bx	lr

0800698a <_ZNKSt16initializer_listIdE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 800698a:	b590      	push	{r4, r7, lr}
 800698c:	b083      	sub	sp, #12
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f7ff ffee 	bl	8006974 <_ZNKSt16initializer_listIdE5beginEv>
 8006998:	4604      	mov	r4, r0
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 f840 	bl	8006a20 <_ZNKSt16initializer_listIdE4sizeEv>
 80069a0:	4603      	mov	r3, r0
 80069a2:	00db      	lsls	r3, r3, #3
 80069a4:	4423      	add	r3, r4
 80069a6:	4618      	mov	r0, r3
 80069a8:	370c      	adds	r7, #12
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd90      	pop	{r4, r7, pc}

080069ae <_ZNSt6vectorIdSaIdEE19_M_range_initializeIPKdEEvT_S5_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 80069ae:	b590      	push	{r4, r7, lr}
 80069b0:	b087      	sub	sp, #28
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	60f8      	str	r0, [r7, #12]
 80069b6:	60b9      	str	r1, [r7, #8]
 80069b8:	607a      	str	r2, [r7, #4]
 80069ba:	703b      	strb	r3, [r7, #0]
	  const size_type __n = std::distance(__first, __last);
 80069bc:	6879      	ldr	r1, [r7, #4]
 80069be:	68b8      	ldr	r0, [r7, #8]
 80069c0:	f000 f839 	bl	8006a36 <_ZSt8distanceIPKdENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 80069c4:	4603      	mov	r3, r0
 80069c6:	617b      	str	r3, [r7, #20]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80069c8:	68fc      	ldr	r4, [r7, #12]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	4618      	mov	r0, r3
 80069ce:	f7fb fc0b 	bl	80021e8 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 80069d2:	4603      	mov	r3, r0
 80069d4:	4619      	mov	r1, r3
 80069d6:	6978      	ldr	r0, [r7, #20]
 80069d8:	f000 f842 	bl	8006a60 <_ZNSt6vectorIdSaIdEE17_S_check_init_lenEjRKS0_>
 80069dc:	4603      	mov	r3, r0
 80069de:	4619      	mov	r1, r3
 80069e0:	4620      	mov	r0, r4
 80069e2:	f000 f865 	bl	8006ab0 <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEj>
 80069e6:	4602      	mov	r2, r0
	  this->_M_impl._M_start
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	00db      	lsls	r3, r3, #3
 80069f4:	441a      	add	r2, r3
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	609a      	str	r2, [r3, #8]
	    std::__uninitialized_copy_a(__first, __last,
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	4618      	mov	r0, r3
 8006a02:	f7fb fbf1 	bl	80021e8 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8006a06:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 8006a08:	4622      	mov	r2, r4
 8006a0a:	6879      	ldr	r1, [r7, #4]
 8006a0c:	68b8      	ldr	r0, [r7, #8]
 8006a0e:	f000 f863 	bl	8006ad8 <_ZSt22__uninitialized_copy_aIPKdPddET0_T_S4_S3_RSaIT1_E>
 8006a12:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	605a      	str	r2, [r3, #4]
	}
 8006a18:	bf00      	nop
 8006a1a:	371c      	adds	r7, #28
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd90      	pop	{r4, r7, pc}

08006a20 <_ZNKSt16initializer_listIdE4sizeEv>:
      size() const noexcept { return _M_len; }
 8006a20:	b480      	push	{r7}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	370c      	adds	r7, #12
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bc80      	pop	{r7}
 8006a34:	4770      	bx	lr

08006a36 <_ZSt8distanceIPKdENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8006a36:	b5b0      	push	{r4, r5, r7, lr}
 8006a38:	b084      	sub	sp, #16
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
 8006a3e:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8006a40:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8006a42:	1d3b      	adds	r3, r7, #4
 8006a44:	4618      	mov	r0, r3
 8006a46:	f000 f858 	bl	8006afa <_ZSt19__iterator_categoryIPKdENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 8006a4a:	462a      	mov	r2, r5
 8006a4c:	6839      	ldr	r1, [r7, #0]
 8006a4e:	4620      	mov	r0, r4
 8006a50:	f000 f85c 	bl	8006b0c <_ZSt10__distanceIPKdENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 8006a54:	4603      	mov	r3, r0
    }
 8006a56:	4618      	mov	r0, r3
 8006a58:	3710      	adds	r7, #16
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006a60 <_ZNSt6vectorIdSaIdEE17_S_check_init_lenEjRKS0_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 8006a60:	b590      	push	{r4, r7, lr}
 8006a62:	b085      	sub	sp, #20
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8006a6a:	f107 030c 	add.w	r3, r7, #12
 8006a6e:	6839      	ldr	r1, [r7, #0]
 8006a70:	4618      	mov	r0, r3
 8006a72:	f7fb fcac 	bl	80023ce <_ZNSaIdEC1ERKS_>
 8006a76:	f107 030c 	add.w	r3, r7, #12
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f000 f855 	bl	8006b2a <_ZNSt6vectorIdSaIdEE11_S_max_sizeERKS0_>
 8006a80:	4602      	mov	r2, r0
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4293      	cmp	r3, r2
 8006a86:	bf8c      	ite	hi
 8006a88:	2301      	movhi	r3, #1
 8006a8a:	2300      	movls	r3, #0
 8006a8c:	b2dc      	uxtb	r4, r3
 8006a8e:	f107 030c 	add.w	r3, r7, #12
 8006a92:	4618      	mov	r0, r3
 8006a94:	f7fb fb17 	bl	80020c6 <_ZNSaIdED1Ev>
 8006a98:	2c00      	cmp	r4, #0
 8006a9a:	d002      	beq.n	8006aa2 <_ZNSt6vectorIdSaIdEE17_S_check_init_lenEjRKS0_+0x42>
	  __throw_length_error(
 8006a9c:	4803      	ldr	r0, [pc, #12]	; (8006aac <_ZNSt6vectorIdSaIdEE17_S_check_init_lenEjRKS0_+0x4c>)
 8006a9e:	f001 f955 	bl	8007d4c <_ZSt20__throw_length_errorPKc>
	return __n;
 8006aa2:	687b      	ldr	r3, [r7, #4]
      }
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3714      	adds	r7, #20
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd90      	pop	{r4, r7, pc}
 8006aac:	08008790 	.word	0x08008790

08006ab0 <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d006      	beq.n	8006ace <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEj+0x1e>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6839      	ldr	r1, [r7, #0]
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f000 f84a 	bl	8006b5e <_ZNSt16allocator_traitsISaIdEE8allocateERS0_j>
 8006aca:	4603      	mov	r3, r0
 8006acc:	e000      	b.n	8006ad0 <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEj+0x20>
 8006ace:	2300      	movs	r3, #0
      }
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3708      	adds	r7, #8
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <_ZSt22__uninitialized_copy_aIPKdPddET0_T_S4_S3_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	607a      	str	r2, [r7, #4]
 8006ae4:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	68b9      	ldr	r1, [r7, #8]
 8006aea:	68f8      	ldr	r0, [r7, #12]
 8006aec:	f000 f846 	bl	8006b7c <_ZSt18uninitialized_copyIPKdPdET0_T_S4_S3_>
 8006af0:	4603      	mov	r3, r0
 8006af2:	4618      	mov	r0, r3
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}

08006afa <_ZSt19__iterator_categoryIPKdENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8006afa:	b480      	push	{r7}
 8006afc:	b083      	sub	sp, #12
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8006b02:	4618      	mov	r0, r3
 8006b04:	370c      	adds	r7, #12
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bc80      	pop	{r7}
 8006b0a:	4770      	bx	lr

08006b0c <_ZSt10__distanceIPKdENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8006b0c:	b480      	push	{r7}
 8006b0e:	b085      	sub	sp, #20
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8006b18:	68ba      	ldr	r2, [r7, #8]
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	10db      	asrs	r3, r3, #3
    }
 8006b20:	4618      	mov	r0, r3
 8006b22:	3714      	adds	r7, #20
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bc80      	pop	{r7}
 8006b28:	4770      	bx	lr

08006b2a <_ZNSt6vectorIdSaIdEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b084      	sub	sp, #16
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8006b32:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8006b36:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 f831 	bl	8006ba0 <_ZNSt16allocator_traitsISaIdEE8max_sizeERKS0_>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8006b42:	f107 0208 	add.w	r2, r7, #8
 8006b46:	f107 030c 	add.w	r3, r7, #12
 8006b4a:	4611      	mov	r1, r2
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f000 f833 	bl	8006bb8 <_ZSt3minIjERKT_S2_S2_>
 8006b52:	4603      	mov	r3, r0
 8006b54:	681b      	ldr	r3, [r3, #0]
      }
 8006b56:	4618      	mov	r0, r3
 8006b58:	3710      	adds	r7, #16
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}

08006b5e <_ZNSt16allocator_traitsISaIdEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8006b5e:	b580      	push	{r7, lr}
 8006b60:	b082      	sub	sp, #8
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
 8006b66:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8006b68:	2200      	movs	r2, #0
 8006b6a:	6839      	ldr	r1, [r7, #0]
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 f836 	bl	8006bde <_ZN9__gnu_cxx13new_allocatorIdE8allocateEjPKv>
 8006b72:	4603      	mov	r3, r0
 8006b74:	4618      	mov	r0, r3
 8006b76:	3708      	adds	r7, #8
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <_ZSt18uninitialized_copyIPKdPdET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b086      	sub	sp, #24
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	68b9      	ldr	r1, [r7, #8]
 8006b90:	68f8      	ldr	r0, [r7, #12]
 8006b92:	f000 f842 	bl	8006c1a <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKdPdEET0_T_S6_S5_>
 8006b96:	4603      	mov	r3, r0
    }
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3718      	adds	r7, #24
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <_ZNSt16allocator_traitsISaIdEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a) noexcept
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b082      	sub	sp, #8
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 f846 	bl	8006c3a <_ZNK9__gnu_cxx13new_allocatorIdE8max_sizeEv>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3708      	adds	r7, #8
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <_ZSt3minIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d201      	bcs.n	8006bd2 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	e000      	b.n	8006bd4 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8006bd2:	687b      	ldr	r3, [r7, #4]
    }
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	370c      	adds	r7, #12
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bc80      	pop	{r7}
 8006bdc:	4770      	bx	lr

08006bde <_ZN9__gnu_cxx13new_allocatorIdE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8006bde:	b580      	push	{r7, lr}
 8006be0:	b084      	sub	sp, #16
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	60f8      	str	r0, [r7, #12]
 8006be6:	60b9      	str	r1, [r7, #8]
 8006be8:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8006bea:	68f8      	ldr	r0, [r7, #12]
 8006bec:	f000 f825 	bl	8006c3a <_ZNK9__gnu_cxx13new_allocatorIdE8max_sizeEv>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	bf8c      	ite	hi
 8006bf8:	2301      	movhi	r3, #1
 8006bfa:	2300      	movls	r3, #0
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d001      	beq.n	8006c06 <_ZN9__gnu_cxx13new_allocatorIdE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8006c02:	f001 f8a0 	bl	8007d46 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	00db      	lsls	r3, r3, #3
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f001 f88a 	bl	8007d24 <_Znwj>
 8006c10:	4603      	mov	r3, r0
      }
 8006c12:	4618      	mov	r0, r3
 8006c14:	3710      	adds	r7, #16
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}

08006c1a <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKdPdEET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8006c1a:	b580      	push	{r7, lr}
 8006c1c:	b084      	sub	sp, #16
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	60f8      	str	r0, [r7, #12]
 8006c22:	60b9      	str	r1, [r7, #8]
 8006c24:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	68b9      	ldr	r1, [r7, #8]
 8006c2a:	68f8      	ldr	r0, [r7, #12]
 8006c2c:	f000 f810 	bl	8006c50 <_ZSt4copyIPKdPdET0_T_S4_S3_>
 8006c30:	4603      	mov	r3, r0
 8006c32:	4618      	mov	r0, r3
 8006c34:	3710      	adds	r7, #16
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}

08006c3a <_ZNK9__gnu_cxx13new_allocatorIdE8max_sizeEv>:

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8006c3a:	b480      	push	{r7}
 8006c3c:	b083      	sub	sp, #12
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8006c42:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
#else
	return size_t(-1) / sizeof(_Tp);
#endif
      }
 8006c46:	4618      	mov	r0, r3
 8006c48:	370c      	adds	r7, #12
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bc80      	pop	{r7}
 8006c4e:	4770      	bx	lr

08006c50 <_ZSt4copyIPKdPdET0_T_S4_S3_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8006c50:	b590      	push	{r4, r7, lr}
 8006c52:	b085      	sub	sp, #20
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a2<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8006c5c:	68f8      	ldr	r0, [r7, #12]
 8006c5e:	f000 f80f 	bl	8006c80 <_ZSt12__miter_baseIPKdET_S2_>
 8006c62:	4604      	mov	r4, r0
 8006c64:	68b8      	ldr	r0, [r7, #8]
 8006c66:	f000 f80b 	bl	8006c80 <_ZSt12__miter_baseIPKdET_S2_>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	4619      	mov	r1, r3
 8006c70:	4620      	mov	r0, r4
 8006c72:	f000 f80f 	bl	8006c94 <_ZSt14__copy_move_a2ILb0EPKdPdET1_T0_S4_S3_>
 8006c76:	4603      	mov	r3, r0
    }
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3714      	adds	r7, #20
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd90      	pop	{r4, r7, pc}

08006c80 <_ZSt12__miter_baseIPKdET_S2_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
    { return __it; }
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	370c      	adds	r7, #12
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bc80      	pop	{r7}
 8006c92:	4770      	bx	lr

08006c94 <_ZSt14__copy_move_a2ILb0EPKdPdET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8006c94:	b5b0      	push	{r4, r5, r7, lr}
 8006c96:	b084      	sub	sp, #16
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8006ca0:	68f8      	ldr	r0, [r7, #12]
 8006ca2:	f000 f81a 	bl	8006cda <_ZSt12__niter_baseIPKdET_S2_>
 8006ca6:	4604      	mov	r4, r0
 8006ca8:	68b8      	ldr	r0, [r7, #8]
 8006caa:	f000 f816 	bl	8006cda <_ZSt12__niter_baseIPKdET_S2_>
 8006cae:	4605      	mov	r5, r0
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f000 f81b 	bl	8006cee <_ZSt12__niter_baseIPdET_S1_>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	461a      	mov	r2, r3
 8006cbc:	4629      	mov	r1, r5
 8006cbe:	4620      	mov	r0, r4
 8006cc0:	f000 f81f 	bl	8006d02 <_ZSt13__copy_move_aILb0EPKdPdET1_T0_S4_S3_>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	1d3b      	adds	r3, r7, #4
 8006cc8:	4611      	mov	r1, r2
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f000 f82b 	bl	8006d26 <_ZSt12__niter_wrapIPdET_RKS1_S1_>
 8006cd0:	4603      	mov	r3, r0
    }
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3710      	adds	r7, #16
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bdb0      	pop	{r4, r5, r7, pc}

08006cda <_ZSt12__niter_baseIPKdET_S2_>:
    __niter_base(_Iterator __it)
 8006cda:	b480      	push	{r7}
 8006cdc:	b083      	sub	sp, #12
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]
    { return __it; }
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	370c      	adds	r7, #12
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bc80      	pop	{r7}
 8006cec:	4770      	bx	lr

08006cee <_ZSt12__niter_baseIPdET_S1_>:
    __niter_base(_Iterator __it)
 8006cee:	b480      	push	{r7}
 8006cf0:	b083      	sub	sp, #12
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]
    { return __it; }
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	370c      	adds	r7, #12
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bc80      	pop	{r7}
 8006d00:	4770      	bx	lr

08006d02 <_ZSt13__copy_move_aILb0EPKdPdET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8006d02:	b580      	push	{r7, lr}
 8006d04:	b086      	sub	sp, #24
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	60f8      	str	r0, [r7, #12]
 8006d0a:	60b9      	str	r1, [r7, #8]
 8006d0c:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 8006d0e:	2301      	movs	r3, #1
 8006d10:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	68b9      	ldr	r1, [r7, #8]
 8006d16:	68f8      	ldr	r0, [r7, #12]
 8006d18:	f000 f810 	bl	8006d3c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_>
 8006d1c:	4603      	mov	r3, r0
    }
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3718      	adds	r7, #24
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}

08006d26 <_ZSt12__niter_wrapIPdET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8006d26:	b480      	push	{r7}
 8006d28:	b083      	sub	sp, #12
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
 8006d2e:	6039      	str	r1, [r7, #0]
    { return __res; }
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	4618      	mov	r0, r3
 8006d34:	370c      	adds	r7, #12
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bc80      	pop	{r7}
 8006d3a:	4770      	bx	lr

08006d3c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b086      	sub	sp, #24
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8006d48:	68ba      	ldr	r2, [r7, #8]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	1ad3      	subs	r3, r2, r3
 8006d4e:	10db      	asrs	r3, r3, #3
 8006d50:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d006      	beq.n	8006d66 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	00db      	lsls	r3, r3, #3
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	68f9      	ldr	r1, [r7, #12]
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f001 fbd7 	bl	8008514 <memmove>
	  return __result + _Num;
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	00db      	lsls	r3, r3, #3
 8006d6a:	687a      	ldr	r2, [r7, #4]
 8006d6c:	4413      	add	r3, r2
	}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3718      	adds	r7, #24
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
	...

08006d78 <_ZN15Kalman_FiltresiC1Ev>:
#include "Kalman.hpp"
#include <math.h>


Kalman_Filtresi::Kalman_Filtresi() : lpf(LP_FILTER_CUT_FREQ,st) {
 8006d78:	b590      	push	{r4, r7, lr}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6879      	ldr	r1, [r7, #4]
 8006d82:	a327      	add	r3, pc, #156	; (adr r3, 8006e20 <_ZN15Kalman_FiltresiC1Ev+0xa8>)
 8006d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d88:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8006d8c:	6879      	ldr	r1, [r7, #4]
 8006d8e:	a324      	add	r3, pc, #144	; (adr r3, 8006e20 <_ZN15Kalman_FiltresiC1Ev+0xa8>)
 8006d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d94:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
 8006d98:	6879      	ldr	r1, [r7, #4]
 8006d9a:	a321      	add	r3, pc, #132	; (adr r3, 8006e20 <_ZN15Kalman_FiltresiC1Ev+0xa8>)
 8006d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da0:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
 8006da4:	6879      	ldr	r1, [r7, #4]
 8006da6:	a31e      	add	r3, pc, #120	; (adr r3, 8006e20 <_ZN15Kalman_FiltresiC1Ev+0xa8>)
 8006da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dac:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
 8006db0:	6879      	ldr	r1, [r7, #4]
 8006db2:	f04f 0200 	mov.w	r2, #0
 8006db6:	4b1c      	ldr	r3, [pc, #112]	; (8006e28 <_ZN15Kalman_FiltresiC1Ev+0xb0>)
 8006db8:	e9c1 2336 	strd	r2, r3, [r1, #216]	; 0xd8
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	4a1b      	ldr	r2, [pc, #108]	; (8006e2c <_ZN15Kalman_FiltresiC1Ev+0xb4>)
 8006dc0:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	22c8      	movs	r2, #200	; 0xc8
 8006dc8:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f7f9 ff44 	bl	8000c60 <__aeabi_i2f>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	4619      	mov	r1, r3
 8006ddc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006de0:	f7fa f846 	bl	8000e70 <__aeabi_fdiv>
 8006de4:	4603      	mov	r3, r0
 8006de6:	4618      	mov	r0, r3
 8006de8:	f7f9 fb16 	bl	8000418 <__aeabi_f2d>
 8006dec:	4602      	mov	r2, r0
 8006dee:	460b      	mov	r3, r1
 8006df0:	6879      	ldr	r1, [r7, #4]
 8006df2:	e9c1 233e 	strd	r2, r3, [r1, #248]	; 0xf8
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f503 7482 	add.w	r4, r3, #260	; 0x104
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	e9d3 233e 	ldrd	r2, r3, [r3, #248]	; 0xf8
 8006e02:	4610      	mov	r0, r2
 8006e04:	4619      	mov	r1, r3
 8006e06:	f7f9 fe21 	bl	8000a4c <__aeabi_d2f>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	4908      	ldr	r1, [pc, #32]	; (8006e30 <_ZN15Kalman_FiltresiC1Ev+0xb8>)
 8006e10:	4620      	mov	r0, r4
 8006e12:	f000 fc71 	bl	80076f8 <_ZN13LowPassFilterC1Eff>

}
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	4618      	mov	r0, r3
 8006e1a:	370c      	adds	r7, #12
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd90      	pop	{r4, r7, pc}
 8006e20:	47ae147b 	.word	0x47ae147b
 8006e24:	3f847ae1 	.word	0x3f847ae1
 8006e28:	40140000 	.word	0x40140000
 8006e2c:	42654ca3 	.word	0x42654ca3
 8006e30:	427b3333 	.word	0x427b3333

08006e34 <_ZN15Kalman_Filtresi3RunEPfS0_>:


void Kalman_Filtresi::Run(float gyro[3], float acc[3]) {
 8006e34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e38:	b090      	sub	sp, #64	; 0x40
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	61f8      	str	r0, [r7, #28]
 8006e3e:	61b9      	str	r1, [r7, #24]
 8006e40:	617a      	str	r2, [r7, #20]

  float accX = acc[0]; 
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	63fb      	str	r3, [r7, #60]	; 0x3c
  float accY = acc[1];
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	63bb      	str	r3, [r7, #56]	; 0x38
  float accZ = acc[2];
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	637b      	str	r3, [r7, #52]	; 0x34

  float gyroX = gyro[0]; 
 8006e54:	69bb      	ldr	r3, [r7, #24]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	633b      	str	r3, [r7, #48]	; 0x30
  float gyroY = gyro[1];
 8006e5a:	69bb      	ldr	r3, [r7, #24]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  float gyroZ = gyro[2];
 8006e60:	69bb      	ldr	r3, [r7, #24]
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	62bb      	str	r3, [r7, #40]	; 0x28

    //---IMU KİSMİ----
    //=================================
  float acctop=sqrt(accX*accX+accY*accY+accZ*accZ);
 8006e66:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e68:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006e6a:	f7f9 ff4d 	bl	8000d08 <__aeabi_fmul>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	461c      	mov	r4, r3
 8006e72:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006e74:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006e76:	f7f9 ff47 	bl	8000d08 <__aeabi_fmul>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	4620      	mov	r0, r4
 8006e80:	f7f9 fe3a 	bl	8000af8 <__addsf3>
 8006e84:	4603      	mov	r3, r0
 8006e86:	461c      	mov	r4, r3
 8006e88:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006e8a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006e8c:	f7f9 ff3c 	bl	8000d08 <__aeabi_fmul>
 8006e90:	4603      	mov	r3, r0
 8006e92:	4619      	mov	r1, r3
 8006e94:	4620      	mov	r0, r4
 8006e96:	f7f9 fe2f 	bl	8000af8 <__addsf3>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f7fa f941 	bl	8001124 <_ZSt4sqrtf>
 8006ea2:	6278      	str	r0, [r7, #36]	; 0x24

  pitch_acc =  asin(accX/acctop)*rad2deg + PITCH_OFFSET;
 8006ea4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ea6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006ea8:	f7f9 ffe2 	bl	8000e70 <__aeabi_fdiv>
 8006eac:	4603      	mov	r3, r0
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f7fa f92c 	bl	800110c <_ZSt4asinf>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	4610      	mov	r0, r2
 8006ec0:	f7f9 ff22 	bl	8000d08 <__aeabi_fmul>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	4923      	ldr	r1, [pc, #140]	; (8006f54 <_ZN15Kalman_Filtresi3RunEPfS0_+0x120>)
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f7f9 fe13 	bl	8000af4 <__aeabi_fsub>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  roll_acc  =  asin(accY/acctop)*rad2deg + ROLL_OFFSET;
 8006ed8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006eda:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006edc:	f7f9 ffc8 	bl	8000e70 <__aeabi_fdiv>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f7fa f912 	bl	800110c <_ZSt4asinf>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	4610      	mov	r0, r2
 8006ef4:	f7f9 ff08 	bl	8000d08 <__aeabi_fmul>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006efe:	4618      	mov	r0, r3
 8006f00:	f7f9 fdfa 	bl	8000af8 <__addsf3>
 8006f04:	4603      	mov	r3, r0
 8006f06:	461a      	mov	r2, r3
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
  //yaw_acc   =  asin(accZ/acctop)*rad2deg;

  pitch_acc = lpf.update(pitch_acc);
 8006f0e:	69fb      	ldr	r3, [r7, #28]
 8006f10:	f503 7282 	add.w	r2, r3, #260	; 0x104
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	4610      	mov	r0, r2
 8006f1e:	f000 fc35 	bl	800778c <_ZN13LowPassFilter6updateEf>
 8006f22:	4602      	mov	r2, r0
 8006f24:	69fb      	ldr	r3, [r7, #28]
 8006f26:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  roll_acc = lpf.update(roll_acc);
 8006f2a:	69fb      	ldr	r3, [r7, #28]
 8006f2c:	f503 7282 	add.w	r2, r3, #260	; 0x104
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006f36:	4619      	mov	r1, r3
 8006f38:	4610      	mov	r0, r2
 8006f3a:	f000 fc27 	bl	800778c <_ZN13LowPassFilter6updateEf>
 8006f3e:	4602      	mov	r2, r0
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    attitude.pitch_acc = pitch_acc;
    attitude.yaw_acc = yaw_acc;
    //printf("\npitc_acc: %.2f", pitch_acc);
  #endif
    
    if(gyro_ready) {
 8006f46:	69fb      	ldr	r3, [r7, #28]
 8006f48:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	f000 8356 	beq.w	80075fe <_ZN15Kalman_Filtresi3RunEPfS0_+0x7ca>
 8006f52:	e001      	b.n	8006f58 <_ZN15Kalman_Filtresi3RunEPfS0_+0x124>
 8006f54:	40a00000 	.word	0x40a00000

  //Pitch angle
	//**Tahmin**
	pitch = pitch  - pitch_bias*st + gyroY*st;
 8006f58:	69fb      	ldr	r3, [r7, #28]
 8006f5a:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8006f5e:	69fb      	ldr	r3, [r7, #28]
 8006f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f62:	4618      	mov	r0, r3
 8006f64:	f7f9 fa58 	bl	8000418 <__aeabi_f2d>
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	e9d3 233e 	ldrd	r2, r3, [r3, #248]	; 0xf8
 8006f6e:	f7f9 faab 	bl	80004c8 <__aeabi_dmul>
 8006f72:	4602      	mov	r2, r0
 8006f74:	460b      	mov	r3, r1
 8006f76:	4620      	mov	r0, r4
 8006f78:	4629      	mov	r1, r5
 8006f7a:	f7f9 f8ed 	bl	8000158 <__aeabi_dsub>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	460b      	mov	r3, r1
 8006f82:	4614      	mov	r4, r2
 8006f84:	461d      	mov	r5, r3
 8006f86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f88:	f7f9 fa46 	bl	8000418 <__aeabi_f2d>
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	e9d3 233e 	ldrd	r2, r3, [r3, #248]	; 0xf8
 8006f92:	f7f9 fa99 	bl	80004c8 <__aeabi_dmul>
 8006f96:	4602      	mov	r2, r0
 8006f98:	460b      	mov	r3, r1
 8006f9a:	4620      	mov	r0, r4
 8006f9c:	4629      	mov	r1, r5
 8006f9e:	f7f9 f8dd 	bl	800015c <__adddf3>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	69f9      	ldr	r1, [r7, #28]
 8006fa8:	e9c1 2302 	strd	r2, r3, [r1, #8]
	S11_m_pitch = 2*sa_p+st*st*sb_p; S12_m_pitch=-st*sb_p;
 8006fac:	69fb      	ldr	r3, [r7, #28]
 8006fae:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	460b      	mov	r3, r1
 8006fb6:	f7f9 f8d1 	bl	800015c <__adddf3>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	460b      	mov	r3, r1
 8006fbe:	4614      	mov	r4, r2
 8006fc0:	461d      	mov	r5, r3
 8006fc2:	69fb      	ldr	r3, [r7, #28]
 8006fc4:	e9d3 013e 	ldrd	r0, r1, [r3, #248]	; 0xf8
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	e9d3 233e 	ldrd	r2, r3, [r3, #248]	; 0xf8
 8006fce:	f7f9 fa7b 	bl	80004c8 <__aeabi_dmul>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	460b      	mov	r3, r1
 8006fd6:	4610      	mov	r0, r2
 8006fd8:	4619      	mov	r1, r3
 8006fda:	69fb      	ldr	r3, [r7, #28]
 8006fdc:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8006fe0:	f7f9 fa72 	bl	80004c8 <__aeabi_dmul>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	460b      	mov	r3, r1
 8006fe8:	4620      	mov	r0, r4
 8006fea:	4629      	mov	r1, r5
 8006fec:	f7f9 f8b6 	bl	800015c <__adddf3>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	460b      	mov	r3, r1
 8006ff4:	4610      	mov	r0, r2
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	f7f9 fd28 	bl	8000a4c <__aeabi_d2f>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	63da      	str	r2, [r3, #60]	; 0x3c
 8007002:	69fb      	ldr	r3, [r7, #28]
 8007004:	e9d3 233e 	ldrd	r2, r3, [r3, #248]	; 0xf8
 8007008:	4692      	mov	sl, r2
 800700a:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 800700e:	69fb      	ldr	r3, [r7, #28]
 8007010:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8007014:	4650      	mov	r0, sl
 8007016:	4659      	mov	r1, fp
 8007018:	f7f9 fa56 	bl	80004c8 <__aeabi_dmul>
 800701c:	4602      	mov	r2, r0
 800701e:	460b      	mov	r3, r1
 8007020:	4610      	mov	r0, r2
 8007022:	4619      	mov	r1, r3
 8007024:	f7f9 fd12 	bl	8000a4c <__aeabi_d2f>
 8007028:	4602      	mov	r2, r0
 800702a:	69fb      	ldr	r3, [r7, #28]
 800702c:	641a      	str	r2, [r3, #64]	; 0x40
	S21_m_pitch = -st*sb_p; 	   S22_m_pitch=2*sb_p;
 800702e:	69fb      	ldr	r3, [r7, #28]
 8007030:	e9d3 233e 	ldrd	r2, r3, [r3, #248]	; 0xf8
 8007034:	4690      	mov	r8, r2
 8007036:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 800703a:	69fb      	ldr	r3, [r7, #28]
 800703c:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8007040:	4640      	mov	r0, r8
 8007042:	4649      	mov	r1, r9
 8007044:	f7f9 fa40 	bl	80004c8 <__aeabi_dmul>
 8007048:	4602      	mov	r2, r0
 800704a:	460b      	mov	r3, r1
 800704c:	4610      	mov	r0, r2
 800704e:	4619      	mov	r1, r3
 8007050:	f7f9 fcfc 	bl	8000a4c <__aeabi_d2f>
 8007054:	4602      	mov	r2, r0
 8007056:	69fb      	ldr	r3, [r7, #28]
 8007058:	645a      	str	r2, [r3, #68]	; 0x44
 800705a:	69fb      	ldr	r3, [r7, #28]
 800705c:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 8007060:	4602      	mov	r2, r0
 8007062:	460b      	mov	r3, r1
 8007064:	f7f9 f87a 	bl	800015c <__adddf3>
 8007068:	4602      	mov	r2, r0
 800706a:	460b      	mov	r3, r1
 800706c:	4610      	mov	r0, r2
 800706e:	4619      	mov	r1, r3
 8007070:	f7f9 fcec 	bl	8000a4c <__aeabi_d2f>
 8007074:	4602      	mov	r2, r0
 8007076:	69fb      	ldr	r3, [r7, #28]
 8007078:	649a      	str	r2, [r3, #72]	; 0x48

	//**Düzeltme**
	Kt11_pitch = S11_m_pitch / (S11_m_pitch+Q);
 800707a:	69fb      	ldr	r3, [r7, #28]
 800707c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800707e:	4618      	mov	r0, r3
 8007080:	f7f9 f9ca 	bl	8000418 <__aeabi_f2d>
 8007084:	4604      	mov	r4, r0
 8007086:	460d      	mov	r5, r1
 8007088:	69fb      	ldr	r3, [r7, #28]
 800708a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800708c:	4618      	mov	r0, r3
 800708e:	f7f9 f9c3 	bl	8000418 <__aeabi_f2d>
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 8007098:	f7f9 f860 	bl	800015c <__adddf3>
 800709c:	4602      	mov	r2, r0
 800709e:	460b      	mov	r3, r1
 80070a0:	4620      	mov	r0, r4
 80070a2:	4629      	mov	r1, r5
 80070a4:	f7f9 fb3a 	bl	800071c <__aeabi_ddiv>
 80070a8:	4602      	mov	r2, r0
 80070aa:	460b      	mov	r3, r1
 80070ac:	4610      	mov	r0, r2
 80070ae:	4619      	mov	r1, r3
 80070b0:	f7f9 fccc 	bl	8000a4c <__aeabi_d2f>
 80070b4:	4602      	mov	r2, r0
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	65da      	str	r2, [r3, #92]	; 0x5c
	Kt21_pitch = S21_m_pitch / (S21_m_pitch+Q);
 80070ba:	69fb      	ldr	r3, [r7, #28]
 80070bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070be:	4618      	mov	r0, r3
 80070c0:	f7f9 f9aa 	bl	8000418 <__aeabi_f2d>
 80070c4:	4604      	mov	r4, r0
 80070c6:	460d      	mov	r5, r1
 80070c8:	69fb      	ldr	r3, [r7, #28]
 80070ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070cc:	4618      	mov	r0, r3
 80070ce:	f7f9 f9a3 	bl	8000418 <__aeabi_f2d>
 80070d2:	69fb      	ldr	r3, [r7, #28]
 80070d4:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 80070d8:	f7f9 f840 	bl	800015c <__adddf3>
 80070dc:	4602      	mov	r2, r0
 80070de:	460b      	mov	r3, r1
 80070e0:	4620      	mov	r0, r4
 80070e2:	4629      	mov	r1, r5
 80070e4:	f7f9 fb1a 	bl	800071c <__aeabi_ddiv>
 80070e8:	4602      	mov	r2, r0
 80070ea:	460b      	mov	r3, r1
 80070ec:	4610      	mov	r0, r2
 80070ee:	4619      	mov	r1, r3
 80070f0:	f7f9 fcac 	bl	8000a4c <__aeabi_d2f>
 80070f4:	4602      	mov	r2, r0
 80070f6:	69fb      	ldr	r3, [r7, #28]
 80070f8:	661a      	str	r2, [r3, #96]	; 0x60

	pitch = pitch - Kt11_pitch*(pitch-pitch_acc);
 80070fa:	69fb      	ldr	r3, [r7, #28]
 80070fc:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8007100:	69fb      	ldr	r3, [r7, #28]
 8007102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007104:	4618      	mov	r0, r3
 8007106:	f7f9 f987 	bl	8000418 <__aeabi_f2d>
 800710a:	4682      	mov	sl, r0
 800710c:	468b      	mov	fp, r1
 800710e:	69fb      	ldr	r3, [r7, #28]
 8007110:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8007114:	69fb      	ldr	r3, [r7, #28]
 8007116:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800711a:	4618      	mov	r0, r3
 800711c:	f7f9 f97c 	bl	8000418 <__aeabi_f2d>
 8007120:	4602      	mov	r2, r0
 8007122:	460b      	mov	r3, r1
 8007124:	4620      	mov	r0, r4
 8007126:	4629      	mov	r1, r5
 8007128:	f7f9 f816 	bl	8000158 <__aeabi_dsub>
 800712c:	4602      	mov	r2, r0
 800712e:	460b      	mov	r3, r1
 8007130:	4650      	mov	r0, sl
 8007132:	4659      	mov	r1, fp
 8007134:	f7f9 f9c8 	bl	80004c8 <__aeabi_dmul>
 8007138:	4602      	mov	r2, r0
 800713a:	460b      	mov	r3, r1
 800713c:	4640      	mov	r0, r8
 800713e:	4649      	mov	r1, r9
 8007140:	f7f9 f80a 	bl	8000158 <__aeabi_dsub>
 8007144:	4602      	mov	r2, r0
 8007146:	460b      	mov	r3, r1
 8007148:	69f9      	ldr	r1, [r7, #28]
 800714a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	pitch_bias = pitch_bias - Kt21_pitch*(pitch-pitch_acc);
 800714e:	69fb      	ldr	r3, [r7, #28]
 8007150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007152:	4618      	mov	r0, r3
 8007154:	f7f9 f960 	bl	8000418 <__aeabi_f2d>
 8007158:	4680      	mov	r8, r0
 800715a:	4689      	mov	r9, r1
 800715c:	69fb      	ldr	r3, [r7, #28]
 800715e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007160:	4618      	mov	r0, r3
 8007162:	f7f9 f959 	bl	8000418 <__aeabi_f2d>
 8007166:	4682      	mov	sl, r0
 8007168:	468b      	mov	fp, r1
 800716a:	69fb      	ldr	r3, [r7, #28]
 800716c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007176:	4618      	mov	r0, r3
 8007178:	f7f9 f94e 	bl	8000418 <__aeabi_f2d>
 800717c:	4602      	mov	r2, r0
 800717e:	460b      	mov	r3, r1
 8007180:	4620      	mov	r0, r4
 8007182:	4629      	mov	r1, r5
 8007184:	f7f8 ffe8 	bl	8000158 <__aeabi_dsub>
 8007188:	4602      	mov	r2, r0
 800718a:	460b      	mov	r3, r1
 800718c:	4650      	mov	r0, sl
 800718e:	4659      	mov	r1, fp
 8007190:	f7f9 f99a 	bl	80004c8 <__aeabi_dmul>
 8007194:	4602      	mov	r2, r0
 8007196:	460b      	mov	r3, r1
 8007198:	4640      	mov	r0, r8
 800719a:	4649      	mov	r1, r9
 800719c:	f7f8 ffdc 	bl	8000158 <__aeabi_dsub>
 80071a0:	4602      	mov	r2, r0
 80071a2:	460b      	mov	r3, r1
 80071a4:	4610      	mov	r0, r2
 80071a6:	4619      	mov	r1, r3
 80071a8:	f7f9 fc50 	bl	8000a4c <__aeabi_d2f>
 80071ac:	4602      	mov	r2, r0
 80071ae:	69fb      	ldr	r3, [r7, #28]
 80071b0:	631a      	str	r2, [r3, #48]	; 0x30

	S11_p_pitch = -S11_m_pitch*(Kt11_pitch-1);  S12_p_pitch = -S12_m_pitch*(Kt11_pitch-1);
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071b6:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 80071ba:	69fb      	ldr	r3, [r7, #28]
 80071bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071be:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80071c2:	4618      	mov	r0, r3
 80071c4:	f7f9 fc96 	bl	8000af4 <__aeabi_fsub>
 80071c8:	4603      	mov	r3, r0
 80071ca:	4619      	mov	r1, r3
 80071cc:	4620      	mov	r0, r4
 80071ce:	f7f9 fd9b 	bl	8000d08 <__aeabi_fmul>
 80071d2:	4603      	mov	r3, r0
 80071d4:	461a      	mov	r2, r3
 80071d6:	69fb      	ldr	r3, [r7, #28]
 80071d8:	64da      	str	r2, [r3, #76]	; 0x4c
 80071da:	69fb      	ldr	r3, [r7, #28]
 80071dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071de:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 80071e2:	69fb      	ldr	r3, [r7, #28]
 80071e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071e6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80071ea:	4618      	mov	r0, r3
 80071ec:	f7f9 fc82 	bl	8000af4 <__aeabi_fsub>
 80071f0:	4603      	mov	r3, r0
 80071f2:	4619      	mov	r1, r3
 80071f4:	4620      	mov	r0, r4
 80071f6:	f7f9 fd87 	bl	8000d08 <__aeabi_fmul>
 80071fa:	4603      	mov	r3, r0
 80071fc:	461a      	mov	r2, r3
 80071fe:	69fb      	ldr	r3, [r7, #28]
 8007200:	651a      	str	r2, [r3, #80]	; 0x50
	S21_p_pitch = S21_m_pitch-S11_m_pitch*Kt21_pitch; S22_p_pitch = S22_m_pitch-S12_m_pitch*Kt21_pitch;
 8007202:	69fb      	ldr	r3, [r7, #28]
 8007204:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8007206:	69fb      	ldr	r3, [r7, #28]
 8007208:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800720a:	69fb      	ldr	r3, [r7, #28]
 800720c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800720e:	4619      	mov	r1, r3
 8007210:	4610      	mov	r0, r2
 8007212:	f7f9 fd79 	bl	8000d08 <__aeabi_fmul>
 8007216:	4603      	mov	r3, r0
 8007218:	4619      	mov	r1, r3
 800721a:	4620      	mov	r0, r4
 800721c:	f7f9 fc6a 	bl	8000af4 <__aeabi_fsub>
 8007220:	4603      	mov	r3, r0
 8007222:	461a      	mov	r2, r3
 8007224:	69fb      	ldr	r3, [r7, #28]
 8007226:	655a      	str	r2, [r3, #84]	; 0x54
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 800722c:	69fb      	ldr	r3, [r7, #28]
 800722e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007230:	69fb      	ldr	r3, [r7, #28]
 8007232:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007234:	4619      	mov	r1, r3
 8007236:	4610      	mov	r0, r2
 8007238:	f7f9 fd66 	bl	8000d08 <__aeabi_fmul>
 800723c:	4603      	mov	r3, r0
 800723e:	4619      	mov	r1, r3
 8007240:	4620      	mov	r0, r4
 8007242:	f7f9 fc57 	bl	8000af4 <__aeabi_fsub>
 8007246:	4603      	mov	r3, r0
 8007248:	461a      	mov	r2, r3
 800724a:	69fb      	ldr	r3, [r7, #28]
 800724c:	659a      	str	r2, [r3, #88]	; 0x58

	S11_m_pitch = S11_p_pitch; S12_m_pitch = S12_p_pitch; S21_m_pitch = S21_p_pitch; S22_m_pitch = S22_p_pitch; 
 800724e:	69fb      	ldr	r3, [r7, #28]
 8007250:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007252:	69fb      	ldr	r3, [r7, #28]
 8007254:	63da      	str	r2, [r3, #60]	; 0x3c
 8007256:	69fb      	ldr	r3, [r7, #28]
 8007258:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800725a:	69fb      	ldr	r3, [r7, #28]
 800725c:	641a      	str	r2, [r3, #64]	; 0x40
 800725e:	69fb      	ldr	r3, [r7, #28]
 8007260:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007262:	69fb      	ldr	r3, [r7, #28]
 8007264:	645a      	str	r2, [r3, #68]	; 0x44
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	649a      	str	r2, [r3, #72]	; 0x48

  pitch_rate = gyroY;
 800726e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007270:	f7f9 f8d2 	bl	8000418 <__aeabi_f2d>
 8007274:	4602      	mov	r2, r0
 8007276:	460b      	mov	r3, r1
 8007278:	69f9      	ldr	r1, [r7, #28]
 800727a:	e9c1 2308 	strd	r2, r3, [r1, #32]
    //=================================

  //Roll angle
	//**Tahmin**
	roll = roll - roll_bias*st + gyroX*st;
 800727e:	69fb      	ldr	r3, [r7, #28]
 8007280:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007284:	69fb      	ldr	r3, [r7, #28]
 8007286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007288:	4618      	mov	r0, r3
 800728a:	f7f9 f8c5 	bl	8000418 <__aeabi_f2d>
 800728e:	69fb      	ldr	r3, [r7, #28]
 8007290:	e9d3 233e 	ldrd	r2, r3, [r3, #248]	; 0xf8
 8007294:	f7f9 f918 	bl	80004c8 <__aeabi_dmul>
 8007298:	4602      	mov	r2, r0
 800729a:	460b      	mov	r3, r1
 800729c:	4620      	mov	r0, r4
 800729e:	4629      	mov	r1, r5
 80072a0:	f7f8 ff5a 	bl	8000158 <__aeabi_dsub>
 80072a4:	4602      	mov	r2, r0
 80072a6:	460b      	mov	r3, r1
 80072a8:	4614      	mov	r4, r2
 80072aa:	461d      	mov	r5, r3
 80072ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072ae:	f7f9 f8b3 	bl	8000418 <__aeabi_f2d>
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	e9d3 233e 	ldrd	r2, r3, [r3, #248]	; 0xf8
 80072b8:	f7f9 f906 	bl	80004c8 <__aeabi_dmul>
 80072bc:	4602      	mov	r2, r0
 80072be:	460b      	mov	r3, r1
 80072c0:	4620      	mov	r0, r4
 80072c2:	4629      	mov	r1, r5
 80072c4:	f7f8 ff4a 	bl	800015c <__adddf3>
 80072c8:	4602      	mov	r2, r0
 80072ca:	460b      	mov	r3, r1
 80072cc:	69f9      	ldr	r1, [r7, #28]
 80072ce:	e9c1 2300 	strd	r2, r3, [r1]
	S11_m_roll = 2*sa+st*st*sb; S12_m_roll=-st*sb;
 80072d2:	69fb      	ldr	r3, [r7, #28]
 80072d4:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80072d8:	4602      	mov	r2, r0
 80072da:	460b      	mov	r3, r1
 80072dc:	f7f8 ff3e 	bl	800015c <__adddf3>
 80072e0:	4602      	mov	r2, r0
 80072e2:	460b      	mov	r3, r1
 80072e4:	4614      	mov	r4, r2
 80072e6:	461d      	mov	r5, r3
 80072e8:	69fb      	ldr	r3, [r7, #28]
 80072ea:	e9d3 013e 	ldrd	r0, r1, [r3, #248]	; 0xf8
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	e9d3 233e 	ldrd	r2, r3, [r3, #248]	; 0xf8
 80072f4:	f7f9 f8e8 	bl	80004c8 <__aeabi_dmul>
 80072f8:	4602      	mov	r2, r0
 80072fa:	460b      	mov	r3, r1
 80072fc:	4610      	mov	r0, r2
 80072fe:	4619      	mov	r1, r3
 8007300:	69fb      	ldr	r3, [r7, #28]
 8007302:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8007306:	f7f9 f8df 	bl	80004c8 <__aeabi_dmul>
 800730a:	4602      	mov	r2, r0
 800730c:	460b      	mov	r3, r1
 800730e:	4620      	mov	r0, r4
 8007310:	4629      	mov	r1, r5
 8007312:	f7f8 ff23 	bl	800015c <__adddf3>
 8007316:	4602      	mov	r2, r0
 8007318:	460b      	mov	r3, r1
 800731a:	4610      	mov	r0, r2
 800731c:	4619      	mov	r1, r3
 800731e:	f7f9 fb95 	bl	8000a4c <__aeabi_d2f>
 8007322:	4602      	mov	r2, r0
 8007324:	69fb      	ldr	r3, [r7, #28]
 8007326:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800732a:	69fb      	ldr	r3, [r7, #28]
 800732c:	e9d3 233e 	ldrd	r2, r3, [r3, #248]	; 0xf8
 8007330:	60ba      	str	r2, [r7, #8]
 8007332:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007336:	60fb      	str	r3, [r7, #12]
 8007338:	69fb      	ldr	r3, [r7, #28]
 800733a:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 800733e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007342:	f7f9 f8c1 	bl	80004c8 <__aeabi_dmul>
 8007346:	4602      	mov	r2, r0
 8007348:	460b      	mov	r3, r1
 800734a:	4610      	mov	r0, r2
 800734c:	4619      	mov	r1, r3
 800734e:	f7f9 fb7d 	bl	8000a4c <__aeabi_d2f>
 8007352:	4602      	mov	r2, r0
 8007354:	69fb      	ldr	r3, [r7, #28]
 8007356:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	S21_m_roll = -st*sb; 	   S22_m_roll=2*sb;
 800735a:	69fb      	ldr	r3, [r7, #28]
 800735c:	e9d3 233e 	ldrd	r2, r3, [r3, #248]	; 0xf8
 8007360:	603a      	str	r2, [r7, #0]
 8007362:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007366:	607b      	str	r3, [r7, #4]
 8007368:	69fb      	ldr	r3, [r7, #28]
 800736a:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 800736e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007372:	f7f9 f8a9 	bl	80004c8 <__aeabi_dmul>
 8007376:	4602      	mov	r2, r0
 8007378:	460b      	mov	r3, r1
 800737a:	4610      	mov	r0, r2
 800737c:	4619      	mov	r1, r3
 800737e:	f7f9 fb65 	bl	8000a4c <__aeabi_d2f>
 8007382:	4602      	mov	r2, r0
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800738a:	69fb      	ldr	r3, [r7, #28]
 800738c:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8007390:	4602      	mov	r2, r0
 8007392:	460b      	mov	r3, r1
 8007394:	f7f8 fee2 	bl	800015c <__adddf3>
 8007398:	4602      	mov	r2, r0
 800739a:	460b      	mov	r3, r1
 800739c:	4610      	mov	r0, r2
 800739e:	4619      	mov	r1, r3
 80073a0:	f7f9 fb54 	bl	8000a4c <__aeabi_d2f>
 80073a4:	4602      	mov	r2, r0
 80073a6:	69fb      	ldr	r3, [r7, #28]
 80073a8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

	//**Düzeltme**
	Kt11_roll = S11_m_roll / (S11_m_roll+Q);
 80073ac:	69fb      	ldr	r3, [r7, #28]
 80073ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073b2:	4618      	mov	r0, r3
 80073b4:	f7f9 f830 	bl	8000418 <__aeabi_f2d>
 80073b8:	4604      	mov	r4, r0
 80073ba:	460d      	mov	r5, r1
 80073bc:	69fb      	ldr	r3, [r7, #28]
 80073be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073c2:	4618      	mov	r0, r3
 80073c4:	f7f9 f828 	bl	8000418 <__aeabi_f2d>
 80073c8:	69fb      	ldr	r3, [r7, #28]
 80073ca:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 80073ce:	f7f8 fec5 	bl	800015c <__adddf3>
 80073d2:	4602      	mov	r2, r0
 80073d4:	460b      	mov	r3, r1
 80073d6:	4620      	mov	r0, r4
 80073d8:	4629      	mov	r1, r5
 80073da:	f7f9 f99f 	bl	800071c <__aeabi_ddiv>
 80073de:	4602      	mov	r2, r0
 80073e0:	460b      	mov	r3, r1
 80073e2:	4610      	mov	r0, r2
 80073e4:	4619      	mov	r1, r3
 80073e6:	f7f9 fb31 	bl	8000a4c <__aeabi_d2f>
 80073ea:	4602      	mov	r2, r0
 80073ec:	69fb      	ldr	r3, [r7, #28]
 80073ee:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	Kt21_roll = S21_m_roll / (S21_m_roll+Q);
 80073f2:	69fb      	ldr	r3, [r7, #28]
 80073f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073f8:	4618      	mov	r0, r3
 80073fa:	f7f9 f80d 	bl	8000418 <__aeabi_f2d>
 80073fe:	4604      	mov	r4, r0
 8007400:	460d      	mov	r5, r1
 8007402:	69fb      	ldr	r3, [r7, #28]
 8007404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007408:	4618      	mov	r0, r3
 800740a:	f7f9 f805 	bl	8000418 <__aeabi_f2d>
 800740e:	69fb      	ldr	r3, [r7, #28]
 8007410:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 8007414:	f7f8 fea2 	bl	800015c <__adddf3>
 8007418:	4602      	mov	r2, r0
 800741a:	460b      	mov	r3, r1
 800741c:	4620      	mov	r0, r4
 800741e:	4629      	mov	r1, r5
 8007420:	f7f9 f97c 	bl	800071c <__aeabi_ddiv>
 8007424:	4602      	mov	r2, r0
 8007426:	460b      	mov	r3, r1
 8007428:	4610      	mov	r0, r2
 800742a:	4619      	mov	r1, r3
 800742c:	f7f9 fb0e 	bl	8000a4c <__aeabi_d2f>
 8007430:	4602      	mov	r2, r0
 8007432:	69fb      	ldr	r3, [r7, #28]
 8007434:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

	roll = roll - Kt11_roll*(roll-roll_acc);
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800743e:	69fb      	ldr	r3, [r7, #28]
 8007440:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007444:	4618      	mov	r0, r3
 8007446:	f7f8 ffe7 	bl	8000418 <__aeabi_f2d>
 800744a:	4682      	mov	sl, r0
 800744c:	468b      	mov	fp, r1
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800745a:	4618      	mov	r0, r3
 800745c:	f7f8 ffdc 	bl	8000418 <__aeabi_f2d>
 8007460:	4602      	mov	r2, r0
 8007462:	460b      	mov	r3, r1
 8007464:	4640      	mov	r0, r8
 8007466:	4649      	mov	r1, r9
 8007468:	f7f8 fe76 	bl	8000158 <__aeabi_dsub>
 800746c:	4602      	mov	r2, r0
 800746e:	460b      	mov	r3, r1
 8007470:	4650      	mov	r0, sl
 8007472:	4659      	mov	r1, fp
 8007474:	f7f9 f828 	bl	80004c8 <__aeabi_dmul>
 8007478:	4602      	mov	r2, r0
 800747a:	460b      	mov	r3, r1
 800747c:	4620      	mov	r0, r4
 800747e:	4629      	mov	r1, r5
 8007480:	f7f8 fe6a 	bl	8000158 <__aeabi_dsub>
 8007484:	4602      	mov	r2, r0
 8007486:	460b      	mov	r3, r1
 8007488:	69f9      	ldr	r1, [r7, #28]
 800748a:	e9c1 2300 	strd	r2, r3, [r1]
	roll_bias = roll_bias - Kt21_roll*(roll-roll_acc);
 800748e:	69fb      	ldr	r3, [r7, #28]
 8007490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007492:	4618      	mov	r0, r3
 8007494:	f7f8 ffc0 	bl	8000418 <__aeabi_f2d>
 8007498:	4680      	mov	r8, r0
 800749a:	4689      	mov	r9, r1
 800749c:	69fb      	ldr	r3, [r7, #28]
 800749e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80074a2:	4618      	mov	r0, r3
 80074a4:	f7f8 ffb8 	bl	8000418 <__aeabi_f2d>
 80074a8:	4682      	mov	sl, r0
 80074aa:	468b      	mov	fp, r1
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	e9d3 4500 	ldrd	r4, r5, [r3]
 80074b2:	69fb      	ldr	r3, [r7, #28]
 80074b4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80074b8:	4618      	mov	r0, r3
 80074ba:	f7f8 ffad 	bl	8000418 <__aeabi_f2d>
 80074be:	4602      	mov	r2, r0
 80074c0:	460b      	mov	r3, r1
 80074c2:	4620      	mov	r0, r4
 80074c4:	4629      	mov	r1, r5
 80074c6:	f7f8 fe47 	bl	8000158 <__aeabi_dsub>
 80074ca:	4602      	mov	r2, r0
 80074cc:	460b      	mov	r3, r1
 80074ce:	4650      	mov	r0, sl
 80074d0:	4659      	mov	r1, fp
 80074d2:	f7f8 fff9 	bl	80004c8 <__aeabi_dmul>
 80074d6:	4602      	mov	r2, r0
 80074d8:	460b      	mov	r3, r1
 80074da:	4640      	mov	r0, r8
 80074dc:	4649      	mov	r1, r9
 80074de:	f7f8 fe3b 	bl	8000158 <__aeabi_dsub>
 80074e2:	4602      	mov	r2, r0
 80074e4:	460b      	mov	r3, r1
 80074e6:	4610      	mov	r0, r2
 80074e8:	4619      	mov	r1, r3
 80074ea:	f7f9 faaf 	bl	8000a4c <__aeabi_d2f>
 80074ee:	4602      	mov	r2, r0
 80074f0:	69fb      	ldr	r3, [r7, #28]
 80074f2:	635a      	str	r2, [r3, #52]	; 0x34

	S11_p_roll = -S11_m_roll*(Kt11_roll-1);  S12_p_roll = -S12_m_roll*(Kt11_roll-1);
 80074f4:	69fb      	ldr	r3, [r7, #28]
 80074f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074fa:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 80074fe:	69fb      	ldr	r3, [r7, #28]
 8007500:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007504:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8007508:	4618      	mov	r0, r3
 800750a:	f7f9 faf3 	bl	8000af4 <__aeabi_fsub>
 800750e:	4603      	mov	r3, r0
 8007510:	4619      	mov	r1, r3
 8007512:	4620      	mov	r0, r4
 8007514:	f7f9 fbf8 	bl	8000d08 <__aeabi_fmul>
 8007518:	4603      	mov	r3, r0
 800751a:	461a      	mov	r2, r3
 800751c:	69fb      	ldr	r3, [r7, #28]
 800751e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8007522:	69fb      	ldr	r3, [r7, #28]
 8007524:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007528:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007532:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8007536:	4618      	mov	r0, r3
 8007538:	f7f9 fadc 	bl	8000af4 <__aeabi_fsub>
 800753c:	4603      	mov	r3, r0
 800753e:	4619      	mov	r1, r3
 8007540:	4620      	mov	r0, r4
 8007542:	f7f9 fbe1 	bl	8000d08 <__aeabi_fmul>
 8007546:	4603      	mov	r3, r0
 8007548:	461a      	mov	r2, r3
 800754a:	69fb      	ldr	r3, [r7, #28]
 800754c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	S21_p_roll = S21_m_roll-S11_m_roll*Kt21_roll; S22_p_roll = S22_m_roll-S12_m_roll*Kt21_roll;
 8007550:	69fb      	ldr	r3, [r7, #28]
 8007552:	f8d3 4090 	ldr.w	r4, [r3, #144]	; 0x90
 8007556:	69fb      	ldr	r3, [r7, #28]
 8007558:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800755c:	69fb      	ldr	r3, [r7, #28]
 800755e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007562:	4619      	mov	r1, r3
 8007564:	4610      	mov	r0, r2
 8007566:	f7f9 fbcf 	bl	8000d08 <__aeabi_fmul>
 800756a:	4603      	mov	r3, r0
 800756c:	4619      	mov	r1, r3
 800756e:	4620      	mov	r0, r4
 8007570:	f7f9 fac0 	bl	8000af4 <__aeabi_fsub>
 8007574:	4603      	mov	r3, r0
 8007576:	461a      	mov	r2, r3
 8007578:	69fb      	ldr	r3, [r7, #28]
 800757a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	f8d3 4094 	ldr.w	r4, [r3, #148]	; 0x94
 8007584:	69fb      	ldr	r3, [r7, #28]
 8007586:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007590:	4619      	mov	r1, r3
 8007592:	4610      	mov	r0, r2
 8007594:	f7f9 fbb8 	bl	8000d08 <__aeabi_fmul>
 8007598:	4603      	mov	r3, r0
 800759a:	4619      	mov	r1, r3
 800759c:	4620      	mov	r0, r4
 800759e:	f7f9 faa9 	bl	8000af4 <__aeabi_fsub>
 80075a2:	4603      	mov	r3, r0
 80075a4:	461a      	mov	r2, r3
 80075a6:	69fb      	ldr	r3, [r7, #28]
 80075a8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	S11_m_roll = S11_p_roll; S12_m_roll = S12_p_roll; S21_m_roll = S21_p_roll; S22_m_roll = S22_p_roll; 
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80075b8:	69fb      	ldr	r3, [r7, #28]
 80075ba:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80075be:	69fb      	ldr	r3, [r7, #28]
 80075c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80075c4:	69fb      	ldr	r3, [r7, #28]
 80075c6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80075ca:	69fb      	ldr	r3, [r7, #28]
 80075cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80075d0:	69fb      	ldr	r3, [r7, #28]
 80075d2:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80075d6:	69fb      	ldr	r3, [r7, #28]
 80075d8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  roll_rate = gyroX;
 80075dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075de:	f7f8 ff1b 	bl	8000418 <__aeabi_f2d>
 80075e2:	4602      	mov	r2, r0
 80075e4:	460b      	mov	r3, r1
 80075e6:	69f9      	ldr	r1, [r7, #28]
 80075e8:	e9c1 2306 	strd	r2, r3, [r1, #24]

	S11_p_yaw = -S11_m_yaw*(Kt11_yaw-1);  S12_p_yaw = -S12_m_yaw*(Kt11_yaw-1);
	S21_p_yaw = S21_m_yaw-S11_m_yaw*Kt21_yaw; S22_p_yaw = S22_m_yaw-S12_m_yaw*Kt21_yaw;

	S11_m_yaw = S11_p_yaw; S12_m_yaw = S12_p_yaw; S21_m_yaw = S21_p_yaw; S22_m_yaw = S22_p_yaw; */
  yaw_rate = gyroZ;
 80075ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075ee:	f7f8 ff13 	bl	8000418 <__aeabi_f2d>
 80075f2:	4602      	mov	r2, r0
 80075f4:	460b      	mov	r3, r1
 80075f6:	69f9      	ldr	r1, [r7, #28]
 80075f8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 80075fc:	e019      	b.n	8007632 <_ZN15Kalman_Filtresi3RunEPfS0_+0x7fe>
    //=================================

    }

    else {
    	roll = roll_acc;
 80075fe:	69fb      	ldr	r3, [r7, #28]
 8007600:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007604:	4618      	mov	r0, r3
 8007606:	f7f8 ff07 	bl	8000418 <__aeabi_f2d>
 800760a:	4602      	mov	r2, r0
 800760c:	460b      	mov	r3, r1
 800760e:	69f9      	ldr	r1, [r7, #28]
 8007610:	e9c1 2300 	strd	r2, r3, [r1]
    	pitch = pitch_acc;
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800761a:	4618      	mov	r0, r3
 800761c:	f7f8 fefc 	bl	8000418 <__aeabi_f2d>
 8007620:	4602      	mov	r2, r0
 8007622:	460b      	mov	r3, r1
 8007624:	69f9      	ldr	r1, [r7, #28]
 8007626:	e9c1 2302 	strd	r2, r3, [r1, #8]
    	gyro_ready = true;
 800762a:	69fb      	ldr	r3, [r7, #28]
 800762c:	2201      	movs	r2, #1
 800762e:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
    }

    state.angles[0] = roll;
 8007632:	69fb      	ldr	r3, [r7, #28]
 8007634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007638:	4610      	mov	r0, r2
 800763a:	4619      	mov	r1, r3
 800763c:	f7f9 fa06 	bl	8000a4c <__aeabi_d2f>
 8007640:	4602      	mov	r2, r0
 8007642:	69fb      	ldr	r3, [r7, #28]
 8007644:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    state.angles[1] = pitch;
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800764e:	4610      	mov	r0, r2
 8007650:	4619      	mov	r1, r3
 8007652:	f7f9 f9fb 	bl	8000a4c <__aeabi_d2f>
 8007656:	4602      	mov	r2, r0
 8007658:	69fb      	ldr	r3, [r7, #28]
 800765a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    state.angles[2] = yaw;
 800765e:	69fb      	ldr	r3, [r7, #28]
 8007660:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007664:	4610      	mov	r0, r2
 8007666:	4619      	mov	r1, r3
 8007668:	f7f9 f9f0 	bl	8000a4c <__aeabi_d2f>
 800766c:	4602      	mov	r2, r0
 800766e:	69fb      	ldr	r3, [r7, #28]
 8007670:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

    state.rates[0] = roll_rate;
 8007674:	69fb      	ldr	r3, [r7, #28]
 8007676:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800767a:	4610      	mov	r0, r2
 800767c:	4619      	mov	r1, r3
 800767e:	f7f9 f9e5 	bl	8000a4c <__aeabi_d2f>
 8007682:	4602      	mov	r2, r0
 8007684:	69fb      	ldr	r3, [r7, #28]
 8007686:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    state.rates[1] = pitch_rate;
 800768a:	69fb      	ldr	r3, [r7, #28]
 800768c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007690:	4610      	mov	r0, r2
 8007692:	4619      	mov	r1, r3
 8007694:	f7f9 f9da 	bl	8000a4c <__aeabi_d2f>
 8007698:	4602      	mov	r2, r0
 800769a:	69fb      	ldr	r3, [r7, #28]
 800769c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    state.rates[2] = yaw_rate;
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80076a6:	4610      	mov	r0, r2
 80076a8:	4619      	mov	r1, r3
 80076aa:	f7f9 f9cf 	bl	8000a4c <__aeabi_d2f>
 80076ae:	4602      	mov	r2, r0
 80076b0:	69fb      	ldr	r3, [r7, #28]
 80076b2:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

    state.bias[0] = roll_bias;
 80076b6:	69fb      	ldr	r3, [r7, #28]
 80076b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076ba:	69fb      	ldr	r3, [r7, #28]
 80076bc:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    state.bias[1] = pitch_bias;
 80076c0:	69fb      	ldr	r3, [r7, #28]
 80076c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076c4:	69fb      	ldr	r3, [r7, #28]
 80076c6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    state.bias[2] = yaw_bias;
 80076ca:	69fb      	ldr	r3, [r7, #28]
 80076cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076ce:	69fb      	ldr	r3, [r7, #28]
 80076d0:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

}
 80076d4:	bf00      	nop
 80076d6:	3740      	adds	r7, #64	; 0x40
 80076d8:	46bd      	mov	sp, r7
 80076da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80076de:	bf00      	nop

080076e0 <_ZN15Kalman_FiltresiD1Ev>:

Kalman_Filtresi::~Kalman_Filtresi() {}
 80076e0:	b480      	push	{r7}
 80076e2:	b083      	sub	sp, #12
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4618      	mov	r0, r3
 80076ec:	370c      	adds	r7, #12
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bc80      	pop	{r7}
 80076f2:	4770      	bx	lr
 80076f4:	0000      	movs	r0, r0
	...

080076f8 <_ZN13LowPassFilterC1Eff>:

LowPassFilter::LowPassFilter():
	output(0),
	ePow(0){}

LowPassFilter::LowPassFilter(float iCutOffFrequency, float iDeltaTime):
 80076f8:	b5b0      	push	{r4, r5, r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	60f8      	str	r0, [r7, #12]
 8007700:	60b9      	str	r1, [r7, #8]
 8007702:	607a      	str	r2, [r7, #4]
	output(0),
	ePow(1-exp(-iDeltaTime * 2 * M_PI * iCutOffFrequency))
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f04f 0200 	mov.w	r2, #0
 800770a:	601a      	str	r2, [r3, #0]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007712:	4619      	mov	r1, r3
 8007714:	4618      	mov	r0, r3
 8007716:	f7f9 f9ef 	bl	8000af8 <__addsf3>
 800771a:	4603      	mov	r3, r0
 800771c:	4618      	mov	r0, r3
 800771e:	f7f8 fe7b 	bl	8000418 <__aeabi_f2d>
 8007722:	a317      	add	r3, pc, #92	; (adr r3, 8007780 <_ZN13LowPassFilterC1Eff+0x88>)
 8007724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007728:	f7f8 fece 	bl	80004c8 <__aeabi_dmul>
 800772c:	4602      	mov	r2, r0
 800772e:	460b      	mov	r3, r1
 8007730:	4614      	mov	r4, r2
 8007732:	461d      	mov	r5, r3
 8007734:	68b8      	ldr	r0, [r7, #8]
 8007736:	f7f8 fe6f 	bl	8000418 <__aeabi_f2d>
 800773a:	4602      	mov	r2, r0
 800773c:	460b      	mov	r3, r1
 800773e:	4620      	mov	r0, r4
 8007740:	4629      	mov	r1, r5
 8007742:	f7f8 fec1 	bl	80004c8 <__aeabi_dmul>
 8007746:	4602      	mov	r2, r0
 8007748:	460b      	mov	r3, r1
 800774a:	4610      	mov	r0, r2
 800774c:	4619      	mov	r1, r3
 800774e:	f000 fb0b 	bl	8007d68 <exp>
 8007752:	4602      	mov	r2, r0
 8007754:	460b      	mov	r3, r1
 8007756:	f04f 0000 	mov.w	r0, #0
 800775a:	490b      	ldr	r1, [pc, #44]	; (8007788 <_ZN13LowPassFilterC1Eff+0x90>)
 800775c:	f7f8 fcfc 	bl	8000158 <__aeabi_dsub>
 8007760:	4602      	mov	r2, r0
 8007762:	460b      	mov	r3, r1
 8007764:	4610      	mov	r0, r2
 8007766:	4619      	mov	r1, r3
 8007768:	f7f9 f970 	bl	8000a4c <__aeabi_d2f>
 800776c:	4602      	mov	r2, r0
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	605a      	str	r2, [r3, #4]
	if(iCutOffFrequency <= 0){
		std::cout << "Warning: A LowPassFilter instance has been configured with 0 Hz as cut-off frequency.";
		ePow = 0;
	}
	#endif
}
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	4618      	mov	r0, r3
 8007776:	3710      	adds	r7, #16
 8007778:	46bd      	mov	sp, r7
 800777a:	bdb0      	pop	{r4, r5, r7, pc}
 800777c:	f3af 8000 	nop.w
 8007780:	54442d18 	.word	0x54442d18
 8007784:	400921fb 	.word	0x400921fb
 8007788:	3ff00000 	.word	0x3ff00000

0800778c <_ZN13LowPassFilter6updateEf>:

float LowPassFilter::update(float input){
 800778c:	b590      	push	{r4, r7, lr}
 800778e:	b083      	sub	sp, #12
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	6039      	str	r1, [r7, #0]
	return output += (input - output) * ePow;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681c      	ldr	r4, [r3, #0]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4619      	mov	r1, r3
 80077a0:	6838      	ldr	r0, [r7, #0]
 80077a2:	f7f9 f9a7 	bl	8000af4 <__aeabi_fsub>
 80077a6:	4603      	mov	r3, r0
 80077a8:	461a      	mov	r2, r3
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	4619      	mov	r1, r3
 80077b0:	4610      	mov	r0, r2
 80077b2:	f7f9 faa9 	bl	8000d08 <__aeabi_fmul>
 80077b6:	4603      	mov	r3, r0
 80077b8:	4619      	mov	r1, r3
 80077ba:	4620      	mov	r0, r4
 80077bc:	f7f9 f99c 	bl	8000af8 <__addsf3>
 80077c0:	4603      	mov	r3, r0
 80077c2:	461a      	mov	r2, r3
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	601a      	str	r2, [r3, #0]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	370c      	adds	r7, #12
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd90      	pop	{r4, r7, pc}

080077d4 <_ZN3PIDC1Ev>:
#include "PID.hpp"

PID::PID() {};
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b082      	sub	sp, #8
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	4a0e      	ldr	r2, [pc, #56]	; (8007818 <_ZN3PIDC1Ev+0x44>)
 80077e0:	619a      	str	r2, [r3, #24]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	4a0d      	ldr	r2, [pc, #52]	; (800781c <_ZN3PIDC1Ev+0x48>)
 80077e6:	61da      	str	r2, [r3, #28]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2228      	movs	r2, #40	; 0x28
 80077ec:	621a      	str	r2, [r3, #32]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6a1b      	ldr	r3, [r3, #32]
 80077f2:	4618      	mov	r0, r3
 80077f4:	f7f9 fa34 	bl	8000c60 <__aeabi_i2f>
 80077f8:	4603      	mov	r3, r0
 80077fa:	4619      	mov	r1, r3
 80077fc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007800:	f7f9 fb36 	bl	8000e70 <__aeabi_fdiv>
 8007804:	4603      	mov	r3, r0
 8007806:	461a      	mov	r2, r3
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	625a      	str	r2, [r3, #36]	; 0x24
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	4618      	mov	r0, r3
 8007810:	3708      	adds	r7, #8
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
 8007816:	bf00      	nop
 8007818:	42f00000 	.word	0x42f00000
 800781c:	c2f00000 	.word	0xc2f00000

08007820 <_ZN3PID7P_AngleEddd>:

double PID::P_Angle(double alpha_des, double alpha, double Kp_angle) {
 8007820:	b580      	push	{r7, lr}
 8007822:	b088      	sub	sp, #32
 8007824:	af00      	add	r7, sp, #0
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	e9c7 2300 	strd	r2, r3, [r7]
	double P;
	double e = alpha_des - alpha;
 800782c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007830:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007834:	f7f8 fc90 	bl	8000158 <__aeabi_dsub>
 8007838:	4602      	mov	r2, r0
 800783a:	460b      	mov	r3, r1
 800783c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	P = Kp_angle*e;
 8007840:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007844:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007848:	f7f8 fe3e 	bl	80004c8 <__aeabi_dmul>
 800784c:	4602      	mov	r2, r0
 800784e:	460b      	mov	r3, r1
 8007850:	e9c7 2304 	strd	r2, r3, [r7, #16]
    return P;
 8007854:	e9d7 2304 	ldrd	r2, r3, [r7, #16]

}
 8007858:	4610      	mov	r0, r2
 800785a:	4619      	mov	r1, r3
 800785c:	3720      	adds	r7, #32
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}

08007862 <_ZN3PID7PD_RateEddddd>:


double PID::PD_Rate(double alpha_dot_des, double alpha_dot, double Kp, double Ki, double Kd) {
 8007862:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007864:	b093      	sub	sp, #76	; 0x4c
 8007866:	af02      	add	r7, sp, #8
 8007868:	60f8      	str	r0, [r7, #12]
 800786a:	e9c7 2300 	strd	r2, r3, [r7]
	double P, I, D, pd,de;
	e_eski_roll = e_roll;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	609a      	str	r2, [r3, #8]
	e_roll = alpha_dot_des - alpha_dot;
 8007876:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800787a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800787e:	f7f8 fc6b 	bl	8000158 <__aeabi_dsub>
 8007882:	4602      	mov	r2, r0
 8007884:	460b      	mov	r3, r1
 8007886:	4610      	mov	r0, r2
 8007888:	4619      	mov	r1, r3
 800788a:	f7f9 f8df 	bl	8000a4c <__aeabi_d2f>
 800788e:	4602      	mov	r2, r0
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	601a      	str	r2, [r3, #0]
  double e_roll_int = e_roll;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4618      	mov	r0, r3
 800789a:	f7f8 fdbd 	bl	8000418 <__aeabi_f2d>
 800789e:	4602      	mov	r2, r0
 80078a0:	460b      	mov	r3, r1
 80078a2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

  if((int)pd_roll_buf != (int)pd_roll_sat_buf) {
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078aa:	4618      	mov	r0, r3
 80078ac:	f7f9 fc08 	bl	80010c0 <__aeabi_f2iz>
 80078b0:	4604      	mov	r4, r0
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078b6:	4618      	mov	r0, r3
 80078b8:	f7f9 fc02 	bl	80010c0 <__aeabi_f2iz>
 80078bc:	4603      	mov	r3, r0
 80078be:	429c      	cmp	r4, r3
 80078c0:	d02b      	beq.n	800791a <_ZN3PID7PD_RateEddddd+0xb8>
    if(sgn(e_roll) == sgn(pd_roll_sat_buf)) {
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4618      	mov	r0, r3
 80078c8:	f7f8 fda6 	bl	8000418 <__aeabi_f2d>
 80078cc:	4602      	mov	r2, r0
 80078ce:	460b      	mov	r3, r1
 80078d0:	68f8      	ldr	r0, [r7, #12]
 80078d2:	f000 f8d1 	bl	8007a78 <_ZN3PID3sgnEd>
 80078d6:	4604      	mov	r4, r0
 80078d8:	460d      	mov	r5, r1
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078de:	4618      	mov	r0, r3
 80078e0:	f7f8 fd9a 	bl	8000418 <__aeabi_f2d>
 80078e4:	4602      	mov	r2, r0
 80078e6:	460b      	mov	r3, r1
 80078e8:	68f8      	ldr	r0, [r7, #12]
 80078ea:	f000 f8c5 	bl	8007a78 <_ZN3PID3sgnEd>
 80078ee:	4602      	mov	r2, r0
 80078f0:	460b      	mov	r3, r1
 80078f2:	2101      	movs	r1, #1
 80078f4:	460e      	mov	r6, r1
 80078f6:	4620      	mov	r0, r4
 80078f8:	4629      	mov	r1, r5
 80078fa:	f7f9 f84d 	bl	8000998 <__aeabi_dcmpeq>
 80078fe:	4603      	mov	r3, r0
 8007900:	2b00      	cmp	r3, #0
 8007902:	d101      	bne.n	8007908 <_ZN3PID7PD_RateEddddd+0xa6>
 8007904:	2300      	movs	r3, #0
 8007906:	461e      	mov	r6, r3
 8007908:	b2f3      	uxtb	r3, r6
 800790a:	2b00      	cmp	r3, #0
 800790c:	d005      	beq.n	800791a <_ZN3PID7PD_RateEddddd+0xb8>
      e_roll_int = 0;
 800790e:	f04f 0200 	mov.w	r2, #0
 8007912:	f04f 0300 	mov.w	r3, #0
 8007916:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
  }


	de = e_roll - e_eski_roll;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	4619      	mov	r1, r3
 8007924:	4610      	mov	r0, r2
 8007926:	f7f9 f8e5 	bl	8000af4 <__aeabi_fsub>
 800792a:	4603      	mov	r3, r0
 800792c:	4618      	mov	r0, r3
 800792e:	f7f8 fd73 	bl	8000418 <__aeabi_f2d>
 8007932:	4602      	mov	r2, r0
 8007934:	460b      	mov	r3, r1
 8007936:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  ie_roll = ie_roll + e_roll_int;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	691b      	ldr	r3, [r3, #16]
 800793e:	4618      	mov	r0, r3
 8007940:	f7f8 fd6a 	bl	8000418 <__aeabi_f2d>
 8007944:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007948:	f7f8 fc08 	bl	800015c <__adddf3>
 800794c:	4602      	mov	r2, r0
 800794e:	460b      	mov	r3, r1
 8007950:	4610      	mov	r0, r2
 8007952:	4619      	mov	r1, r3
 8007954:	f7f9 f87a 	bl	8000a4c <__aeabi_d2f>
 8007958:	4602      	mov	r2, r0
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	611a      	str	r2, [r3, #16]
  ie_roll_sat = ie_roll;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	691a      	ldr	r2, [r3, #16]
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	629a      	str	r2, [r3, #40]	; 0x28
	

	P = Kp*e_roll; D = Kd*de; I = Ki * ie_roll_sat;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4618      	mov	r0, r3
 800796c:	f7f8 fd54 	bl	8000418 <__aeabi_f2d>
 8007970:	4602      	mov	r2, r0
 8007972:	460b      	mov	r3, r1
 8007974:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007978:	f7f8 fda6 	bl	80004c8 <__aeabi_dmul>
 800797c:	4602      	mov	r2, r0
 800797e:	460b      	mov	r3, r1
 8007980:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8007984:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007988:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800798c:	f7f8 fd9c 	bl	80004c8 <__aeabi_dmul>
 8007990:	4602      	mov	r2, r0
 8007992:	460b      	mov	r3, r1
 8007994:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800799c:	4618      	mov	r0, r3
 800799e:	f7f8 fd3b 	bl	8000418 <__aeabi_f2d>
 80079a2:	4602      	mov	r2, r0
 80079a4:	460b      	mov	r3, r1
 80079a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80079aa:	f7f8 fd8d 	bl	80004c8 <__aeabi_dmul>
 80079ae:	4602      	mov	r2, r0
 80079b0:	460b      	mov	r3, r1
 80079b2:	e9c7 2306 	strd	r2, r3, [r7, #24]

	pd = P + I + D;
 80079b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80079ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80079be:	f7f8 fbcd 	bl	800015c <__adddf3>
 80079c2:	4602      	mov	r2, r0
 80079c4:	460b      	mov	r3, r1
 80079c6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80079ca:	f7f8 fbc7 	bl	800015c <__adddf3>
 80079ce:	4602      	mov	r2, r0
 80079d0:	460b      	mov	r3, r1
 80079d2:	e9c7 2304 	strd	r2, r3, [r7, #16]
  	pd_roll_buf = pd;
 80079d6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80079da:	f7f9 f837 	bl	8000a4c <__aeabi_d2f>
 80079de:	4602      	mov	r2, r0
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	631a      	str	r2, [r3, #48]	; 0x30
	pd  = Sat(pd,  200, -200);
 80079e4:	f06f 03c7 	mvn.w	r3, #199	; 0xc7
 80079e8:	9301      	str	r3, [sp, #4]
 80079ea:	23c8      	movs	r3, #200	; 0xc8
 80079ec:	9300      	str	r3, [sp, #0]
 80079ee:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80079f2:	68f8      	ldr	r0, [r7, #12]
 80079f4:	f000 f8b8 	bl	8007b68 <_ZN3PID3SatEdii>
 80079f8:	e9c7 0104 	strd	r0, r1, [r7, #16]
	pd_roll_sat_buf = pd;
 80079fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007a00:	f7f9 f824 	bl	8000a4c <__aeabi_d2f>
 8007a04:	4602      	mov	r2, r0
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	639a      	str	r2, [r3, #56]	; 0x38
    return pd;
 8007a0a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]

}
 8007a0e:	4610      	mov	r0, r2
 8007a10:	4619      	mov	r1, r3
 8007a12:	3744      	adds	r7, #68	; 0x44
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007a18 <_ZN3PID10P_Rate_YawEddd>:


double PID::P_Rate_Yaw(double alpha_dot_des, double alpha_dot, double Kp) {
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b08a      	sub	sp, #40	; 0x28
 8007a1c:	af02      	add	r7, sp, #8
 8007a1e:	60f8      	str	r0, [r7, #12]
 8007a20:	e9c7 2300 	strd	r2, r3, [r7]
	double P;
	double e_yaw = alpha_dot_des - alpha_dot;	
 8007a24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007a28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a2c:	f7f8 fb94 	bl	8000158 <__aeabi_dsub>
 8007a30:	4602      	mov	r2, r0
 8007a32:	460b      	mov	r3, r1
 8007a34:	e9c7 2306 	strd	r2, r3, [r7, #24]
	P = Kp*e_yaw;
 8007a38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a3c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007a40:	f7f8 fd42 	bl	80004c8 <__aeabi_dmul>
 8007a44:	4602      	mov	r2, r0
 8007a46:	460b      	mov	r3, r1
 8007a48:	e9c7 2304 	strd	r2, r3, [r7, #16]
	P    = Sat(P,    300, -300);
 8007a4c:	4b09      	ldr	r3, [pc, #36]	; (8007a74 <_ZN3PID10P_Rate_YawEddd+0x5c>)
 8007a4e:	9301      	str	r3, [sp, #4]
 8007a50:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8007a54:	9300      	str	r3, [sp, #0]
 8007a56:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007a5a:	68f8      	ldr	r0, [r7, #12]
 8007a5c:	f000 f884 	bl	8007b68 <_ZN3PID3SatEdii>
 8007a60:	e9c7 0104 	strd	r0, r1, [r7, #16]

    return P;
 8007a64:	e9d7 2304 	ldrd	r2, r3, [r7, #16]

}
 8007a68:	4610      	mov	r0, r2
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	3720      	adds	r7, #32
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
 8007a72:	bf00      	nop
 8007a74:	fffffed4 	.word	0xfffffed4

08007a78 <_ZN3PID3sgnEd>:

double PID::sgn(double v) {
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	60f8      	str	r0, [r7, #12]
 8007a80:	e9c7 2300 	strd	r2, r3, [r7]
  if (v < 0) return -1;
 8007a84:	f04f 0200 	mov.w	r2, #0
 8007a88:	f04f 0300 	mov.w	r3, #0
 8007a8c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a90:	f7f8 ff8c 	bl	80009ac <__aeabi_dcmplt>
 8007a94:	4603      	mov	r3, r0
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d003      	beq.n	8007aa2 <_ZN3PID3sgnEd+0x2a>
 8007a9a:	f04f 0200 	mov.w	r2, #0
 8007a9e:	4b0d      	ldr	r3, [pc, #52]	; (8007ad4 <_ZN3PID3sgnEd+0x5c>)
 8007aa0:	e012      	b.n	8007ac8 <_ZN3PID3sgnEd+0x50>
  if (v > 0) return 1;
 8007aa2:	f04f 0200 	mov.w	r2, #0
 8007aa6:	f04f 0300 	mov.w	r3, #0
 8007aaa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007aae:	f7f8 ff9b 	bl	80009e8 <__aeabi_dcmpgt>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d003      	beq.n	8007ac0 <_ZN3PID3sgnEd+0x48>
 8007ab8:	f04f 0200 	mov.w	r2, #0
 8007abc:	4b06      	ldr	r3, [pc, #24]	; (8007ad8 <_ZN3PID3sgnEd+0x60>)
 8007abe:	e003      	b.n	8007ac8 <_ZN3PID3sgnEd+0x50>
  return 0;
 8007ac0:	f04f 0200 	mov.w	r2, #0
 8007ac4:	f04f 0300 	mov.w	r3, #0
}
 8007ac8:	4610      	mov	r0, r2
 8007aca:	4619      	mov	r1, r3
 8007acc:	3710      	adds	r7, #16
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	bff00000 	.word	0xbff00000
 8007ad8:	3ff00000 	.word	0x3ff00000

08007adc <_ZN3PID3SatEdiii>:

 double PID::Sat(double pwm, int max, int min, int thr) {
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b086      	sub	sp, #24
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	e9c7 2300 	strd	r2, r3, [r7]
	double pwm_out;

	if(thr > 1020) {
 8007ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aea:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 8007aee:	dd2c      	ble.n	8007b4a <_ZN3PID3SatEdiii+0x6e>
		if(pwm > max) {
 8007af0:	6a38      	ldr	r0, [r7, #32]
 8007af2:	f7f8 fc7f 	bl	80003f4 <__aeabi_i2d>
 8007af6:	4602      	mov	r2, r0
 8007af8:	460b      	mov	r3, r1
 8007afa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007afe:	f7f8 ff73 	bl	80009e8 <__aeabi_dcmpgt>
 8007b02:	4603      	mov	r3, r0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d007      	beq.n	8007b18 <_ZN3PID3SatEdiii+0x3c>
			pwm_out = max;
 8007b08:	6a38      	ldr	r0, [r7, #32]
 8007b0a:	f7f8 fc73 	bl	80003f4 <__aeabi_i2d>
 8007b0e:	4602      	mov	r2, r0
 8007b10:	460b      	mov	r3, r1
 8007b12:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8007b16:	e01d      	b.n	8007b54 <_ZN3PID3SatEdiii+0x78>
		}

		else if (pwm < min) {
 8007b18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b1a:	f7f8 fc6b 	bl	80003f4 <__aeabi_i2d>
 8007b1e:	4602      	mov	r2, r0
 8007b20:	460b      	mov	r3, r1
 8007b22:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b26:	f7f8 ff41 	bl	80009ac <__aeabi_dcmplt>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d007      	beq.n	8007b40 <_ZN3PID3SatEdiii+0x64>
			pwm_out = min;
 8007b30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b32:	f7f8 fc5f 	bl	80003f4 <__aeabi_i2d>
 8007b36:	4602      	mov	r2, r0
 8007b38:	460b      	mov	r3, r1
 8007b3a:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8007b3e:	e009      	b.n	8007b54 <_ZN3PID3SatEdiii+0x78>
		}

		else {
			pwm_out = pwm;
 8007b40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b44:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8007b48:	e004      	b.n	8007b54 <_ZN3PID3SatEdiii+0x78>


	}

	else {
		pwm_out = 1000;
 8007b4a:	f04f 0200 	mov.w	r2, #0
 8007b4e:	4b05      	ldr	r3, [pc, #20]	; (8007b64 <_ZN3PID3SatEdiii+0x88>)
 8007b50:	e9c7 2304 	strd	r2, r3, [r7, #16]
	}
	return pwm_out;
 8007b54:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8007b58:	4610      	mov	r0, r2
 8007b5a:	4619      	mov	r1, r3
 8007b5c:	3718      	adds	r7, #24
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
 8007b62:	bf00      	nop
 8007b64:	408f4000 	.word	0x408f4000

08007b68 <_ZN3PID3SatEdii>:

 double PID::Sat(double pwm, int max, int min) {
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b086      	sub	sp, #24
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	60f8      	str	r0, [r7, #12]
 8007b70:	e9c7 2300 	strd	r2, r3, [r7]
	double pwm_out;

		if(pwm > max) {
 8007b74:	6a38      	ldr	r0, [r7, #32]
 8007b76:	f7f8 fc3d 	bl	80003f4 <__aeabi_i2d>
 8007b7a:	4602      	mov	r2, r0
 8007b7c:	460b      	mov	r3, r1
 8007b7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b82:	f7f8 ff31 	bl	80009e8 <__aeabi_dcmpgt>
 8007b86:	4603      	mov	r3, r0
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d007      	beq.n	8007b9c <_ZN3PID3SatEdii+0x34>
			pwm_out = max;
 8007b8c:	6a38      	ldr	r0, [r7, #32]
 8007b8e:	f7f8 fc31 	bl	80003f4 <__aeabi_i2d>
 8007b92:	4602      	mov	r2, r0
 8007b94:	460b      	mov	r3, r1
 8007b96:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8007b9a:	e017      	b.n	8007bcc <_ZN3PID3SatEdii+0x64>
		}

		else if (pwm < min) {
 8007b9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b9e:	f7f8 fc29 	bl	80003f4 <__aeabi_i2d>
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	460b      	mov	r3, r1
 8007ba6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007baa:	f7f8 feff 	bl	80009ac <__aeabi_dcmplt>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d007      	beq.n	8007bc4 <_ZN3PID3SatEdii+0x5c>
			pwm_out = min;
 8007bb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007bb6:	f7f8 fc1d 	bl	80003f4 <__aeabi_i2d>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8007bc2:	e003      	b.n	8007bcc <_ZN3PID3SatEdii+0x64>
		}

		else {
			pwm_out = pwm;
 8007bc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bc8:	e9c7 2304 	strd	r2, r3, [r7, #16]
		}




	return pwm_out;
 8007bcc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8007bd0:	4610      	mov	r0, r2
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	3718      	adds	r7, #24
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}

08007bda <_ZN3PID7pwm2angEt>:

float PID::pwm2ang(unsigned short int pwm) {
 8007bda:	b580      	push	{r7, lr}
 8007bdc:	b086      	sub	sp, #24
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
 8007be2:	460b      	mov	r3, r1
 8007be4:	807b      	strh	r3, [r7, #2]
	int in_min  = 1000;
 8007be6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007bea:	617b      	str	r3, [r7, #20]
	int in_max  = 2000;
 8007bec:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8007bf0:	613b      	str	r3, [r7, #16]
	int out_min = -15;
 8007bf2:	f06f 030e 	mvn.w	r3, #14
 8007bf6:	60fb      	str	r3, [r7, #12]
	int out_max  = 15;
 8007bf8:	230f      	movs	r3, #15
 8007bfa:	60bb      	str	r3, [r7, #8]

	return (pwm - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8007bfc:	887a      	ldrh	r2, [r7, #2]
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	1ad3      	subs	r3, r2, r3
 8007c02:	68b9      	ldr	r1, [r7, #8]
 8007c04:	68fa      	ldr	r2, [r7, #12]
 8007c06:	1a8a      	subs	r2, r1, r2
 8007c08:	fb02 f203 	mul.w	r2, r2, r3
 8007c0c:	6939      	ldr	r1, [r7, #16]
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	1acb      	subs	r3, r1, r3
 8007c12:	fb92 f2f3 	sdiv	r2, r2, r3
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	4413      	add	r3, r2
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f7f9 f820 	bl	8000c60 <__aeabi_i2f>
 8007c20:	4603      	mov	r3, r0
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3718      	adds	r7, #24
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}

08007c2a <_ZN3PID8pwm2rateEt>:

float PID::pwm2rate(unsigned short int pwm) {
 8007c2a:	b580      	push	{r7, lr}
 8007c2c:	b086      	sub	sp, #24
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
 8007c32:	460b      	mov	r3, r1
 8007c34:	807b      	strh	r3, [r7, #2]
	int in_min  = 1000;
 8007c36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007c3a:	617b      	str	r3, [r7, #20]
	int in_max  = 2000;
 8007c3c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8007c40:	613b      	str	r3, [r7, #16]
	int out_min = -100;
 8007c42:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8007c46:	60fb      	str	r3, [r7, #12]
	int out_max  = 100;
 8007c48:	2364      	movs	r3, #100	; 0x64
 8007c4a:	60bb      	str	r3, [r7, #8]

	return -1 * ((pwm - in_min) * (out_max - out_min) / (in_max - in_min) + out_min);
 8007c4c:	887a      	ldrh	r2, [r7, #2]
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	1ad3      	subs	r3, r2, r3
 8007c52:	68b9      	ldr	r1, [r7, #8]
 8007c54:	68fa      	ldr	r2, [r7, #12]
 8007c56:	1a8a      	subs	r2, r1, r2
 8007c58:	fb02 f203 	mul.w	r2, r2, r3
 8007c5c:	6939      	ldr	r1, [r7, #16]
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	1acb      	subs	r3, r1, r3
 8007c62:	fb92 f2f3 	sdiv	r2, r2, r3
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	4413      	add	r3, r2
 8007c6a:	425b      	negs	r3, r3
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f7f8 fff7 	bl	8000c60 <__aeabi_i2f>
 8007c72:	4603      	mov	r3, r0
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3718      	adds	r7, #24
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <_ZN3PID7pwm2motEti>:

//Convert pwm to motor speed for simulation
float PID::pwm2mot(unsigned short int pwm, int dir) {
 8007c7c:	b590      	push	{r4, r7, lr}
 8007c7e:	b089      	sub	sp, #36	; 0x24
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	460b      	mov	r3, r1
 8007c86:	607a      	str	r2, [r7, #4]
 8007c88:	817b      	strh	r3, [r7, #10]
	float in_min  = 1000;
 8007c8a:	4b1d      	ldr	r3, [pc, #116]	; (8007d00 <_ZN3PID7pwm2motEti+0x84>)
 8007c8c:	61fb      	str	r3, [r7, #28]
	float in_max  = 2000;
 8007c8e:	4b1d      	ldr	r3, [pc, #116]	; (8007d04 <_ZN3PID7pwm2motEti+0x88>)
 8007c90:	61bb      	str	r3, [r7, #24]
	float out_min = 0;
 8007c92:	f04f 0300 	mov.w	r3, #0
 8007c96:	617b      	str	r3, [r7, #20]
	float out_max  = 1326;
 8007c98:	4b1b      	ldr	r3, [pc, #108]	; (8007d08 <_ZN3PID7pwm2motEti+0x8c>)
 8007c9a:	613b      	str	r3, [r7, #16]

	return (float)(dir) * ((float)pwm - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f7f8 ffdf 	bl	8000c60 <__aeabi_i2f>
 8007ca2:	4604      	mov	r4, r0
 8007ca4:	897b      	ldrh	r3, [r7, #10]
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f7f8 ffd6 	bl	8000c58 <__aeabi_ui2f>
 8007cac:	4603      	mov	r3, r0
 8007cae:	69f9      	ldr	r1, [r7, #28]
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f7f8 ff1f 	bl	8000af4 <__aeabi_fsub>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	4619      	mov	r1, r3
 8007cba:	4620      	mov	r0, r4
 8007cbc:	f7f9 f824 	bl	8000d08 <__aeabi_fmul>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	461c      	mov	r4, r3
 8007cc4:	6979      	ldr	r1, [r7, #20]
 8007cc6:	6938      	ldr	r0, [r7, #16]
 8007cc8:	f7f8 ff14 	bl	8000af4 <__aeabi_fsub>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	4619      	mov	r1, r3
 8007cd0:	4620      	mov	r0, r4
 8007cd2:	f7f9 f819 	bl	8000d08 <__aeabi_fmul>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	461c      	mov	r4, r3
 8007cda:	69f9      	ldr	r1, [r7, #28]
 8007cdc:	69b8      	ldr	r0, [r7, #24]
 8007cde:	f7f8 ff09 	bl	8000af4 <__aeabi_fsub>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	4620      	mov	r0, r4
 8007ce8:	f7f9 f8c2 	bl	8000e70 <__aeabi_fdiv>
 8007cec:	4603      	mov	r3, r0
 8007cee:	6979      	ldr	r1, [r7, #20]
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f7f8 ff01 	bl	8000af8 <__addsf3>
 8007cf6:	4603      	mov	r3, r0
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3724      	adds	r7, #36	; 0x24
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd90      	pop	{r4, r7, pc}
 8007d00:	447a0000 	.word	0x447a0000
 8007d04:	44fa0000 	.word	0x44fa0000
 8007d08:	44a5c000 	.word	0x44a5c000

08007d0c <_ZN3PIDD1Ev>:

PID::~PID() {};
 8007d0c:	b480      	push	{r7}
 8007d0e:	b083      	sub	sp, #12
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	4618      	mov	r0, r3
 8007d18:	370c      	adds	r7, #12
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bc80      	pop	{r7}
 8007d1e:	4770      	bx	lr

08007d20 <_ZdlPv>:
 8007d20:	f000 bbf0 	b.w	8008504 <free>

08007d24 <_Znwj>:
 8007d24:	2801      	cmp	r0, #1
 8007d26:	bf38      	it	cc
 8007d28:	2001      	movcc	r0, #1
 8007d2a:	b510      	push	{r4, lr}
 8007d2c:	4604      	mov	r4, r0
 8007d2e:	4620      	mov	r0, r4
 8007d30:	f000 fbe0 	bl	80084f4 <malloc>
 8007d34:	b930      	cbnz	r0, 8007d44 <_Znwj+0x20>
 8007d36:	f000 f80d 	bl	8007d54 <_ZSt15get_new_handlerv>
 8007d3a:	b908      	cbnz	r0, 8007d40 <_Znwj+0x1c>
 8007d3c:	f000 fba8 	bl	8008490 <abort>
 8007d40:	4780      	blx	r0
 8007d42:	e7f4      	b.n	8007d2e <_Znwj+0xa>
 8007d44:	bd10      	pop	{r4, pc}

08007d46 <_ZSt17__throw_bad_allocv>:
 8007d46:	b508      	push	{r3, lr}
 8007d48:	f000 fba2 	bl	8008490 <abort>

08007d4c <_ZSt20__throw_length_errorPKc>:
 8007d4c:	b508      	push	{r3, lr}
 8007d4e:	f000 fb9f 	bl	8008490 <abort>
	...

08007d54 <_ZSt15get_new_handlerv>:
 8007d54:	4b02      	ldr	r3, [pc, #8]	; (8007d60 <_ZSt15get_new_handlerv+0xc>)
 8007d56:	6818      	ldr	r0, [r3, #0]
 8007d58:	f3bf 8f5b 	dmb	ish
 8007d5c:	4770      	bx	lr
 8007d5e:	bf00      	nop
 8007d60:	20000644 	.word	0x20000644
 8007d64:	00000000 	.word	0x00000000

08007d68 <exp>:
 8007d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d6a:	4606      	mov	r6, r0
 8007d6c:	460f      	mov	r7, r1
 8007d6e:	f000 f883 	bl	8007e78 <__ieee754_exp>
 8007d72:	4b1b      	ldr	r3, [pc, #108]	; (8007de0 <exp+0x78>)
 8007d74:	4604      	mov	r4, r0
 8007d76:	f993 3000 	ldrsb.w	r3, [r3]
 8007d7a:	460d      	mov	r5, r1
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	d012      	beq.n	8007da6 <exp+0x3e>
 8007d80:	4630      	mov	r0, r6
 8007d82:	4639      	mov	r1, r7
 8007d84:	f000 fb77 	bl	8008476 <finite>
 8007d88:	b168      	cbz	r0, 8007da6 <exp+0x3e>
 8007d8a:	a311      	add	r3, pc, #68	; (adr r3, 8007dd0 <exp+0x68>)
 8007d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d90:	4630      	mov	r0, r6
 8007d92:	4639      	mov	r1, r7
 8007d94:	f7f8 fe28 	bl	80009e8 <__aeabi_dcmpgt>
 8007d98:	b140      	cbz	r0, 8007dac <exp+0x44>
 8007d9a:	f000 fb81 	bl	80084a0 <__errno>
 8007d9e:	2322      	movs	r3, #34	; 0x22
 8007da0:	2400      	movs	r4, #0
 8007da2:	4d10      	ldr	r5, [pc, #64]	; (8007de4 <exp+0x7c>)
 8007da4:	6003      	str	r3, [r0, #0]
 8007da6:	4620      	mov	r0, r4
 8007da8:	4629      	mov	r1, r5
 8007daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dac:	4630      	mov	r0, r6
 8007dae:	a30a      	add	r3, pc, #40	; (adr r3, 8007dd8 <exp+0x70>)
 8007db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db4:	4639      	mov	r1, r7
 8007db6:	f7f8 fdf9 	bl	80009ac <__aeabi_dcmplt>
 8007dba:	2800      	cmp	r0, #0
 8007dbc:	d0f3      	beq.n	8007da6 <exp+0x3e>
 8007dbe:	f000 fb6f 	bl	80084a0 <__errno>
 8007dc2:	2322      	movs	r3, #34	; 0x22
 8007dc4:	2400      	movs	r4, #0
 8007dc6:	2500      	movs	r5, #0
 8007dc8:	6003      	str	r3, [r0, #0]
 8007dca:	e7ec      	b.n	8007da6 <exp+0x3e>
 8007dcc:	f3af 8000 	nop.w
 8007dd0:	fefa39ef 	.word	0xfefa39ef
 8007dd4:	40862e42 	.word	0x40862e42
 8007dd8:	d52d3051 	.word	0xd52d3051
 8007ddc:	c0874910 	.word	0xc0874910
 8007de0:	20000009 	.word	0x20000009
 8007de4:	7ff00000 	.word	0x7ff00000

08007de8 <asinf>:
 8007de8:	b538      	push	{r3, r4, r5, lr}
 8007dea:	4604      	mov	r4, r0
 8007dec:	f000 f9ae 	bl	800814c <__ieee754_asinf>
 8007df0:	4b0e      	ldr	r3, [pc, #56]	; (8007e2c <asinf+0x44>)
 8007df2:	4605      	mov	r5, r0
 8007df4:	f993 3000 	ldrsb.w	r3, [r3]
 8007df8:	3301      	adds	r3, #1
 8007dfa:	d015      	beq.n	8007e28 <asinf+0x40>
 8007dfc:	4621      	mov	r1, r4
 8007dfe:	4620      	mov	r0, r4
 8007e00:	f7f9 f948 	bl	8001094 <__aeabi_fcmpun>
 8007e04:	b980      	cbnz	r0, 8007e28 <asinf+0x40>
 8007e06:	4620      	mov	r0, r4
 8007e08:	f000 fb3b 	bl	8008482 <fabsf>
 8007e0c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8007e10:	f7f9 f936 	bl	8001080 <__aeabi_fcmpgt>
 8007e14:	b140      	cbz	r0, 8007e28 <asinf+0x40>
 8007e16:	f000 fb43 	bl	80084a0 <__errno>
 8007e1a:	2321      	movs	r3, #33	; 0x21
 8007e1c:	6003      	str	r3, [r0, #0]
 8007e1e:	4804      	ldr	r0, [pc, #16]	; (8007e30 <asinf+0x48>)
 8007e20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e24:	f000 bb30 	b.w	8008488 <nanf>
 8007e28:	4628      	mov	r0, r5
 8007e2a:	bd38      	pop	{r3, r4, r5, pc}
 8007e2c:	20000009 	.word	0x20000009
 8007e30:	080087dc 	.word	0x080087dc

08007e34 <sqrtf>:
 8007e34:	b538      	push	{r3, r4, r5, lr}
 8007e36:	4605      	mov	r5, r0
 8007e38:	f000 facc 	bl	80083d4 <__ieee754_sqrtf>
 8007e3c:	4b0d      	ldr	r3, [pc, #52]	; (8007e74 <sqrtf+0x40>)
 8007e3e:	4604      	mov	r4, r0
 8007e40:	f993 3000 	ldrsb.w	r3, [r3]
 8007e44:	3301      	adds	r3, #1
 8007e46:	d012      	beq.n	8007e6e <sqrtf+0x3a>
 8007e48:	4629      	mov	r1, r5
 8007e4a:	4628      	mov	r0, r5
 8007e4c:	f7f9 f922 	bl	8001094 <__aeabi_fcmpun>
 8007e50:	b968      	cbnz	r0, 8007e6e <sqrtf+0x3a>
 8007e52:	2100      	movs	r1, #0
 8007e54:	4628      	mov	r0, r5
 8007e56:	f7f9 f8f5 	bl	8001044 <__aeabi_fcmplt>
 8007e5a:	b140      	cbz	r0, 8007e6e <sqrtf+0x3a>
 8007e5c:	f000 fb20 	bl	80084a0 <__errno>
 8007e60:	2321      	movs	r3, #33	; 0x21
 8007e62:	2100      	movs	r1, #0
 8007e64:	6003      	str	r3, [r0, #0]
 8007e66:	4608      	mov	r0, r1
 8007e68:	f7f9 f802 	bl	8000e70 <__aeabi_fdiv>
 8007e6c:	4604      	mov	r4, r0
 8007e6e:	4620      	mov	r0, r4
 8007e70:	bd38      	pop	{r3, r4, r5, pc}
 8007e72:	bf00      	nop
 8007e74:	20000009 	.word	0x20000009

08007e78 <__ieee754_exp>:
 8007e78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e7c:	4faa      	ldr	r7, [pc, #680]	; (8008128 <__ieee754_exp+0x2b0>)
 8007e7e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007e82:	42bb      	cmp	r3, r7
 8007e84:	4605      	mov	r5, r0
 8007e86:	460c      	mov	r4, r1
 8007e88:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 8007e8c:	d92f      	bls.n	8007eee <__ieee754_exp+0x76>
 8007e8e:	4fa7      	ldr	r7, [pc, #668]	; (800812c <__ieee754_exp+0x2b4>)
 8007e90:	42bb      	cmp	r3, r7
 8007e92:	d911      	bls.n	8007eb8 <__ieee754_exp+0x40>
 8007e94:	4603      	mov	r3, r0
 8007e96:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	d006      	beq.n	8007eac <__ieee754_exp+0x34>
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	f7f8 f95b 	bl	800015c <__adddf3>
 8007ea6:	4605      	mov	r5, r0
 8007ea8:	460c      	mov	r4, r1
 8007eaa:	e000      	b.n	8007eae <__ieee754_exp+0x36>
 8007eac:	b9e6      	cbnz	r6, 8007ee8 <__ieee754_exp+0x70>
 8007eae:	4628      	mov	r0, r5
 8007eb0:	4621      	mov	r1, r4
 8007eb2:	b004      	add	sp, #16
 8007eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eb8:	a385      	add	r3, pc, #532	; (adr r3, 80080d0 <__ieee754_exp+0x258>)
 8007eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ebe:	f7f8 fd93 	bl	80009e8 <__aeabi_dcmpgt>
 8007ec2:	b138      	cbz	r0, 8007ed4 <__ieee754_exp+0x5c>
 8007ec4:	a384      	add	r3, pc, #528	; (adr r3, 80080d8 <__ieee754_exp+0x260>)
 8007ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eca:	4610      	mov	r0, r2
 8007ecc:	4619      	mov	r1, r3
 8007ece:	f7f8 fafb 	bl	80004c8 <__aeabi_dmul>
 8007ed2:	e7e8      	b.n	8007ea6 <__ieee754_exp+0x2e>
 8007ed4:	4628      	mov	r0, r5
 8007ed6:	a382      	add	r3, pc, #520	; (adr r3, 80080e0 <__ieee754_exp+0x268>)
 8007ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007edc:	4621      	mov	r1, r4
 8007ede:	f7f8 fd65 	bl	80009ac <__aeabi_dcmplt>
 8007ee2:	2800      	cmp	r0, #0
 8007ee4:	f000 8082 	beq.w	8007fec <__ieee754_exp+0x174>
 8007ee8:	2500      	movs	r5, #0
 8007eea:	462c      	mov	r4, r5
 8007eec:	e7df      	b.n	8007eae <__ieee754_exp+0x36>
 8007eee:	4a90      	ldr	r2, [pc, #576]	; (8008130 <__ieee754_exp+0x2b8>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	f240 80a7 	bls.w	8008044 <__ieee754_exp+0x1cc>
 8007ef6:	4a8f      	ldr	r2, [pc, #572]	; (8008134 <__ieee754_exp+0x2bc>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d877      	bhi.n	8007fec <__ieee754_exp+0x174>
 8007efc:	4b8e      	ldr	r3, [pc, #568]	; (8008138 <__ieee754_exp+0x2c0>)
 8007efe:	00f4      	lsls	r4, r6, #3
 8007f00:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f08:	f7f8 f926 	bl	8000158 <__aeabi_dsub>
 8007f0c:	4680      	mov	r8, r0
 8007f0e:	4689      	mov	r9, r1
 8007f10:	4b8a      	ldr	r3, [pc, #552]	; (800813c <__ieee754_exp+0x2c4>)
 8007f12:	f1c6 0a01 	rsb	sl, r6, #1
 8007f16:	4423      	add	r3, r4
 8007f18:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007f1c:	e9cd 3400 	strd	r3, r4, [sp]
 8007f20:	ebaa 0a06 	sub.w	sl, sl, r6
 8007f24:	4640      	mov	r0, r8
 8007f26:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f2a:	4649      	mov	r1, r9
 8007f2c:	f7f8 f914 	bl	8000158 <__aeabi_dsub>
 8007f30:	4605      	mov	r5, r0
 8007f32:	460c      	mov	r4, r1
 8007f34:	462a      	mov	r2, r5
 8007f36:	4623      	mov	r3, r4
 8007f38:	4628      	mov	r0, r5
 8007f3a:	4621      	mov	r1, r4
 8007f3c:	f7f8 fac4 	bl	80004c8 <__aeabi_dmul>
 8007f40:	a369      	add	r3, pc, #420	; (adr r3, 80080e8 <__ieee754_exp+0x270>)
 8007f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f46:	4606      	mov	r6, r0
 8007f48:	460f      	mov	r7, r1
 8007f4a:	f7f8 fabd 	bl	80004c8 <__aeabi_dmul>
 8007f4e:	a368      	add	r3, pc, #416	; (adr r3, 80080f0 <__ieee754_exp+0x278>)
 8007f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f54:	f7f8 f900 	bl	8000158 <__aeabi_dsub>
 8007f58:	4632      	mov	r2, r6
 8007f5a:	463b      	mov	r3, r7
 8007f5c:	f7f8 fab4 	bl	80004c8 <__aeabi_dmul>
 8007f60:	a365      	add	r3, pc, #404	; (adr r3, 80080f8 <__ieee754_exp+0x280>)
 8007f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f66:	f7f8 f8f9 	bl	800015c <__adddf3>
 8007f6a:	4632      	mov	r2, r6
 8007f6c:	463b      	mov	r3, r7
 8007f6e:	f7f8 faab 	bl	80004c8 <__aeabi_dmul>
 8007f72:	a363      	add	r3, pc, #396	; (adr r3, 8008100 <__ieee754_exp+0x288>)
 8007f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f78:	f7f8 f8ee 	bl	8000158 <__aeabi_dsub>
 8007f7c:	4632      	mov	r2, r6
 8007f7e:	463b      	mov	r3, r7
 8007f80:	f7f8 faa2 	bl	80004c8 <__aeabi_dmul>
 8007f84:	a360      	add	r3, pc, #384	; (adr r3, 8008108 <__ieee754_exp+0x290>)
 8007f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f8a:	f7f8 f8e7 	bl	800015c <__adddf3>
 8007f8e:	4632      	mov	r2, r6
 8007f90:	463b      	mov	r3, r7
 8007f92:	f7f8 fa99 	bl	80004c8 <__aeabi_dmul>
 8007f96:	4602      	mov	r2, r0
 8007f98:	460b      	mov	r3, r1
 8007f9a:	4628      	mov	r0, r5
 8007f9c:	4621      	mov	r1, r4
 8007f9e:	f7f8 f8db 	bl	8000158 <__aeabi_dsub>
 8007fa2:	4602      	mov	r2, r0
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	4606      	mov	r6, r0
 8007fa8:	460f      	mov	r7, r1
 8007faa:	4628      	mov	r0, r5
 8007fac:	4621      	mov	r1, r4
 8007fae:	f7f8 fa8b 	bl	80004c8 <__aeabi_dmul>
 8007fb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007fb6:	f1ba 0f00 	cmp.w	sl, #0
 8007fba:	d15a      	bne.n	8008072 <__ieee754_exp+0x1fa>
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007fc2:	4630      	mov	r0, r6
 8007fc4:	4639      	mov	r1, r7
 8007fc6:	f7f8 f8c7 	bl	8000158 <__aeabi_dsub>
 8007fca:	4602      	mov	r2, r0
 8007fcc:	460b      	mov	r3, r1
 8007fce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fd2:	f7f8 fba3 	bl	800071c <__aeabi_ddiv>
 8007fd6:	462a      	mov	r2, r5
 8007fd8:	4623      	mov	r3, r4
 8007fda:	f7f8 f8bd 	bl	8000158 <__aeabi_dsub>
 8007fde:	4602      	mov	r2, r0
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	2000      	movs	r0, #0
 8007fe4:	4956      	ldr	r1, [pc, #344]	; (8008140 <__ieee754_exp+0x2c8>)
 8007fe6:	f7f8 f8b7 	bl	8000158 <__aeabi_dsub>
 8007fea:	e75c      	b.n	8007ea6 <__ieee754_exp+0x2e>
 8007fec:	4855      	ldr	r0, [pc, #340]	; (8008144 <__ieee754_exp+0x2cc>)
 8007fee:	a348      	add	r3, pc, #288	; (adr r3, 8008110 <__ieee754_exp+0x298>)
 8007ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff4:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8007ff8:	4621      	mov	r1, r4
 8007ffa:	4628      	mov	r0, r5
 8007ffc:	f7f8 fa64 	bl	80004c8 <__aeabi_dmul>
 8008000:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008004:	f7f8 f8aa 	bl	800015c <__adddf3>
 8008008:	f7f8 fcf8 	bl	80009fc <__aeabi_d2iz>
 800800c:	4682      	mov	sl, r0
 800800e:	f7f8 f9f1 	bl	80003f4 <__aeabi_i2d>
 8008012:	a341      	add	r3, pc, #260	; (adr r3, 8008118 <__ieee754_exp+0x2a0>)
 8008014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008018:	4606      	mov	r6, r0
 800801a:	460f      	mov	r7, r1
 800801c:	f7f8 fa54 	bl	80004c8 <__aeabi_dmul>
 8008020:	4602      	mov	r2, r0
 8008022:	460b      	mov	r3, r1
 8008024:	4628      	mov	r0, r5
 8008026:	4621      	mov	r1, r4
 8008028:	f7f8 f896 	bl	8000158 <__aeabi_dsub>
 800802c:	a33c      	add	r3, pc, #240	; (adr r3, 8008120 <__ieee754_exp+0x2a8>)
 800802e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008032:	4680      	mov	r8, r0
 8008034:	4689      	mov	r9, r1
 8008036:	4630      	mov	r0, r6
 8008038:	4639      	mov	r1, r7
 800803a:	f7f8 fa45 	bl	80004c8 <__aeabi_dmul>
 800803e:	e9cd 0100 	strd	r0, r1, [sp]
 8008042:	e76f      	b.n	8007f24 <__ieee754_exp+0xac>
 8008044:	4a40      	ldr	r2, [pc, #256]	; (8008148 <__ieee754_exp+0x2d0>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d80e      	bhi.n	8008068 <__ieee754_exp+0x1f0>
 800804a:	a323      	add	r3, pc, #140	; (adr r3, 80080d8 <__ieee754_exp+0x260>)
 800804c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008050:	f7f8 f884 	bl	800015c <__adddf3>
 8008054:	2200      	movs	r2, #0
 8008056:	4b3a      	ldr	r3, [pc, #232]	; (8008140 <__ieee754_exp+0x2c8>)
 8008058:	f7f8 fcc6 	bl	80009e8 <__aeabi_dcmpgt>
 800805c:	b138      	cbz	r0, 800806e <__ieee754_exp+0x1f6>
 800805e:	2200      	movs	r2, #0
 8008060:	4628      	mov	r0, r5
 8008062:	4621      	mov	r1, r4
 8008064:	4b36      	ldr	r3, [pc, #216]	; (8008140 <__ieee754_exp+0x2c8>)
 8008066:	e71c      	b.n	8007ea2 <__ieee754_exp+0x2a>
 8008068:	f04f 0a00 	mov.w	sl, #0
 800806c:	e762      	b.n	8007f34 <__ieee754_exp+0xbc>
 800806e:	4682      	mov	sl, r0
 8008070:	e760      	b.n	8007f34 <__ieee754_exp+0xbc>
 8008072:	4632      	mov	r2, r6
 8008074:	463b      	mov	r3, r7
 8008076:	2000      	movs	r0, #0
 8008078:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800807c:	f7f8 f86c 	bl	8000158 <__aeabi_dsub>
 8008080:	4602      	mov	r2, r0
 8008082:	460b      	mov	r3, r1
 8008084:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008088:	f7f8 fb48 	bl	800071c <__aeabi_ddiv>
 800808c:	4602      	mov	r2, r0
 800808e:	460b      	mov	r3, r1
 8008090:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008094:	f7f8 f860 	bl	8000158 <__aeabi_dsub>
 8008098:	4642      	mov	r2, r8
 800809a:	464b      	mov	r3, r9
 800809c:	f7f8 f85c 	bl	8000158 <__aeabi_dsub>
 80080a0:	4602      	mov	r2, r0
 80080a2:	460b      	mov	r3, r1
 80080a4:	2000      	movs	r0, #0
 80080a6:	4926      	ldr	r1, [pc, #152]	; (8008140 <__ieee754_exp+0x2c8>)
 80080a8:	f7f8 f856 	bl	8000158 <__aeabi_dsub>
 80080ac:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 80080b0:	4592      	cmp	sl, r2
 80080b2:	db02      	blt.n	80080ba <__ieee754_exp+0x242>
 80080b4:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80080b8:	e6f5      	b.n	8007ea6 <__ieee754_exp+0x2e>
 80080ba:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 80080be:	2200      	movs	r2, #0
 80080c0:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 80080c4:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80080c8:	e701      	b.n	8007ece <__ieee754_exp+0x56>
 80080ca:	bf00      	nop
 80080cc:	f3af 8000 	nop.w
 80080d0:	fefa39ef 	.word	0xfefa39ef
 80080d4:	40862e42 	.word	0x40862e42
 80080d8:	8800759c 	.word	0x8800759c
 80080dc:	7e37e43c 	.word	0x7e37e43c
 80080e0:	d52d3051 	.word	0xd52d3051
 80080e4:	c0874910 	.word	0xc0874910
 80080e8:	72bea4d0 	.word	0x72bea4d0
 80080ec:	3e663769 	.word	0x3e663769
 80080f0:	c5d26bf1 	.word	0xc5d26bf1
 80080f4:	3ebbbd41 	.word	0x3ebbbd41
 80080f8:	af25de2c 	.word	0xaf25de2c
 80080fc:	3f11566a 	.word	0x3f11566a
 8008100:	16bebd93 	.word	0x16bebd93
 8008104:	3f66c16c 	.word	0x3f66c16c
 8008108:	5555553e 	.word	0x5555553e
 800810c:	3fc55555 	.word	0x3fc55555
 8008110:	652b82fe 	.word	0x652b82fe
 8008114:	3ff71547 	.word	0x3ff71547
 8008118:	fee00000 	.word	0xfee00000
 800811c:	3fe62e42 	.word	0x3fe62e42
 8008120:	35793c76 	.word	0x35793c76
 8008124:	3dea39ef 	.word	0x3dea39ef
 8008128:	40862e41 	.word	0x40862e41
 800812c:	7fefffff 	.word	0x7fefffff
 8008130:	3fd62e42 	.word	0x3fd62e42
 8008134:	3ff0a2b1 	.word	0x3ff0a2b1
 8008138:	080087f0 	.word	0x080087f0
 800813c:	08008800 	.word	0x08008800
 8008140:	3ff00000 	.word	0x3ff00000
 8008144:	080087e0 	.word	0x080087e0
 8008148:	3e2fffff 	.word	0x3e2fffff

0800814c <__ieee754_asinf>:
 800814c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008150:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 8008154:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8008158:	4604      	mov	r4, r0
 800815a:	4605      	mov	r5, r0
 800815c:	d10c      	bne.n	8008178 <__ieee754_asinf+0x2c>
 800815e:	498d      	ldr	r1, [pc, #564]	; (8008394 <__ieee754_asinf+0x248>)
 8008160:	f7f8 fdd2 	bl	8000d08 <__aeabi_fmul>
 8008164:	498c      	ldr	r1, [pc, #560]	; (8008398 <__ieee754_asinf+0x24c>)
 8008166:	4605      	mov	r5, r0
 8008168:	4620      	mov	r0, r4
 800816a:	f7f8 fdcd 	bl	8000d08 <__aeabi_fmul>
 800816e:	4601      	mov	r1, r0
 8008170:	4628      	mov	r0, r5
 8008172:	f7f8 fcc1 	bl	8000af8 <__addsf3>
 8008176:	e006      	b.n	8008186 <__ieee754_asinf+0x3a>
 8008178:	dd07      	ble.n	800818a <__ieee754_asinf+0x3e>
 800817a:	4601      	mov	r1, r0
 800817c:	f7f8 fcba 	bl	8000af4 <__aeabi_fsub>
 8008180:	4601      	mov	r1, r0
 8008182:	f7f8 fe75 	bl	8000e70 <__aeabi_fdiv>
 8008186:	4604      	mov	r4, r0
 8008188:	e00e      	b.n	80081a8 <__ieee754_asinf+0x5c>
 800818a:	f1b8 5f7c 	cmp.w	r8, #1056964608	; 0x3f000000
 800818e:	da58      	bge.n	8008242 <__ieee754_asinf+0xf6>
 8008190:	f1b8 5f48 	cmp.w	r8, #838860800	; 0x32000000
 8008194:	da0b      	bge.n	80081ae <__ieee754_asinf+0x62>
 8008196:	4981      	ldr	r1, [pc, #516]	; (800839c <__ieee754_asinf+0x250>)
 8008198:	f7f8 fcae 	bl	8000af8 <__addsf3>
 800819c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80081a0:	f7f8 ff6e 	bl	8001080 <__aeabi_fcmpgt>
 80081a4:	2800      	cmp	r0, #0
 80081a6:	d04c      	beq.n	8008242 <__ieee754_asinf+0xf6>
 80081a8:	4620      	mov	r0, r4
 80081aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081ae:	4601      	mov	r1, r0
 80081b0:	f7f8 fdaa 	bl	8000d08 <__aeabi_fmul>
 80081b4:	4605      	mov	r5, r0
 80081b6:	497a      	ldr	r1, [pc, #488]	; (80083a0 <__ieee754_asinf+0x254>)
 80081b8:	f7f8 fda6 	bl	8000d08 <__aeabi_fmul>
 80081bc:	4979      	ldr	r1, [pc, #484]	; (80083a4 <__ieee754_asinf+0x258>)
 80081be:	f7f8 fc9b 	bl	8000af8 <__addsf3>
 80081c2:	4629      	mov	r1, r5
 80081c4:	f7f8 fda0 	bl	8000d08 <__aeabi_fmul>
 80081c8:	4977      	ldr	r1, [pc, #476]	; (80083a8 <__ieee754_asinf+0x25c>)
 80081ca:	f7f8 fc93 	bl	8000af4 <__aeabi_fsub>
 80081ce:	4629      	mov	r1, r5
 80081d0:	f7f8 fd9a 	bl	8000d08 <__aeabi_fmul>
 80081d4:	4975      	ldr	r1, [pc, #468]	; (80083ac <__ieee754_asinf+0x260>)
 80081d6:	f7f8 fc8f 	bl	8000af8 <__addsf3>
 80081da:	4629      	mov	r1, r5
 80081dc:	f7f8 fd94 	bl	8000d08 <__aeabi_fmul>
 80081e0:	4973      	ldr	r1, [pc, #460]	; (80083b0 <__ieee754_asinf+0x264>)
 80081e2:	f7f8 fc87 	bl	8000af4 <__aeabi_fsub>
 80081e6:	4629      	mov	r1, r5
 80081e8:	f7f8 fd8e 	bl	8000d08 <__aeabi_fmul>
 80081ec:	4971      	ldr	r1, [pc, #452]	; (80083b4 <__ieee754_asinf+0x268>)
 80081ee:	f7f8 fc83 	bl	8000af8 <__addsf3>
 80081f2:	4629      	mov	r1, r5
 80081f4:	f7f8 fd88 	bl	8000d08 <__aeabi_fmul>
 80081f8:	496f      	ldr	r1, [pc, #444]	; (80083b8 <__ieee754_asinf+0x26c>)
 80081fa:	4606      	mov	r6, r0
 80081fc:	4628      	mov	r0, r5
 80081fe:	f7f8 fd83 	bl	8000d08 <__aeabi_fmul>
 8008202:	496e      	ldr	r1, [pc, #440]	; (80083bc <__ieee754_asinf+0x270>)
 8008204:	f7f8 fc76 	bl	8000af4 <__aeabi_fsub>
 8008208:	4629      	mov	r1, r5
 800820a:	f7f8 fd7d 	bl	8000d08 <__aeabi_fmul>
 800820e:	496c      	ldr	r1, [pc, #432]	; (80083c0 <__ieee754_asinf+0x274>)
 8008210:	f7f8 fc72 	bl	8000af8 <__addsf3>
 8008214:	4629      	mov	r1, r5
 8008216:	f7f8 fd77 	bl	8000d08 <__aeabi_fmul>
 800821a:	496a      	ldr	r1, [pc, #424]	; (80083c4 <__ieee754_asinf+0x278>)
 800821c:	f7f8 fc6a 	bl	8000af4 <__aeabi_fsub>
 8008220:	4629      	mov	r1, r5
 8008222:	f7f8 fd71 	bl	8000d08 <__aeabi_fmul>
 8008226:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800822a:	f7f8 fc65 	bl	8000af8 <__addsf3>
 800822e:	4601      	mov	r1, r0
 8008230:	4630      	mov	r0, r6
 8008232:	f7f8 fe1d 	bl	8000e70 <__aeabi_fdiv>
 8008236:	4621      	mov	r1, r4
 8008238:	f7f8 fd66 	bl	8000d08 <__aeabi_fmul>
 800823c:	4601      	mov	r1, r0
 800823e:	4620      	mov	r0, r4
 8008240:	e797      	b.n	8008172 <__ieee754_asinf+0x26>
 8008242:	4620      	mov	r0, r4
 8008244:	f000 f91d 	bl	8008482 <fabsf>
 8008248:	4601      	mov	r1, r0
 800824a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800824e:	f7f8 fc51 	bl	8000af4 <__aeabi_fsub>
 8008252:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8008256:	f7f8 fd57 	bl	8000d08 <__aeabi_fmul>
 800825a:	4606      	mov	r6, r0
 800825c:	4950      	ldr	r1, [pc, #320]	; (80083a0 <__ieee754_asinf+0x254>)
 800825e:	f7f8 fd53 	bl	8000d08 <__aeabi_fmul>
 8008262:	4950      	ldr	r1, [pc, #320]	; (80083a4 <__ieee754_asinf+0x258>)
 8008264:	f7f8 fc48 	bl	8000af8 <__addsf3>
 8008268:	4631      	mov	r1, r6
 800826a:	f7f8 fd4d 	bl	8000d08 <__aeabi_fmul>
 800826e:	494e      	ldr	r1, [pc, #312]	; (80083a8 <__ieee754_asinf+0x25c>)
 8008270:	f7f8 fc40 	bl	8000af4 <__aeabi_fsub>
 8008274:	4631      	mov	r1, r6
 8008276:	f7f8 fd47 	bl	8000d08 <__aeabi_fmul>
 800827a:	494c      	ldr	r1, [pc, #304]	; (80083ac <__ieee754_asinf+0x260>)
 800827c:	f7f8 fc3c 	bl	8000af8 <__addsf3>
 8008280:	4631      	mov	r1, r6
 8008282:	f7f8 fd41 	bl	8000d08 <__aeabi_fmul>
 8008286:	494a      	ldr	r1, [pc, #296]	; (80083b0 <__ieee754_asinf+0x264>)
 8008288:	f7f8 fc34 	bl	8000af4 <__aeabi_fsub>
 800828c:	4631      	mov	r1, r6
 800828e:	f7f8 fd3b 	bl	8000d08 <__aeabi_fmul>
 8008292:	4948      	ldr	r1, [pc, #288]	; (80083b4 <__ieee754_asinf+0x268>)
 8008294:	f7f8 fc30 	bl	8000af8 <__addsf3>
 8008298:	4631      	mov	r1, r6
 800829a:	f7f8 fd35 	bl	8000d08 <__aeabi_fmul>
 800829e:	4946      	ldr	r1, [pc, #280]	; (80083b8 <__ieee754_asinf+0x26c>)
 80082a0:	4681      	mov	r9, r0
 80082a2:	4630      	mov	r0, r6
 80082a4:	f7f8 fd30 	bl	8000d08 <__aeabi_fmul>
 80082a8:	4944      	ldr	r1, [pc, #272]	; (80083bc <__ieee754_asinf+0x270>)
 80082aa:	f7f8 fc23 	bl	8000af4 <__aeabi_fsub>
 80082ae:	4631      	mov	r1, r6
 80082b0:	f7f8 fd2a 	bl	8000d08 <__aeabi_fmul>
 80082b4:	4942      	ldr	r1, [pc, #264]	; (80083c0 <__ieee754_asinf+0x274>)
 80082b6:	f7f8 fc1f 	bl	8000af8 <__addsf3>
 80082ba:	4631      	mov	r1, r6
 80082bc:	f7f8 fd24 	bl	8000d08 <__aeabi_fmul>
 80082c0:	4940      	ldr	r1, [pc, #256]	; (80083c4 <__ieee754_asinf+0x278>)
 80082c2:	f7f8 fc17 	bl	8000af4 <__aeabi_fsub>
 80082c6:	4631      	mov	r1, r6
 80082c8:	f7f8 fd1e 	bl	8000d08 <__aeabi_fmul>
 80082cc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80082d0:	f7f8 fc12 	bl	8000af8 <__addsf3>
 80082d4:	4682      	mov	sl, r0
 80082d6:	4630      	mov	r0, r6
 80082d8:	f000 f87c 	bl	80083d4 <__ieee754_sqrtf>
 80082dc:	4b3a      	ldr	r3, [pc, #232]	; (80083c8 <__ieee754_asinf+0x27c>)
 80082de:	4607      	mov	r7, r0
 80082e0:	4598      	cmp	r8, r3
 80082e2:	dd1a      	ble.n	800831a <__ieee754_asinf+0x1ce>
 80082e4:	4651      	mov	r1, sl
 80082e6:	4648      	mov	r0, r9
 80082e8:	f7f8 fdc2 	bl	8000e70 <__aeabi_fdiv>
 80082ec:	4639      	mov	r1, r7
 80082ee:	f7f8 fd0b 	bl	8000d08 <__aeabi_fmul>
 80082f2:	4639      	mov	r1, r7
 80082f4:	f7f8 fc00 	bl	8000af8 <__addsf3>
 80082f8:	4601      	mov	r1, r0
 80082fa:	f7f8 fbfd 	bl	8000af8 <__addsf3>
 80082fe:	4933      	ldr	r1, [pc, #204]	; (80083cc <__ieee754_asinf+0x280>)
 8008300:	f7f8 fbfa 	bl	8000af8 <__addsf3>
 8008304:	4601      	mov	r1, r0
 8008306:	4823      	ldr	r0, [pc, #140]	; (8008394 <__ieee754_asinf+0x248>)
 8008308:	f7f8 fbf4 	bl	8000af4 <__aeabi_fsub>
 800830c:	2d00      	cmp	r5, #0
 800830e:	4604      	mov	r4, r0
 8008310:	f73f af4a 	bgt.w	80081a8 <__ieee754_asinf+0x5c>
 8008314:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8008318:	e735      	b.n	8008186 <__ieee754_asinf+0x3a>
 800831a:	4601      	mov	r1, r0
 800831c:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 8008320:	f7f8 fbea 	bl	8000af8 <__addsf3>
 8008324:	4651      	mov	r1, sl
 8008326:	4604      	mov	r4, r0
 8008328:	4648      	mov	r0, r9
 800832a:	f7f8 fda1 	bl	8000e70 <__aeabi_fdiv>
 800832e:	4601      	mov	r1, r0
 8008330:	4620      	mov	r0, r4
 8008332:	f7f8 fce9 	bl	8000d08 <__aeabi_fmul>
 8008336:	f028 080f 	bic.w	r8, r8, #15
 800833a:	4681      	mov	r9, r0
 800833c:	4641      	mov	r1, r8
 800833e:	4640      	mov	r0, r8
 8008340:	f7f8 fce2 	bl	8000d08 <__aeabi_fmul>
 8008344:	4601      	mov	r1, r0
 8008346:	4630      	mov	r0, r6
 8008348:	f7f8 fbd4 	bl	8000af4 <__aeabi_fsub>
 800834c:	4641      	mov	r1, r8
 800834e:	4604      	mov	r4, r0
 8008350:	4638      	mov	r0, r7
 8008352:	f7f8 fbd1 	bl	8000af8 <__addsf3>
 8008356:	4601      	mov	r1, r0
 8008358:	4620      	mov	r0, r4
 800835a:	f7f8 fd89 	bl	8000e70 <__aeabi_fdiv>
 800835e:	4601      	mov	r1, r0
 8008360:	f7f8 fbca 	bl	8000af8 <__addsf3>
 8008364:	4601      	mov	r1, r0
 8008366:	480c      	ldr	r0, [pc, #48]	; (8008398 <__ieee754_asinf+0x24c>)
 8008368:	f7f8 fbc4 	bl	8000af4 <__aeabi_fsub>
 800836c:	4601      	mov	r1, r0
 800836e:	4648      	mov	r0, r9
 8008370:	f7f8 fbc0 	bl	8000af4 <__aeabi_fsub>
 8008374:	4641      	mov	r1, r8
 8008376:	4604      	mov	r4, r0
 8008378:	4640      	mov	r0, r8
 800837a:	f7f8 fbbd 	bl	8000af8 <__addsf3>
 800837e:	4601      	mov	r1, r0
 8008380:	4813      	ldr	r0, [pc, #76]	; (80083d0 <__ieee754_asinf+0x284>)
 8008382:	f7f8 fbb7 	bl	8000af4 <__aeabi_fsub>
 8008386:	4601      	mov	r1, r0
 8008388:	4620      	mov	r0, r4
 800838a:	f7f8 fbb3 	bl	8000af4 <__aeabi_fsub>
 800838e:	4601      	mov	r1, r0
 8008390:	480f      	ldr	r0, [pc, #60]	; (80083d0 <__ieee754_asinf+0x284>)
 8008392:	e7b9      	b.n	8008308 <__ieee754_asinf+0x1bc>
 8008394:	3fc90fdb 	.word	0x3fc90fdb
 8008398:	b33bbd2e 	.word	0xb33bbd2e
 800839c:	7149f2ca 	.word	0x7149f2ca
 80083a0:	3811ef08 	.word	0x3811ef08
 80083a4:	3a4f7f04 	.word	0x3a4f7f04
 80083a8:	3d241146 	.word	0x3d241146
 80083ac:	3e4e0aa8 	.word	0x3e4e0aa8
 80083b0:	3ea6b090 	.word	0x3ea6b090
 80083b4:	3e2aaaab 	.word	0x3e2aaaab
 80083b8:	3d9dc62e 	.word	0x3d9dc62e
 80083bc:	3f303361 	.word	0x3f303361
 80083c0:	4001572d 	.word	0x4001572d
 80083c4:	4019d139 	.word	0x4019d139
 80083c8:	3f799999 	.word	0x3f799999
 80083cc:	333bbd2e 	.word	0x333bbd2e
 80083d0:	3f490fdb 	.word	0x3f490fdb

080083d4 <__ieee754_sqrtf>:
 80083d4:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 80083d8:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80083dc:	b570      	push	{r4, r5, r6, lr}
 80083de:	4603      	mov	r3, r0
 80083e0:	4604      	mov	r4, r0
 80083e2:	d309      	bcc.n	80083f8 <__ieee754_sqrtf+0x24>
 80083e4:	4601      	mov	r1, r0
 80083e6:	f7f8 fc8f 	bl	8000d08 <__aeabi_fmul>
 80083ea:	4601      	mov	r1, r0
 80083ec:	4620      	mov	r0, r4
 80083ee:	f7f8 fb83 	bl	8000af8 <__addsf3>
 80083f2:	4604      	mov	r4, r0
 80083f4:	4620      	mov	r0, r4
 80083f6:	bd70      	pop	{r4, r5, r6, pc}
 80083f8:	2a00      	cmp	r2, #0
 80083fa:	d0fb      	beq.n	80083f4 <__ieee754_sqrtf+0x20>
 80083fc:	2800      	cmp	r0, #0
 80083fe:	da06      	bge.n	800840e <__ieee754_sqrtf+0x3a>
 8008400:	4601      	mov	r1, r0
 8008402:	f7f8 fb77 	bl	8000af4 <__aeabi_fsub>
 8008406:	4601      	mov	r1, r0
 8008408:	f7f8 fd32 	bl	8000e70 <__aeabi_fdiv>
 800840c:	e7f1      	b.n	80083f2 <__ieee754_sqrtf+0x1e>
 800840e:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 8008412:	ea4f 51e0 	mov.w	r1, r0, asr #23
 8008416:	d029      	beq.n	800846c <__ieee754_sqrtf+0x98>
 8008418:	f3c3 0216 	ubfx	r2, r3, #0, #23
 800841c:	07cb      	lsls	r3, r1, #31
 800841e:	f04f 0300 	mov.w	r3, #0
 8008422:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 8008426:	f04f 0419 	mov.w	r4, #25
 800842a:	461e      	mov	r6, r3
 800842c:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8008430:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8008434:	bf58      	it	pl
 8008436:	0052      	lslpl	r2, r2, #1
 8008438:	1040      	asrs	r0, r0, #1
 800843a:	0052      	lsls	r2, r2, #1
 800843c:	1875      	adds	r5, r6, r1
 800843e:	4295      	cmp	r5, r2
 8008440:	bfde      	ittt	le
 8008442:	186e      	addle	r6, r5, r1
 8008444:	1b52      	suble	r2, r2, r5
 8008446:	185b      	addle	r3, r3, r1
 8008448:	3c01      	subs	r4, #1
 800844a:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800844e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008452:	d1f3      	bne.n	800843c <__ieee754_sqrtf+0x68>
 8008454:	b112      	cbz	r2, 800845c <__ieee754_sqrtf+0x88>
 8008456:	3301      	adds	r3, #1
 8008458:	f023 0301 	bic.w	r3, r3, #1
 800845c:	105c      	asrs	r4, r3, #1
 800845e:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8008462:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 8008466:	e7c5      	b.n	80083f4 <__ieee754_sqrtf+0x20>
 8008468:	005b      	lsls	r3, r3, #1
 800846a:	3201      	adds	r2, #1
 800846c:	0218      	lsls	r0, r3, #8
 800846e:	d5fb      	bpl.n	8008468 <__ieee754_sqrtf+0x94>
 8008470:	3a01      	subs	r2, #1
 8008472:	1a89      	subs	r1, r1, r2
 8008474:	e7d0      	b.n	8008418 <__ieee754_sqrtf+0x44>

08008476 <finite>:
 8008476:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800847a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800847e:	0fc0      	lsrs	r0, r0, #31
 8008480:	4770      	bx	lr

08008482 <fabsf>:
 8008482:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008486:	4770      	bx	lr

08008488 <nanf>:
 8008488:	4800      	ldr	r0, [pc, #0]	; (800848c <nanf+0x4>)
 800848a:	4770      	bx	lr
 800848c:	7fc00000 	.word	0x7fc00000

08008490 <abort>:
 8008490:	2006      	movs	r0, #6
 8008492:	b508      	push	{r3, lr}
 8008494:	f000 f93e 	bl	8008714 <raise>
 8008498:	2001      	movs	r0, #1
 800849a:	f7fa fa1c 	bl	80028d6 <_exit>
	...

080084a0 <__errno>:
 80084a0:	4b01      	ldr	r3, [pc, #4]	; (80084a8 <__errno+0x8>)
 80084a2:	6818      	ldr	r0, [r3, #0]
 80084a4:	4770      	bx	lr
 80084a6:	bf00      	nop
 80084a8:	2000000c 	.word	0x2000000c

080084ac <__libc_init_array>:
 80084ac:	b570      	push	{r4, r5, r6, lr}
 80084ae:	2600      	movs	r6, #0
 80084b0:	4d0c      	ldr	r5, [pc, #48]	; (80084e4 <__libc_init_array+0x38>)
 80084b2:	4c0d      	ldr	r4, [pc, #52]	; (80084e8 <__libc_init_array+0x3c>)
 80084b4:	1b64      	subs	r4, r4, r5
 80084b6:	10a4      	asrs	r4, r4, #2
 80084b8:	42a6      	cmp	r6, r4
 80084ba:	d109      	bne.n	80084d0 <__libc_init_array+0x24>
 80084bc:	f000 f954 	bl	8008768 <_init>
 80084c0:	2600      	movs	r6, #0
 80084c2:	4d0a      	ldr	r5, [pc, #40]	; (80084ec <__libc_init_array+0x40>)
 80084c4:	4c0a      	ldr	r4, [pc, #40]	; (80084f0 <__libc_init_array+0x44>)
 80084c6:	1b64      	subs	r4, r4, r5
 80084c8:	10a4      	asrs	r4, r4, #2
 80084ca:	42a6      	cmp	r6, r4
 80084cc:	d105      	bne.n	80084da <__libc_init_array+0x2e>
 80084ce:	bd70      	pop	{r4, r5, r6, pc}
 80084d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80084d4:	4798      	blx	r3
 80084d6:	3601      	adds	r6, #1
 80084d8:	e7ee      	b.n	80084b8 <__libc_init_array+0xc>
 80084da:	f855 3b04 	ldr.w	r3, [r5], #4
 80084de:	4798      	blx	r3
 80084e0:	3601      	adds	r6, #1
 80084e2:	e7f2      	b.n	80084ca <__libc_init_array+0x1e>
 80084e4:	08008870 	.word	0x08008870
 80084e8:	08008870 	.word	0x08008870
 80084ec:	08008870 	.word	0x08008870
 80084f0:	08008878 	.word	0x08008878

080084f4 <malloc>:
 80084f4:	4b02      	ldr	r3, [pc, #8]	; (8008500 <malloc+0xc>)
 80084f6:	4601      	mov	r1, r0
 80084f8:	6818      	ldr	r0, [r3, #0]
 80084fa:	f000 b879 	b.w	80085f0 <_malloc_r>
 80084fe:	bf00      	nop
 8008500:	2000000c 	.word	0x2000000c

08008504 <free>:
 8008504:	4b02      	ldr	r3, [pc, #8]	; (8008510 <free+0xc>)
 8008506:	4601      	mov	r1, r0
 8008508:	6818      	ldr	r0, [r3, #0]
 800850a:	f000 b825 	b.w	8008558 <_free_r>
 800850e:	bf00      	nop
 8008510:	2000000c 	.word	0x2000000c

08008514 <memmove>:
 8008514:	4288      	cmp	r0, r1
 8008516:	b510      	push	{r4, lr}
 8008518:	eb01 0402 	add.w	r4, r1, r2
 800851c:	d902      	bls.n	8008524 <memmove+0x10>
 800851e:	4284      	cmp	r4, r0
 8008520:	4623      	mov	r3, r4
 8008522:	d807      	bhi.n	8008534 <memmove+0x20>
 8008524:	1e43      	subs	r3, r0, #1
 8008526:	42a1      	cmp	r1, r4
 8008528:	d008      	beq.n	800853c <memmove+0x28>
 800852a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800852e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008532:	e7f8      	b.n	8008526 <memmove+0x12>
 8008534:	4601      	mov	r1, r0
 8008536:	4402      	add	r2, r0
 8008538:	428a      	cmp	r2, r1
 800853a:	d100      	bne.n	800853e <memmove+0x2a>
 800853c:	bd10      	pop	{r4, pc}
 800853e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008542:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008546:	e7f7      	b.n	8008538 <memmove+0x24>

08008548 <memset>:
 8008548:	4603      	mov	r3, r0
 800854a:	4402      	add	r2, r0
 800854c:	4293      	cmp	r3, r2
 800854e:	d100      	bne.n	8008552 <memset+0xa>
 8008550:	4770      	bx	lr
 8008552:	f803 1b01 	strb.w	r1, [r3], #1
 8008556:	e7f9      	b.n	800854c <memset+0x4>

08008558 <_free_r>:
 8008558:	b538      	push	{r3, r4, r5, lr}
 800855a:	4605      	mov	r5, r0
 800855c:	2900      	cmp	r1, #0
 800855e:	d043      	beq.n	80085e8 <_free_r+0x90>
 8008560:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008564:	1f0c      	subs	r4, r1, #4
 8008566:	2b00      	cmp	r3, #0
 8008568:	bfb8      	it	lt
 800856a:	18e4      	addlt	r4, r4, r3
 800856c:	f000 f8f0 	bl	8008750 <__malloc_lock>
 8008570:	4a1e      	ldr	r2, [pc, #120]	; (80085ec <_free_r+0x94>)
 8008572:	6813      	ldr	r3, [r2, #0]
 8008574:	4610      	mov	r0, r2
 8008576:	b933      	cbnz	r3, 8008586 <_free_r+0x2e>
 8008578:	6063      	str	r3, [r4, #4]
 800857a:	6014      	str	r4, [r2, #0]
 800857c:	4628      	mov	r0, r5
 800857e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008582:	f000 b8eb 	b.w	800875c <__malloc_unlock>
 8008586:	42a3      	cmp	r3, r4
 8008588:	d90a      	bls.n	80085a0 <_free_r+0x48>
 800858a:	6821      	ldr	r1, [r4, #0]
 800858c:	1862      	adds	r2, r4, r1
 800858e:	4293      	cmp	r3, r2
 8008590:	bf01      	itttt	eq
 8008592:	681a      	ldreq	r2, [r3, #0]
 8008594:	685b      	ldreq	r3, [r3, #4]
 8008596:	1852      	addeq	r2, r2, r1
 8008598:	6022      	streq	r2, [r4, #0]
 800859a:	6063      	str	r3, [r4, #4]
 800859c:	6004      	str	r4, [r0, #0]
 800859e:	e7ed      	b.n	800857c <_free_r+0x24>
 80085a0:	461a      	mov	r2, r3
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	b10b      	cbz	r3, 80085aa <_free_r+0x52>
 80085a6:	42a3      	cmp	r3, r4
 80085a8:	d9fa      	bls.n	80085a0 <_free_r+0x48>
 80085aa:	6811      	ldr	r1, [r2, #0]
 80085ac:	1850      	adds	r0, r2, r1
 80085ae:	42a0      	cmp	r0, r4
 80085b0:	d10b      	bne.n	80085ca <_free_r+0x72>
 80085b2:	6820      	ldr	r0, [r4, #0]
 80085b4:	4401      	add	r1, r0
 80085b6:	1850      	adds	r0, r2, r1
 80085b8:	4283      	cmp	r3, r0
 80085ba:	6011      	str	r1, [r2, #0]
 80085bc:	d1de      	bne.n	800857c <_free_r+0x24>
 80085be:	6818      	ldr	r0, [r3, #0]
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	4401      	add	r1, r0
 80085c4:	6011      	str	r1, [r2, #0]
 80085c6:	6053      	str	r3, [r2, #4]
 80085c8:	e7d8      	b.n	800857c <_free_r+0x24>
 80085ca:	d902      	bls.n	80085d2 <_free_r+0x7a>
 80085cc:	230c      	movs	r3, #12
 80085ce:	602b      	str	r3, [r5, #0]
 80085d0:	e7d4      	b.n	800857c <_free_r+0x24>
 80085d2:	6820      	ldr	r0, [r4, #0]
 80085d4:	1821      	adds	r1, r4, r0
 80085d6:	428b      	cmp	r3, r1
 80085d8:	bf01      	itttt	eq
 80085da:	6819      	ldreq	r1, [r3, #0]
 80085dc:	685b      	ldreq	r3, [r3, #4]
 80085de:	1809      	addeq	r1, r1, r0
 80085e0:	6021      	streq	r1, [r4, #0]
 80085e2:	6063      	str	r3, [r4, #4]
 80085e4:	6054      	str	r4, [r2, #4]
 80085e6:	e7c9      	b.n	800857c <_free_r+0x24>
 80085e8:	bd38      	pop	{r3, r4, r5, pc}
 80085ea:	bf00      	nop
 80085ec:	20000648 	.word	0x20000648

080085f0 <_malloc_r>:
 80085f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085f2:	1ccd      	adds	r5, r1, #3
 80085f4:	f025 0503 	bic.w	r5, r5, #3
 80085f8:	3508      	adds	r5, #8
 80085fa:	2d0c      	cmp	r5, #12
 80085fc:	bf38      	it	cc
 80085fe:	250c      	movcc	r5, #12
 8008600:	2d00      	cmp	r5, #0
 8008602:	4606      	mov	r6, r0
 8008604:	db01      	blt.n	800860a <_malloc_r+0x1a>
 8008606:	42a9      	cmp	r1, r5
 8008608:	d903      	bls.n	8008612 <_malloc_r+0x22>
 800860a:	230c      	movs	r3, #12
 800860c:	6033      	str	r3, [r6, #0]
 800860e:	2000      	movs	r0, #0
 8008610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008612:	f000 f89d 	bl	8008750 <__malloc_lock>
 8008616:	4921      	ldr	r1, [pc, #132]	; (800869c <_malloc_r+0xac>)
 8008618:	680a      	ldr	r2, [r1, #0]
 800861a:	4614      	mov	r4, r2
 800861c:	b99c      	cbnz	r4, 8008646 <_malloc_r+0x56>
 800861e:	4f20      	ldr	r7, [pc, #128]	; (80086a0 <_malloc_r+0xb0>)
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	b923      	cbnz	r3, 800862e <_malloc_r+0x3e>
 8008624:	4621      	mov	r1, r4
 8008626:	4630      	mov	r0, r6
 8008628:	f000 f83c 	bl	80086a4 <_sbrk_r>
 800862c:	6038      	str	r0, [r7, #0]
 800862e:	4629      	mov	r1, r5
 8008630:	4630      	mov	r0, r6
 8008632:	f000 f837 	bl	80086a4 <_sbrk_r>
 8008636:	1c43      	adds	r3, r0, #1
 8008638:	d123      	bne.n	8008682 <_malloc_r+0x92>
 800863a:	230c      	movs	r3, #12
 800863c:	4630      	mov	r0, r6
 800863e:	6033      	str	r3, [r6, #0]
 8008640:	f000 f88c 	bl	800875c <__malloc_unlock>
 8008644:	e7e3      	b.n	800860e <_malloc_r+0x1e>
 8008646:	6823      	ldr	r3, [r4, #0]
 8008648:	1b5b      	subs	r3, r3, r5
 800864a:	d417      	bmi.n	800867c <_malloc_r+0x8c>
 800864c:	2b0b      	cmp	r3, #11
 800864e:	d903      	bls.n	8008658 <_malloc_r+0x68>
 8008650:	6023      	str	r3, [r4, #0]
 8008652:	441c      	add	r4, r3
 8008654:	6025      	str	r5, [r4, #0]
 8008656:	e004      	b.n	8008662 <_malloc_r+0x72>
 8008658:	6863      	ldr	r3, [r4, #4]
 800865a:	42a2      	cmp	r2, r4
 800865c:	bf0c      	ite	eq
 800865e:	600b      	streq	r3, [r1, #0]
 8008660:	6053      	strne	r3, [r2, #4]
 8008662:	4630      	mov	r0, r6
 8008664:	f000 f87a 	bl	800875c <__malloc_unlock>
 8008668:	f104 000b 	add.w	r0, r4, #11
 800866c:	1d23      	adds	r3, r4, #4
 800866e:	f020 0007 	bic.w	r0, r0, #7
 8008672:	1ac2      	subs	r2, r0, r3
 8008674:	d0cc      	beq.n	8008610 <_malloc_r+0x20>
 8008676:	1a1b      	subs	r3, r3, r0
 8008678:	50a3      	str	r3, [r4, r2]
 800867a:	e7c9      	b.n	8008610 <_malloc_r+0x20>
 800867c:	4622      	mov	r2, r4
 800867e:	6864      	ldr	r4, [r4, #4]
 8008680:	e7cc      	b.n	800861c <_malloc_r+0x2c>
 8008682:	1cc4      	adds	r4, r0, #3
 8008684:	f024 0403 	bic.w	r4, r4, #3
 8008688:	42a0      	cmp	r0, r4
 800868a:	d0e3      	beq.n	8008654 <_malloc_r+0x64>
 800868c:	1a21      	subs	r1, r4, r0
 800868e:	4630      	mov	r0, r6
 8008690:	f000 f808 	bl	80086a4 <_sbrk_r>
 8008694:	3001      	adds	r0, #1
 8008696:	d1dd      	bne.n	8008654 <_malloc_r+0x64>
 8008698:	e7cf      	b.n	800863a <_malloc_r+0x4a>
 800869a:	bf00      	nop
 800869c:	20000648 	.word	0x20000648
 80086a0:	2000064c 	.word	0x2000064c

080086a4 <_sbrk_r>:
 80086a4:	b538      	push	{r3, r4, r5, lr}
 80086a6:	2300      	movs	r3, #0
 80086a8:	4d05      	ldr	r5, [pc, #20]	; (80086c0 <_sbrk_r+0x1c>)
 80086aa:	4604      	mov	r4, r0
 80086ac:	4608      	mov	r0, r1
 80086ae:	602b      	str	r3, [r5, #0]
 80086b0:	f7fa f91c 	bl	80028ec <_sbrk>
 80086b4:	1c43      	adds	r3, r0, #1
 80086b6:	d102      	bne.n	80086be <_sbrk_r+0x1a>
 80086b8:	682b      	ldr	r3, [r5, #0]
 80086ba:	b103      	cbz	r3, 80086be <_sbrk_r+0x1a>
 80086bc:	6023      	str	r3, [r4, #0]
 80086be:	bd38      	pop	{r3, r4, r5, pc}
 80086c0:	20000660 	.word	0x20000660

080086c4 <_raise_r>:
 80086c4:	291f      	cmp	r1, #31
 80086c6:	b538      	push	{r3, r4, r5, lr}
 80086c8:	4604      	mov	r4, r0
 80086ca:	460d      	mov	r5, r1
 80086cc:	d904      	bls.n	80086d8 <_raise_r+0x14>
 80086ce:	2316      	movs	r3, #22
 80086d0:	6003      	str	r3, [r0, #0]
 80086d2:	f04f 30ff 	mov.w	r0, #4294967295
 80086d6:	bd38      	pop	{r3, r4, r5, pc}
 80086d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80086da:	b112      	cbz	r2, 80086e2 <_raise_r+0x1e>
 80086dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80086e0:	b94b      	cbnz	r3, 80086f6 <_raise_r+0x32>
 80086e2:	4620      	mov	r0, r4
 80086e4:	f000 f830 	bl	8008748 <_getpid_r>
 80086e8:	462a      	mov	r2, r5
 80086ea:	4601      	mov	r1, r0
 80086ec:	4620      	mov	r0, r4
 80086ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086f2:	f000 b817 	b.w	8008724 <_kill_r>
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d00a      	beq.n	8008710 <_raise_r+0x4c>
 80086fa:	1c59      	adds	r1, r3, #1
 80086fc:	d103      	bne.n	8008706 <_raise_r+0x42>
 80086fe:	2316      	movs	r3, #22
 8008700:	6003      	str	r3, [r0, #0]
 8008702:	2001      	movs	r0, #1
 8008704:	e7e7      	b.n	80086d6 <_raise_r+0x12>
 8008706:	2400      	movs	r4, #0
 8008708:	4628      	mov	r0, r5
 800870a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800870e:	4798      	blx	r3
 8008710:	2000      	movs	r0, #0
 8008712:	e7e0      	b.n	80086d6 <_raise_r+0x12>

08008714 <raise>:
 8008714:	4b02      	ldr	r3, [pc, #8]	; (8008720 <raise+0xc>)
 8008716:	4601      	mov	r1, r0
 8008718:	6818      	ldr	r0, [r3, #0]
 800871a:	f7ff bfd3 	b.w	80086c4 <_raise_r>
 800871e:	bf00      	nop
 8008720:	2000000c 	.word	0x2000000c

08008724 <_kill_r>:
 8008724:	b538      	push	{r3, r4, r5, lr}
 8008726:	2300      	movs	r3, #0
 8008728:	4d06      	ldr	r5, [pc, #24]	; (8008744 <_kill_r+0x20>)
 800872a:	4604      	mov	r4, r0
 800872c:	4608      	mov	r0, r1
 800872e:	4611      	mov	r1, r2
 8008730:	602b      	str	r3, [r5, #0]
 8008732:	f7fa f8c0 	bl	80028b6 <_kill>
 8008736:	1c43      	adds	r3, r0, #1
 8008738:	d102      	bne.n	8008740 <_kill_r+0x1c>
 800873a:	682b      	ldr	r3, [r5, #0]
 800873c:	b103      	cbz	r3, 8008740 <_kill_r+0x1c>
 800873e:	6023      	str	r3, [r4, #0]
 8008740:	bd38      	pop	{r3, r4, r5, pc}
 8008742:	bf00      	nop
 8008744:	20000660 	.word	0x20000660

08008748 <_getpid_r>:
 8008748:	f7fa b8ae 	b.w	80028a8 <_getpid>

0800874c <__retarget_lock_acquire_recursive>:
 800874c:	4770      	bx	lr

0800874e <__retarget_lock_release_recursive>:
 800874e:	4770      	bx	lr

08008750 <__malloc_lock>:
 8008750:	4801      	ldr	r0, [pc, #4]	; (8008758 <__malloc_lock+0x8>)
 8008752:	f7ff bffb 	b.w	800874c <__retarget_lock_acquire_recursive>
 8008756:	bf00      	nop
 8008758:	20000658 	.word	0x20000658

0800875c <__malloc_unlock>:
 800875c:	4801      	ldr	r0, [pc, #4]	; (8008764 <__malloc_unlock+0x8>)
 800875e:	f7ff bff6 	b.w	800874e <__retarget_lock_release_recursive>
 8008762:	bf00      	nop
 8008764:	20000658 	.word	0x20000658

08008768 <_init>:
 8008768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800876a:	bf00      	nop
 800876c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800876e:	bc08      	pop	{r3}
 8008770:	469e      	mov	lr, r3
 8008772:	4770      	bx	lr

08008774 <_fini>:
 8008774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008776:	bf00      	nop
 8008778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800877a:	bc08      	pop	{r3}
 800877c:	469e      	mov	lr, r3
 800877e:	4770      	bx	lr
