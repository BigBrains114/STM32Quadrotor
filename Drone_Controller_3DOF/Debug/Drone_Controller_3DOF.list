
Drone_Controller_3DOF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008304  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08008418  08008418  00018418  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008508  08008508  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08008508  08008508  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008508  08008508  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008508  08008508  00018508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08008510  08008510  00018510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008518  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000794  20000070  08008588  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000804  08008588  00020804  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cfcb  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a82  00000000  00000000  0003d064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c0  00000000  00000000  00040ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011c0  00000000  00000000  00041da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c7b3  00000000  00000000  00042f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001406d  00000000  00000000  0005f71b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095f7c  00000000  00000000  00073788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00109704  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c04  00000000  00000000  00109758  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	080083fc 	.word	0x080083fc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	080083fc 	.word	0x080083fc

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_frsub>:
 8000aec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000af0:	e002      	b.n	8000af8 <__addsf3>
 8000af2:	bf00      	nop

08000af4 <__aeabi_fsub>:
 8000af4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000af8 <__addsf3>:
 8000af8:	0042      	lsls	r2, r0, #1
 8000afa:	bf1f      	itttt	ne
 8000afc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b00:	ea92 0f03 	teqne	r2, r3
 8000b04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b0c:	d06a      	beq.n	8000be4 <__addsf3+0xec>
 8000b0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b16:	bfc1      	itttt	gt
 8000b18:	18d2      	addgt	r2, r2, r3
 8000b1a:	4041      	eorgt	r1, r0
 8000b1c:	4048      	eorgt	r0, r1
 8000b1e:	4041      	eorgt	r1, r0
 8000b20:	bfb8      	it	lt
 8000b22:	425b      	neglt	r3, r3
 8000b24:	2b19      	cmp	r3, #25
 8000b26:	bf88      	it	hi
 8000b28:	4770      	bxhi	lr
 8000b2a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4240      	negne	r0, r0
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b42:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4249      	negne	r1, r1
 8000b4a:	ea92 0f03 	teq	r2, r3
 8000b4e:	d03f      	beq.n	8000bd0 <__addsf3+0xd8>
 8000b50:	f1a2 0201 	sub.w	r2, r2, #1
 8000b54:	fa41 fc03 	asr.w	ip, r1, r3
 8000b58:	eb10 000c 	adds.w	r0, r0, ip
 8000b5c:	f1c3 0320 	rsb	r3, r3, #32
 8000b60:	fa01 f103 	lsl.w	r1, r1, r3
 8000b64:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b68:	d502      	bpl.n	8000b70 <__addsf3+0x78>
 8000b6a:	4249      	negs	r1, r1
 8000b6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b74:	d313      	bcc.n	8000b9e <__addsf3+0xa6>
 8000b76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b7a:	d306      	bcc.n	8000b8a <__addsf3+0x92>
 8000b7c:	0840      	lsrs	r0, r0, #1
 8000b7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b82:	f102 0201 	add.w	r2, r2, #1
 8000b86:	2afe      	cmp	r2, #254	; 0xfe
 8000b88:	d251      	bcs.n	8000c2e <__addsf3+0x136>
 8000b8a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b92:	bf08      	it	eq
 8000b94:	f020 0001 	biceq.w	r0, r0, #1
 8000b98:	ea40 0003 	orr.w	r0, r0, r3
 8000b9c:	4770      	bx	lr
 8000b9e:	0049      	lsls	r1, r1, #1
 8000ba0:	eb40 0000 	adc.w	r0, r0, r0
 8000ba4:	3a01      	subs	r2, #1
 8000ba6:	bf28      	it	cs
 8000ba8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bac:	d2ed      	bcs.n	8000b8a <__addsf3+0x92>
 8000bae:	fab0 fc80 	clz	ip, r0
 8000bb2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bb6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bbe:	bfaa      	itet	ge
 8000bc0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc4:	4252      	neglt	r2, r2
 8000bc6:	4318      	orrge	r0, r3
 8000bc8:	bfbc      	itt	lt
 8000bca:	40d0      	lsrlt	r0, r2
 8000bcc:	4318      	orrlt	r0, r3
 8000bce:	4770      	bx	lr
 8000bd0:	f092 0f00 	teq	r2, #0
 8000bd4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bd8:	bf06      	itte	eq
 8000bda:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bde:	3201      	addeq	r2, #1
 8000be0:	3b01      	subne	r3, #1
 8000be2:	e7b5      	b.n	8000b50 <__addsf3+0x58>
 8000be4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bec:	bf18      	it	ne
 8000bee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf2:	d021      	beq.n	8000c38 <__addsf3+0x140>
 8000bf4:	ea92 0f03 	teq	r2, r3
 8000bf8:	d004      	beq.n	8000c04 <__addsf3+0x10c>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	bf08      	it	eq
 8000c00:	4608      	moveq	r0, r1
 8000c02:	4770      	bx	lr
 8000c04:	ea90 0f01 	teq	r0, r1
 8000c08:	bf1c      	itt	ne
 8000c0a:	2000      	movne	r0, #0
 8000c0c:	4770      	bxne	lr
 8000c0e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c12:	d104      	bne.n	8000c1e <__addsf3+0x126>
 8000c14:	0040      	lsls	r0, r0, #1
 8000c16:	bf28      	it	cs
 8000c18:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c1c:	4770      	bx	lr
 8000c1e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c22:	bf3c      	itt	cc
 8000c24:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bxcc	lr
 8000c2a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c2e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c36:	4770      	bx	lr
 8000c38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c3c:	bf16      	itet	ne
 8000c3e:	4608      	movne	r0, r1
 8000c40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c44:	4601      	movne	r1, r0
 8000c46:	0242      	lsls	r2, r0, #9
 8000c48:	bf06      	itte	eq
 8000c4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c4e:	ea90 0f01 	teqeq	r0, r1
 8000c52:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_ui2f>:
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	e004      	b.n	8000c68 <__aeabi_i2f+0x8>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_i2f>:
 8000c60:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c64:	bf48      	it	mi
 8000c66:	4240      	negmi	r0, r0
 8000c68:	ea5f 0c00 	movs.w	ip, r0
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c74:	4601      	mov	r1, r0
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	e01c      	b.n	8000cb6 <__aeabi_l2f+0x2a>

08000c7c <__aeabi_ul2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e00a      	b.n	8000ca0 <__aeabi_l2f+0x14>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_l2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c98:	d502      	bpl.n	8000ca0 <__aeabi_l2f+0x14>
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	ea5f 0c01 	movs.w	ip, r1
 8000ca4:	bf02      	ittt	eq
 8000ca6:	4684      	moveq	ip, r0
 8000ca8:	4601      	moveq	r1, r0
 8000caa:	2000      	moveq	r0, #0
 8000cac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cb0:	bf08      	it	eq
 8000cb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cba:	fabc f28c 	clz	r2, ip
 8000cbe:	3a08      	subs	r2, #8
 8000cc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc4:	db10      	blt.n	8000ce8 <__aeabi_l2f+0x5c>
 8000cc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cca:	4463      	add	r3, ip
 8000ccc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd0:	f1c2 0220 	rsb	r2, r2, #32
 8000cd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cdc:	eb43 0002 	adc.w	r0, r3, r2
 8000ce0:	bf08      	it	eq
 8000ce2:	f020 0001 	biceq.w	r0, r0, #1
 8000ce6:	4770      	bx	lr
 8000ce8:	f102 0220 	add.w	r2, r2, #32
 8000cec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf0:	f1c2 0220 	rsb	r2, r2, #32
 8000cf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cfc:	eb43 0002 	adc.w	r0, r3, r2
 8000d00:	bf08      	it	eq
 8000d02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_fmul>:
 8000d08:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d10:	bf1e      	ittt	ne
 8000d12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d16:	ea92 0f0c 	teqne	r2, ip
 8000d1a:	ea93 0f0c 	teqne	r3, ip
 8000d1e:	d06f      	beq.n	8000e00 <__aeabi_fmul+0xf8>
 8000d20:	441a      	add	r2, r3
 8000d22:	ea80 0c01 	eor.w	ip, r0, r1
 8000d26:	0240      	lsls	r0, r0, #9
 8000d28:	bf18      	it	ne
 8000d2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d2e:	d01e      	beq.n	8000d6e <__aeabi_fmul+0x66>
 8000d30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d3c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d44:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d48:	bf3e      	ittt	cc
 8000d4a:	0049      	lslcc	r1, r1, #1
 8000d4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d50:	005b      	lslcc	r3, r3, #1
 8000d52:	ea40 0001 	orr.w	r0, r0, r1
 8000d56:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d5a:	2afd      	cmp	r2, #253	; 0xfd
 8000d5c:	d81d      	bhi.n	8000d9a <__aeabi_fmul+0x92>
 8000d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d66:	bf08      	it	eq
 8000d68:	f020 0001 	biceq.w	r0, r0, #1
 8000d6c:	4770      	bx	lr
 8000d6e:	f090 0f00 	teq	r0, #0
 8000d72:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d76:	bf08      	it	eq
 8000d78:	0249      	lsleq	r1, r1, #9
 8000d7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d82:	3a7f      	subs	r2, #127	; 0x7f
 8000d84:	bfc2      	ittt	gt
 8000d86:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d8e:	4770      	bxgt	lr
 8000d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	3a01      	subs	r2, #1
 8000d9a:	dc5d      	bgt.n	8000e58 <__aeabi_fmul+0x150>
 8000d9c:	f112 0f19 	cmn.w	r2, #25
 8000da0:	bfdc      	itt	le
 8000da2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000da6:	4770      	bxle	lr
 8000da8:	f1c2 0200 	rsb	r2, r2, #0
 8000dac:	0041      	lsls	r1, r0, #1
 8000dae:	fa21 f102 	lsr.w	r1, r1, r2
 8000db2:	f1c2 0220 	rsb	r2, r2, #32
 8000db6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dba:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dbe:	f140 0000 	adc.w	r0, r0, #0
 8000dc2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dc6:	bf08      	it	eq
 8000dc8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dcc:	4770      	bx	lr
 8000dce:	f092 0f00 	teq	r2, #0
 8000dd2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd6:	bf02      	ittt	eq
 8000dd8:	0040      	lsleq	r0, r0, #1
 8000dda:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dde:	3a01      	subeq	r2, #1
 8000de0:	d0f9      	beq.n	8000dd6 <__aeabi_fmul+0xce>
 8000de2:	ea40 000c 	orr.w	r0, r0, ip
 8000de6:	f093 0f00 	teq	r3, #0
 8000dea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dee:	bf02      	ittt	eq
 8000df0:	0049      	lsleq	r1, r1, #1
 8000df2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df6:	3b01      	subeq	r3, #1
 8000df8:	d0f9      	beq.n	8000dee <__aeabi_fmul+0xe6>
 8000dfa:	ea41 010c 	orr.w	r1, r1, ip
 8000dfe:	e78f      	b.n	8000d20 <__aeabi_fmul+0x18>
 8000e00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e04:	ea92 0f0c 	teq	r2, ip
 8000e08:	bf18      	it	ne
 8000e0a:	ea93 0f0c 	teqne	r3, ip
 8000e0e:	d00a      	beq.n	8000e26 <__aeabi_fmul+0x11e>
 8000e10:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e14:	bf18      	it	ne
 8000e16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	d1d8      	bne.n	8000dce <__aeabi_fmul+0xc6>
 8000e1c:	ea80 0001 	eor.w	r0, r0, r1
 8000e20:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e24:	4770      	bx	lr
 8000e26:	f090 0f00 	teq	r0, #0
 8000e2a:	bf17      	itett	ne
 8000e2c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e30:	4608      	moveq	r0, r1
 8000e32:	f091 0f00 	teqne	r1, #0
 8000e36:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e3a:	d014      	beq.n	8000e66 <__aeabi_fmul+0x15e>
 8000e3c:	ea92 0f0c 	teq	r2, ip
 8000e40:	d101      	bne.n	8000e46 <__aeabi_fmul+0x13e>
 8000e42:	0242      	lsls	r2, r0, #9
 8000e44:	d10f      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e46:	ea93 0f0c 	teq	r3, ip
 8000e4a:	d103      	bne.n	8000e54 <__aeabi_fmul+0x14c>
 8000e4c:	024b      	lsls	r3, r1, #9
 8000e4e:	bf18      	it	ne
 8000e50:	4608      	movne	r0, r1
 8000e52:	d108      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e54:	ea80 0001 	eor.w	r0, r0, r1
 8000e58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e64:	4770      	bx	lr
 8000e66:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e6a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e6e:	4770      	bx	lr

08000e70 <__aeabi_fdiv>:
 8000e70:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e78:	bf1e      	ittt	ne
 8000e7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e7e:	ea92 0f0c 	teqne	r2, ip
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d069      	beq.n	8000f5c <__aeabi_fdiv+0xec>
 8000e88:	eba2 0203 	sub.w	r2, r2, r3
 8000e8c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e90:	0249      	lsls	r1, r1, #9
 8000e92:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e96:	d037      	beq.n	8000f08 <__aeabi_fdiv+0x98>
 8000e98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ea0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ea4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	bf38      	it	cc
 8000eac:	005b      	lslcc	r3, r3, #1
 8000eae:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eb2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	bf24      	itt	cs
 8000eba:	1a5b      	subcs	r3, r3, r1
 8000ebc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ec0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ec4:	bf24      	itt	cs
 8000ec6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ece:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ed2:	bf24      	itt	cs
 8000ed4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ed8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000edc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ee6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eea:	011b      	lsls	r3, r3, #4
 8000eec:	bf18      	it	ne
 8000eee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ef2:	d1e0      	bne.n	8000eb6 <__aeabi_fdiv+0x46>
 8000ef4:	2afd      	cmp	r2, #253	; 0xfd
 8000ef6:	f63f af50 	bhi.w	8000d9a <__aeabi_fmul+0x92>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f00:	bf08      	it	eq
 8000f02:	f020 0001 	biceq.w	r0, r0, #1
 8000f06:	4770      	bx	lr
 8000f08:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f10:	327f      	adds	r2, #127	; 0x7f
 8000f12:	bfc2      	ittt	gt
 8000f14:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f1c:	4770      	bxgt	lr
 8000f1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f22:	f04f 0300 	mov.w	r3, #0
 8000f26:	3a01      	subs	r2, #1
 8000f28:	e737      	b.n	8000d9a <__aeabi_fmul+0x92>
 8000f2a:	f092 0f00 	teq	r2, #0
 8000f2e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f32:	bf02      	ittt	eq
 8000f34:	0040      	lsleq	r0, r0, #1
 8000f36:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f3a:	3a01      	subeq	r2, #1
 8000f3c:	d0f9      	beq.n	8000f32 <__aeabi_fdiv+0xc2>
 8000f3e:	ea40 000c 	orr.w	r0, r0, ip
 8000f42:	f093 0f00 	teq	r3, #0
 8000f46:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f4a:	bf02      	ittt	eq
 8000f4c:	0049      	lsleq	r1, r1, #1
 8000f4e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f52:	3b01      	subeq	r3, #1
 8000f54:	d0f9      	beq.n	8000f4a <__aeabi_fdiv+0xda>
 8000f56:	ea41 010c 	orr.w	r1, r1, ip
 8000f5a:	e795      	b.n	8000e88 <__aeabi_fdiv+0x18>
 8000f5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f60:	ea92 0f0c 	teq	r2, ip
 8000f64:	d108      	bne.n	8000f78 <__aeabi_fdiv+0x108>
 8000f66:	0242      	lsls	r2, r0, #9
 8000f68:	f47f af7d 	bne.w	8000e66 <__aeabi_fmul+0x15e>
 8000f6c:	ea93 0f0c 	teq	r3, ip
 8000f70:	f47f af70 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e776      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f78:	ea93 0f0c 	teq	r3, ip
 8000f7c:	d104      	bne.n	8000f88 <__aeabi_fdiv+0x118>
 8000f7e:	024b      	lsls	r3, r1, #9
 8000f80:	f43f af4c 	beq.w	8000e1c <__aeabi_fmul+0x114>
 8000f84:	4608      	mov	r0, r1
 8000f86:	e76e      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f8c:	bf18      	it	ne
 8000f8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f92:	d1ca      	bne.n	8000f2a <__aeabi_fdiv+0xba>
 8000f94:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f98:	f47f af5c 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f9c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fa0:	f47f af3c 	bne.w	8000e1c <__aeabi_fmul+0x114>
 8000fa4:	e75f      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000fa6:	bf00      	nop

08000fa8 <__gesf2>:
 8000fa8:	f04f 3cff 	mov.w	ip, #4294967295
 8000fac:	e006      	b.n	8000fbc <__cmpsf2+0x4>
 8000fae:	bf00      	nop

08000fb0 <__lesf2>:
 8000fb0:	f04f 0c01 	mov.w	ip, #1
 8000fb4:	e002      	b.n	8000fbc <__cmpsf2+0x4>
 8000fb6:	bf00      	nop

08000fb8 <__cmpsf2>:
 8000fb8:	f04f 0c01 	mov.w	ip, #1
 8000fbc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fc0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fc4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fc8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fcc:	bf18      	it	ne
 8000fce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fd2:	d011      	beq.n	8000ff8 <__cmpsf2+0x40>
 8000fd4:	b001      	add	sp, #4
 8000fd6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fda:	bf18      	it	ne
 8000fdc:	ea90 0f01 	teqne	r0, r1
 8000fe0:	bf58      	it	pl
 8000fe2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fe6:	bf88      	it	hi
 8000fe8:	17c8      	asrhi	r0, r1, #31
 8000fea:	bf38      	it	cc
 8000fec:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ff0:	bf18      	it	ne
 8000ff2:	f040 0001 	orrne.w	r0, r0, #1
 8000ff6:	4770      	bx	lr
 8000ff8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ffc:	d102      	bne.n	8001004 <__cmpsf2+0x4c>
 8000ffe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001002:	d105      	bne.n	8001010 <__cmpsf2+0x58>
 8001004:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001008:	d1e4      	bne.n	8000fd4 <__cmpsf2+0x1c>
 800100a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800100e:	d0e1      	beq.n	8000fd4 <__cmpsf2+0x1c>
 8001010:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <__aeabi_cfrcmple>:
 8001018:	4684      	mov	ip, r0
 800101a:	4608      	mov	r0, r1
 800101c:	4661      	mov	r1, ip
 800101e:	e7ff      	b.n	8001020 <__aeabi_cfcmpeq>

08001020 <__aeabi_cfcmpeq>:
 8001020:	b50f      	push	{r0, r1, r2, r3, lr}
 8001022:	f7ff ffc9 	bl	8000fb8 <__cmpsf2>
 8001026:	2800      	cmp	r0, #0
 8001028:	bf48      	it	mi
 800102a:	f110 0f00 	cmnmi.w	r0, #0
 800102e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001030 <__aeabi_fcmpeq>:
 8001030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001034:	f7ff fff4 	bl	8001020 <__aeabi_cfcmpeq>
 8001038:	bf0c      	ite	eq
 800103a:	2001      	moveq	r0, #1
 800103c:	2000      	movne	r0, #0
 800103e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001042:	bf00      	nop

08001044 <__aeabi_fcmplt>:
 8001044:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001048:	f7ff ffea 	bl	8001020 <__aeabi_cfcmpeq>
 800104c:	bf34      	ite	cc
 800104e:	2001      	movcc	r0, #1
 8001050:	2000      	movcs	r0, #0
 8001052:	f85d fb08 	ldr.w	pc, [sp], #8
 8001056:	bf00      	nop

08001058 <__aeabi_fcmple>:
 8001058:	f84d ed08 	str.w	lr, [sp, #-8]!
 800105c:	f7ff ffe0 	bl	8001020 <__aeabi_cfcmpeq>
 8001060:	bf94      	ite	ls
 8001062:	2001      	movls	r0, #1
 8001064:	2000      	movhi	r0, #0
 8001066:	f85d fb08 	ldr.w	pc, [sp], #8
 800106a:	bf00      	nop

0800106c <__aeabi_fcmpge>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff ffd2 	bl	8001018 <__aeabi_cfrcmple>
 8001074:	bf94      	ite	ls
 8001076:	2001      	movls	r0, #1
 8001078:	2000      	movhi	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmpgt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffc8 	bl	8001018 <__aeabi_cfrcmple>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmpun>:
 8001094:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001098:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800109c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010a0:	d102      	bne.n	80010a8 <__aeabi_fcmpun+0x14>
 80010a2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010a6:	d108      	bne.n	80010ba <__aeabi_fcmpun+0x26>
 80010a8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010ac:	d102      	bne.n	80010b4 <__aeabi_fcmpun+0x20>
 80010ae:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010b2:	d102      	bne.n	80010ba <__aeabi_fcmpun+0x26>
 80010b4:	f04f 0000 	mov.w	r0, #0
 80010b8:	4770      	bx	lr
 80010ba:	f04f 0001 	mov.w	r0, #1
 80010be:	4770      	bx	lr

080010c0 <__aeabi_f2iz>:
 80010c0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010c4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010c8:	d30f      	bcc.n	80010ea <__aeabi_f2iz+0x2a>
 80010ca:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010ce:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010d2:	d90d      	bls.n	80010f0 <__aeabi_f2iz+0x30>
 80010d4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010dc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010e0:	fa23 f002 	lsr.w	r0, r3, r2
 80010e4:	bf18      	it	ne
 80010e6:	4240      	negne	r0, r0
 80010e8:	4770      	bx	lr
 80010ea:	f04f 0000 	mov.w	r0, #0
 80010ee:	4770      	bx	lr
 80010f0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010f4:	d101      	bne.n	80010fa <__aeabi_f2iz+0x3a>
 80010f6:	0242      	lsls	r2, r0, #9
 80010f8:	d105      	bne.n	8001106 <__aeabi_f2iz+0x46>
 80010fa:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010fe:	bf08      	it	eq
 8001100:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001104:	4770      	bx	lr
 8001106:	f04f 0000 	mov.w	r0, #0
 800110a:	4770      	bx	lr

0800110c <_ZSt4asinf>:
  using ::asin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  asin(float __x)
  { return __builtin_asinf(__x); }
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f006 fca3 	bl	8007a60 <asinf>
 800111a:	4603      	mov	r3, r0
 800111c:	4618      	mov	r0, r3
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f006 fcbd 	bl	8007aac <sqrtf>
 8001132:	4603      	mov	r3, r0
 8001134:	4618      	mov	r0, r3
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f001 f8b2 	bl	80022ae <_ZNSaIdED1Ev>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4618      	mov	r0, r3
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <_ZNSt12_Vector_baseIdSaIdEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4618      	mov	r0, r3
 8001160:	f001 f895 	bl	800228e <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implC1Ev>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4618      	mov	r0, r3
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <_ZNSt6vectorIdSaIdEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 800116e:	b580      	push	{r7, lr}
 8001170:	b082      	sub	sp, #8
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ffeb 	bl	8001154 <_ZNSt12_Vector_baseIdSaIdEEC1Ev>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4618      	mov	r0, r3
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800118c:	f001 fd04 	bl	8002b98 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(2000);
 8001190:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001194:	f001 fd62 	bl	8002c5c <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001198:	f000 f888 	bl	80012ac <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800119c:	f000 fb44 	bl	8001828 <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 80011a0:	f000 f8d2 	bl	8001348 <_ZL12MX_I2C1_Initv>
  MX_TIM2_Init();
 80011a4:	f000 f9ce 	bl	8001544 <_ZL12MX_TIM2_Initv>
  MX_TIM1_Init();
 80011a8:	f000 f902 	bl	80013b0 <_ZL12MX_TIM1_Initv>
  MX_USART2_UART_Init();
 80011ac:	f000 fb0e 	bl	80017cc <_ZL19MX_USART2_UART_Initv>
  MX_TIM3_Init();
 80011b0:	f000 fa24 	bl	80015fc <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 80011b4:	f000 faac 	bl	8001710 <_ZL12MX_TIM4_Initv>
  /* USER CODE BEGIN 2 */

  MPU6050_Baslat();
 80011b8:	f000 fbba 	bl	8001930 <_Z14MPU6050_Baslatv>
  //Gyro kalibrasyon hatalarını hesapla.
  HAL_Delay(2000);
 80011bc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80011c0:	f001 fd4c 	bl	8002c5c <HAL_Delay>
  GyroXh=GyroErr(GYRO_X_ADDR)/65.5; GyroYh=GyroErr(GYRO_Y_ADDR)/65.5; GyroZh=GyroErr(GYRO_Z_ADDR)/65.5;
 80011c4:	2043      	movs	r0, #67	; 0x43
 80011c6:	f000 fd9f 	bl	8001d08 <_Z7GyroErrh>
 80011ca:	4603      	mov	r3, r0
 80011cc:	492d      	ldr	r1, [pc, #180]	; (8001284 <main+0xfc>)
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff fe4e 	bl	8000e70 <__aeabi_fdiv>
 80011d4:	4603      	mov	r3, r0
 80011d6:	461a      	mov	r2, r3
 80011d8:	4b2b      	ldr	r3, [pc, #172]	; (8001288 <main+0x100>)
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	2045      	movs	r0, #69	; 0x45
 80011de:	f000 fd93 	bl	8001d08 <_Z7GyroErrh>
 80011e2:	4603      	mov	r3, r0
 80011e4:	4927      	ldr	r1, [pc, #156]	; (8001284 <main+0xfc>)
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff fe42 	bl	8000e70 <__aeabi_fdiv>
 80011ec:	4603      	mov	r3, r0
 80011ee:	461a      	mov	r2, r3
 80011f0:	4b26      	ldr	r3, [pc, #152]	; (800128c <main+0x104>)
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	2047      	movs	r0, #71	; 0x47
 80011f6:	f000 fd87 	bl	8001d08 <_Z7GyroErrh>
 80011fa:	4603      	mov	r3, r0
 80011fc:	4921      	ldr	r1, [pc, #132]	; (8001284 <main+0xfc>)
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff fe36 	bl	8000e70 <__aeabi_fdiv>
 8001204:	4603      	mov	r3, r0
 8001206:	461a      	mov	r2, r3
 8001208:	4b21      	ldr	r3, [pc, #132]	; (8001290 <main+0x108>)
 800120a:	601a      	str	r2, [r3, #0]
  //Kontrolcü Timer'ı
  HAL_TIM_Base_Start_IT(&htim2);
 800120c:	4821      	ldr	r0, [pc, #132]	; (8001294 <main+0x10c>)
 800120e:	f003 fcc1 	bl	8004b94 <HAL_TIM_Base_Start_IT>

  //Micros timer
  HAL_TIM_Base_Start(&htim3);
 8001212:	4821      	ldr	r0, [pc, #132]	; (8001298 <main+0x110>)
 8001214:	f003 fc74 	bl	8004b00 <HAL_TIM_Base_Start>


  //PWM çıkış timer'ları
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001218:	2100      	movs	r1, #0
 800121a:	4820      	ldr	r0, [pc, #128]	; (800129c <main+0x114>)
 800121c:	f003 fd5c 	bl	8004cd8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001220:	2104      	movs	r1, #4
 8001222:	481e      	ldr	r0, [pc, #120]	; (800129c <main+0x114>)
 8001224:	f003 fd58 	bl	8004cd8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001228:	2108      	movs	r1, #8
 800122a:	481c      	ldr	r0, [pc, #112]	; (800129c <main+0x114>)
 800122c:	f003 fd54 	bl	8004cd8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001230:	210c      	movs	r1, #12
 8001232:	481a      	ldr	r0, [pc, #104]	; (800129c <main+0x114>)
 8001234:	f003 fd50 	bl	8004cd8 <HAL_TIM_PWM_Start>

  //PPM Input Capture Kanalları
  //HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8001238:	2104      	movs	r1, #4
 800123a:	4817      	ldr	r0, [pc, #92]	; (8001298 <main+0x110>)
 800123c:	f003 fe46 	bl	8004ecc <HAL_TIM_IC_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //micros = __HAL_TIM_GET_COUNTER(&htim3);
	  //sprintf(buf,"%d\r\n",int(roll)); // @suppress("Float formatting support")
	  if(HAL_GetTick()- sent_time > 10) {
 8001240:	f001 fd02 	bl	8002c48 <HAL_GetTick>
 8001244:	4603      	mov	r3, r0
 8001246:	4a16      	ldr	r2, [pc, #88]	; (80012a0 <main+0x118>)
 8001248:	6812      	ldr	r2, [r2, #0]
 800124a:	1a9b      	subs	r3, r3, r2
 800124c:	2b0a      	cmp	r3, #10
 800124e:	bf8c      	ite	hi
 8001250:	2301      	movhi	r3, #1
 8001252:	2300      	movls	r3, #0
 8001254:	b2db      	uxtb	r3, r3
 8001256:	2b00      	cmp	r3, #0
 8001258:	d00e      	beq.n	8001278 <main+0xf0>
		  TelemPack();
 800125a:	f000 fc41 	bl	8001ae0 <_Z9TelemPackv>
		  HAL_UART_Transmit(&huart2, (uint8_t*)buf, sizeof(struct telem_pack), 1000);
 800125e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001262:	226c      	movs	r2, #108	; 0x6c
 8001264:	490f      	ldr	r1, [pc, #60]	; (80012a4 <main+0x11c>)
 8001266:	4810      	ldr	r0, [pc, #64]	; (80012a8 <main+0x120>)
 8001268:	f004 ff74 	bl	8006154 <HAL_UART_Transmit>
		  sent_time = HAL_GetTick();
 800126c:	f001 fcec 	bl	8002c48 <HAL_GetTick>
 8001270:	4603      	mov	r3, r0
 8001272:	461a      	mov	r2, r3
 8001274:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <main+0x118>)
 8001276:	601a      	str	r2, [r3, #0]

	  }
	  //sprintf(buf,"%s\n","test");

	  Check_Arm();
 8001278:	f000 fb8e 	bl	8001998 <_Z9Check_Armv>
	  Check_Disarm();
 800127c:	f000 fbe4 	bl	8001a48 <_Z12Check_Disarmv>
	  if(HAL_GetTick()- sent_time > 10) {
 8001280:	e7de      	b.n	8001240 <main+0xb8>
 8001282:	bf00      	nop
 8001284:	42830000 	.word	0x42830000
 8001288:	20000258 	.word	0x20000258
 800128c:	2000025c 	.word	0x2000025c
 8001290:	20000260 	.word	0x20000260
 8001294:	20000128 	.word	0x20000128
 8001298:	20000170 	.word	0x20000170
 800129c:	200000e0 	.word	0x200000e0
 80012a0:	200007cc 	.word	0x200007cc
 80012a4:	20000320 	.word	0x20000320
 80012a8:	20000200 	.word	0x20000200

080012ac <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b090      	sub	sp, #64	; 0x40
 80012b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012b2:	f107 0318 	add.w	r3, r7, #24
 80012b6:	2228      	movs	r2, #40	; 0x28
 80012b8:	2100      	movs	r1, #0
 80012ba:	4618      	mov	r0, r3
 80012bc:	f006 ff8e 	bl	80081dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012c0:	1d3b      	adds	r3, r7, #4
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]
 80012c8:	609a      	str	r2, [r3, #8]
 80012ca:	60da      	str	r2, [r3, #12]
 80012cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012ce:	2301      	movs	r3, #1
 80012d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012d8:	2300      	movs	r3, #0
 80012da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012dc:	2301      	movs	r3, #1
 80012de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012e0:	2302      	movs	r3, #2
 80012e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80012ea:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80012ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f0:	f107 0318 	add.w	r3, r7, #24
 80012f4:	4618      	mov	r0, r3
 80012f6:	f002 ff99 	bl	800422c <HAL_RCC_OscConfig>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	bf14      	ite	ne
 8001300:	2301      	movne	r3, #1
 8001302:	2300      	moveq	r3, #0
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 800130a:	f000 ffbb 	bl	8002284 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800130e:	230f      	movs	r3, #15
 8001310:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001312:	2302      	movs	r3, #2
 8001314:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800131a:	2300      	movs	r3, #0
 800131c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800131e:	2300      	movs	r3, #0
 8001320:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	2101      	movs	r1, #1
 8001326:	4618      	mov	r0, r3
 8001328:	f003 fa00 	bl	800472c <HAL_RCC_ClockConfig>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	bf14      	ite	ne
 8001332:	2301      	movne	r3, #1
 8001334:	2300      	moveq	r3, #0
 8001336:	b2db      	uxtb	r3, r3
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <_Z18SystemClock_Configv+0x94>
  {
    Error_Handler();
 800133c:	f000 ffa2 	bl	8002284 <Error_Handler>
  }
}
 8001340:	bf00      	nop
 8001342:	3740      	adds	r7, #64	; 0x40
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800134c:	4b15      	ldr	r3, [pc, #84]	; (80013a4 <_ZL12MX_I2C1_Initv+0x5c>)
 800134e:	4a16      	ldr	r2, [pc, #88]	; (80013a8 <_ZL12MX_I2C1_Initv+0x60>)
 8001350:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001352:	4b14      	ldr	r3, [pc, #80]	; (80013a4 <_ZL12MX_I2C1_Initv+0x5c>)
 8001354:	4a15      	ldr	r2, [pc, #84]	; (80013ac <_ZL12MX_I2C1_Initv+0x64>)
 8001356:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001358:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <_ZL12MX_I2C1_Initv+0x5c>)
 800135a:	2200      	movs	r2, #0
 800135c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800135e:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <_ZL12MX_I2C1_Initv+0x5c>)
 8001360:	2200      	movs	r2, #0
 8001362:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001364:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <_ZL12MX_I2C1_Initv+0x5c>)
 8001366:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800136a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800136c:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <_ZL12MX_I2C1_Initv+0x5c>)
 800136e:	2200      	movs	r2, #0
 8001370:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001372:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <_ZL12MX_I2C1_Initv+0x5c>)
 8001374:	2200      	movs	r2, #0
 8001376:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001378:	4b0a      	ldr	r3, [pc, #40]	; (80013a4 <_ZL12MX_I2C1_Initv+0x5c>)
 800137a:	2200      	movs	r2, #0
 800137c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800137e:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <_ZL12MX_I2C1_Initv+0x5c>)
 8001380:	2200      	movs	r2, #0
 8001382:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001384:	4807      	ldr	r0, [pc, #28]	; (80013a4 <_ZL12MX_I2C1_Initv+0x5c>)
 8001386:	f001 ff51 	bl	800322c <HAL_I2C_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	bf14      	ite	ne
 8001390:	2301      	movne	r3, #1
 8001392:	2300      	moveq	r3, #0
 8001394:	b2db      	uxtb	r3, r3
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 800139a:	f000 ff73 	bl	8002284 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	2000008c 	.word	0x2000008c
 80013a8:	40005400 	.word	0x40005400
 80013ac:	00061a80 	.word	0x00061a80

080013b0 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b092      	sub	sp, #72	; 0x48
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
 80013d0:	615a      	str	r2, [r3, #20]
 80013d2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	2220      	movs	r2, #32
 80013d8:	2100      	movs	r1, #0
 80013da:	4618      	mov	r0, r3
 80013dc:	f006 fefe 	bl	80081dc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013e0:	4b56      	ldr	r3, [pc, #344]	; (800153c <_ZL12MX_TIM1_Initv+0x18c>)
 80013e2:	4a57      	ldr	r2, [pc, #348]	; (8001540 <_ZL12MX_TIM1_Initv+0x190>)
 80013e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32-1;
 80013e6:	4b55      	ldr	r3, [pc, #340]	; (800153c <_ZL12MX_TIM1_Initv+0x18c>)
 80013e8:	221f      	movs	r2, #31
 80013ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ec:	4b53      	ldr	r3, [pc, #332]	; (800153c <_ZL12MX_TIM1_Initv+0x18c>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 80013f2:	4b52      	ldr	r3, [pc, #328]	; (800153c <_ZL12MX_TIM1_Initv+0x18c>)
 80013f4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80013f8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013fa:	4b50      	ldr	r3, [pc, #320]	; (800153c <_ZL12MX_TIM1_Initv+0x18c>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001400:	4b4e      	ldr	r3, [pc, #312]	; (800153c <_ZL12MX_TIM1_Initv+0x18c>)
 8001402:	2200      	movs	r2, #0
 8001404:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001406:	4b4d      	ldr	r3, [pc, #308]	; (800153c <_ZL12MX_TIM1_Initv+0x18c>)
 8001408:	2200      	movs	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800140c:	484b      	ldr	r0, [pc, #300]	; (800153c <_ZL12MX_TIM1_Initv+0x18c>)
 800140e:	f003 fc13 	bl	8004c38 <HAL_TIM_PWM_Init>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	bf14      	ite	ne
 8001418:	2301      	movne	r3, #1
 800141a:	2300      	moveq	r3, #0
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 8001422:	f000 ff2f 	bl	8002284 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001426:	2300      	movs	r3, #0
 8001428:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800142a:	2300      	movs	r3, #0
 800142c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800142e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001432:	4619      	mov	r1, r3
 8001434:	4841      	ldr	r0, [pc, #260]	; (800153c <_ZL12MX_TIM1_Initv+0x18c>)
 8001436:	f004 fd7f 	bl	8005f38 <HAL_TIMEx_MasterConfigSynchronization>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	bf14      	ite	ne
 8001440:	2301      	movne	r3, #1
 8001442:	2300      	moveq	r3, #0
 8001444:	b2db      	uxtb	r3, r3
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 800144a:	f000 ff1b 	bl	8002284 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800144e:	2360      	movs	r3, #96	; 0x60
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001452:	2300      	movs	r3, #0
 8001454:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001456:	2300      	movs	r3, #0
 8001458:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800145a:	2300      	movs	r3, #0
 800145c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800145e:	2300      	movs	r3, #0
 8001460:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001462:	2300      	movs	r3, #0
 8001464:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001466:	2300      	movs	r3, #0
 8001468:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800146a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800146e:	2200      	movs	r2, #0
 8001470:	4619      	mov	r1, r3
 8001472:	4832      	ldr	r0, [pc, #200]	; (800153c <_ZL12MX_TIM1_Initv+0x18c>)
 8001474:	f003 ffcc 	bl	8005410 <HAL_TIM_PWM_ConfigChannel>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	bf14      	ite	ne
 800147e:	2301      	movne	r3, #1
 8001480:	2300      	moveq	r3, #0
 8001482:	b2db      	uxtb	r3, r3
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <_ZL12MX_TIM1_Initv+0xdc>
  {
    Error_Handler();
 8001488:	f000 fefc 	bl	8002284 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800148c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001490:	2204      	movs	r2, #4
 8001492:	4619      	mov	r1, r3
 8001494:	4829      	ldr	r0, [pc, #164]	; (800153c <_ZL12MX_TIM1_Initv+0x18c>)
 8001496:	f003 ffbb 	bl	8005410 <HAL_TIM_PWM_ConfigChannel>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	bf14      	ite	ne
 80014a0:	2301      	movne	r3, #1
 80014a2:	2300      	moveq	r3, #0
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <_ZL12MX_TIM1_Initv+0xfe>
  {
    Error_Handler();
 80014aa:	f000 feeb 	bl	8002284 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b2:	2208      	movs	r2, #8
 80014b4:	4619      	mov	r1, r3
 80014b6:	4821      	ldr	r0, [pc, #132]	; (800153c <_ZL12MX_TIM1_Initv+0x18c>)
 80014b8:	f003 ffaa 	bl	8005410 <HAL_TIM_PWM_ConfigChannel>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	bf14      	ite	ne
 80014c2:	2301      	movne	r3, #1
 80014c4:	2300      	moveq	r3, #0
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <_ZL12MX_TIM1_Initv+0x120>
  {
    Error_Handler();
 80014cc:	f000 feda 	bl	8002284 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d4:	220c      	movs	r2, #12
 80014d6:	4619      	mov	r1, r3
 80014d8:	4818      	ldr	r0, [pc, #96]	; (800153c <_ZL12MX_TIM1_Initv+0x18c>)
 80014da:	f003 ff99 	bl	8005410 <HAL_TIM_PWM_ConfigChannel>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	bf14      	ite	ne
 80014e4:	2301      	movne	r3, #1
 80014e6:	2300      	moveq	r3, #0
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <_ZL12MX_TIM1_Initv+0x142>
  {
    Error_Handler();
 80014ee:	f000 fec9 	bl	8002284 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014f2:	2300      	movs	r3, #0
 80014f4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014f6:	2300      	movs	r3, #0
 80014f8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014fe:	2300      	movs	r3, #0
 8001500:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001502:	2300      	movs	r3, #0
 8001504:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001506:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800150a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800150c:	2300      	movs	r3, #0
 800150e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001510:	1d3b      	adds	r3, r7, #4
 8001512:	4619      	mov	r1, r3
 8001514:	4809      	ldr	r0, [pc, #36]	; (800153c <_ZL12MX_TIM1_Initv+0x18c>)
 8001516:	f004 fd6d 	bl	8005ff4 <HAL_TIMEx_ConfigBreakDeadTime>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	bf14      	ite	ne
 8001520:	2301      	movne	r3, #1
 8001522:	2300      	moveq	r3, #0
 8001524:	b2db      	uxtb	r3, r3
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <_ZL12MX_TIM1_Initv+0x17e>
  {
    Error_Handler();
 800152a:	f000 feab 	bl	8002284 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800152e:	4803      	ldr	r0, [pc, #12]	; (800153c <_ZL12MX_TIM1_Initv+0x18c>)
 8001530:	f001 f9f4 	bl	800291c <HAL_TIM_MspPostInit>

}
 8001534:	bf00      	nop
 8001536:	3748      	adds	r7, #72	; 0x48
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	200000e0 	.word	0x200000e0
 8001540:	40012c00 	.word	0x40012c00

08001544 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800154a:	f107 0308 	add.w	r3, r7, #8
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	609a      	str	r2, [r3, #8]
 8001556:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001558:	463b      	mov	r3, r7
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001560:	4b25      	ldr	r3, [pc, #148]	; (80015f8 <_ZL12MX_TIM2_Initv+0xb4>)
 8001562:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001566:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 8001568:	4b23      	ldr	r3, [pc, #140]	; (80015f8 <_ZL12MX_TIM2_Initv+0xb4>)
 800156a:	221f      	movs	r2, #31
 800156c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800156e:	4b22      	ldr	r3, [pc, #136]	; (80015f8 <_ZL12MX_TIM2_Initv+0xb4>)
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 8001574:	4b20      	ldr	r3, [pc, #128]	; (80015f8 <_ZL12MX_TIM2_Initv+0xb4>)
 8001576:	f241 3288 	movw	r2, #5000	; 0x1388
 800157a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800157c:	4b1e      	ldr	r3, [pc, #120]	; (80015f8 <_ZL12MX_TIM2_Initv+0xb4>)
 800157e:	2200      	movs	r2, #0
 8001580:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001582:	4b1d      	ldr	r3, [pc, #116]	; (80015f8 <_ZL12MX_TIM2_Initv+0xb4>)
 8001584:	2200      	movs	r2, #0
 8001586:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001588:	481b      	ldr	r0, [pc, #108]	; (80015f8 <_ZL12MX_TIM2_Initv+0xb4>)
 800158a:	f003 fa69 	bl	8004a60 <HAL_TIM_Base_Init>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	bf14      	ite	ne
 8001594:	2301      	movne	r3, #1
 8001596:	2300      	moveq	r3, #0
 8001598:	b2db      	uxtb	r3, r3
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 800159e:	f000 fe71 	bl	8002284 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015a8:	f107 0308 	add.w	r3, r7, #8
 80015ac:	4619      	mov	r1, r3
 80015ae:	4812      	ldr	r0, [pc, #72]	; (80015f8 <_ZL12MX_TIM2_Initv+0xb4>)
 80015b0:	f003 ffec 	bl	800558c <HAL_TIM_ConfigClockSource>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	bf14      	ite	ne
 80015ba:	2301      	movne	r3, #1
 80015bc:	2300      	moveq	r3, #0
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 80015c4:	f000 fe5e 	bl	8002284 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015c8:	2300      	movs	r3, #0
 80015ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015cc:	2300      	movs	r3, #0
 80015ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015d0:	463b      	mov	r3, r7
 80015d2:	4619      	mov	r1, r3
 80015d4:	4808      	ldr	r0, [pc, #32]	; (80015f8 <_ZL12MX_TIM2_Initv+0xb4>)
 80015d6:	f004 fcaf 	bl	8005f38 <HAL_TIMEx_MasterConfigSynchronization>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	bf14      	ite	ne
 80015e0:	2301      	movne	r3, #1
 80015e2:	2300      	moveq	r3, #0
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 80015ea:	f000 fe4b 	bl	8002284 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015ee:	bf00      	nop
 80015f0:	3718      	adds	r7, #24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000128 	.word	0x20000128

080015fc <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08a      	sub	sp, #40	; 0x28
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001602:	f107 0318 	add.w	r3, r7, #24
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	605a      	str	r2, [r3, #4]
 800160c:	609a      	str	r2, [r3, #8]
 800160e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001610:	f107 0310 	add.w	r3, r7, #16
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800161a:	463b      	mov	r3, r7
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001626:	4b38      	ldr	r3, [pc, #224]	; (8001708 <_ZL12MX_TIM3_Initv+0x10c>)
 8001628:	4a38      	ldr	r2, [pc, #224]	; (800170c <_ZL12MX_TIM3_Initv+0x110>)
 800162a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32-1;
 800162c:	4b36      	ldr	r3, [pc, #216]	; (8001708 <_ZL12MX_TIM3_Initv+0x10c>)
 800162e:	221f      	movs	r2, #31
 8001630:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001632:	4b35      	ldr	r3, [pc, #212]	; (8001708 <_ZL12MX_TIM3_Initv+0x10c>)
 8001634:	2200      	movs	r2, #0
 8001636:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001638:	4b33      	ldr	r3, [pc, #204]	; (8001708 <_ZL12MX_TIM3_Initv+0x10c>)
 800163a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800163e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001640:	4b31      	ldr	r3, [pc, #196]	; (8001708 <_ZL12MX_TIM3_Initv+0x10c>)
 8001642:	2200      	movs	r2, #0
 8001644:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001646:	4b30      	ldr	r3, [pc, #192]	; (8001708 <_ZL12MX_TIM3_Initv+0x10c>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800164c:	482e      	ldr	r0, [pc, #184]	; (8001708 <_ZL12MX_TIM3_Initv+0x10c>)
 800164e:	f003 fa07 	bl	8004a60 <HAL_TIM_Base_Init>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	bf14      	ite	ne
 8001658:	2301      	movne	r3, #1
 800165a:	2300      	moveq	r3, #0
 800165c:	b2db      	uxtb	r3, r3
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <_ZL12MX_TIM3_Initv+0x6a>
  {
    Error_Handler();
 8001662:	f000 fe0f 	bl	8002284 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001666:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800166a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800166c:	f107 0318 	add.w	r3, r7, #24
 8001670:	4619      	mov	r1, r3
 8001672:	4825      	ldr	r0, [pc, #148]	; (8001708 <_ZL12MX_TIM3_Initv+0x10c>)
 8001674:	f003 ff8a 	bl	800558c <HAL_TIM_ConfigClockSource>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	bf14      	ite	ne
 800167e:	2301      	movne	r3, #1
 8001680:	2300      	moveq	r3, #0
 8001682:	b2db      	uxtb	r3, r3
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <_ZL12MX_TIM3_Initv+0x90>
  {
    Error_Handler();
 8001688:	f000 fdfc 	bl	8002284 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800168c:	481e      	ldr	r0, [pc, #120]	; (8001708 <_ZL12MX_TIM3_Initv+0x10c>)
 800168e:	f003 fbc5 	bl	8004e1c <HAL_TIM_IC_Init>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	bf14      	ite	ne
 8001698:	2301      	movne	r3, #1
 800169a:	2300      	moveq	r3, #0
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <_ZL12MX_TIM3_Initv+0xaa>
  {
    Error_Handler();
 80016a2:	f000 fdef 	bl	8002284 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a6:	2300      	movs	r3, #0
 80016a8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016aa:	2300      	movs	r3, #0
 80016ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016ae:	f107 0310 	add.w	r3, r7, #16
 80016b2:	4619      	mov	r1, r3
 80016b4:	4814      	ldr	r0, [pc, #80]	; (8001708 <_ZL12MX_TIM3_Initv+0x10c>)
 80016b6:	f004 fc3f 	bl	8005f38 <HAL_TIMEx_MasterConfigSynchronization>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	bf14      	ite	ne
 80016c0:	2301      	movne	r3, #1
 80016c2:	2300      	moveq	r3, #0
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <_ZL12MX_TIM3_Initv+0xd2>
  {
    Error_Handler();
 80016ca:	f000 fddb 	bl	8002284 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80016ce:	2300      	movs	r3, #0
 80016d0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80016d2:	2301      	movs	r3, #1
 80016d4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80016d6:	2300      	movs	r3, #0
 80016d8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80016da:	2300      	movs	r3, #0
 80016dc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80016de:	463b      	mov	r3, r7
 80016e0:	2204      	movs	r2, #4
 80016e2:	4619      	mov	r1, r3
 80016e4:	4808      	ldr	r0, [pc, #32]	; (8001708 <_ZL12MX_TIM3_Initv+0x10c>)
 80016e6:	f003 fdff 	bl	80052e8 <HAL_TIM_IC_ConfigChannel>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	bf14      	ite	ne
 80016f0:	2301      	movne	r3, #1
 80016f2:	2300      	moveq	r3, #0
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <_ZL12MX_TIM3_Initv+0x102>
  {
    Error_Handler();
 80016fa:	f000 fdc3 	bl	8002284 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80016fe:	bf00      	nop
 8001700:	3728      	adds	r7, #40	; 0x28
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000170 	.word	0x20000170
 800170c:	40000400 	.word	0x40000400

08001710 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001716:	f107 0308 	add.w	r3, r7, #8
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	605a      	str	r2, [r3, #4]
 8001720:	609a      	str	r2, [r3, #8]
 8001722:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001724:	463b      	mov	r3, r7
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800172c:	4b25      	ldr	r3, [pc, #148]	; (80017c4 <_ZL12MX_TIM4_Initv+0xb4>)
 800172e:	4a26      	ldr	r2, [pc, #152]	; (80017c8 <_ZL12MX_TIM4_Initv+0xb8>)
 8001730:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 32000-1;
 8001732:	4b24      	ldr	r3, [pc, #144]	; (80017c4 <_ZL12MX_TIM4_Initv+0xb4>)
 8001734:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8001738:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800173a:	4b22      	ldr	r3, [pc, #136]	; (80017c4 <_ZL12MX_TIM4_Initv+0xb4>)
 800173c:	2200      	movs	r2, #0
 800173e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001740:	4b20      	ldr	r3, [pc, #128]	; (80017c4 <_ZL12MX_TIM4_Initv+0xb4>)
 8001742:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001746:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001748:	4b1e      	ldr	r3, [pc, #120]	; (80017c4 <_ZL12MX_TIM4_Initv+0xb4>)
 800174a:	2200      	movs	r2, #0
 800174c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800174e:	4b1d      	ldr	r3, [pc, #116]	; (80017c4 <_ZL12MX_TIM4_Initv+0xb4>)
 8001750:	2200      	movs	r2, #0
 8001752:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001754:	481b      	ldr	r0, [pc, #108]	; (80017c4 <_ZL12MX_TIM4_Initv+0xb4>)
 8001756:	f003 f983 	bl	8004a60 <HAL_TIM_Base_Init>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	bf14      	ite	ne
 8001760:	2301      	movne	r3, #1
 8001762:	2300      	moveq	r3, #0
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <_ZL12MX_TIM4_Initv+0x5e>
  {
    Error_Handler();
 800176a:	f000 fd8b 	bl	8002284 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800176e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001772:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001774:	f107 0308 	add.w	r3, r7, #8
 8001778:	4619      	mov	r1, r3
 800177a:	4812      	ldr	r0, [pc, #72]	; (80017c4 <_ZL12MX_TIM4_Initv+0xb4>)
 800177c:	f003 ff06 	bl	800558c <HAL_TIM_ConfigClockSource>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	bf14      	ite	ne
 8001786:	2301      	movne	r3, #1
 8001788:	2300      	moveq	r3, #0
 800178a:	b2db      	uxtb	r3, r3
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <_ZL12MX_TIM4_Initv+0x84>
  {
    Error_Handler();
 8001790:	f000 fd78 	bl	8002284 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001794:	2300      	movs	r3, #0
 8001796:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001798:	2300      	movs	r3, #0
 800179a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800179c:	463b      	mov	r3, r7
 800179e:	4619      	mov	r1, r3
 80017a0:	4808      	ldr	r0, [pc, #32]	; (80017c4 <_ZL12MX_TIM4_Initv+0xb4>)
 80017a2:	f004 fbc9 	bl	8005f38 <HAL_TIMEx_MasterConfigSynchronization>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	bf14      	ite	ne
 80017ac:	2301      	movne	r3, #1
 80017ae:	2300      	moveq	r3, #0
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <_ZL12MX_TIM4_Initv+0xaa>
  {
    Error_Handler();
 80017b6:	f000 fd65 	bl	8002284 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80017ba:	bf00      	nop
 80017bc:	3718      	adds	r7, #24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	200001b8 	.word	0x200001b8
 80017c8:	40000800 	.word	0x40000800

080017cc <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017d0:	4b13      	ldr	r3, [pc, #76]	; (8001820 <_ZL19MX_USART2_UART_Initv+0x54>)
 80017d2:	4a14      	ldr	r2, [pc, #80]	; (8001824 <_ZL19MX_USART2_UART_Initv+0x58>)
 80017d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80017d6:	4b12      	ldr	r3, [pc, #72]	; (8001820 <_ZL19MX_USART2_UART_Initv+0x54>)
 80017d8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017de:	4b10      	ldr	r3, [pc, #64]	; (8001820 <_ZL19MX_USART2_UART_Initv+0x54>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017e4:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <_ZL19MX_USART2_UART_Initv+0x54>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017ea:	4b0d      	ldr	r3, [pc, #52]	; (8001820 <_ZL19MX_USART2_UART_Initv+0x54>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017f0:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <_ZL19MX_USART2_UART_Initv+0x54>)
 80017f2:	220c      	movs	r2, #12
 80017f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017f6:	4b0a      	ldr	r3, [pc, #40]	; (8001820 <_ZL19MX_USART2_UART_Initv+0x54>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017fc:	4b08      	ldr	r3, [pc, #32]	; (8001820 <_ZL19MX_USART2_UART_Initv+0x54>)
 80017fe:	2200      	movs	r2, #0
 8001800:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001802:	4807      	ldr	r0, [pc, #28]	; (8001820 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001804:	f004 fc59 	bl	80060ba <HAL_UART_Init>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	bf14      	ite	ne
 800180e:	2301      	movne	r3, #1
 8001810:	2300      	moveq	r3, #0
 8001812:	b2db      	uxtb	r3, r3
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8001818:	f000 fd34 	bl	8002284 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800181c:	bf00      	nop
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20000200 	.word	0x20000200
 8001824:	40004400 	.word	0x40004400

08001828 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b088      	sub	sp, #32
 800182c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182e:	f107 0310 	add.w	r3, r7, #16
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	609a      	str	r2, [r3, #8]
 800183a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800183c:	4b38      	ldr	r3, [pc, #224]	; (8001920 <_ZL12MX_GPIO_Initv+0xf8>)
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	4a37      	ldr	r2, [pc, #220]	; (8001920 <_ZL12MX_GPIO_Initv+0xf8>)
 8001842:	f043 0310 	orr.w	r3, r3, #16
 8001846:	6193      	str	r3, [r2, #24]
 8001848:	4b35      	ldr	r3, [pc, #212]	; (8001920 <_ZL12MX_GPIO_Initv+0xf8>)
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	f003 0310 	and.w	r3, r3, #16
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001854:	4b32      	ldr	r3, [pc, #200]	; (8001920 <_ZL12MX_GPIO_Initv+0xf8>)
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	4a31      	ldr	r2, [pc, #196]	; (8001920 <_ZL12MX_GPIO_Initv+0xf8>)
 800185a:	f043 0320 	orr.w	r3, r3, #32
 800185e:	6193      	str	r3, [r2, #24]
 8001860:	4b2f      	ldr	r3, [pc, #188]	; (8001920 <_ZL12MX_GPIO_Initv+0xf8>)
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	f003 0320 	and.w	r3, r3, #32
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800186c:	4b2c      	ldr	r3, [pc, #176]	; (8001920 <_ZL12MX_GPIO_Initv+0xf8>)
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	4a2b      	ldr	r2, [pc, #172]	; (8001920 <_ZL12MX_GPIO_Initv+0xf8>)
 8001872:	f043 0304 	orr.w	r3, r3, #4
 8001876:	6193      	str	r3, [r2, #24]
 8001878:	4b29      	ldr	r3, [pc, #164]	; (8001920 <_ZL12MX_GPIO_Initv+0xf8>)
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	f003 0304 	and.w	r3, r3, #4
 8001880:	607b      	str	r3, [r7, #4]
 8001882:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001884:	4b26      	ldr	r3, [pc, #152]	; (8001920 <_ZL12MX_GPIO_Initv+0xf8>)
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	4a25      	ldr	r2, [pc, #148]	; (8001920 <_ZL12MX_GPIO_Initv+0xf8>)
 800188a:	f043 0308 	orr.w	r3, r3, #8
 800188e:	6193      	str	r3, [r2, #24]
 8001890:	4b23      	ldr	r3, [pc, #140]	; (8001920 <_ZL12MX_GPIO_Initv+0xf8>)
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	f003 0308 	and.w	r3, r3, #8
 8001898:	603b      	str	r3, [r7, #0]
 800189a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800189c:	2200      	movs	r2, #0
 800189e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018a2:	4820      	ldr	r0, [pc, #128]	; (8001924 <_ZL12MX_GPIO_Initv+0xfc>)
 80018a4:	f001 fc90 	bl	80031c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80018a8:	2200      	movs	r2, #0
 80018aa:	2102      	movs	r1, #2
 80018ac:	481e      	ldr	r0, [pc, #120]	; (8001928 <_ZL12MX_GPIO_Initv+0x100>)
 80018ae:	f001 fc8b 	bl	80031c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80018b2:	2200      	movs	r2, #0
 80018b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018b8:	481c      	ldr	r0, [pc, #112]	; (800192c <_ZL12MX_GPIO_Initv+0x104>)
 80018ba:	f001 fc85 	bl	80031c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80018be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c4:	2301      	movs	r3, #1
 80018c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018cc:	2302      	movs	r3, #2
 80018ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80018d0:	f107 0310 	add.w	r3, r7, #16
 80018d4:	4619      	mov	r1, r3
 80018d6:	4813      	ldr	r0, [pc, #76]	; (8001924 <_ZL12MX_GPIO_Initv+0xfc>)
 80018d8:	f001 faf2 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80018dc:	2302      	movs	r3, #2
 80018de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e0:	2301      	movs	r3, #1
 80018e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e8:	2302      	movs	r3, #2
 80018ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ec:	f107 0310 	add.w	r3, r7, #16
 80018f0:	4619      	mov	r1, r3
 80018f2:	480d      	ldr	r0, [pc, #52]	; (8001928 <_ZL12MX_GPIO_Initv+0x100>)
 80018f4:	f001 fae4 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80018f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018fe:	2301      	movs	r3, #1
 8001900:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001906:	2302      	movs	r3, #2
 8001908:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190a:	f107 0310 	add.w	r3, r7, #16
 800190e:	4619      	mov	r1, r3
 8001910:	4806      	ldr	r0, [pc, #24]	; (800192c <_ZL12MX_GPIO_Initv+0x104>)
 8001912:	f001 fad5 	bl	8002ec0 <HAL_GPIO_Init>

}
 8001916:	bf00      	nop
 8001918:	3720      	adds	r7, #32
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40021000 	.word	0x40021000
 8001924:	40011000 	.word	0x40011000
 8001928:	40010c00 	.word	0x40010c00
 800192c:	40010800 	.word	0x40010800

08001930 <_Z14MPU6050_Baslatv>:

/* USER CODE BEGIN 4 */
void MPU6050_Baslat(void) {
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af04      	add	r7, sp, #16
	uint8_t config = 0x00;
 8001936:	2300      	movs	r3, #0
 8001938:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, MPU6050_POW_REG, 1, &config, 1, 5); //Güç registerını aktif et
 800193a:	2305      	movs	r3, #5
 800193c:	9302      	str	r3, [sp, #8]
 800193e:	2301      	movs	r3, #1
 8001940:	9301      	str	r3, [sp, #4]
 8001942:	1dfb      	adds	r3, r7, #7
 8001944:	9300      	str	r3, [sp, #0]
 8001946:	2301      	movs	r3, #1
 8001948:	226b      	movs	r2, #107	; 0x6b
 800194a:	21d0      	movs	r1, #208	; 0xd0
 800194c:	4811      	ldr	r0, [pc, #68]	; (8001994 <_Z14MPU6050_Baslatv+0x64>)
 800194e:	f001 fdb1 	bl	80034b4 <HAL_I2C_Mem_Write>
	config = 0x08;
 8001952:	2308      	movs	r3, #8
 8001954:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, GYRO_CONF_REG, 1, &config, 1, 5); //Gyro 250 d/s'ye ayarlandi.
 8001956:	2305      	movs	r3, #5
 8001958:	9302      	str	r3, [sp, #8]
 800195a:	2301      	movs	r3, #1
 800195c:	9301      	str	r3, [sp, #4]
 800195e:	1dfb      	adds	r3, r7, #7
 8001960:	9300      	str	r3, [sp, #0]
 8001962:	2301      	movs	r3, #1
 8001964:	221b      	movs	r2, #27
 8001966:	21d0      	movs	r1, #208	; 0xd0
 8001968:	480a      	ldr	r0, [pc, #40]	; (8001994 <_Z14MPU6050_Baslatv+0x64>)
 800196a:	f001 fda3 	bl	80034b4 <HAL_I2C_Mem_Write>
	config = 0x10;
 800196e:	2310      	movs	r3, #16
 8001970:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, ACC_CONF_REG, 1, &config, 1, 5); //Acc +-8g'ye ayarlandi.
 8001972:	2305      	movs	r3, #5
 8001974:	9302      	str	r3, [sp, #8]
 8001976:	2301      	movs	r3, #1
 8001978:	9301      	str	r3, [sp, #4]
 800197a:	1dfb      	adds	r3, r7, #7
 800197c:	9300      	str	r3, [sp, #0]
 800197e:	2301      	movs	r3, #1
 8001980:	221c      	movs	r2, #28
 8001982:	21d0      	movs	r1, #208	; 0xd0
 8001984:	4803      	ldr	r0, [pc, #12]	; (8001994 <_Z14MPU6050_Baslatv+0x64>)
 8001986:	f001 fd95 	bl	80034b4 <HAL_I2C_Mem_Write>
}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	2000008c 	.word	0x2000008c

08001998 <_Z9Check_Armv>:


void Check_Arm() {
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
	if(!armed) {
 800199c:	4b23      	ldr	r3, [pc, #140]	; (8001a2c <_Z9Check_Armv+0x94>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	f083 0301 	eor.w	r3, r3, #1
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d03e      	beq.n	8001a28 <_Z9Check_Armv+0x90>
		if((ch[2] < 1100) && (ch[3] > 1700)) {
 80019aa:	4b21      	ldr	r3, [pc, #132]	; (8001a30 <_Z9Check_Armv+0x98>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f240 424b 	movw	r2, #1099	; 0x44b
 80019b2:	4293      	cmp	r3, r2
 80019b4:	dc34      	bgt.n	8001a20 <_Z9Check_Armv+0x88>
 80019b6:	4b1e      	ldr	r3, [pc, #120]	; (8001a30 <_Z9Check_Armv+0x98>)
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	f240 62a4 	movw	r2, #1700	; 0x6a4
 80019be:	4293      	cmp	r3, r2
 80019c0:	dd2e      	ble.n	8001a20 <_Z9Check_Armv+0x88>
				if(!arm_start){
 80019c2:	4b1c      	ldr	r3, [pc, #112]	; (8001a34 <_Z9Check_Armv+0x9c>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	f083 0301 	eor.w	r3, r3, #1
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d008      	beq.n	80019e2 <_Z9Check_Armv+0x4a>
					arm_timer = HAL_GetTick();
 80019d0:	f001 f93a 	bl	8002c48 <HAL_GetTick>
 80019d4:	4603      	mov	r3, r0
 80019d6:	461a      	mov	r2, r3
 80019d8:	4b17      	ldr	r3, [pc, #92]	; (8001a38 <_Z9Check_Armv+0xa0>)
 80019da:	601a      	str	r2, [r3, #0]
					arm_start = true;
 80019dc:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <_Z9Check_Armv+0x9c>)
 80019de:	2201      	movs	r2, #1
 80019e0:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GetTick() - arm_timer > 3000) {
 80019e2:	f001 f931 	bl	8002c48 <HAL_GetTick>
 80019e6:	4603      	mov	r3, r0
 80019e8:	4a13      	ldr	r2, [pc, #76]	; (8001a38 <_Z9Check_Armv+0xa0>)
 80019ea:	6812      	ldr	r2, [r2, #0]
 80019ec:	1a9b      	subs	r3, r3, r2
 80019ee:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80019f2:	4293      	cmp	r3, r2
 80019f4:	bf8c      	ite	hi
 80019f6:	2301      	movhi	r3, #1
 80019f8:	2300      	movls	r3, #0
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d013      	beq.n	8001a28 <_Z9Check_Armv+0x90>
					controller.pid_roll.reset();
 8001a00:	480e      	ldr	r0, [pc, #56]	; (8001a3c <_Z9Check_Armv+0xa4>)
 8001a02:	f005 fe35 	bl	8007670 <_ZN3PID5resetEv>
					controller.pid_pitch.reset();
 8001a06:	480e      	ldr	r0, [pc, #56]	; (8001a40 <_Z9Check_Armv+0xa8>)
 8001a08:	f005 fe32 	bl	8007670 <_ZN3PID5resetEv>
					armed = true;
 8001a0c:	4b07      	ldr	r3, [pc, #28]	; (8001a2c <_Z9Check_Armv+0x94>)
 8001a0e:	2201      	movs	r2, #1
 8001a10:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001a12:	2201      	movs	r2, #1
 8001a14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a18:	480a      	ldr	r0, [pc, #40]	; (8001a44 <_Z9Check_Armv+0xac>)
 8001a1a:	f001 fbd5 	bl	80031c8 <HAL_GPIO_WritePin>
				if(HAL_GetTick() - arm_timer > 3000) {
 8001a1e:	e003      	b.n	8001a28 <_Z9Check_Armv+0x90>
				}

		}

		else {
			arm_start = false;
 8001a20:	4b04      	ldr	r3, [pc, #16]	; (8001a34 <_Z9Check_Armv+0x9c>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	701a      	strb	r2, [r3, #0]
		}
	}

}
 8001a26:	e7ff      	b.n	8001a28 <_Z9Check_Armv+0x90>
 8001a28:	bf00      	nop
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	200007d1 	.word	0x200007d1
 8001a30:	2000079c 	.word	0x2000079c
 8001a34:	200007d0 	.word	0x200007d0
 8001a38:	200007c4 	.word	0x200007c4
 8001a3c:	20000618 	.word	0x20000618
 8001a40:	20000688 	.word	0x20000688
 8001a44:	40010800 	.word	0x40010800

08001a48 <_Z12Check_Disarmv>:

void Check_Disarm() {
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
	if(armed) {
 8001a4c:	4b1f      	ldr	r3, [pc, #124]	; (8001acc <_Z12Check_Disarmv+0x84>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d038      	beq.n	8001ac6 <_Z12Check_Disarmv+0x7e>
		if((ch[2] < 1100) && (ch[3] < 1100)) {
 8001a54:	4b1e      	ldr	r3, [pc, #120]	; (8001ad0 <_Z12Check_Disarmv+0x88>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f240 424b 	movw	r2, #1099	; 0x44b
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	dc2e      	bgt.n	8001abe <_Z12Check_Disarmv+0x76>
 8001a60:	4b1b      	ldr	r3, [pc, #108]	; (8001ad0 <_Z12Check_Disarmv+0x88>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	f240 424b 	movw	r2, #1099	; 0x44b
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	dc28      	bgt.n	8001abe <_Z12Check_Disarmv+0x76>
				if(!disarm_start){
 8001a6c:	4b19      	ldr	r3, [pc, #100]	; (8001ad4 <_Z12Check_Disarmv+0x8c>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	f083 0301 	eor.w	r3, r3, #1
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d008      	beq.n	8001a8c <_Z12Check_Disarmv+0x44>
					disarm_timer = HAL_GetTick();
 8001a7a:	f001 f8e5 	bl	8002c48 <HAL_GetTick>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	461a      	mov	r2, r3
 8001a82:	4b15      	ldr	r3, [pc, #84]	; (8001ad8 <_Z12Check_Disarmv+0x90>)
 8001a84:	601a      	str	r2, [r3, #0]
					disarm_start = true;
 8001a86:	4b13      	ldr	r3, [pc, #76]	; (8001ad4 <_Z12Check_Disarmv+0x8c>)
 8001a88:	2201      	movs	r2, #1
 8001a8a:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GetTick() - disarm_timer > 3000) {
 8001a8c:	f001 f8dc 	bl	8002c48 <HAL_GetTick>
 8001a90:	4603      	mov	r3, r0
 8001a92:	4a11      	ldr	r2, [pc, #68]	; (8001ad8 <_Z12Check_Disarmv+0x90>)
 8001a94:	6812      	ldr	r2, [r2, #0]
 8001a96:	1a9b      	subs	r3, r3, r2
 8001a98:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	bf8c      	ite	hi
 8001aa0:	2301      	movhi	r3, #1
 8001aa2:	2300      	movls	r3, #0
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d00d      	beq.n	8001ac6 <_Z12Check_Disarmv+0x7e>
					armed = false;
 8001aaa:	4b08      	ldr	r3, [pc, #32]	; (8001acc <_Z12Check_Disarmv+0x84>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ab6:	4809      	ldr	r0, [pc, #36]	; (8001adc <_Z12Check_Disarmv+0x94>)
 8001ab8:	f001 fb86 	bl	80031c8 <HAL_GPIO_WritePin>
				if(HAL_GetTick() - disarm_timer > 3000) {
 8001abc:	e003      	b.n	8001ac6 <_Z12Check_Disarmv+0x7e>
				}

		}

		else {
			disarm_start = false;
 8001abe:	4b05      	ldr	r3, [pc, #20]	; (8001ad4 <_Z12Check_Disarmv+0x8c>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001ac4:	e7ff      	b.n	8001ac6 <_Z12Check_Disarmv+0x7e>
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	200007d1 	.word	0x200007d1
 8001ad0:	2000079c 	.word	0x2000079c
 8001ad4:	200007d3 	.word	0x200007d3
 8001ad8:	200007c8 	.word	0x200007c8
 8001adc:	40010800 	.word	0x40010800

08001ae0 <_Z9TelemPackv>:

void TelemPack() {
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
	  telem_pack.attitude.roll  = state.angles[0];
 8001ae4:	4b52      	ldr	r3, [pc, #328]	; (8001c30 <_Z9TelemPackv+0x150>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a52      	ldr	r2, [pc, #328]	; (8001c34 <_Z9TelemPackv+0x154>)
 8001aea:	6013      	str	r3, [r2, #0]
	  telem_pack.attitude.pitch = state.angles[1];
 8001aec:	4b50      	ldr	r3, [pc, #320]	; (8001c30 <_Z9TelemPackv+0x150>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	4a50      	ldr	r2, [pc, #320]	; (8001c34 <_Z9TelemPackv+0x154>)
 8001af2:	6053      	str	r3, [r2, #4]
	  telem_pack.attitude.yaw   = state.angles[2];
 8001af4:	4b4e      	ldr	r3, [pc, #312]	; (8001c30 <_Z9TelemPackv+0x150>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	4a4e      	ldr	r2, [pc, #312]	; (8001c34 <_Z9TelemPackv+0x154>)
 8001afa:	6093      	str	r3, [r2, #8]

	  telem_pack.pwm.w1 = controller_output[0];
 8001afc:	4b4e      	ldr	r3, [pc, #312]	; (8001c38 <_Z9TelemPackv+0x158>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	4b4c      	ldr	r3, [pc, #304]	; (8001c34 <_Z9TelemPackv+0x154>)
 8001b04:	861a      	strh	r2, [r3, #48]	; 0x30
	  telem_pack.pwm.w2 = controller_output[1];
 8001b06:	4b4c      	ldr	r3, [pc, #304]	; (8001c38 <_Z9TelemPackv+0x158>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	4b49      	ldr	r3, [pc, #292]	; (8001c34 <_Z9TelemPackv+0x154>)
 8001b0e:	865a      	strh	r2, [r3, #50]	; 0x32
	  telem_pack.pwm.w3 = controller_output[2];
 8001b10:	4b49      	ldr	r3, [pc, #292]	; (8001c38 <_Z9TelemPackv+0x158>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	4b47      	ldr	r3, [pc, #284]	; (8001c34 <_Z9TelemPackv+0x154>)
 8001b18:	869a      	strh	r2, [r3, #52]	; 0x34
	  telem_pack.pwm.w4 = controller_output[3];
 8001b1a:	4b47      	ldr	r3, [pc, #284]	; (8001c38 <_Z9TelemPackv+0x158>)
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	4b44      	ldr	r3, [pc, #272]	; (8001c34 <_Z9TelemPackv+0x154>)
 8001b22:	86da      	strh	r2, [r3, #54]	; 0x36

	  telem_pack.attitude_des.roll  = state_des.angles[0];
 8001b24:	4b45      	ldr	r3, [pc, #276]	; (8001c3c <_Z9TelemPackv+0x15c>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a42      	ldr	r2, [pc, #264]	; (8001c34 <_Z9TelemPackv+0x154>)
 8001b2a:	60d3      	str	r3, [r2, #12]
	  telem_pack.attitude_des.pitch = state_des.angles[1];
 8001b2c:	4b43      	ldr	r3, [pc, #268]	; (8001c3c <_Z9TelemPackv+0x15c>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	4a40      	ldr	r2, [pc, #256]	; (8001c34 <_Z9TelemPackv+0x154>)
 8001b32:	6113      	str	r3, [r2, #16]
	  telem_pack.attitude_des.yaw   = state_des.angles[2];
 8001b34:	4b41      	ldr	r3, [pc, #260]	; (8001c3c <_Z9TelemPackv+0x15c>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	4a3e      	ldr	r2, [pc, #248]	; (8001c34 <_Z9TelemPackv+0x154>)
 8001b3a:	6153      	str	r3, [r2, #20]

	  telem_pack.attitude_rate.roll =  state.rates[0];
 8001b3c:	4b3c      	ldr	r3, [pc, #240]	; (8001c30 <_Z9TelemPackv+0x150>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	4a3c      	ldr	r2, [pc, #240]	; (8001c34 <_Z9TelemPackv+0x154>)
 8001b42:	6193      	str	r3, [r2, #24]
	  telem_pack.attitude_rate.pitch = state.rates[1];
 8001b44:	4b3a      	ldr	r3, [pc, #232]	; (8001c30 <_Z9TelemPackv+0x150>)
 8001b46:	691b      	ldr	r3, [r3, #16]
 8001b48:	4a3a      	ldr	r2, [pc, #232]	; (8001c34 <_Z9TelemPackv+0x154>)
 8001b4a:	61d3      	str	r3, [r2, #28]

	  telem_pack.attitude_rate_des.roll =  state_des.rates[0];
 8001b4c:	4b3b      	ldr	r3, [pc, #236]	; (8001c3c <_Z9TelemPackv+0x15c>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	4a38      	ldr	r2, [pc, #224]	; (8001c34 <_Z9TelemPackv+0x154>)
 8001b52:	6253      	str	r3, [r2, #36]	; 0x24
	  telem_pack.attitude_rate_des.pitch = state_des.rates[1];
 8001b54:	4b39      	ldr	r3, [pc, #228]	; (8001c3c <_Z9TelemPackv+0x15c>)
 8001b56:	691b      	ldr	r3, [r3, #16]
 8001b58:	4a36      	ldr	r2, [pc, #216]	; (8001c34 <_Z9TelemPackv+0x154>)
 8001b5a:	6293      	str	r3, [r2, #40]	; 0x28

	  telem_pack.ekf.roll_acc  = EKF.roll_acc;
 8001b5c:	4b38      	ldr	r3, [pc, #224]	; (8001c40 <_Z9TelemPackv+0x160>)
 8001b5e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8001b62:	4a34      	ldr	r2, [pc, #208]	; (8001c34 <_Z9TelemPackv+0x154>)
 8001b64:	6393      	str	r3, [r2, #56]	; 0x38
	  telem_pack.ekf.pitch_acc = EKF.pitch_acc;
 8001b66:	4b36      	ldr	r3, [pc, #216]	; (8001c40 <_Z9TelemPackv+0x160>)
 8001b68:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8001b6c:	4a31      	ldr	r2, [pc, #196]	; (8001c34 <_Z9TelemPackv+0x154>)
 8001b6e:	63d3      	str	r3, [r2, #60]	; 0x3c
	  telem_pack.ekf.yaw_acc   = EKF.yaw_acc;
 8001b70:	4b33      	ldr	r3, [pc, #204]	; (8001c40 <_Z9TelemPackv+0x160>)
 8001b72:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8001b76:	4a2f      	ldr	r2, [pc, #188]	; (8001c34 <_Z9TelemPackv+0x154>)
 8001b78:	6413      	str	r3, [r2, #64]	; 0x40

	  telem_pack.ekf.roll_gyro =  EKF.roll_comp;
 8001b7a:	4b31      	ldr	r3, [pc, #196]	; (8001c40 <_Z9TelemPackv+0x160>)
 8001b7c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001b80:	4a2c      	ldr	r2, [pc, #176]	; (8001c34 <_Z9TelemPackv+0x154>)
 8001b82:	6453      	str	r3, [r2, #68]	; 0x44
	  telem_pack.ekf.pitch_gyro = EKF.pitch_comp;
 8001b84:	4b2e      	ldr	r3, [pc, #184]	; (8001c40 <_Z9TelemPackv+0x160>)
 8001b86:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8001b8a:	4a2a      	ldr	r2, [pc, #168]	; (8001c34 <_Z9TelemPackv+0x154>)
 8001b8c:	6493      	str	r3, [r2, #72]	; 0x48

	  telem_pack.pid_roll.P = controller.pid_roll.P;
 8001b8e:	4b2d      	ldr	r3, [pc, #180]	; (8001c44 <_Z9TelemPackv+0x164>)
 8001b90:	e9d3 2348 	ldrd	r2, r3, [r3, #288]	; 0x120
 8001b94:	4610      	mov	r0, r2
 8001b96:	4619      	mov	r1, r3
 8001b98:	f7fe ff58 	bl	8000a4c <__aeabi_d2f>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	4a25      	ldr	r2, [pc, #148]	; (8001c34 <_Z9TelemPackv+0x154>)
 8001ba0:	64d3      	str	r3, [r2, #76]	; 0x4c
	  telem_pack.pid_roll.I = controller.pid_roll.I;
 8001ba2:	4b28      	ldr	r3, [pc, #160]	; (8001c44 <_Z9TelemPackv+0x164>)
 8001ba4:	e9d3 234a 	ldrd	r2, r3, [r3, #296]	; 0x128
 8001ba8:	4610      	mov	r0, r2
 8001baa:	4619      	mov	r1, r3
 8001bac:	f7fe ff4e 	bl	8000a4c <__aeabi_d2f>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	4a20      	ldr	r2, [pc, #128]	; (8001c34 <_Z9TelemPackv+0x154>)
 8001bb4:	6513      	str	r3, [r2, #80]	; 0x50
	  telem_pack.pid_roll.D = controller.pid_roll.D;
 8001bb6:	4b23      	ldr	r3, [pc, #140]	; (8001c44 <_Z9TelemPackv+0x164>)
 8001bb8:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 8001bbc:	4610      	mov	r0, r2
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	f7fe ff44 	bl	8000a4c <__aeabi_d2f>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	4a1b      	ldr	r2, [pc, #108]	; (8001c34 <_Z9TelemPackv+0x154>)
 8001bc8:	6553      	str	r3, [r2, #84]	; 0x54
	  telem_pack.pid_roll.pd_roll_sat_buf = controller.pid_roll.pd_roll_sat_buf;
 8001bca:	4b1e      	ldr	r3, [pc, #120]	; (8001c44 <_Z9TelemPackv+0x164>)
 8001bcc:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001bd0:	4a18      	ldr	r2, [pc, #96]	; (8001c34 <_Z9TelemPackv+0x154>)
 8001bd2:	6593      	str	r3, [r2, #88]	; 0x58

	  telem_pack.pid_pitch.P = controller.pid_pitch.P;
 8001bd4:	4b1b      	ldr	r3, [pc, #108]	; (8001c44 <_Z9TelemPackv+0x164>)
 8001bd6:	e9d3 2364 	ldrd	r2, r3, [r3, #400]	; 0x190
 8001bda:	4610      	mov	r0, r2
 8001bdc:	4619      	mov	r1, r3
 8001bde:	f7fe ff35 	bl	8000a4c <__aeabi_d2f>
 8001be2:	4603      	mov	r3, r0
 8001be4:	4a13      	ldr	r2, [pc, #76]	; (8001c34 <_Z9TelemPackv+0x154>)
 8001be6:	65d3      	str	r3, [r2, #92]	; 0x5c
	  telem_pack.pid_pitch.I = controller.pid_pitch.I;
 8001be8:	4b16      	ldr	r3, [pc, #88]	; (8001c44 <_Z9TelemPackv+0x164>)
 8001bea:	e9d3 2366 	ldrd	r2, r3, [r3, #408]	; 0x198
 8001bee:	4610      	mov	r0, r2
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	f7fe ff2b 	bl	8000a4c <__aeabi_d2f>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	4a0e      	ldr	r2, [pc, #56]	; (8001c34 <_Z9TelemPackv+0x154>)
 8001bfa:	6613      	str	r3, [r2, #96]	; 0x60
	  telem_pack.pid_pitch.D = controller.pid_pitch.D;
 8001bfc:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <_Z9TelemPackv+0x164>)
 8001bfe:	e9d3 2368 	ldrd	r2, r3, [r3, #416]	; 0x1a0
 8001c02:	4610      	mov	r0, r2
 8001c04:	4619      	mov	r1, r3
 8001c06:	f7fe ff21 	bl	8000a4c <__aeabi_d2f>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	4a09      	ldr	r2, [pc, #36]	; (8001c34 <_Z9TelemPackv+0x154>)
 8001c0e:	6653      	str	r3, [r2, #100]	; 0x64
	  telem_pack.pid_pitch.pd_roll_sat_buf = controller.pid_pitch.pd_roll_sat_buf;
 8001c10:	4b0c      	ldr	r3, [pc, #48]	; (8001c44 <_Z9TelemPackv+0x164>)
 8001c12:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8001c16:	4a07      	ldr	r2, [pc, #28]	; (8001c34 <_Z9TelemPackv+0x154>)
 8001c18:	6693      	str	r3, [r2, #104]	; 0x68

	  memcpy(buf,&telem_pack,sizeof(telem_pack));
 8001c1a:	4a0b      	ldr	r2, [pc, #44]	; (8001c48 <_Z9TelemPackv+0x168>)
 8001c1c:	4b05      	ldr	r3, [pc, #20]	; (8001c34 <_Z9TelemPackv+0x154>)
 8001c1e:	4610      	mov	r0, r2
 8001c20:	4619      	mov	r1, r3
 8001c22:	236c      	movs	r3, #108	; 0x6c
 8001c24:	461a      	mov	r2, r3
 8001c26:	f006 fab1 	bl	800818c <memcpy>
}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	20000290 	.word	0x20000290
 8001c34:	200002b4 	.word	0x200002b4
 8001c38:	20000768 	.word	0x20000768
 8001c3c:	2000026c 	.word	0x2000026c
 8001c40:	20000390 	.word	0x20000390
 8001c44:	20000548 	.word	0x20000548
 8001c48:	20000320 	.word	0x20000320

08001c4c <_Z7GyroOkuh>:

int16_t GyroOku (uint8_t addr) {
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b088      	sub	sp, #32
 8001c50:	af04      	add	r7, sp, #16
 8001c52:	4603      	mov	r3, r0
 8001c54:	71fb      	strb	r3, [r7, #7]
	uint8_t gyro_data[2];
	HAL_I2C_Mem_Read(&hi2c1, (uint16_t)MPU6050 | I2C_READ, addr, 1, gyro_data, 2, 1);
 8001c56:	79fb      	ldrb	r3, [r7, #7]
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	9302      	str	r3, [sp, #8]
 8001c5e:	2302      	movs	r3, #2
 8001c60:	9301      	str	r3, [sp, #4]
 8001c62:	f107 030c 	add.w	r3, r7, #12
 8001c66:	9300      	str	r3, [sp, #0]
 8001c68:	2301      	movs	r3, #1
 8001c6a:	21d1      	movs	r1, #209	; 0xd1
 8001c6c:	4807      	ldr	r0, [pc, #28]	; (8001c8c <_Z7GyroOkuh+0x40>)
 8001c6e:	f001 fd1b 	bl	80036a8 <HAL_I2C_Mem_Read>
	int16_t gyro = gyro_data[0]<<8 | gyro_data[1];
 8001c72:	7b3b      	ldrb	r3, [r7, #12]
 8001c74:	021b      	lsls	r3, r3, #8
 8001c76:	b21a      	sxth	r2, r3
 8001c78:	7b7b      	ldrb	r3, [r7, #13]
 8001c7a:	b21b      	sxth	r3, r3
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	81fb      	strh	r3, [r7, #14]
	return gyro;
 8001c80:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3710      	adds	r7, #16
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	2000008c 	.word	0x2000008c

08001c90 <_Z6PWMYazv>:




void PWMYaz() {
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
	  if(ch[EMERGENCY_CH-1] < 1500) {
 8001c94:	4b19      	ldr	r3, [pc, #100]	; (8001cfc <_Z6PWMYazv+0x6c>)
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	f240 52db 	movw	r2, #1499	; 0x5db
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	dc14      	bgt.n	8001cca <_Z6PWMYazv+0x3a>
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,controller_output[0]);
 8001ca0:	4b17      	ldr	r3, [pc, #92]	; (8001d00 <_Z6PWMYazv+0x70>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4b17      	ldr	r3, [pc, #92]	; (8001d04 <_Z6PWMYazv+0x74>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,controller_output[1]);
 8001caa:	4b15      	ldr	r3, [pc, #84]	; (8001d00 <_Z6PWMYazv+0x70>)
 8001cac:	685a      	ldr	r2, [r3, #4]
 8001cae:	4b15      	ldr	r3, [pc, #84]	; (8001d04 <_Z6PWMYazv+0x74>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	639a      	str	r2, [r3, #56]	; 0x38
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,controller_output[2]);
 8001cb4:	4b12      	ldr	r3, [pc, #72]	; (8001d00 <_Z6PWMYazv+0x70>)
 8001cb6:	689a      	ldr	r2, [r3, #8]
 8001cb8:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <_Z6PWMYazv+0x74>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	63da      	str	r2, [r3, #60]	; 0x3c
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,controller_output[3]);
 8001cbe:	4b10      	ldr	r3, [pc, #64]	; (8001d00 <_Z6PWMYazv+0x70>)
 8001cc0:	68da      	ldr	r2, [r3, #12]
 8001cc2:	4b10      	ldr	r3, [pc, #64]	; (8001d04 <_Z6PWMYazv+0x74>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	641a      	str	r2, [r3, #64]	; 0x40
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
	  }
}
 8001cc8:	e013      	b.n	8001cf2 <_Z6PWMYazv+0x62>
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 8001cca:	4b0e      	ldr	r3, [pc, #56]	; (8001d04 <_Z6PWMYazv+0x74>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cd2:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 8001cd4:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <_Z6PWMYazv+0x74>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cdc:	639a      	str	r2, [r3, #56]	; 0x38
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
 8001cde:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <_Z6PWMYazv+0x74>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ce6:	63da      	str	r2, [r3, #60]	; 0x3c
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
 8001ce8:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <_Z6PWMYazv+0x74>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cf0:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001cf2:	bf00      	nop
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bc80      	pop	{r7}
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	2000079c 	.word	0x2000079c
 8001d00:	20000768 	.word	0x20000768
 8001d04:	200000e0 	.word	0x200000e0

08001d08 <_Z7GyroErrh>:


float GyroErr(uint8_t addr) {
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	71fb      	strb	r3, [r7, #7]
	float GyroXh=0;
 8001d12:	f04f 0300 	mov.w	r3, #0
 8001d16:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2000; i++)
 8001d18:	2300      	movs	r3, #0
 8001d1a:	60bb      	str	r3, [r7, #8]
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001d22:	da0c      	bge.n	8001d3e <_Z7GyroErrh+0x36>
	{
		GyroXh = (GyroOku(GYRO_X_ADDR));
 8001d24:	2043      	movs	r0, #67	; 0x43
 8001d26:	f7ff ff91 	bl	8001c4c <_Z7GyroOkuh>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7fe ff97 	bl	8000c60 <__aeabi_i2f>
 8001d32:	4603      	mov	r3, r0
 8001d34:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2000; i++)
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	60bb      	str	r3, [r7, #8]
 8001d3c:	e7ee      	b.n	8001d1c <_Z7GyroErrh+0x14>

	} //Haberleşmeyi durdur.
	GyroXh=GyroXh/2000; //Son okunan değeri 2000'e böl.
 8001d3e:	4905      	ldr	r1, [pc, #20]	; (8001d54 <_Z7GyroErrh+0x4c>)
 8001d40:	68f8      	ldr	r0, [r7, #12]
 8001d42:	f7ff f895 	bl	8000e70 <__aeabi_fdiv>
 8001d46:	4603      	mov	r3, r0
 8001d48:	60fb      	str	r3, [r7, #12]
	return GyroXh;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3710      	adds	r7, #16
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	44fa0000 	.word	0x44fa0000

08001d58 <_Z11MotorBaslatv>:

void MotorBaslat(void) {
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 8001d5c:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <_Z11MotorBaslatv+0x38>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d64:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 8001d66:	4b0a      	ldr	r3, [pc, #40]	; (8001d90 <_Z11MotorBaslatv+0x38>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d6e:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
 8001d70:	4b07      	ldr	r3, [pc, #28]	; (8001d90 <_Z11MotorBaslatv+0x38>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d78:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
 8001d7a:	4b05      	ldr	r3, [pc, #20]	; (8001d90 <_Z11MotorBaslatv+0x38>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d82:	641a      	str	r2, [r3, #64]	; 0x40
	 // Delay(600);
	HAL_Delay(1000);
 8001d84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d88:	f000 ff68 	bl	8002c5c <HAL_Delay>
}
 8001d8c:	bf00      	nop
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	200000e0 	.word	0x200000e0
 8001d94:	00000000 	.word	0x00000000

08001d98 <HAL_TIM_PeriodElapsedCallback>:
		ITM_SendChar((*ptr++));
	}
	return len;
}

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim) {
 8001d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d9a:	b09f      	sub	sp, #124	; 0x7c
 8001d9c:	af12      	add	r7, sp, #72	; 0x48
 8001d9e:	6078      	str	r0, [r7, #4]

	if(htim == &htim2) {
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4ab1      	ldr	r2, [pc, #708]	; (8002068 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	f040 81b5 	bne.w	8002114 <HAL_TIM_PeriodElapsedCallback+0x37c>


		  gyroX = (GyroOku(GYRO_X_ADDR))/65.5 - GyroXh;
 8001daa:	2043      	movs	r0, #67	; 0x43
 8001dac:	f7ff ff4e 	bl	8001c4c <_Z7GyroOkuh>
 8001db0:	4603      	mov	r3, r0
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7fe fb1e 	bl	80003f4 <__aeabi_i2d>
 8001db8:	a3a7      	add	r3, pc, #668	; (adr r3, 8002058 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dbe:	f7fe fcad 	bl	800071c <__aeabi_ddiv>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	4614      	mov	r4, r2
 8001dc8:	461d      	mov	r5, r3
 8001dca:	4ba8      	ldr	r3, [pc, #672]	; (800206c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7fe fb22 	bl	8000418 <__aeabi_f2d>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	4620      	mov	r0, r4
 8001dda:	4629      	mov	r1, r5
 8001ddc:	f7fe f9bc 	bl	8000158 <__aeabi_dsub>
 8001de0:	4602      	mov	r2, r0
 8001de2:	460b      	mov	r3, r1
 8001de4:	4610      	mov	r0, r2
 8001de6:	4619      	mov	r1, r3
 8001de8:	f7fe fe30 	bl	8000a4c <__aeabi_d2f>
 8001dec:	4603      	mov	r3, r0
 8001dee:	4aa0      	ldr	r2, [pc, #640]	; (8002070 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001df0:	6013      	str	r3, [r2, #0]
		  gyroY = (GyroOku(GYRO_Y_ADDR))/65.5 - GyroYh;
 8001df2:	2045      	movs	r0, #69	; 0x45
 8001df4:	f7ff ff2a 	bl	8001c4c <_Z7GyroOkuh>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7fe fafa 	bl	80003f4 <__aeabi_i2d>
 8001e00:	a395      	add	r3, pc, #596	; (adr r3, 8002058 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e06:	f7fe fc89 	bl	800071c <__aeabi_ddiv>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	4614      	mov	r4, r2
 8001e10:	461d      	mov	r5, r3
 8001e12:	4b98      	ldr	r3, [pc, #608]	; (8002074 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7fe fafe 	bl	8000418 <__aeabi_f2d>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	460b      	mov	r3, r1
 8001e20:	4620      	mov	r0, r4
 8001e22:	4629      	mov	r1, r5
 8001e24:	f7fe f998 	bl	8000158 <__aeabi_dsub>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	4610      	mov	r0, r2
 8001e2e:	4619      	mov	r1, r3
 8001e30:	f7fe fe0c 	bl	8000a4c <__aeabi_d2f>
 8001e34:	4603      	mov	r3, r0
 8001e36:	4a90      	ldr	r2, [pc, #576]	; (8002078 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001e38:	6013      	str	r3, [r2, #0]
		  gyroZ = (GyroOku(GYRO_Z_ADDR))/65.5 - GyroZh;
 8001e3a:	2047      	movs	r0, #71	; 0x47
 8001e3c:	f7ff ff06 	bl	8001c4c <_Z7GyroOkuh>
 8001e40:	4603      	mov	r3, r0
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7fe fad6 	bl	80003f4 <__aeabi_i2d>
 8001e48:	a383      	add	r3, pc, #524	; (adr r3, 8002058 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e4e:	f7fe fc65 	bl	800071c <__aeabi_ddiv>
 8001e52:	4602      	mov	r2, r0
 8001e54:	460b      	mov	r3, r1
 8001e56:	4614      	mov	r4, r2
 8001e58:	461d      	mov	r5, r3
 8001e5a:	4b88      	ldr	r3, [pc, #544]	; (800207c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7fe fada 	bl	8000418 <__aeabi_f2d>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	4620      	mov	r0, r4
 8001e6a:	4629      	mov	r1, r5
 8001e6c:	f7fe f974 	bl	8000158 <__aeabi_dsub>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	4610      	mov	r0, r2
 8001e76:	4619      	mov	r1, r3
 8001e78:	f7fe fde8 	bl	8000a4c <__aeabi_d2f>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	4a80      	ldr	r2, [pc, #512]	; (8002080 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001e80:	6013      	str	r3, [r2, #0]
		  //gyroX_a_x = (GyroOku(GYRO_X_ADDR)-gyro_e_x)/65.5;
		  //gyroX_a += gyroX_a_x * st;

		  float gyro[3];
		  gyro[0] = gyroX;
 8001e82:	4b7b      	ldr	r3, [pc, #492]	; (8002070 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	617b      	str	r3, [r7, #20]
		  gyro[1] = -1*gyroY;
 8001e88:	4b7b      	ldr	r3, [pc, #492]	; (8002078 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001e90:	61bb      	str	r3, [r7, #24]
		  gyro[2] = gyroZ;
 8001e92:	4b7b      	ldr	r3, [pc, #492]	; (8002080 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	61fb      	str	r3, [r7, #28]

		  //İvmeölçer degerlerini oku
		  accX = GyroOku(ACC_X_ADDR);
 8001e98:	203b      	movs	r0, #59	; 0x3b
 8001e9a:	f7ff fed7 	bl	8001c4c <_Z7GyroOkuh>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7fe fedd 	bl	8000c60 <__aeabi_i2f>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	4a76      	ldr	r2, [pc, #472]	; (8002084 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001eaa:	6013      	str	r3, [r2, #0]
		  accY = GyroOku(ACC_Y_ADDR);
 8001eac:	203d      	movs	r0, #61	; 0x3d
 8001eae:	f7ff fecd 	bl	8001c4c <_Z7GyroOkuh>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7fe fed3 	bl	8000c60 <__aeabi_i2f>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	4a72      	ldr	r2, [pc, #456]	; (8002088 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001ebe:	6013      	str	r3, [r2, #0]
		  accZ = GyroOku(ACC_Z_ADDR);
 8001ec0:	203f      	movs	r0, #63	; 0x3f
 8001ec2:	f7ff fec3 	bl	8001c4c <_Z7GyroOkuh>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7fe fec9 	bl	8000c60 <__aeabi_i2f>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	4a6e      	ldr	r2, [pc, #440]	; (800208c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001ed2:	6013      	str	r3, [r2, #0]

		  float acc[3];
		  acc[0] = accX;
 8001ed4:	4b6b      	ldr	r3, [pc, #428]	; (8002084 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	60bb      	str	r3, [r7, #8]
		  acc[1] = accY;
 8001eda:	4b6b      	ldr	r3, [pc, #428]	; (8002088 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	60fb      	str	r3, [r7, #12]
		  acc[2] = accZ;
 8001ee0:	4b6a      	ldr	r3, [pc, #424]	; (800208c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	613b      	str	r3, [r7, #16]

		  float acctop=sqrt(accX*accX+accY*accY+accZ*accZ);		//Toplam ivme
 8001ee6:	4b67      	ldr	r3, [pc, #412]	; (8002084 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a66      	ldr	r2, [pc, #408]	; (8002084 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001eec:	6812      	ldr	r2, [r2, #0]
 8001eee:	4611      	mov	r1, r2
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7fe ff09 	bl	8000d08 <__aeabi_fmul>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	461c      	mov	r4, r3
 8001efa:	4b63      	ldr	r3, [pc, #396]	; (8002088 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a62      	ldr	r2, [pc, #392]	; (8002088 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001f00:	6812      	ldr	r2, [r2, #0]
 8001f02:	4611      	mov	r1, r2
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7fe feff 	bl	8000d08 <__aeabi_fmul>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4620      	mov	r0, r4
 8001f10:	f7fe fdf2 	bl	8000af8 <__addsf3>
 8001f14:	4603      	mov	r3, r0
 8001f16:	461c      	mov	r4, r3
 8001f18:	4b5c      	ldr	r3, [pc, #368]	; (800208c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a5b      	ldr	r2, [pc, #364]	; (800208c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001f1e:	6812      	ldr	r2, [r2, #0]
 8001f20:	4611      	mov	r1, r2
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7fe fef0 	bl	8000d08 <__aeabi_fmul>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4620      	mov	r0, r4
 8001f2e:	f7fe fde3 	bl	8000af8 <__addsf3>
 8001f32:	4603      	mov	r3, r0
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff f8f5 	bl	8001124 <_ZSt4sqrtf>
 8001f3a:	62f8      	str	r0, [r7, #44]	; 0x2c
		  pitch_acc=asin(accY/acctop)*57.324;					//İvme ölçerden hesaplanan pitch açısı
 8001f3c:	4b52      	ldr	r3, [pc, #328]	; (8002088 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7fe ff94 	bl	8000e70 <__aeabi_fdiv>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff f8de 	bl	800110c <_ZSt4asinf>
 8001f50:	4603      	mov	r3, r0
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7fe fa60 	bl	8000418 <__aeabi_f2d>
 8001f58:	a341      	add	r3, pc, #260	; (adr r3, 8002060 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f5e:	f7fe fab3 	bl	80004c8 <__aeabi_dmul>
 8001f62:	4602      	mov	r2, r0
 8001f64:	460b      	mov	r3, r1
 8001f66:	4610      	mov	r0, r2
 8001f68:	4619      	mov	r1, r3
 8001f6a:	f7fe fd6f 	bl	8000a4c <__aeabi_d2f>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	4a47      	ldr	r2, [pc, #284]	; (8002090 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001f72:	6013      	str	r3, [r2, #0]

		  EKF.Run(gyro,acc);
 8001f74:	f107 0208 	add.w	r2, r7, #8
 8001f78:	f107 0314 	add.w	r3, r7, #20
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4845      	ldr	r0, [pc, #276]	; (8002094 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001f80:	f005 f816 	bl	8006fb0 <_ZN15Kalman_Filtresi3RunEPfS0_>
		  state.angles[0]  	  = EKF.state.angles[0];
 8001f84:	4b43      	ldr	r3, [pc, #268]	; (8002094 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001f86:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001f8a:	4a43      	ldr	r2, [pc, #268]	; (8002098 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001f8c:	6013      	str	r3, [r2, #0]
		  state.angles[1] 	  = EKF.state.angles[1];
 8001f8e:	4b41      	ldr	r3, [pc, #260]	; (8002094 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001f90:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001f94:	4a40      	ldr	r2, [pc, #256]	; (8002098 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001f96:	6053      	str	r3, [r2, #4]
		  state.angles[2]     = EKF.state.angles[2];
 8001f98:	4b3e      	ldr	r3, [pc, #248]	; (8002094 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001f9a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001f9e:	4a3e      	ldr	r2, [pc, #248]	; (8002098 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001fa0:	6093      	str	r3, [r2, #8]

		  state.rates[0] = gyroX;
 8001fa2:	4b33      	ldr	r3, [pc, #204]	; (8002070 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a3c      	ldr	r2, [pc, #240]	; (8002098 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001fa8:	60d3      	str	r3, [r2, #12]
		  state.rates[1] = -1*gyroY;
 8001faa:	4b33      	ldr	r3, [pc, #204]	; (8002078 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001fb2:	4a39      	ldr	r2, [pc, #228]	; (8002098 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001fb4:	6113      	str	r3, [r2, #16]
		  state.rates[2] = gyroZ;
 8001fb6:	4b32      	ldr	r3, [pc, #200]	; (8002080 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a37      	ldr	r2, [pc, #220]	; (8002098 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001fbc:	6153      	str	r3, [r2, #20]

		 // alpha_des = 0;
		 // printf("roll: %d\r\n",int(roll));


		  controller_output_ang = controller.Run(state, state_des, ch[2]);
 8001fbe:	4b37      	ldr	r3, [pc, #220]	; (800209c <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f107 0c20 	add.w	ip, r7, #32
 8001fc6:	4e34      	ldr	r6, [pc, #208]	; (8002098 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001fc8:	9310      	str	r3, [sp, #64]	; 0x40
 8001fca:	4b35      	ldr	r3, [pc, #212]	; (80020a0 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001fcc:	ac07      	add	r4, sp, #28
 8001fce:	461d      	mov	r5, r3
 8001fd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fd8:	682b      	ldr	r3, [r5, #0]
 8001fda:	6023      	str	r3, [r4, #0]
 8001fdc:	466d      	mov	r5, sp
 8001fde:	f106 0408 	add.w	r4, r6, #8
 8001fe2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fe4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fe6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001fea:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001fee:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001ff2:	492c      	ldr	r1, [pc, #176]	; (80020a4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8001ff4:	4660      	mov	r0, ip
 8001ff6:	f004 fa9d 	bl	8006534 <_ZN10Controller3RunE5stateS0_i>
 8001ffa:	f107 0320 	add.w	r3, r7, #32
 8001ffe:	4619      	mov	r1, r3
 8002000:	4829      	ldr	r0, [pc, #164]	; (80020a8 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8002002:	f000 f994 	bl	800232e <_ZNSt6vectorIdSaIdEEaSEOS1_>
 8002006:	f107 0320 	add.w	r3, r7, #32
 800200a:	4618      	mov	r0, r3
 800200c:	f000 f974 	bl	80022f8 <_ZNSt6vectorIdSaIdEED1Ev>
		  controller_output[0] = controller.controller_output_pwm[0];
 8002010:	4b24      	ldr	r3, [pc, #144]	; (80020a4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8002012:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002016:	4a25      	ldr	r2, [pc, #148]	; (80020ac <HAL_TIM_PeriodElapsedCallback+0x314>)
 8002018:	6013      	str	r3, [r2, #0]
		  controller_output[1] = controller.controller_output_pwm[1];
 800201a:	4b22      	ldr	r3, [pc, #136]	; (80020a4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800201c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002020:	4a22      	ldr	r2, [pc, #136]	; (80020ac <HAL_TIM_PeriodElapsedCallback+0x314>)
 8002022:	6053      	str	r3, [r2, #4]
		  controller_output[2] = controller.controller_output_pwm[2];
 8002024:	4b1f      	ldr	r3, [pc, #124]	; (80020a4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8002026:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800202a:	4a20      	ldr	r2, [pc, #128]	; (80020ac <HAL_TIM_PeriodElapsedCallback+0x314>)
 800202c:	6093      	str	r3, [r2, #8]
		  controller_output[3] = controller.controller_output_pwm[3];
 800202e:	4b1d      	ldr	r3, [pc, #116]	; (80020a4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8002030:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002034:	4a1d      	ldr	r2, [pc, #116]	; (80020ac <HAL_TIM_PeriodElapsedCallback+0x314>)
 8002036:	60d3      	str	r3, [r2, #12]

		  state_des.rates[0] = controller.roll_rate_des;
 8002038:	4b1a      	ldr	r3, [pc, #104]	; (80020a4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800203a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800203e:	4a18      	ldr	r2, [pc, #96]	; (80020a0 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8002040:	60d3      	str	r3, [r2, #12]
		  state_des.rates[1] = controller.pitch_rate_des;
 8002042:	4b18      	ldr	r3, [pc, #96]	; (80020a4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8002044:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8002048:	4a15      	ldr	r2, [pc, #84]	; (80020a0 <HAL_TIM_PeriodElapsedCallback+0x308>)
 800204a:	6113      	str	r3, [r2, #16]

		  ie_roll_sat = controller.pid_roll.ie_roll_sat;
 800204c:	4b15      	ldr	r3, [pc, #84]	; (80020a4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800204e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002052:	4a17      	ldr	r2, [pc, #92]	; (80020b0 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8002054:	6013      	str	r3, [r2, #0]
 8002056:	e02d      	b.n	80020b4 <HAL_TIM_PeriodElapsedCallback+0x31c>
 8002058:	00000000 	.word	0x00000000
 800205c:	40506000 	.word	0x40506000
 8002060:	d4fdf3b6 	.word	0xd4fdf3b6
 8002064:	404ca978 	.word	0x404ca978
 8002068:	20000128 	.word	0x20000128
 800206c:	20000258 	.word	0x20000258
 8002070:	20000240 	.word	0x20000240
 8002074:	2000025c 	.word	0x2000025c
 8002078:	20000244 	.word	0x20000244
 800207c:	20000260 	.word	0x20000260
 8002080:	20000248 	.word	0x20000248
 8002084:	2000024c 	.word	0x2000024c
 8002088:	20000250 	.word	0x20000250
 800208c:	20000254 	.word	0x20000254
 8002090:	20000264 	.word	0x20000264
 8002094:	20000390 	.word	0x20000390
 8002098:	20000290 	.word	0x20000290
 800209c:	2000079c 	.word	0x2000079c
 80020a0:	2000026c 	.word	0x2000026c
 80020a4:	20000548 	.word	0x20000548
 80020a8:	20000778 	.word	0x20000778
 80020ac:	20000768 	.word	0x20000768
 80020b0:	20000268 	.word	0x20000268

		  w_ang = controller.pd_roll;
 80020b4:	4b19      	ldr	r3, [pc, #100]	; (800211c <HAL_TIM_PeriodElapsedCallback+0x384>)
 80020b6:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	; 0xb0
 80020ba:	4919      	ldr	r1, [pc, #100]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x388>)
 80020bc:	e9c1 2300 	strd	r2, r3, [r1]


		  w1 = controller_output[0];
 80020c0:	4b18      	ldr	r3, [pc, #96]	; (8002124 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	b29a      	uxth	r2, r3
 80020c6:	4b18      	ldr	r3, [pc, #96]	; (8002128 <HAL_TIM_PeriodElapsedCallback+0x390>)
 80020c8:	801a      	strh	r2, [r3, #0]
		  w2 = controller_output[1];
 80020ca:	4b16      	ldr	r3, [pc, #88]	; (8002124 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	4b16      	ldr	r3, [pc, #88]	; (800212c <HAL_TIM_PeriodElapsedCallback+0x394>)
 80020d2:	801a      	strh	r2, [r3, #0]
		  w3 = controller_output[2];
 80020d4:	4b13      	ldr	r3, [pc, #76]	; (8002124 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	b29a      	uxth	r2, r3
 80020da:	4b15      	ldr	r3, [pc, #84]	; (8002130 <HAL_TIM_PeriodElapsedCallback+0x398>)
 80020dc:	801a      	strh	r2, [r3, #0]
		  w4 = controller_output[3];
 80020de:	4b11      	ldr	r3, [pc, #68]	; (8002124 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	4b13      	ldr	r3, [pc, #76]	; (8002134 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 80020e6:	801a      	strh	r2, [r3, #0]

		  if(armed) {
 80020e8:	4b13      	ldr	r3, [pc, #76]	; (8002138 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d00d      	beq.n	800210c <HAL_TIM_PeriodElapsedCallback+0x374>
			  if(!motor_start) {
 80020f0:	4b12      	ldr	r3, [pc, #72]	; (800213c <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	f083 0301 	eor.w	r3, r3, #1
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d004      	beq.n	8002108 <HAL_TIM_PeriodElapsedCallback+0x370>
				  MotorBaslat();
 80020fe:	f7ff fe2b 	bl	8001d58 <_Z11MotorBaslatv>
				  motor_start = true;
 8002102:	4b0e      	ldr	r3, [pc, #56]	; (800213c <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8002104:	2201      	movs	r2, #1
 8002106:	701a      	strb	r2, [r3, #0]
			  }

			  PWMYaz();
 8002108:	f7ff fdc2 	bl	8001c90 <_Z6PWMYazv>
		  }

		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 800210c:	2102      	movs	r1, #2
 800210e:	480c      	ldr	r0, [pc, #48]	; (8002140 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8002110:	f001 f872 	bl	80031f8 <HAL_GPIO_TogglePin>

		}
	}
 8002114:	bf00      	nop
 8002116:	3734      	adds	r7, #52	; 0x34
 8002118:	46bd      	mov	sp, r7
 800211a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800211c:	20000548 	.word	0x20000548
 8002120:	200007d8 	.word	0x200007d8
 8002124:	20000768 	.word	0x20000768
 8002128:	20000784 	.word	0x20000784
 800212c:	20000786 	.word	0x20000786
 8002130:	20000788 	.word	0x20000788
 8002134:	2000078a 	.word	0x2000078a
 8002138:	200007d1 	.word	0x200007d1
 800213c:	200007d2 	.word	0x200007d2
 8002140:	40010c00 	.word	0x40010c00

08002144 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)

{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]

 if(htim == &htim3) {
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a43      	ldr	r2, [pc, #268]	; (800225c <HAL_TIM_IC_CaptureCallback+0x118>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d17f      	bne.n	8002254 <HAL_TIM_IC_CaptureCallback+0x110>

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)  // if the interrupt source is channel1
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	7f1b      	ldrb	r3, [r3, #28]
 8002158:	2b02      	cmp	r3, #2
 800215a:	d17b      	bne.n	8002254 <HAL_TIM_IC_CaptureCallback+0x110>
	{
				IC_Val1 = IC_Val2;
 800215c:	4b40      	ldr	r3, [pc, #256]	; (8002260 <HAL_TIM_IC_CaptureCallback+0x11c>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a40      	ldr	r2, [pc, #256]	; (8002264 <HAL_TIM_IC_CaptureCallback+0x120>)
 8002162:	6013      	str	r3, [r2, #0]
				IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);  // read second value
 8002164:	2104      	movs	r1, #4
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f003 fad4 	bl	8005714 <HAL_TIM_ReadCapturedValue>
 800216c:	4603      	mov	r3, r0
 800216e:	461a      	mov	r2, r3
 8002170:	4b3b      	ldr	r3, [pc, #236]	; (8002260 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8002172:	601a      	str	r2, [r3, #0]
				Diff = IC_Val2-IC_Val1;
 8002174:	4b3a      	ldr	r3, [pc, #232]	; (8002260 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	4b3a      	ldr	r3, [pc, #232]	; (8002264 <HAL_TIM_IC_CaptureCallback+0x120>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	4a3a      	ldr	r2, [pc, #232]	; (8002268 <HAL_TIM_IC_CaptureCallback+0x124>)
 8002180:	6013      	str	r3, [r2, #0]
				if(Diff < 0) {
 8002182:	4b39      	ldr	r3, [pc, #228]	; (8002268 <HAL_TIM_IC_CaptureCallback+0x124>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	0fdb      	lsrs	r3, r3, #31
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b00      	cmp	r3, #0
 800218c:	d006      	beq.n	800219c <HAL_TIM_IC_CaptureCallback+0x58>
					Diff+=65535;
 800218e:	4b36      	ldr	r3, [pc, #216]	; (8002268 <HAL_TIM_IC_CaptureCallback+0x124>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8002196:	33ff      	adds	r3, #255	; 0xff
 8002198:	4a33      	ldr	r2, [pc, #204]	; (8002268 <HAL_TIM_IC_CaptureCallback+0x124>)
 800219a:	6013      	str	r3, [r2, #0]

				}
				//printf("Diff: %d\n",Diff);
				ch[i] = Diff;
 800219c:	4b33      	ldr	r3, [pc, #204]	; (800226c <HAL_TIM_IC_CaptureCallback+0x128>)
 800219e:	881b      	ldrh	r3, [r3, #0]
 80021a0:	b21b      	sxth	r3, r3
 80021a2:	4619      	mov	r1, r3
 80021a4:	4b30      	ldr	r3, [pc, #192]	; (8002268 <HAL_TIM_IC_CaptureCallback+0x124>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a31      	ldr	r2, [pc, #196]	; (8002270 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80021aa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				if(1) {
					if(ch[i] > CH0) {
 80021ae:	4b2f      	ldr	r3, [pc, #188]	; (800226c <HAL_TIM_IC_CaptureCallback+0x128>)
 80021b0:	881b      	ldrh	r3, [r3, #0]
 80021b2:	b21b      	sxth	r3, r3
 80021b4:	461a      	mov	r2, r3
 80021b6:	4b2e      	ldr	r3, [pc, #184]	; (8002270 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80021b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c0:	4293      	cmp	r3, r2
 80021c2:	bfcc      	ite	gt
 80021c4:	2301      	movgt	r3, #1
 80021c6:	2300      	movle	r3, #0
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d006      	beq.n	80021dc <HAL_TIM_IC_CaptureCallback+0x98>
						//ch[CH_NUM] = ch[i];
						i = -1;
 80021ce:	4b27      	ldr	r3, [pc, #156]	; (800226c <HAL_TIM_IC_CaptureCallback+0x128>)
 80021d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021d4:	801a      	strh	r2, [r3, #0]
						sync = 1;
 80021d6:	4b27      	ldr	r3, [pc, #156]	; (8002274 <HAL_TIM_IC_CaptureCallback+0x130>)
 80021d8:	2201      	movs	r2, #1
 80021da:	801a      	strh	r2, [r3, #0]
					}
				}



				state_des.angles[0] =  pid.pwm2ang(ch[0]);
 80021dc:	4b24      	ldr	r3, [pc, #144]	; (8002270 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	4619      	mov	r1, r3
 80021e4:	4824      	ldr	r0, [pc, #144]	; (8002278 <HAL_TIM_IC_CaptureCallback+0x134>)
 80021e6:	f005 fb36 	bl	8007856 <_ZN3PID7pwm2angEt>
 80021ea:	4603      	mov	r3, r0
 80021ec:	4a23      	ldr	r2, [pc, #140]	; (800227c <HAL_TIM_IC_CaptureCallback+0x138>)
 80021ee:	6013      	str	r3, [r2, #0]
				state_des.angles[1] =  pid.pwm2ang(ch[1]);
 80021f0:	4b1f      	ldr	r3, [pc, #124]	; (8002270 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	4619      	mov	r1, r3
 80021f8:	481f      	ldr	r0, [pc, #124]	; (8002278 <HAL_TIM_IC_CaptureCallback+0x134>)
 80021fa:	f005 fb2c 	bl	8007856 <_ZN3PID7pwm2angEt>
 80021fe:	4603      	mov	r3, r0
 8002200:	4a1e      	ldr	r2, [pc, #120]	; (800227c <HAL_TIM_IC_CaptureCallback+0x138>)
 8002202:	6053      	str	r3, [r2, #4]
				state_des.angles[2] =  0;
 8002204:	4b1d      	ldr	r3, [pc, #116]	; (800227c <HAL_TIM_IC_CaptureCallback+0x138>)
 8002206:	f04f 0200 	mov.w	r2, #0
 800220a:	609a      	str	r2, [r3, #8]
				state_des.rates[2] = pid.pwm2rate(ch[3]);
 800220c:	4b18      	ldr	r3, [pc, #96]	; (8002270 <HAL_TIM_IC_CaptureCallback+0x12c>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	b29b      	uxth	r3, r3
 8002212:	4619      	mov	r1, r3
 8002214:	4818      	ldr	r0, [pc, #96]	; (8002278 <HAL_TIM_IC_CaptureCallback+0x134>)
 8002216:	f005 fb46 	bl	80078a6 <_ZN3PID8pwm2rateEt>
 800221a:	4603      	mov	r3, r0
 800221c:	4a17      	ldr	r2, [pc, #92]	; (800227c <HAL_TIM_IC_CaptureCallback+0x138>)
 800221e:	6153      	str	r3, [r2, #20]

				i++;
 8002220:	4b12      	ldr	r3, [pc, #72]	; (800226c <HAL_TIM_IC_CaptureCallback+0x128>)
 8002222:	881b      	ldrh	r3, [r3, #0]
 8002224:	b21b      	sxth	r3, r3
 8002226:	b29b      	uxth	r3, r3
 8002228:	3301      	adds	r3, #1
 800222a:	b29b      	uxth	r3, r3
 800222c:	b21a      	sxth	r2, r3
 800222e:	4b0f      	ldr	r3, [pc, #60]	; (800226c <HAL_TIM_IC_CaptureCallback+0x128>)
 8002230:	801a      	strh	r2, [r3, #0]
				i = i % (CH_NUM+1);
 8002232:	4b0e      	ldr	r3, [pc, #56]	; (800226c <HAL_TIM_IC_CaptureCallback+0x128>)
 8002234:	881b      	ldrh	r3, [r3, #0]
 8002236:	b21b      	sxth	r3, r3
 8002238:	4619      	mov	r1, r3
 800223a:	4b11      	ldr	r3, [pc, #68]	; (8002280 <HAL_TIM_IC_CaptureCallback+0x13c>)
 800223c:	fb83 2301 	smull	r2, r3, r3, r1
 8002240:	105a      	asrs	r2, r3, #1
 8002242:	17cb      	asrs	r3, r1, #31
 8002244:	1ad2      	subs	r2, r2, r3
 8002246:	4613      	mov	r3, r2
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	4413      	add	r3, r2
 800224c:	1aca      	subs	r2, r1, r3
 800224e:	b212      	sxth	r2, r2
 8002250:	4b06      	ldr	r3, [pc, #24]	; (800226c <HAL_TIM_IC_CaptureCallback+0x128>)
 8002252:	801a      	strh	r2, [r3, #0]
			//	__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_2,TIM_INPUTCHANNELPOLARITY_RISING);


	 }
	}
}
 8002254:	bf00      	nop
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	20000170 	.word	0x20000170
 8002260:	2000078c 	.word	0x2000078c
 8002264:	20000790 	.word	0x20000790
 8002268:	20000794 	.word	0x20000794
 800226c:	20000798 	.word	0x20000798
 8002270:	2000079c 	.word	0x2000079c
 8002274:	200007c0 	.word	0x200007c0
 8002278:	200004d8 	.word	0x200004d8
 800227c:	2000026c 	.word	0x2000026c
 8002280:	38e38e39 	.word	0x38e38e39

08002284 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002288:	b672      	cpsid	i
}
 800228a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800228c:	e7fe      	b.n	800228c <Error_Handler+0x8>

0800228e <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800228e:	b580      	push	{r7, lr}
 8002290:	b082      	sub	sp, #8
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 f85e 	bl	8002358 <_ZNSaIdEC1Ev>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4618      	mov	r0, r3
 80022a0:	f000 f866 	bl	8002370 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_dataC1Ev>
	{ }
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4618      	mov	r0, r3
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <_ZNSaIdED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b082      	sub	sp, #8
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 f86d 	bl	8002396 <_ZN9__gnu_cxx13new_allocatorIdED1Ev>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4618      	mov	r0, r3
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <_ZNSt12_Vector_baseIdSaIdEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b082      	sub	sp, #8
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	689a      	ldr	r2, [r3, #8]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 80022de:	461a      	mov	r2, r3
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f000 f862 	bl	80023aa <_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdj>
      }
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7fe ff27 	bl	800113c <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implD1Ev>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4618      	mov	r0, r3
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <_ZNSt6vectorIdSaIdEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 80022f8:	b5b0      	push	{r4, r5, r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681c      	ldr	r4, [r3, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4618      	mov	r0, r3
 800230c:	f000 f860 	bl	80023d0 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8002310:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002312:	461a      	mov	r2, r3
 8002314:	4629      	mov	r1, r5
 8002316:	4620      	mov	r0, r4
 8002318:	f000 f864 	bl	80023e4 <_ZSt8_DestroyIPddEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff ffd1 	bl	80022c6 <_ZNSt12_Vector_baseIdSaIdEED1Ev>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4618      	mov	r0, r3
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bdb0      	pop	{r4, r5, r7, pc}

0800232e <_ZNSt6vectorIdSaIdEEaSEOS1_>:
       *  Afterwards @a __x is a valid, but unspecified %vector.
       *
       *  Whether the allocator is moved depends on the allocator traits.
       */
      vector&
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 800232e:	b590      	push	{r4, r7, lr}
 8002330:	b085      	sub	sp, #20
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
 8002336:	6039      	str	r1, [r7, #0]
      {
	constexpr bool __move_storage =
 8002338:	2301      	movs	r3, #1
 800233a:	73fb      	strb	r3, [r7, #15]
	  _Alloc_traits::_S_propagate_on_move_assign()
	  || _Alloc_traits::_S_always_equal();
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 800233c:	6838      	ldr	r0, [r7, #0]
 800233e:	f000 f85f 	bl	8002400 <_ZSt4moveIRSt6vectorIdSaIdEEEONSt16remove_referenceIT_E4typeEOS5_>
 8002342:	4603      	mov	r3, r0
 8002344:	4622      	mov	r2, r4
 8002346:	4619      	mov	r1, r3
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f000 f863 	bl	8002414 <_ZNSt6vectorIdSaIdEE14_M_move_assignEOS1_St17integral_constantIbLb1EE>
	return *this;
 800234e:	687b      	ldr	r3, [r7, #4]
      }
 8002350:	4618      	mov	r0, r3
 8002352:	3714      	adds	r7, #20
 8002354:	46bd      	mov	sp, r7
 8002356:	bd90      	pop	{r4, r7, pc}

08002358 <_ZNSaIdEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f000 f895 	bl	8002490 <_ZN9__gnu_cxx13new_allocatorIdEC1Ev>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4618      	mov	r0, r3
 800236a:	3708      	adds	r7, #8
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	601a      	str	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	605a      	str	r2, [r3, #4]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	609a      	str	r2, [r3, #8]
	{ }
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4618      	mov	r0, r3
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	bc80      	pop	{r7}
 8002394:	4770      	bx	lr

08002396 <_ZN9__gnu_cxx13new_allocatorIdED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002396:	b480      	push	{r7}
 8002398:	b083      	sub	sp, #12
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4618      	mov	r0, r3
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bc80      	pop	{r7}
 80023a8:	4770      	bx	lr

080023aa <_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdj>:
      _M_deallocate(pointer __p, size_t __n)
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b084      	sub	sp, #16
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	60f8      	str	r0, [r7, #12]
 80023b2:	60b9      	str	r1, [r7, #8]
 80023b4:	607a      	str	r2, [r7, #4]
	if (__p)
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d005      	beq.n	80023c8 <_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	68b9      	ldr	r1, [r7, #8]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f000 f86e 	bl	80024a4 <_ZNSt16allocator_traitsISaIdEE10deallocateERS0_Pdj>
      }
 80023c8:	bf00      	nop
 80023ca:	3710      	adds	r7, #16
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4618      	mov	r0, r3
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	bc80      	pop	{r7}
 80023e2:	4770      	bx	lr

080023e4 <_ZSt8_DestroyIPddEvT_S1_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 80023f0:	68b9      	ldr	r1, [r7, #8]
 80023f2:	68f8      	ldr	r0, [r7, #12]
 80023f4:	f000 f865 	bl	80024c2 <_ZSt8_DestroyIPdEvT_S1_>
    }
 80023f8:	bf00      	nop
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <_ZSt4moveIRSt6vectorIdSaIdEEEONSt16remove_referenceIT_E4typeEOS5_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4618      	mov	r0, r3
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr

08002414 <_ZNSt6vectorIdSaIdEE14_M_move_assignEOS1_St17integral_constantIbLb1EE>:
    private:
      // Constant-time move assignment when source object's memory can be
      // moved, either because the source's allocator will move too
      // or because the allocators are equal.
      void
      _M_move_assign(vector&& __x, true_type) noexcept
 8002414:	b590      	push	{r4, r7, lr}
 8002416:	b089      	sub	sp, #36	; 0x24
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	713a      	strb	r2, [r7, #4]
      {
	vector __tmp(get_allocator());
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	f107 031c 	add.w	r3, r7, #28
 8002426:	4611      	mov	r1, r2
 8002428:	4618      	mov	r0, r3
 800242a:	f000 f857 	bl	80024dc <_ZNKSt12_Vector_baseIdSaIdEE13get_allocatorEv>
 800242e:	f107 021c 	add.w	r2, r7, #28
 8002432:	f107 0310 	add.w	r3, r7, #16
 8002436:	4611      	mov	r1, r2
 8002438:	4618      	mov	r0, r3
 800243a:	f000 f860 	bl	80024fe <_ZNSt6vectorIdSaIdEEC1ERKS0_>
 800243e:	f107 031c 	add.w	r3, r7, #28
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff ff33 	bl	80022ae <_ZNSaIdED1Ev>
	this->_M_impl._M_swap_data(__x._M_impl);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	68ba      	ldr	r2, [r7, #8]
 800244c:	4611      	mov	r1, r2
 800244e:	4618      	mov	r0, r3
 8002450:	f000 f864 	bl	800251c <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_data12_M_swap_dataERS2_>
	__tmp._M_impl._M_swap_data(__x._M_impl);
 8002454:	68ba      	ldr	r2, [r7, #8]
 8002456:	f107 0310 	add.w	r3, r7, #16
 800245a:	4611      	mov	r1, r2
 800245c:	4618      	mov	r0, r3
 800245e:	f000 f85d 	bl	800251c <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_data12_M_swap_dataERS2_>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff ffb3 	bl	80023d0 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 800246a:	4604      	mov	r4, r0
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff ffae 	bl	80023d0 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8002474:	4603      	mov	r3, r0
 8002476:	4619      	mov	r1, r3
 8002478:	4620      	mov	r0, r4
 800247a:	f000 f86d 	bl	8002558 <_ZSt15__alloc_on_moveISaIdEEvRT_S2_>
	vector __tmp(get_allocator());
 800247e:	f107 0310 	add.w	r3, r7, #16
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff ff38 	bl	80022f8 <_ZNSt6vectorIdSaIdEED1Ev>
      }
 8002488:	bf00      	nop
 800248a:	3724      	adds	r7, #36	; 0x24
 800248c:	46bd      	mov	sp, r7
 800248e:	bd90      	pop	{r4, r7, pc}

08002490 <_ZN9__gnu_cxx13new_allocatorIdEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4618      	mov	r0, r3
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	bc80      	pop	{r7}
 80024a2:	4770      	bx	lr

080024a4 <_ZNSt16allocator_traitsISaIdEE10deallocateERS0_Pdj>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	68b9      	ldr	r1, [r7, #8]
 80024b4:	68f8      	ldr	r0, [r7, #12]
 80024b6:	f000 f85d 	bl	8002574 <_ZN9__gnu_cxx13new_allocatorIdE10deallocateEPdj>
 80024ba:	bf00      	nop
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <_ZSt8_DestroyIPdEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b082      	sub	sp, #8
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
 80024ca:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80024cc:	6839      	ldr	r1, [r7, #0]
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f000 f85d 	bl	800258e <_ZNSt12_Destroy_auxILb1EE9__destroyIPdEEvT_S3_>
    }
 80024d4:	bf00      	nop
 80024d6:	3708      	adds	r7, #8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <_ZNKSt12_Vector_baseIdSaIdEE13get_allocatorEv>:
      get_allocator() const _GLIBCXX_NOEXCEPT
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
      { return allocator_type(_M_get_Tp_allocator()); }
 80024e6:	6838      	ldr	r0, [r7, #0]
 80024e8:	f000 f85b 	bl	80025a2 <_ZNKSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 80024ec:	4603      	mov	r3, r0
 80024ee:	4619      	mov	r1, r3
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f000 f860 	bl	80025b6 <_ZNSaIdEC1ERKS_>
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <_ZNSt6vectorIdSaIdEEC1ERKS0_>:
      vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 80024fe:	b580      	push	{r7, lr}
 8002500:	b082      	sub	sp, #8
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
 8002506:	6039      	str	r1, [r7, #0]
      : _Base(__a) { }
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6839      	ldr	r1, [r7, #0]
 800250c:	4618      	mov	r0, r3
 800250e:	f000 f860 	bl	80025d2 <_ZNSt12_Vector_baseIdSaIdEEC1ERKS0_>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4618      	mov	r0, r3
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_data12_M_swap_dataERS2_>:
	_M_swap_data(_Vector_impl_data& __x) _GLIBCXX_NOEXCEPT
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
	  _Vector_impl_data __tmp;
 8002526:	f107 030c 	add.w	r3, r7, #12
 800252a:	4618      	mov	r0, r3
 800252c:	f7ff ff20 	bl	8002370 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_dataC1Ev>
	  __tmp._M_copy_data(*this);
 8002530:	f107 030c 	add.w	r3, r7, #12
 8002534:	6879      	ldr	r1, [r7, #4]
 8002536:	4618      	mov	r0, r3
 8002538:	f000 f85a 	bl	80025f0 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_data12_M_copy_dataERKS2_>
	  _M_copy_data(__x);
 800253c:	6839      	ldr	r1, [r7, #0]
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 f856 	bl	80025f0 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_data12_M_copy_dataERKS2_>
	  __x._M_copy_data(__tmp);
 8002544:	f107 030c 	add.w	r3, r7, #12
 8002548:	4619      	mov	r1, r3
 800254a:	6838      	ldr	r0, [r7, #0]
 800254c:	f000 f850 	bl	80025f0 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_data12_M_copy_dataERKS2_>
	}
 8002550:	bf00      	nop
 8002552:	3718      	adds	r7, #24
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <_ZSt15__alloc_on_moveISaIdEEvRT_S2_>:
  template<typename _Alloc>
    inline void __do_alloc_on_move(_Alloc&, _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_move(_Alloc& __one, _Alloc& __two)
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_move_assignment __pocma;
      __do_alloc_on_move(__one, __two, __pocma());
 8002562:	461a      	mov	r2, r3
 8002564:	6839      	ldr	r1, [r7, #0]
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 f858 	bl	800261c <_ZSt18__do_alloc_on_moveISaIdEEvRT_S2_St17integral_constantIbLb1EE>
    }
 800256c:	bf00      	nop
 800256e:	3710      	adds	r7, #16
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <_ZN9__gnu_cxx13new_allocatorIdE10deallocateEPdj>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 8002580:	68b8      	ldr	r0, [r7, #8]
 8002582:	f005 fa0b 	bl	800799c <_ZdlPv>
      }
 8002586:	bf00      	nop
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <_ZNSt12_Destroy_auxILb1EE9__destroyIPdEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800258e:	b480      	push	{r7}
 8002590:	b083      	sub	sp, #12
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
 8002596:	6039      	str	r1, [r7, #0]
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	bc80      	pop	{r7}
 80025a0:	4770      	bx	lr

080025a2 <_ZNKSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80025a2:	b480      	push	{r7}
 80025a4:	b083      	sub	sp, #12
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4618      	mov	r0, r3
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bc80      	pop	{r7}
 80025b4:	4770      	bx	lr

080025b6 <_ZNSaIdEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b082      	sub	sp, #8
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
 80025be:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80025c0:	6839      	ldr	r1, [r7, #0]
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 f837 	bl	8002636 <_ZN9__gnu_cxx13new_allocatorIdEC1ERKS1_>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4618      	mov	r0, r3
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <_ZNSt12_Vector_baseIdSaIdEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b082      	sub	sp, #8
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
 80025da:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6839      	ldr	r1, [r7, #0]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f000 f833 	bl	800264c <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implC1ERKS0_>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4618      	mov	r0, r3
 80025ea:	3708      	adds	r7, #8
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_data12_M_copy_dataERKS2_>:
	_M_copy_data(_Vector_impl_data const& __x) _GLIBCXX_NOEXCEPT
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
	  _M_start = __x._M_start;
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	601a      	str	r2, [r3, #0]
	  _M_finish = __x._M_finish;
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685a      	ldr	r2, [r3, #4]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	605a      	str	r2, [r3, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	689a      	ldr	r2, [r3, #8]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	609a      	str	r2, [r3, #8]
	}
 8002612:	bf00      	nop
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	bc80      	pop	{r7}
 800261a:	4770      	bx	lr

0800261c <_ZSt18__do_alloc_on_moveISaIdEEvRT_S2_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 8002628:	68b8      	ldr	r0, [r7, #8]
 800262a:	f000 f821 	bl	8002670 <_ZSt4moveIRSaIdEEONSt16remove_referenceIT_E4typeEOS3_>
 800262e:	bf00      	nop
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <_ZN9__gnu_cxx13new_allocatorIdEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8002636:	b480      	push	{r7}
 8002638:	b083      	sub	sp, #12
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
 800263e:	6039      	str	r1, [r7, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4618      	mov	r0, r3
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	bc80      	pop	{r7}
 800264a:	4770      	bx	lr

0800264c <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8002656:	6839      	ldr	r1, [r7, #0]
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f7ff ffac 	bl	80025b6 <_ZNSaIdEC1ERKS_>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff fe85 	bl	8002370 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_dataC1Ev>
	{ }
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4618      	mov	r0, r3
 800266a:	3708      	adds	r7, #8
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <_ZSt4moveIRSaIdEEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4618      	mov	r0, r3
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	bc80      	pop	{r7}
 8002682:	4770      	bx	lr

08002684 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d110      	bne.n	80026b6 <_Z41__static_initialization_and_destruction_0ii+0x32>
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800269a:	4293      	cmp	r3, r2
 800269c:	d10b      	bne.n	80026b6 <_Z41__static_initialization_and_destruction_0ii+0x32>
Kalman_Filtresi EKF;
 800269e:	4812      	ldr	r0, [pc, #72]	; (80026e8 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80026a0:	f004 fc3a 	bl	8006f18 <_ZN15Kalman_FiltresiC1Ev>
PID pid;
 80026a4:	4811      	ldr	r0, [pc, #68]	; (80026ec <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80026a6:	f004 fe5d 	bl	8007364 <_ZN3PIDC1Ev>
Controller controller;
 80026aa:	4811      	ldr	r0, [pc, #68]	; (80026f0 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80026ac:	f003 febc 	bl	8006428 <_ZN10ControllerC1Ev>
std::vector<double> controller_output_ang;
 80026b0:	4810      	ldr	r0, [pc, #64]	; (80026f4 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 80026b2:	f7fe fd5c 	bl	800116e <_ZNSt6vectorIdSaIdEEC1Ev>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d110      	bne.n	80026de <_Z41__static_initialization_and_destruction_0ii+0x5a>
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d10b      	bne.n	80026de <_Z41__static_initialization_and_destruction_0ii+0x5a>
 80026c6:	480b      	ldr	r0, [pc, #44]	; (80026f4 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 80026c8:	f7ff fe16 	bl	80022f8 <_ZNSt6vectorIdSaIdEED1Ev>
Controller controller;
 80026cc:	4808      	ldr	r0, [pc, #32]	; (80026f0 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80026ce:	f004 f9e4 	bl	8006a9a <_ZN10ControllerD1Ev>
PID pid;
 80026d2:	4806      	ldr	r0, [pc, #24]	; (80026ec <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80026d4:	f005 f958 	bl	8007988 <_ZN3PIDD1Ev>
Kalman_Filtresi EKF;
 80026d8:	4803      	ldr	r0, [pc, #12]	; (80026e8 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80026da:	f004 fdef 	bl	80072bc <_ZN15Kalman_FiltresiD1Ev>
}
 80026de:	bf00      	nop
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	20000390 	.word	0x20000390
 80026ec:	200004d8 	.word	0x200004d8
 80026f0:	20000548 	.word	0x20000548
 80026f4:	20000778 	.word	0x20000778

080026f8 <_GLOBAL__sub_I_hi2c1>:
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002700:	2001      	movs	r0, #1
 8002702:	f7ff ffbf 	bl	8002684 <_Z41__static_initialization_and_destruction_0ii>
 8002706:	bd80      	pop	{r7, pc}

08002708 <_GLOBAL__sub_D_hi2c1>:
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
 800270c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002710:	2000      	movs	r0, #0
 8002712:	f7ff ffb7 	bl	8002684 <_Z41__static_initialization_and_destruction_0ii>
 8002716:	bd80      	pop	{r7, pc}

08002718 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800271e:	4b15      	ldr	r3, [pc, #84]	; (8002774 <HAL_MspInit+0x5c>)
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	4a14      	ldr	r2, [pc, #80]	; (8002774 <HAL_MspInit+0x5c>)
 8002724:	f043 0301 	orr.w	r3, r3, #1
 8002728:	6193      	str	r3, [r2, #24]
 800272a:	4b12      	ldr	r3, [pc, #72]	; (8002774 <HAL_MspInit+0x5c>)
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	60bb      	str	r3, [r7, #8]
 8002734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002736:	4b0f      	ldr	r3, [pc, #60]	; (8002774 <HAL_MspInit+0x5c>)
 8002738:	69db      	ldr	r3, [r3, #28]
 800273a:	4a0e      	ldr	r2, [pc, #56]	; (8002774 <HAL_MspInit+0x5c>)
 800273c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002740:	61d3      	str	r3, [r2, #28]
 8002742:	4b0c      	ldr	r3, [pc, #48]	; (8002774 <HAL_MspInit+0x5c>)
 8002744:	69db      	ldr	r3, [r3, #28]
 8002746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274a:	607b      	str	r3, [r7, #4]
 800274c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800274e:	4b0a      	ldr	r3, [pc, #40]	; (8002778 <HAL_MspInit+0x60>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	60fb      	str	r3, [r7, #12]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800275a:	60fb      	str	r3, [r7, #12]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002762:	60fb      	str	r3, [r7, #12]
 8002764:	4a04      	ldr	r2, [pc, #16]	; (8002778 <HAL_MspInit+0x60>)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800276a:	bf00      	nop
 800276c:	3714      	adds	r7, #20
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr
 8002774:	40021000 	.word	0x40021000
 8002778:	40010000 	.word	0x40010000

0800277c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b088      	sub	sp, #32
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002784:	f107 0310 	add.w	r3, r7, #16
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	605a      	str	r2, [r3, #4]
 800278e:	609a      	str	r2, [r3, #8]
 8002790:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a15      	ldr	r2, [pc, #84]	; (80027ec <HAL_I2C_MspInit+0x70>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d123      	bne.n	80027e4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800279c:	4b14      	ldr	r3, [pc, #80]	; (80027f0 <HAL_I2C_MspInit+0x74>)
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	4a13      	ldr	r2, [pc, #76]	; (80027f0 <HAL_I2C_MspInit+0x74>)
 80027a2:	f043 0308 	orr.w	r3, r3, #8
 80027a6:	6193      	str	r3, [r2, #24]
 80027a8:	4b11      	ldr	r3, [pc, #68]	; (80027f0 <HAL_I2C_MspInit+0x74>)
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	f003 0308 	and.w	r3, r3, #8
 80027b0:	60fb      	str	r3, [r7, #12]
 80027b2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027b4:	23c0      	movs	r3, #192	; 0xc0
 80027b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027b8:	2312      	movs	r3, #18
 80027ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027bc:	2303      	movs	r3, #3
 80027be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027c0:	f107 0310 	add.w	r3, r7, #16
 80027c4:	4619      	mov	r1, r3
 80027c6:	480b      	ldr	r0, [pc, #44]	; (80027f4 <HAL_I2C_MspInit+0x78>)
 80027c8:	f000 fb7a 	bl	8002ec0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027cc:	4b08      	ldr	r3, [pc, #32]	; (80027f0 <HAL_I2C_MspInit+0x74>)
 80027ce:	69db      	ldr	r3, [r3, #28]
 80027d0:	4a07      	ldr	r2, [pc, #28]	; (80027f0 <HAL_I2C_MspInit+0x74>)
 80027d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027d6:	61d3      	str	r3, [r2, #28]
 80027d8:	4b05      	ldr	r3, [pc, #20]	; (80027f0 <HAL_I2C_MspInit+0x74>)
 80027da:	69db      	ldr	r3, [r3, #28]
 80027dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027e0:	60bb      	str	r3, [r7, #8]
 80027e2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80027e4:	bf00      	nop
 80027e6:	3720      	adds	r7, #32
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	40005400 	.word	0x40005400
 80027f0:	40021000 	.word	0x40021000
 80027f4:	40010c00 	.word	0x40010c00

080027f8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a09      	ldr	r2, [pc, #36]	; (800282c <HAL_TIM_PWM_MspInit+0x34>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d10b      	bne.n	8002822 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800280a:	4b09      	ldr	r3, [pc, #36]	; (8002830 <HAL_TIM_PWM_MspInit+0x38>)
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	4a08      	ldr	r2, [pc, #32]	; (8002830 <HAL_TIM_PWM_MspInit+0x38>)
 8002810:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002814:	6193      	str	r3, [r2, #24]
 8002816:	4b06      	ldr	r3, [pc, #24]	; (8002830 <HAL_TIM_PWM_MspInit+0x38>)
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002822:	bf00      	nop
 8002824:	3714      	adds	r7, #20
 8002826:	46bd      	mov	sp, r7
 8002828:	bc80      	pop	{r7}
 800282a:	4770      	bx	lr
 800282c:	40012c00 	.word	0x40012c00
 8002830:	40021000 	.word	0x40021000

08002834 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b08a      	sub	sp, #40	; 0x28
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800283c:	f107 0318 	add.w	r3, r7, #24
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	605a      	str	r2, [r3, #4]
 8002846:	609a      	str	r2, [r3, #8]
 8002848:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002852:	d114      	bne.n	800287e <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002854:	4b2d      	ldr	r3, [pc, #180]	; (800290c <HAL_TIM_Base_MspInit+0xd8>)
 8002856:	69db      	ldr	r3, [r3, #28]
 8002858:	4a2c      	ldr	r2, [pc, #176]	; (800290c <HAL_TIM_Base_MspInit+0xd8>)
 800285a:	f043 0301 	orr.w	r3, r3, #1
 800285e:	61d3      	str	r3, [r2, #28]
 8002860:	4b2a      	ldr	r3, [pc, #168]	; (800290c <HAL_TIM_Base_MspInit+0xd8>)
 8002862:	69db      	ldr	r3, [r3, #28]
 8002864:	f003 0301 	and.w	r3, r3, #1
 8002868:	617b      	str	r3, [r7, #20]
 800286a:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800286c:	2200      	movs	r2, #0
 800286e:	2101      	movs	r1, #1
 8002870:	201c      	movs	r0, #28
 8002872:	f000 faee 	bl	8002e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002876:	201c      	movs	r0, #28
 8002878:	f000 fb07 	bl	8002e8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800287c:	e042      	b.n	8002904 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM3)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a23      	ldr	r2, [pc, #140]	; (8002910 <HAL_TIM_Base_MspInit+0xdc>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d12c      	bne.n	80028e2 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002888:	4b20      	ldr	r3, [pc, #128]	; (800290c <HAL_TIM_Base_MspInit+0xd8>)
 800288a:	69db      	ldr	r3, [r3, #28]
 800288c:	4a1f      	ldr	r2, [pc, #124]	; (800290c <HAL_TIM_Base_MspInit+0xd8>)
 800288e:	f043 0302 	orr.w	r3, r3, #2
 8002892:	61d3      	str	r3, [r2, #28]
 8002894:	4b1d      	ldr	r3, [pc, #116]	; (800290c <HAL_TIM_Base_MspInit+0xd8>)
 8002896:	69db      	ldr	r3, [r3, #28]
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	613b      	str	r3, [r7, #16]
 800289e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028a0:	4b1a      	ldr	r3, [pc, #104]	; (800290c <HAL_TIM_Base_MspInit+0xd8>)
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	4a19      	ldr	r2, [pc, #100]	; (800290c <HAL_TIM_Base_MspInit+0xd8>)
 80028a6:	f043 0304 	orr.w	r3, r3, #4
 80028aa:	6193      	str	r3, [r2, #24]
 80028ac:	4b17      	ldr	r3, [pc, #92]	; (800290c <HAL_TIM_Base_MspInit+0xd8>)
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	f003 0304 	and.w	r3, r3, #4
 80028b4:	60fb      	str	r3, [r7, #12]
 80028b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80028b8:	2380      	movs	r3, #128	; 0x80
 80028ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028bc:	2300      	movs	r3, #0
 80028be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c0:	2300      	movs	r3, #0
 80028c2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c4:	f107 0318 	add.w	r3, r7, #24
 80028c8:	4619      	mov	r1, r3
 80028ca:	4812      	ldr	r0, [pc, #72]	; (8002914 <HAL_TIM_Base_MspInit+0xe0>)
 80028cc:	f000 faf8 	bl	8002ec0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80028d0:	2200      	movs	r2, #0
 80028d2:	2100      	movs	r1, #0
 80028d4:	201d      	movs	r0, #29
 80028d6:	f000 fabc 	bl	8002e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80028da:	201d      	movs	r0, #29
 80028dc:	f000 fad5 	bl	8002e8a <HAL_NVIC_EnableIRQ>
}
 80028e0:	e010      	b.n	8002904 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM4)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a0c      	ldr	r2, [pc, #48]	; (8002918 <HAL_TIM_Base_MspInit+0xe4>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d10b      	bne.n	8002904 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80028ec:	4b07      	ldr	r3, [pc, #28]	; (800290c <HAL_TIM_Base_MspInit+0xd8>)
 80028ee:	69db      	ldr	r3, [r3, #28]
 80028f0:	4a06      	ldr	r2, [pc, #24]	; (800290c <HAL_TIM_Base_MspInit+0xd8>)
 80028f2:	f043 0304 	orr.w	r3, r3, #4
 80028f6:	61d3      	str	r3, [r2, #28]
 80028f8:	4b04      	ldr	r3, [pc, #16]	; (800290c <HAL_TIM_Base_MspInit+0xd8>)
 80028fa:	69db      	ldr	r3, [r3, #28]
 80028fc:	f003 0304 	and.w	r3, r3, #4
 8002900:	60bb      	str	r3, [r7, #8]
 8002902:	68bb      	ldr	r3, [r7, #8]
}
 8002904:	bf00      	nop
 8002906:	3728      	adds	r7, #40	; 0x28
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	40021000 	.word	0x40021000
 8002910:	40000400 	.word	0x40000400
 8002914:	40010800 	.word	0x40010800
 8002918:	40000800 	.word	0x40000800

0800291c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b088      	sub	sp, #32
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002924:	f107 0310 	add.w	r3, r7, #16
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	605a      	str	r2, [r3, #4]
 800292e:	609a      	str	r2, [r3, #8]
 8002930:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a10      	ldr	r2, [pc, #64]	; (8002978 <HAL_TIM_MspPostInit+0x5c>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d118      	bne.n	800296e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800293c:	4b0f      	ldr	r3, [pc, #60]	; (800297c <HAL_TIM_MspPostInit+0x60>)
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	4a0e      	ldr	r2, [pc, #56]	; (800297c <HAL_TIM_MspPostInit+0x60>)
 8002942:	f043 0304 	orr.w	r3, r3, #4
 8002946:	6193      	str	r3, [r2, #24]
 8002948:	4b0c      	ldr	r3, [pc, #48]	; (800297c <HAL_TIM_MspPostInit+0x60>)
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	60fb      	str	r3, [r7, #12]
 8002952:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8002954:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002958:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800295a:	2302      	movs	r3, #2
 800295c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800295e:	2302      	movs	r3, #2
 8002960:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002962:	f107 0310 	add.w	r3, r7, #16
 8002966:	4619      	mov	r1, r3
 8002968:	4805      	ldr	r0, [pc, #20]	; (8002980 <HAL_TIM_MspPostInit+0x64>)
 800296a:	f000 faa9 	bl	8002ec0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800296e:	bf00      	nop
 8002970:	3720      	adds	r7, #32
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	40012c00 	.word	0x40012c00
 800297c:	40021000 	.word	0x40021000
 8002980:	40010800 	.word	0x40010800

08002984 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b088      	sub	sp, #32
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800298c:	f107 0310 	add.w	r3, r7, #16
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	605a      	str	r2, [r3, #4]
 8002996:	609a      	str	r2, [r3, #8]
 8002998:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a1b      	ldr	r2, [pc, #108]	; (8002a0c <HAL_UART_MspInit+0x88>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d12f      	bne.n	8002a04 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80029a4:	4b1a      	ldr	r3, [pc, #104]	; (8002a10 <HAL_UART_MspInit+0x8c>)
 80029a6:	69db      	ldr	r3, [r3, #28]
 80029a8:	4a19      	ldr	r2, [pc, #100]	; (8002a10 <HAL_UART_MspInit+0x8c>)
 80029aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029ae:	61d3      	str	r3, [r2, #28]
 80029b0:	4b17      	ldr	r3, [pc, #92]	; (8002a10 <HAL_UART_MspInit+0x8c>)
 80029b2:	69db      	ldr	r3, [r3, #28]
 80029b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b8:	60fb      	str	r3, [r7, #12]
 80029ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029bc:	4b14      	ldr	r3, [pc, #80]	; (8002a10 <HAL_UART_MspInit+0x8c>)
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	4a13      	ldr	r2, [pc, #76]	; (8002a10 <HAL_UART_MspInit+0x8c>)
 80029c2:	f043 0304 	orr.w	r3, r3, #4
 80029c6:	6193      	str	r3, [r2, #24]
 80029c8:	4b11      	ldr	r3, [pc, #68]	; (8002a10 <HAL_UART_MspInit+0x8c>)
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	f003 0304 	and.w	r3, r3, #4
 80029d0:	60bb      	str	r3, [r7, #8]
 80029d2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80029d4:	2304      	movs	r3, #4
 80029d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d8:	2302      	movs	r3, #2
 80029da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029dc:	2303      	movs	r3, #3
 80029de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029e0:	f107 0310 	add.w	r3, r7, #16
 80029e4:	4619      	mov	r1, r3
 80029e6:	480b      	ldr	r0, [pc, #44]	; (8002a14 <HAL_UART_MspInit+0x90>)
 80029e8:	f000 fa6a 	bl	8002ec0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80029ec:	2308      	movs	r3, #8
 80029ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029f0:	2300      	movs	r3, #0
 80029f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f4:	2300      	movs	r3, #0
 80029f6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f8:	f107 0310 	add.w	r3, r7, #16
 80029fc:	4619      	mov	r1, r3
 80029fe:	4805      	ldr	r0, [pc, #20]	; (8002a14 <HAL_UART_MspInit+0x90>)
 8002a00:	f000 fa5e 	bl	8002ec0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002a04:	bf00      	nop
 8002a06:	3720      	adds	r7, #32
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	40004400 	.word	0x40004400
 8002a10:	40021000 	.word	0x40021000
 8002a14:	40010800 	.word	0x40010800

08002a18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a1c:	e7fe      	b.n	8002a1c <NMI_Handler+0x4>

08002a1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a22:	e7fe      	b.n	8002a22 <HardFault_Handler+0x4>

08002a24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a28:	e7fe      	b.n	8002a28 <MemManage_Handler+0x4>

08002a2a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a2e:	e7fe      	b.n	8002a2e <BusFault_Handler+0x4>

08002a30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a34:	e7fe      	b.n	8002a34 <UsageFault_Handler+0x4>

08002a36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a36:	b480      	push	{r7}
 8002a38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a3a:	bf00      	nop
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bc80      	pop	{r7}
 8002a40:	4770      	bx	lr

08002a42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a42:	b480      	push	{r7}
 8002a44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a46:	bf00      	nop
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bc80      	pop	{r7}
 8002a4c:	4770      	bx	lr

08002a4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a52:	bf00      	nop
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bc80      	pop	{r7}
 8002a58:	4770      	bx	lr

08002a5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a5e:	f000 f8e1 	bl	8002c24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a62:	bf00      	nop
 8002a64:	bd80      	pop	{r7, pc}
	...

08002a68 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002a6c:	4802      	ldr	r0, [pc, #8]	; (8002a78 <TIM2_IRQHandler+0x10>)
 8002a6e:	f002 fb33 	bl	80050d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002a72:	bf00      	nop
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	20000128 	.word	0x20000128

08002a7c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002a80:	4802      	ldr	r0, [pc, #8]	; (8002a8c <TIM3_IRQHandler+0x10>)
 8002a82:	f002 fb29 	bl	80050d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002a86:	bf00      	nop
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	20000170 	.word	0x20000170

08002a90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
	return 1;
 8002a94:	2301      	movs	r3, #1
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bc80      	pop	{r7}
 8002a9c:	4770      	bx	lr

08002a9e <_kill>:

int _kill(int pid, int sig)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b082      	sub	sp, #8
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
 8002aa6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002aa8:	f005 fb36 	bl	8008118 <__errno>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2216      	movs	r2, #22
 8002ab0:	601a      	str	r2, [r3, #0]
	return -1;
 8002ab2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <_exit>:

void _exit (int status)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b082      	sub	sp, #8
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002ac6:	f04f 31ff 	mov.w	r1, #4294967295
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f7ff ffe7 	bl	8002a9e <_kill>
	while (1) {}		/* Make sure we hang here */
 8002ad0:	e7fe      	b.n	8002ad0 <_exit+0x12>
	...

08002ad4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002adc:	4a14      	ldr	r2, [pc, #80]	; (8002b30 <_sbrk+0x5c>)
 8002ade:	4b15      	ldr	r3, [pc, #84]	; (8002b34 <_sbrk+0x60>)
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ae8:	4b13      	ldr	r3, [pc, #76]	; (8002b38 <_sbrk+0x64>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d102      	bne.n	8002af6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002af0:	4b11      	ldr	r3, [pc, #68]	; (8002b38 <_sbrk+0x64>)
 8002af2:	4a12      	ldr	r2, [pc, #72]	; (8002b3c <_sbrk+0x68>)
 8002af4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002af6:	4b10      	ldr	r3, [pc, #64]	; (8002b38 <_sbrk+0x64>)
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4413      	add	r3, r2
 8002afe:	693a      	ldr	r2, [r7, #16]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d207      	bcs.n	8002b14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b04:	f005 fb08 	bl	8008118 <__errno>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	220c      	movs	r2, #12
 8002b0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b12:	e009      	b.n	8002b28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b14:	4b08      	ldr	r3, [pc, #32]	; (8002b38 <_sbrk+0x64>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b1a:	4b07      	ldr	r3, [pc, #28]	; (8002b38 <_sbrk+0x64>)
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4413      	add	r3, r2
 8002b22:	4a05      	ldr	r2, [pc, #20]	; (8002b38 <_sbrk+0x64>)
 8002b24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b26:	68fb      	ldr	r3, [r7, #12]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3718      	adds	r7, #24
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	20005000 	.word	0x20005000
 8002b34:	00000400 	.word	0x00000400
 8002b38:	200007e0 	.word	0x200007e0
 8002b3c:	20000808 	.word	0x20000808

08002b40 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b44:	bf00      	nop
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bc80      	pop	{r7}
 8002b4a:	4770      	bx	lr

08002b4c <Reset_Handler>:
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	e003      	b.n	8002b58 <LoopCopyDataInit>

08002b50 <CopyDataInit>:
 8002b50:	4b0b      	ldr	r3, [pc, #44]	; (8002b80 <LoopFillZerobss+0x14>)
 8002b52:	585b      	ldr	r3, [r3, r1]
 8002b54:	5043      	str	r3, [r0, r1]
 8002b56:	3104      	adds	r1, #4

08002b58 <LoopCopyDataInit>:
 8002b58:	480a      	ldr	r0, [pc, #40]	; (8002b84 <LoopFillZerobss+0x18>)
 8002b5a:	4b0b      	ldr	r3, [pc, #44]	; (8002b88 <LoopFillZerobss+0x1c>)
 8002b5c:	1842      	adds	r2, r0, r1
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d3f6      	bcc.n	8002b50 <CopyDataInit>
 8002b62:	4a0a      	ldr	r2, [pc, #40]	; (8002b8c <LoopFillZerobss+0x20>)
 8002b64:	e002      	b.n	8002b6c <LoopFillZerobss>

08002b66 <FillZerobss>:
 8002b66:	2300      	movs	r3, #0
 8002b68:	f842 3b04 	str.w	r3, [r2], #4

08002b6c <LoopFillZerobss>:
 8002b6c:	4b08      	ldr	r3, [pc, #32]	; (8002b90 <LoopFillZerobss+0x24>)
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d3f9      	bcc.n	8002b66 <FillZerobss>
 8002b72:	f7ff ffe5 	bl	8002b40 <SystemInit>
 8002b76:	f005 fad5 	bl	8008124 <__libc_init_array>
 8002b7a:	f7fe fb05 	bl	8001188 <main>
 8002b7e:	4770      	bx	lr
 8002b80:	08008518 	.word	0x08008518
 8002b84:	20000000 	.word	0x20000000
 8002b88:	20000070 	.word	0x20000070
 8002b8c:	20000070 	.word	0x20000070
 8002b90:	20000804 	.word	0x20000804

08002b94 <ADC1_2_IRQHandler>:
 8002b94:	e7fe      	b.n	8002b94 <ADC1_2_IRQHandler>
	...

08002b98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b9c:	4b08      	ldr	r3, [pc, #32]	; (8002bc0 <HAL_Init+0x28>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a07      	ldr	r2, [pc, #28]	; (8002bc0 <HAL_Init+0x28>)
 8002ba2:	f043 0310 	orr.w	r3, r3, #16
 8002ba6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ba8:	2003      	movs	r0, #3
 8002baa:	f000 f947 	bl	8002e3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bae:	2000      	movs	r0, #0
 8002bb0:	f000 f808 	bl	8002bc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bb4:	f7ff fdb0 	bl	8002718 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40022000 	.word	0x40022000

08002bc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bcc:	4b12      	ldr	r3, [pc, #72]	; (8002c18 <HAL_InitTick+0x54>)
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	4b12      	ldr	r3, [pc, #72]	; (8002c1c <HAL_InitTick+0x58>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bda:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be2:	4618      	mov	r0, r3
 8002be4:	f000 f95f 	bl	8002ea6 <HAL_SYSTICK_Config>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e00e      	b.n	8002c10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b0f      	cmp	r3, #15
 8002bf6:	d80a      	bhi.n	8002c0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8002c00:	f000 f927 	bl	8002e52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c04:	4a06      	ldr	r2, [pc, #24]	; (8002c20 <HAL_InitTick+0x5c>)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	e000      	b.n	8002c10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	20000000 	.word	0x20000000
 8002c1c:	20000008 	.word	0x20000008
 8002c20:	20000004 	.word	0x20000004

08002c24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c28:	4b05      	ldr	r3, [pc, #20]	; (8002c40 <HAL_IncTick+0x1c>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	4b05      	ldr	r3, [pc, #20]	; (8002c44 <HAL_IncTick+0x20>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4413      	add	r3, r2
 8002c34:	4a03      	ldr	r2, [pc, #12]	; (8002c44 <HAL_IncTick+0x20>)
 8002c36:	6013      	str	r3, [r2, #0]
}
 8002c38:	bf00      	nop
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bc80      	pop	{r7}
 8002c3e:	4770      	bx	lr
 8002c40:	20000008 	.word	0x20000008
 8002c44:	200007f0 	.word	0x200007f0

08002c48 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c4c:	4b02      	ldr	r3, [pc, #8]	; (8002c58 <HAL_GetTick+0x10>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bc80      	pop	{r7}
 8002c56:	4770      	bx	lr
 8002c58:	200007f0 	.word	0x200007f0

08002c5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c64:	f7ff fff0 	bl	8002c48 <HAL_GetTick>
 8002c68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c74:	d005      	beq.n	8002c82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c76:	4b0a      	ldr	r3, [pc, #40]	; (8002ca0 <HAL_Delay+0x44>)
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	4413      	add	r3, r2
 8002c80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c82:	bf00      	nop
 8002c84:	f7ff ffe0 	bl	8002c48 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d8f7      	bhi.n	8002c84 <HAL_Delay+0x28>
  {
  }
}
 8002c94:	bf00      	nop
 8002c96:	bf00      	nop
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	20000008 	.word	0x20000008

08002ca4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f003 0307 	and.w	r3, r3, #7
 8002cb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cb4:	4b0c      	ldr	r3, [pc, #48]	; (8002ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cba:	68ba      	ldr	r2, [r7, #8]
 8002cbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ccc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cd6:	4a04      	ldr	r2, [pc, #16]	; (8002ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	60d3      	str	r3, [r2, #12]
}
 8002cdc:	bf00      	nop
 8002cde:	3714      	adds	r7, #20
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bc80      	pop	{r7}
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	e000ed00 	.word	0xe000ed00

08002cec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cf0:	4b04      	ldr	r3, [pc, #16]	; (8002d04 <__NVIC_GetPriorityGrouping+0x18>)
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	0a1b      	lsrs	r3, r3, #8
 8002cf6:	f003 0307 	and.w	r3, r3, #7
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bc80      	pop	{r7}
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	e000ed00 	.word	0xe000ed00

08002d08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	4603      	mov	r3, r0
 8002d10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	db0b      	blt.n	8002d32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d1a:	79fb      	ldrb	r3, [r7, #7]
 8002d1c:	f003 021f 	and.w	r2, r3, #31
 8002d20:	4906      	ldr	r1, [pc, #24]	; (8002d3c <__NVIC_EnableIRQ+0x34>)
 8002d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d26:	095b      	lsrs	r3, r3, #5
 8002d28:	2001      	movs	r0, #1
 8002d2a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bc80      	pop	{r7}
 8002d3a:	4770      	bx	lr
 8002d3c:	e000e100 	.word	0xe000e100

08002d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	4603      	mov	r3, r0
 8002d48:	6039      	str	r1, [r7, #0]
 8002d4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	db0a      	blt.n	8002d6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	b2da      	uxtb	r2, r3
 8002d58:	490c      	ldr	r1, [pc, #48]	; (8002d8c <__NVIC_SetPriority+0x4c>)
 8002d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d5e:	0112      	lsls	r2, r2, #4
 8002d60:	b2d2      	uxtb	r2, r2
 8002d62:	440b      	add	r3, r1
 8002d64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d68:	e00a      	b.n	8002d80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	b2da      	uxtb	r2, r3
 8002d6e:	4908      	ldr	r1, [pc, #32]	; (8002d90 <__NVIC_SetPriority+0x50>)
 8002d70:	79fb      	ldrb	r3, [r7, #7]
 8002d72:	f003 030f 	and.w	r3, r3, #15
 8002d76:	3b04      	subs	r3, #4
 8002d78:	0112      	lsls	r2, r2, #4
 8002d7a:	b2d2      	uxtb	r2, r2
 8002d7c:	440b      	add	r3, r1
 8002d7e:	761a      	strb	r2, [r3, #24]
}
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bc80      	pop	{r7}
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	e000e100 	.word	0xe000e100
 8002d90:	e000ed00 	.word	0xe000ed00

08002d94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b089      	sub	sp, #36	; 0x24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f003 0307 	and.w	r3, r3, #7
 8002da6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	f1c3 0307 	rsb	r3, r3, #7
 8002dae:	2b04      	cmp	r3, #4
 8002db0:	bf28      	it	cs
 8002db2:	2304      	movcs	r3, #4
 8002db4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	3304      	adds	r3, #4
 8002dba:	2b06      	cmp	r3, #6
 8002dbc:	d902      	bls.n	8002dc4 <NVIC_EncodePriority+0x30>
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	3b03      	subs	r3, #3
 8002dc2:	e000      	b.n	8002dc6 <NVIC_EncodePriority+0x32>
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd2:	43da      	mvns	r2, r3
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	401a      	ands	r2, r3
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	fa01 f303 	lsl.w	r3, r1, r3
 8002de6:	43d9      	mvns	r1, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dec:	4313      	orrs	r3, r2
         );
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3724      	adds	r7, #36	; 0x24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bc80      	pop	{r7}
 8002df6:	4770      	bx	lr

08002df8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	3b01      	subs	r3, #1
 8002e04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e08:	d301      	bcc.n	8002e0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e00f      	b.n	8002e2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e0e:	4a0a      	ldr	r2, [pc, #40]	; (8002e38 <SysTick_Config+0x40>)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	3b01      	subs	r3, #1
 8002e14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e16:	210f      	movs	r1, #15
 8002e18:	f04f 30ff 	mov.w	r0, #4294967295
 8002e1c:	f7ff ff90 	bl	8002d40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e20:	4b05      	ldr	r3, [pc, #20]	; (8002e38 <SysTick_Config+0x40>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e26:	4b04      	ldr	r3, [pc, #16]	; (8002e38 <SysTick_Config+0x40>)
 8002e28:	2207      	movs	r2, #7
 8002e2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	e000e010 	.word	0xe000e010

08002e3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f7ff ff2d 	bl	8002ca4 <__NVIC_SetPriorityGrouping>
}
 8002e4a:	bf00      	nop
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b086      	sub	sp, #24
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	4603      	mov	r3, r0
 8002e5a:	60b9      	str	r1, [r7, #8]
 8002e5c:	607a      	str	r2, [r7, #4]
 8002e5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e60:	2300      	movs	r3, #0
 8002e62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e64:	f7ff ff42 	bl	8002cec <__NVIC_GetPriorityGrouping>
 8002e68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	68b9      	ldr	r1, [r7, #8]
 8002e6e:	6978      	ldr	r0, [r7, #20]
 8002e70:	f7ff ff90 	bl	8002d94 <NVIC_EncodePriority>
 8002e74:	4602      	mov	r2, r0
 8002e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e7a:	4611      	mov	r1, r2
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7ff ff5f 	bl	8002d40 <__NVIC_SetPriority>
}
 8002e82:	bf00      	nop
 8002e84:	3718      	adds	r7, #24
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b082      	sub	sp, #8
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	4603      	mov	r3, r0
 8002e92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7ff ff35 	bl	8002d08 <__NVIC_EnableIRQ>
}
 8002e9e:	bf00      	nop
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b082      	sub	sp, #8
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f7ff ffa2 	bl	8002df8 <SysTick_Config>
 8002eb4:	4603      	mov	r3, r0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
	...

08002ec0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b08b      	sub	sp, #44	; 0x2c
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ed2:	e169      	b.n	80031a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8002edc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	69fa      	ldr	r2, [r7, #28]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	f040 8158 	bne.w	80031a2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	4a9a      	ldr	r2, [pc, #616]	; (8003160 <HAL_GPIO_Init+0x2a0>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d05e      	beq.n	8002fba <HAL_GPIO_Init+0xfa>
 8002efc:	4a98      	ldr	r2, [pc, #608]	; (8003160 <HAL_GPIO_Init+0x2a0>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d875      	bhi.n	8002fee <HAL_GPIO_Init+0x12e>
 8002f02:	4a98      	ldr	r2, [pc, #608]	; (8003164 <HAL_GPIO_Init+0x2a4>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d058      	beq.n	8002fba <HAL_GPIO_Init+0xfa>
 8002f08:	4a96      	ldr	r2, [pc, #600]	; (8003164 <HAL_GPIO_Init+0x2a4>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d86f      	bhi.n	8002fee <HAL_GPIO_Init+0x12e>
 8002f0e:	4a96      	ldr	r2, [pc, #600]	; (8003168 <HAL_GPIO_Init+0x2a8>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d052      	beq.n	8002fba <HAL_GPIO_Init+0xfa>
 8002f14:	4a94      	ldr	r2, [pc, #592]	; (8003168 <HAL_GPIO_Init+0x2a8>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d869      	bhi.n	8002fee <HAL_GPIO_Init+0x12e>
 8002f1a:	4a94      	ldr	r2, [pc, #592]	; (800316c <HAL_GPIO_Init+0x2ac>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d04c      	beq.n	8002fba <HAL_GPIO_Init+0xfa>
 8002f20:	4a92      	ldr	r2, [pc, #584]	; (800316c <HAL_GPIO_Init+0x2ac>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d863      	bhi.n	8002fee <HAL_GPIO_Init+0x12e>
 8002f26:	4a92      	ldr	r2, [pc, #584]	; (8003170 <HAL_GPIO_Init+0x2b0>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d046      	beq.n	8002fba <HAL_GPIO_Init+0xfa>
 8002f2c:	4a90      	ldr	r2, [pc, #576]	; (8003170 <HAL_GPIO_Init+0x2b0>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d85d      	bhi.n	8002fee <HAL_GPIO_Init+0x12e>
 8002f32:	2b12      	cmp	r3, #18
 8002f34:	d82a      	bhi.n	8002f8c <HAL_GPIO_Init+0xcc>
 8002f36:	2b12      	cmp	r3, #18
 8002f38:	d859      	bhi.n	8002fee <HAL_GPIO_Init+0x12e>
 8002f3a:	a201      	add	r2, pc, #4	; (adr r2, 8002f40 <HAL_GPIO_Init+0x80>)
 8002f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f40:	08002fbb 	.word	0x08002fbb
 8002f44:	08002f95 	.word	0x08002f95
 8002f48:	08002fa7 	.word	0x08002fa7
 8002f4c:	08002fe9 	.word	0x08002fe9
 8002f50:	08002fef 	.word	0x08002fef
 8002f54:	08002fef 	.word	0x08002fef
 8002f58:	08002fef 	.word	0x08002fef
 8002f5c:	08002fef 	.word	0x08002fef
 8002f60:	08002fef 	.word	0x08002fef
 8002f64:	08002fef 	.word	0x08002fef
 8002f68:	08002fef 	.word	0x08002fef
 8002f6c:	08002fef 	.word	0x08002fef
 8002f70:	08002fef 	.word	0x08002fef
 8002f74:	08002fef 	.word	0x08002fef
 8002f78:	08002fef 	.word	0x08002fef
 8002f7c:	08002fef 	.word	0x08002fef
 8002f80:	08002fef 	.word	0x08002fef
 8002f84:	08002f9d 	.word	0x08002f9d
 8002f88:	08002fb1 	.word	0x08002fb1
 8002f8c:	4a79      	ldr	r2, [pc, #484]	; (8003174 <HAL_GPIO_Init+0x2b4>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d013      	beq.n	8002fba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002f92:	e02c      	b.n	8002fee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	623b      	str	r3, [r7, #32]
          break;
 8002f9a:	e029      	b.n	8002ff0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	3304      	adds	r3, #4
 8002fa2:	623b      	str	r3, [r7, #32]
          break;
 8002fa4:	e024      	b.n	8002ff0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	3308      	adds	r3, #8
 8002fac:	623b      	str	r3, [r7, #32]
          break;
 8002fae:	e01f      	b.n	8002ff0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	330c      	adds	r3, #12
 8002fb6:	623b      	str	r3, [r7, #32]
          break;
 8002fb8:	e01a      	b.n	8002ff0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d102      	bne.n	8002fc8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002fc2:	2304      	movs	r3, #4
 8002fc4:	623b      	str	r3, [r7, #32]
          break;
 8002fc6:	e013      	b.n	8002ff0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d105      	bne.n	8002fdc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fd0:	2308      	movs	r3, #8
 8002fd2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	69fa      	ldr	r2, [r7, #28]
 8002fd8:	611a      	str	r2, [r3, #16]
          break;
 8002fda:	e009      	b.n	8002ff0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fdc:	2308      	movs	r3, #8
 8002fde:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	69fa      	ldr	r2, [r7, #28]
 8002fe4:	615a      	str	r2, [r3, #20]
          break;
 8002fe6:	e003      	b.n	8002ff0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	623b      	str	r3, [r7, #32]
          break;
 8002fec:	e000      	b.n	8002ff0 <HAL_GPIO_Init+0x130>
          break;
 8002fee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	2bff      	cmp	r3, #255	; 0xff
 8002ff4:	d801      	bhi.n	8002ffa <HAL_GPIO_Init+0x13a>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	e001      	b.n	8002ffe <HAL_GPIO_Init+0x13e>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	3304      	adds	r3, #4
 8002ffe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	2bff      	cmp	r3, #255	; 0xff
 8003004:	d802      	bhi.n	800300c <HAL_GPIO_Init+0x14c>
 8003006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	e002      	b.n	8003012 <HAL_GPIO_Init+0x152>
 800300c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300e:	3b08      	subs	r3, #8
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	210f      	movs	r1, #15
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	fa01 f303 	lsl.w	r3, r1, r3
 8003020:	43db      	mvns	r3, r3
 8003022:	401a      	ands	r2, r3
 8003024:	6a39      	ldr	r1, [r7, #32]
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	fa01 f303 	lsl.w	r3, r1, r3
 800302c:	431a      	orrs	r2, r3
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800303a:	2b00      	cmp	r3, #0
 800303c:	f000 80b1 	beq.w	80031a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003040:	4b4d      	ldr	r3, [pc, #308]	; (8003178 <HAL_GPIO_Init+0x2b8>)
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	4a4c      	ldr	r2, [pc, #304]	; (8003178 <HAL_GPIO_Init+0x2b8>)
 8003046:	f043 0301 	orr.w	r3, r3, #1
 800304a:	6193      	str	r3, [r2, #24]
 800304c:	4b4a      	ldr	r3, [pc, #296]	; (8003178 <HAL_GPIO_Init+0x2b8>)
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	f003 0301 	and.w	r3, r3, #1
 8003054:	60bb      	str	r3, [r7, #8]
 8003056:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003058:	4a48      	ldr	r2, [pc, #288]	; (800317c <HAL_GPIO_Init+0x2bc>)
 800305a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305c:	089b      	lsrs	r3, r3, #2
 800305e:	3302      	adds	r3, #2
 8003060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003064:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003068:	f003 0303 	and.w	r3, r3, #3
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	220f      	movs	r2, #15
 8003070:	fa02 f303 	lsl.w	r3, r2, r3
 8003074:	43db      	mvns	r3, r3
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	4013      	ands	r3, r2
 800307a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4a40      	ldr	r2, [pc, #256]	; (8003180 <HAL_GPIO_Init+0x2c0>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d013      	beq.n	80030ac <HAL_GPIO_Init+0x1ec>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a3f      	ldr	r2, [pc, #252]	; (8003184 <HAL_GPIO_Init+0x2c4>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d00d      	beq.n	80030a8 <HAL_GPIO_Init+0x1e8>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a3e      	ldr	r2, [pc, #248]	; (8003188 <HAL_GPIO_Init+0x2c8>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d007      	beq.n	80030a4 <HAL_GPIO_Init+0x1e4>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4a3d      	ldr	r2, [pc, #244]	; (800318c <HAL_GPIO_Init+0x2cc>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d101      	bne.n	80030a0 <HAL_GPIO_Init+0x1e0>
 800309c:	2303      	movs	r3, #3
 800309e:	e006      	b.n	80030ae <HAL_GPIO_Init+0x1ee>
 80030a0:	2304      	movs	r3, #4
 80030a2:	e004      	b.n	80030ae <HAL_GPIO_Init+0x1ee>
 80030a4:	2302      	movs	r3, #2
 80030a6:	e002      	b.n	80030ae <HAL_GPIO_Init+0x1ee>
 80030a8:	2301      	movs	r3, #1
 80030aa:	e000      	b.n	80030ae <HAL_GPIO_Init+0x1ee>
 80030ac:	2300      	movs	r3, #0
 80030ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030b0:	f002 0203 	and.w	r2, r2, #3
 80030b4:	0092      	lsls	r2, r2, #2
 80030b6:	4093      	lsls	r3, r2
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80030be:	492f      	ldr	r1, [pc, #188]	; (800317c <HAL_GPIO_Init+0x2bc>)
 80030c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c2:	089b      	lsrs	r3, r3, #2
 80030c4:	3302      	adds	r3, #2
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d006      	beq.n	80030e6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80030d8:	4b2d      	ldr	r3, [pc, #180]	; (8003190 <HAL_GPIO_Init+0x2d0>)
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	492c      	ldr	r1, [pc, #176]	; (8003190 <HAL_GPIO_Init+0x2d0>)
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	600b      	str	r3, [r1, #0]
 80030e4:	e006      	b.n	80030f4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80030e6:	4b2a      	ldr	r3, [pc, #168]	; (8003190 <HAL_GPIO_Init+0x2d0>)
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	43db      	mvns	r3, r3
 80030ee:	4928      	ldr	r1, [pc, #160]	; (8003190 <HAL_GPIO_Init+0x2d0>)
 80030f0:	4013      	ands	r3, r2
 80030f2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d006      	beq.n	800310e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003100:	4b23      	ldr	r3, [pc, #140]	; (8003190 <HAL_GPIO_Init+0x2d0>)
 8003102:	685a      	ldr	r2, [r3, #4]
 8003104:	4922      	ldr	r1, [pc, #136]	; (8003190 <HAL_GPIO_Init+0x2d0>)
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	4313      	orrs	r3, r2
 800310a:	604b      	str	r3, [r1, #4]
 800310c:	e006      	b.n	800311c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800310e:	4b20      	ldr	r3, [pc, #128]	; (8003190 <HAL_GPIO_Init+0x2d0>)
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	43db      	mvns	r3, r3
 8003116:	491e      	ldr	r1, [pc, #120]	; (8003190 <HAL_GPIO_Init+0x2d0>)
 8003118:	4013      	ands	r3, r2
 800311a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d006      	beq.n	8003136 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003128:	4b19      	ldr	r3, [pc, #100]	; (8003190 <HAL_GPIO_Init+0x2d0>)
 800312a:	689a      	ldr	r2, [r3, #8]
 800312c:	4918      	ldr	r1, [pc, #96]	; (8003190 <HAL_GPIO_Init+0x2d0>)
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	4313      	orrs	r3, r2
 8003132:	608b      	str	r3, [r1, #8]
 8003134:	e006      	b.n	8003144 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003136:	4b16      	ldr	r3, [pc, #88]	; (8003190 <HAL_GPIO_Init+0x2d0>)
 8003138:	689a      	ldr	r2, [r3, #8]
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	43db      	mvns	r3, r3
 800313e:	4914      	ldr	r1, [pc, #80]	; (8003190 <HAL_GPIO_Init+0x2d0>)
 8003140:	4013      	ands	r3, r2
 8003142:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d021      	beq.n	8003194 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003150:	4b0f      	ldr	r3, [pc, #60]	; (8003190 <HAL_GPIO_Init+0x2d0>)
 8003152:	68da      	ldr	r2, [r3, #12]
 8003154:	490e      	ldr	r1, [pc, #56]	; (8003190 <HAL_GPIO_Init+0x2d0>)
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	4313      	orrs	r3, r2
 800315a:	60cb      	str	r3, [r1, #12]
 800315c:	e021      	b.n	80031a2 <HAL_GPIO_Init+0x2e2>
 800315e:	bf00      	nop
 8003160:	10320000 	.word	0x10320000
 8003164:	10310000 	.word	0x10310000
 8003168:	10220000 	.word	0x10220000
 800316c:	10210000 	.word	0x10210000
 8003170:	10120000 	.word	0x10120000
 8003174:	10110000 	.word	0x10110000
 8003178:	40021000 	.word	0x40021000
 800317c:	40010000 	.word	0x40010000
 8003180:	40010800 	.word	0x40010800
 8003184:	40010c00 	.word	0x40010c00
 8003188:	40011000 	.word	0x40011000
 800318c:	40011400 	.word	0x40011400
 8003190:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003194:	4b0b      	ldr	r3, [pc, #44]	; (80031c4 <HAL_GPIO_Init+0x304>)
 8003196:	68da      	ldr	r2, [r3, #12]
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	43db      	mvns	r3, r3
 800319c:	4909      	ldr	r1, [pc, #36]	; (80031c4 <HAL_GPIO_Init+0x304>)
 800319e:	4013      	ands	r3, r2
 80031a0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80031a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a4:	3301      	adds	r3, #1
 80031a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ae:	fa22 f303 	lsr.w	r3, r2, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f47f ae8e 	bne.w	8002ed4 <HAL_GPIO_Init+0x14>
  }
}
 80031b8:	bf00      	nop
 80031ba:	bf00      	nop
 80031bc:	372c      	adds	r7, #44	; 0x2c
 80031be:	46bd      	mov	sp, r7
 80031c0:	bc80      	pop	{r7}
 80031c2:	4770      	bx	lr
 80031c4:	40010400 	.word	0x40010400

080031c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	460b      	mov	r3, r1
 80031d2:	807b      	strh	r3, [r7, #2]
 80031d4:	4613      	mov	r3, r2
 80031d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031d8:	787b      	ldrb	r3, [r7, #1]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d003      	beq.n	80031e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031de:	887a      	ldrh	r2, [r7, #2]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80031e4:	e003      	b.n	80031ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80031e6:	887b      	ldrh	r3, [r7, #2]
 80031e8:	041a      	lsls	r2, r3, #16
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	611a      	str	r2, [r3, #16]
}
 80031ee:	bf00      	nop
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bc80      	pop	{r7}
 80031f6:	4770      	bx	lr

080031f8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	460b      	mov	r3, r1
 8003202:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800320a:	887a      	ldrh	r2, [r7, #2]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	4013      	ands	r3, r2
 8003210:	041a      	lsls	r2, r3, #16
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	43d9      	mvns	r1, r3
 8003216:	887b      	ldrh	r3, [r7, #2]
 8003218:	400b      	ands	r3, r1
 800321a:	431a      	orrs	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	611a      	str	r2, [r3, #16]
}
 8003220:	bf00      	nop
 8003222:	3714      	adds	r7, #20
 8003224:	46bd      	mov	sp, r7
 8003226:	bc80      	pop	{r7}
 8003228:	4770      	bx	lr
	...

0800322c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e12b      	b.n	8003496 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d106      	bne.n	8003258 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f7ff fa92 	bl	800277c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2224      	movs	r2, #36	; 0x24
 800325c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f022 0201 	bic.w	r2, r2, #1
 800326e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800327e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800328e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003290:	f001 fba0 	bl	80049d4 <HAL_RCC_GetPCLK1Freq>
 8003294:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	4a81      	ldr	r2, [pc, #516]	; (80034a0 <HAL_I2C_Init+0x274>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d807      	bhi.n	80032b0 <HAL_I2C_Init+0x84>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	4a80      	ldr	r2, [pc, #512]	; (80034a4 <HAL_I2C_Init+0x278>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	bf94      	ite	ls
 80032a8:	2301      	movls	r3, #1
 80032aa:	2300      	movhi	r3, #0
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	e006      	b.n	80032be <HAL_I2C_Init+0x92>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	4a7d      	ldr	r2, [pc, #500]	; (80034a8 <HAL_I2C_Init+0x27c>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	bf94      	ite	ls
 80032b8:	2301      	movls	r3, #1
 80032ba:	2300      	movhi	r3, #0
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e0e7      	b.n	8003496 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	4a78      	ldr	r2, [pc, #480]	; (80034ac <HAL_I2C_Init+0x280>)
 80032ca:	fba2 2303 	umull	r2, r3, r2, r3
 80032ce:	0c9b      	lsrs	r3, r3, #18
 80032d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68ba      	ldr	r2, [r7, #8]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	6a1b      	ldr	r3, [r3, #32]
 80032ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	4a6a      	ldr	r2, [pc, #424]	; (80034a0 <HAL_I2C_Init+0x274>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d802      	bhi.n	8003300 <HAL_I2C_Init+0xd4>
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	3301      	adds	r3, #1
 80032fe:	e009      	b.n	8003314 <HAL_I2C_Init+0xe8>
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003306:	fb02 f303 	mul.w	r3, r2, r3
 800330a:	4a69      	ldr	r2, [pc, #420]	; (80034b0 <HAL_I2C_Init+0x284>)
 800330c:	fba2 2303 	umull	r2, r3, r2, r3
 8003310:	099b      	lsrs	r3, r3, #6
 8003312:	3301      	adds	r3, #1
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	6812      	ldr	r2, [r2, #0]
 8003318:	430b      	orrs	r3, r1
 800331a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	69db      	ldr	r3, [r3, #28]
 8003322:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003326:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	495c      	ldr	r1, [pc, #368]	; (80034a0 <HAL_I2C_Init+0x274>)
 8003330:	428b      	cmp	r3, r1
 8003332:	d819      	bhi.n	8003368 <HAL_I2C_Init+0x13c>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	1e59      	subs	r1, r3, #1
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003342:	1c59      	adds	r1, r3, #1
 8003344:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003348:	400b      	ands	r3, r1
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00a      	beq.n	8003364 <HAL_I2C_Init+0x138>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	1e59      	subs	r1, r3, #1
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	005b      	lsls	r3, r3, #1
 8003358:	fbb1 f3f3 	udiv	r3, r1, r3
 800335c:	3301      	adds	r3, #1
 800335e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003362:	e051      	b.n	8003408 <HAL_I2C_Init+0x1dc>
 8003364:	2304      	movs	r3, #4
 8003366:	e04f      	b.n	8003408 <HAL_I2C_Init+0x1dc>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d111      	bne.n	8003394 <HAL_I2C_Init+0x168>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	1e58      	subs	r0, r3, #1
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6859      	ldr	r1, [r3, #4]
 8003378:	460b      	mov	r3, r1
 800337a:	005b      	lsls	r3, r3, #1
 800337c:	440b      	add	r3, r1
 800337e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003382:	3301      	adds	r3, #1
 8003384:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003388:	2b00      	cmp	r3, #0
 800338a:	bf0c      	ite	eq
 800338c:	2301      	moveq	r3, #1
 800338e:	2300      	movne	r3, #0
 8003390:	b2db      	uxtb	r3, r3
 8003392:	e012      	b.n	80033ba <HAL_I2C_Init+0x18e>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	1e58      	subs	r0, r3, #1
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6859      	ldr	r1, [r3, #4]
 800339c:	460b      	mov	r3, r1
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	440b      	add	r3, r1
 80033a2:	0099      	lsls	r1, r3, #2
 80033a4:	440b      	add	r3, r1
 80033a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80033aa:	3301      	adds	r3, #1
 80033ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	bf0c      	ite	eq
 80033b4:	2301      	moveq	r3, #1
 80033b6:	2300      	movne	r3, #0
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <HAL_I2C_Init+0x196>
 80033be:	2301      	movs	r3, #1
 80033c0:	e022      	b.n	8003408 <HAL_I2C_Init+0x1dc>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d10e      	bne.n	80033e8 <HAL_I2C_Init+0x1bc>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	1e58      	subs	r0, r3, #1
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6859      	ldr	r1, [r3, #4]
 80033d2:	460b      	mov	r3, r1
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	440b      	add	r3, r1
 80033d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80033dc:	3301      	adds	r3, #1
 80033de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033e6:	e00f      	b.n	8003408 <HAL_I2C_Init+0x1dc>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	1e58      	subs	r0, r3, #1
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6859      	ldr	r1, [r3, #4]
 80033f0:	460b      	mov	r3, r1
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	440b      	add	r3, r1
 80033f6:	0099      	lsls	r1, r3, #2
 80033f8:	440b      	add	r3, r1
 80033fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80033fe:	3301      	adds	r3, #1
 8003400:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003404:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003408:	6879      	ldr	r1, [r7, #4]
 800340a:	6809      	ldr	r1, [r1, #0]
 800340c:	4313      	orrs	r3, r2
 800340e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	69da      	ldr	r2, [r3, #28]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a1b      	ldr	r3, [r3, #32]
 8003422:	431a      	orrs	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	430a      	orrs	r2, r1
 800342a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003436:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	6911      	ldr	r1, [r2, #16]
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	68d2      	ldr	r2, [r2, #12]
 8003442:	4311      	orrs	r1, r2
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	6812      	ldr	r2, [r2, #0]
 8003448:	430b      	orrs	r3, r1
 800344a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	695a      	ldr	r2, [r3, #20]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	431a      	orrs	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	430a      	orrs	r2, r1
 8003466:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f042 0201 	orr.w	r2, r2, #1
 8003476:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2220      	movs	r2, #32
 8003482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	000186a0 	.word	0x000186a0
 80034a4:	001e847f 	.word	0x001e847f
 80034a8:	003d08ff 	.word	0x003d08ff
 80034ac:	431bde83 	.word	0x431bde83
 80034b0:	10624dd3 	.word	0x10624dd3

080034b4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b088      	sub	sp, #32
 80034b8:	af02      	add	r7, sp, #8
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	4608      	mov	r0, r1
 80034be:	4611      	mov	r1, r2
 80034c0:	461a      	mov	r2, r3
 80034c2:	4603      	mov	r3, r0
 80034c4:	817b      	strh	r3, [r7, #10]
 80034c6:	460b      	mov	r3, r1
 80034c8:	813b      	strh	r3, [r7, #8]
 80034ca:	4613      	mov	r3, r2
 80034cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034ce:	f7ff fbbb 	bl	8002c48 <HAL_GetTick>
 80034d2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	2b20      	cmp	r3, #32
 80034de:	f040 80d9 	bne.w	8003694 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	9300      	str	r3, [sp, #0]
 80034e6:	2319      	movs	r3, #25
 80034e8:	2201      	movs	r2, #1
 80034ea:	496d      	ldr	r1, [pc, #436]	; (80036a0 <HAL_I2C_Mem_Write+0x1ec>)
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f000 fcc1 	bl	8003e74 <I2C_WaitOnFlagUntilTimeout>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d001      	beq.n	80034fc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80034f8:	2302      	movs	r3, #2
 80034fa:	e0cc      	b.n	8003696 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003502:	2b01      	cmp	r3, #1
 8003504:	d101      	bne.n	800350a <HAL_I2C_Mem_Write+0x56>
 8003506:	2302      	movs	r3, #2
 8003508:	e0c5      	b.n	8003696 <HAL_I2C_Mem_Write+0x1e2>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	2b01      	cmp	r3, #1
 800351e:	d007      	beq.n	8003530 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f042 0201 	orr.w	r2, r2, #1
 800352e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800353e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2221      	movs	r2, #33	; 0x21
 8003544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2240      	movs	r2, #64	; 0x40
 800354c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6a3a      	ldr	r2, [r7, #32]
 800355a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003560:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003566:	b29a      	uxth	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	4a4d      	ldr	r2, [pc, #308]	; (80036a4 <HAL_I2C_Mem_Write+0x1f0>)
 8003570:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003572:	88f8      	ldrh	r0, [r7, #6]
 8003574:	893a      	ldrh	r2, [r7, #8]
 8003576:	8979      	ldrh	r1, [r7, #10]
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	9301      	str	r3, [sp, #4]
 800357c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800357e:	9300      	str	r3, [sp, #0]
 8003580:	4603      	mov	r3, r0
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f000 faf8 	bl	8003b78 <I2C_RequestMemoryWrite>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d052      	beq.n	8003634 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e081      	b.n	8003696 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003592:	697a      	ldr	r2, [r7, #20]
 8003594:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f000 fd42 	bl	8004020 <I2C_WaitOnTXEFlagUntilTimeout>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00d      	beq.n	80035be <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	2b04      	cmp	r3, #4
 80035a8:	d107      	bne.n	80035ba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e06b      	b.n	8003696 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c2:	781a      	ldrb	r2, [r3, #0]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ce:	1c5a      	adds	r2, r3, #1
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035d8:	3b01      	subs	r3, #1
 80035da:	b29a      	uxth	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	3b01      	subs	r3, #1
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	695b      	ldr	r3, [r3, #20]
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	2b04      	cmp	r3, #4
 80035fa:	d11b      	bne.n	8003634 <HAL_I2C_Mem_Write+0x180>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003600:	2b00      	cmp	r3, #0
 8003602:	d017      	beq.n	8003634 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003608:	781a      	ldrb	r2, [r3, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003614:	1c5a      	adds	r2, r3, #1
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800361e:	3b01      	subs	r3, #1
 8003620:	b29a      	uxth	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800362a:	b29b      	uxth	r3, r3
 800362c:	3b01      	subs	r3, #1
 800362e:	b29a      	uxth	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003638:	2b00      	cmp	r3, #0
 800363a:	d1aa      	bne.n	8003592 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f000 fd2e 	bl	80040a2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00d      	beq.n	8003668 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003650:	2b04      	cmp	r3, #4
 8003652:	d107      	bne.n	8003664 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003662:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e016      	b.n	8003696 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003676:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2220      	movs	r2, #32
 800367c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003690:	2300      	movs	r3, #0
 8003692:	e000      	b.n	8003696 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003694:	2302      	movs	r3, #2
  }
}
 8003696:	4618      	mov	r0, r3
 8003698:	3718      	adds	r7, #24
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	00100002 	.word	0x00100002
 80036a4:	ffff0000 	.word	0xffff0000

080036a8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b08c      	sub	sp, #48	; 0x30
 80036ac:	af02      	add	r7, sp, #8
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	4608      	mov	r0, r1
 80036b2:	4611      	mov	r1, r2
 80036b4:	461a      	mov	r2, r3
 80036b6:	4603      	mov	r3, r0
 80036b8:	817b      	strh	r3, [r7, #10]
 80036ba:	460b      	mov	r3, r1
 80036bc:	813b      	strh	r3, [r7, #8]
 80036be:	4613      	mov	r3, r2
 80036c0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80036c2:	2300      	movs	r3, #0
 80036c4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80036c6:	f7ff fabf 	bl	8002c48 <HAL_GetTick>
 80036ca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2b20      	cmp	r3, #32
 80036d6:	f040 8244 	bne.w	8003b62 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036dc:	9300      	str	r3, [sp, #0]
 80036de:	2319      	movs	r3, #25
 80036e0:	2201      	movs	r2, #1
 80036e2:	4982      	ldr	r1, [pc, #520]	; (80038ec <HAL_I2C_Mem_Read+0x244>)
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f000 fbc5 	bl	8003e74 <I2C_WaitOnFlagUntilTimeout>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d001      	beq.n	80036f4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80036f0:	2302      	movs	r3, #2
 80036f2:	e237      	b.n	8003b64 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d101      	bne.n	8003702 <HAL_I2C_Mem_Read+0x5a>
 80036fe:	2302      	movs	r3, #2
 8003700:	e230      	b.n	8003b64 <HAL_I2C_Mem_Read+0x4bc>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2201      	movs	r2, #1
 8003706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0301 	and.w	r3, r3, #1
 8003714:	2b01      	cmp	r3, #1
 8003716:	d007      	beq.n	8003728 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f042 0201 	orr.w	r2, r2, #1
 8003726:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003736:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2222      	movs	r2, #34	; 0x22
 800373c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2240      	movs	r2, #64	; 0x40
 8003744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003752:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003758:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800375e:	b29a      	uxth	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	4a62      	ldr	r2, [pc, #392]	; (80038f0 <HAL_I2C_Mem_Read+0x248>)
 8003768:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800376a:	88f8      	ldrh	r0, [r7, #6]
 800376c:	893a      	ldrh	r2, [r7, #8]
 800376e:	8979      	ldrh	r1, [r7, #10]
 8003770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003772:	9301      	str	r3, [sp, #4]
 8003774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003776:	9300      	str	r3, [sp, #0]
 8003778:	4603      	mov	r3, r0
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f000 fa92 	bl	8003ca4 <I2C_RequestMemoryRead>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d001      	beq.n	800378a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e1ec      	b.n	8003b64 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800378e:	2b00      	cmp	r3, #0
 8003790:	d113      	bne.n	80037ba <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003792:	2300      	movs	r3, #0
 8003794:	61fb      	str	r3, [r7, #28]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	695b      	ldr	r3, [r3, #20]
 800379c:	61fb      	str	r3, [r7, #28]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	61fb      	str	r3, [r7, #28]
 80037a6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037b6:	601a      	str	r2, [r3, #0]
 80037b8:	e1c0      	b.n	8003b3c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d11e      	bne.n	8003800 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037d0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80037d2:	b672      	cpsid	i
}
 80037d4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037d6:	2300      	movs	r3, #0
 80037d8:	61bb      	str	r3, [r7, #24]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	695b      	ldr	r3, [r3, #20]
 80037e0:	61bb      	str	r3, [r7, #24]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	699b      	ldr	r3, [r3, #24]
 80037e8:	61bb      	str	r3, [r7, #24]
 80037ea:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037fa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80037fc:	b662      	cpsie	i
}
 80037fe:	e035      	b.n	800386c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003804:	2b02      	cmp	r3, #2
 8003806:	d11e      	bne.n	8003846 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003816:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003818:	b672      	cpsid	i
}
 800381a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800381c:	2300      	movs	r3, #0
 800381e:	617b      	str	r3, [r7, #20]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	617b      	str	r3, [r7, #20]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	617b      	str	r3, [r7, #20]
 8003830:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003840:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003842:	b662      	cpsie	i
}
 8003844:	e012      	b.n	800386c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003854:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003856:	2300      	movs	r3, #0
 8003858:	613b      	str	r3, [r7, #16]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	695b      	ldr	r3, [r3, #20]
 8003860:	613b      	str	r3, [r7, #16]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	613b      	str	r3, [r7, #16]
 800386a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800386c:	e166      	b.n	8003b3c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003872:	2b03      	cmp	r3, #3
 8003874:	f200 811f 	bhi.w	8003ab6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800387c:	2b01      	cmp	r3, #1
 800387e:	d123      	bne.n	80038c8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003882:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f000 fc4d 	bl	8004124 <I2C_WaitOnRXNEFlagUntilTimeout>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d001      	beq.n	8003894 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e167      	b.n	8003b64 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	691a      	ldr	r2, [r3, #16]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389e:	b2d2      	uxtb	r2, r2
 80038a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a6:	1c5a      	adds	r2, r3, #1
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b0:	3b01      	subs	r3, #1
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038bc:	b29b      	uxth	r3, r3
 80038be:	3b01      	subs	r3, #1
 80038c0:	b29a      	uxth	r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038c6:	e139      	b.n	8003b3c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d152      	bne.n	8003976 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d2:	9300      	str	r3, [sp, #0]
 80038d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d6:	2200      	movs	r2, #0
 80038d8:	4906      	ldr	r1, [pc, #24]	; (80038f4 <HAL_I2C_Mem_Read+0x24c>)
 80038da:	68f8      	ldr	r0, [r7, #12]
 80038dc:	f000 faca 	bl	8003e74 <I2C_WaitOnFlagUntilTimeout>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d008      	beq.n	80038f8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e13c      	b.n	8003b64 <HAL_I2C_Mem_Read+0x4bc>
 80038ea:	bf00      	nop
 80038ec:	00100002 	.word	0x00100002
 80038f0:	ffff0000 	.word	0xffff0000
 80038f4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80038f8:	b672      	cpsid	i
}
 80038fa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800390a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	691a      	ldr	r2, [r3, #16]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003916:	b2d2      	uxtb	r2, r2
 8003918:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391e:	1c5a      	adds	r2, r3, #1
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003928:	3b01      	subs	r3, #1
 800392a:	b29a      	uxth	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003934:	b29b      	uxth	r3, r3
 8003936:	3b01      	subs	r3, #1
 8003938:	b29a      	uxth	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800393e:	b662      	cpsie	i
}
 8003940:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	691a      	ldr	r2, [r3, #16]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394c:	b2d2      	uxtb	r2, r2
 800394e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003954:	1c5a      	adds	r2, r3, #1
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800395e:	3b01      	subs	r3, #1
 8003960:	b29a      	uxth	r2, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800396a:	b29b      	uxth	r3, r3
 800396c:	3b01      	subs	r3, #1
 800396e:	b29a      	uxth	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003974:	e0e2      	b.n	8003b3c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800397c:	2200      	movs	r2, #0
 800397e:	497b      	ldr	r1, [pc, #492]	; (8003b6c <HAL_I2C_Mem_Read+0x4c4>)
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	f000 fa77 	bl	8003e74 <I2C_WaitOnFlagUntilTimeout>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e0e9      	b.n	8003b64 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800399e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80039a0:	b672      	cpsid	i
}
 80039a2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	691a      	ldr	r2, [r3, #16]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ae:	b2d2      	uxtb	r2, r2
 80039b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b6:	1c5a      	adds	r2, r3, #1
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039c0:	3b01      	subs	r3, #1
 80039c2:	b29a      	uxth	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	3b01      	subs	r3, #1
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80039d6:	4b66      	ldr	r3, [pc, #408]	; (8003b70 <HAL_I2C_Mem_Read+0x4c8>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	08db      	lsrs	r3, r3, #3
 80039dc:	4a65      	ldr	r2, [pc, #404]	; (8003b74 <HAL_I2C_Mem_Read+0x4cc>)
 80039de:	fba2 2303 	umull	r2, r3, r2, r3
 80039e2:	0a1a      	lsrs	r2, r3, #8
 80039e4:	4613      	mov	r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	4413      	add	r3, r2
 80039ea:	00da      	lsls	r2, r3, #3
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80039f0:	6a3b      	ldr	r3, [r7, #32]
 80039f2:	3b01      	subs	r3, #1
 80039f4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80039f6:	6a3b      	ldr	r3, [r7, #32]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d118      	bne.n	8003a2e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2200      	movs	r2, #0
 8003a00:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2220      	movs	r2, #32
 8003a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	f043 0220 	orr.w	r2, r3, #32
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003a1e:	b662      	cpsie	i
}
 8003a20:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e09a      	b.n	8003b64 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	695b      	ldr	r3, [r3, #20]
 8003a34:	f003 0304 	and.w	r3, r3, #4
 8003a38:	2b04      	cmp	r3, #4
 8003a3a:	d1d9      	bne.n	80039f0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	691a      	ldr	r2, [r3, #16]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a56:	b2d2      	uxtb	r2, r2
 8003a58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5e:	1c5a      	adds	r2, r3, #1
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	b29a      	uxth	r2, r3
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	3b01      	subs	r3, #1
 8003a78:	b29a      	uxth	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003a7e:	b662      	cpsie	i
}
 8003a80:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	691a      	ldr	r2, [r3, #16]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8c:	b2d2      	uxtb	r2, r2
 8003a8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a94:	1c5a      	adds	r2, r3, #1
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	b29a      	uxth	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	3b01      	subs	r3, #1
 8003aae:	b29a      	uxth	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ab4:	e042      	b.n	8003b3c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ab8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003aba:	68f8      	ldr	r0, [r7, #12]
 8003abc:	f000 fb32 	bl	8004124 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e04c      	b.n	8003b64 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	691a      	ldr	r2, [r3, #16]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad4:	b2d2      	uxtb	r2, r2
 8003ad6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003adc:	1c5a      	adds	r2, r3, #1
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	b29a      	uxth	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	3b01      	subs	r3, #1
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	f003 0304 	and.w	r3, r3, #4
 8003b06:	2b04      	cmp	r3, #4
 8003b08:	d118      	bne.n	8003b3c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	691a      	ldr	r2, [r3, #16]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b14:	b2d2      	uxtb	r2, r2
 8003b16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1c:	1c5a      	adds	r2, r3, #1
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b26:	3b01      	subs	r3, #1
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	3b01      	subs	r3, #1
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	f47f ae94 	bne.w	800386e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2220      	movs	r2, #32
 8003b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	e000      	b.n	8003b64 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003b62:	2302      	movs	r3, #2
  }
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3728      	adds	r7, #40	; 0x28
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	00010004 	.word	0x00010004
 8003b70:	20000000 	.word	0x20000000
 8003b74:	14f8b589 	.word	0x14f8b589

08003b78 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b088      	sub	sp, #32
 8003b7c:	af02      	add	r7, sp, #8
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	4608      	mov	r0, r1
 8003b82:	4611      	mov	r1, r2
 8003b84:	461a      	mov	r2, r3
 8003b86:	4603      	mov	r3, r0
 8003b88:	817b      	strh	r3, [r7, #10]
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	813b      	strh	r3, [r7, #8]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ba0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba4:	9300      	str	r3, [sp, #0]
 8003ba6:	6a3b      	ldr	r3, [r7, #32]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f000 f960 	bl	8003e74 <I2C_WaitOnFlagUntilTimeout>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00d      	beq.n	8003bd6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bc8:	d103      	bne.n	8003bd2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bd0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e05f      	b.n	8003c96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003bd6:	897b      	ldrh	r3, [r7, #10]
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	461a      	mov	r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003be4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be8:	6a3a      	ldr	r2, [r7, #32]
 8003bea:	492d      	ldr	r1, [pc, #180]	; (8003ca0 <I2C_RequestMemoryWrite+0x128>)
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f000 f998 	bl	8003f22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d001      	beq.n	8003bfc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e04c      	b.n	8003c96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	617b      	str	r3, [r7, #20]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	617b      	str	r3, [r7, #20]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	617b      	str	r3, [r7, #20]
 8003c10:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c14:	6a39      	ldr	r1, [r7, #32]
 8003c16:	68f8      	ldr	r0, [r7, #12]
 8003c18:	f000 fa02 	bl	8004020 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00d      	beq.n	8003c3e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c26:	2b04      	cmp	r3, #4
 8003c28:	d107      	bne.n	8003c3a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c38:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e02b      	b.n	8003c96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c3e:	88fb      	ldrh	r3, [r7, #6]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d105      	bne.n	8003c50 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c44:	893b      	ldrh	r3, [r7, #8]
 8003c46:	b2da      	uxtb	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	611a      	str	r2, [r3, #16]
 8003c4e:	e021      	b.n	8003c94 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003c50:	893b      	ldrh	r3, [r7, #8]
 8003c52:	0a1b      	lsrs	r3, r3, #8
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	b2da      	uxtb	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c60:	6a39      	ldr	r1, [r7, #32]
 8003c62:	68f8      	ldr	r0, [r7, #12]
 8003c64:	f000 f9dc 	bl	8004020 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00d      	beq.n	8003c8a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c72:	2b04      	cmp	r3, #4
 8003c74:	d107      	bne.n	8003c86 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c84:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e005      	b.n	8003c96 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c8a:	893b      	ldrh	r3, [r7, #8]
 8003c8c:	b2da      	uxtb	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3718      	adds	r7, #24
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	00010002 	.word	0x00010002

08003ca4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b088      	sub	sp, #32
 8003ca8:	af02      	add	r7, sp, #8
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	4608      	mov	r0, r1
 8003cae:	4611      	mov	r1, r2
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	817b      	strh	r3, [r7, #10]
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	813b      	strh	r3, [r7, #8]
 8003cba:	4613      	mov	r3, r2
 8003cbc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ccc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cdc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce0:	9300      	str	r3, [sp, #0]
 8003ce2:	6a3b      	ldr	r3, [r7, #32]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f000 f8c2 	bl	8003e74 <I2C_WaitOnFlagUntilTimeout>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00d      	beq.n	8003d12 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d04:	d103      	bne.n	8003d0e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d0c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e0aa      	b.n	8003e68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d12:	897b      	ldrh	r3, [r7, #10]
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	461a      	mov	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d20:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d24:	6a3a      	ldr	r2, [r7, #32]
 8003d26:	4952      	ldr	r1, [pc, #328]	; (8003e70 <I2C_RequestMemoryRead+0x1cc>)
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f000 f8fa 	bl	8003f22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d001      	beq.n	8003d38 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e097      	b.n	8003e68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d38:	2300      	movs	r3, #0
 8003d3a:	617b      	str	r3, [r7, #20]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	617b      	str	r3, [r7, #20]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	617b      	str	r3, [r7, #20]
 8003d4c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d50:	6a39      	ldr	r1, [r7, #32]
 8003d52:	68f8      	ldr	r0, [r7, #12]
 8003d54:	f000 f964 	bl	8004020 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00d      	beq.n	8003d7a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d62:	2b04      	cmp	r3, #4
 8003d64:	d107      	bne.n	8003d76 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d74:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e076      	b.n	8003e68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d7a:	88fb      	ldrh	r3, [r7, #6]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d105      	bne.n	8003d8c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d80:	893b      	ldrh	r3, [r7, #8]
 8003d82:	b2da      	uxtb	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	611a      	str	r2, [r3, #16]
 8003d8a:	e021      	b.n	8003dd0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d8c:	893b      	ldrh	r3, [r7, #8]
 8003d8e:	0a1b      	lsrs	r3, r3, #8
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	b2da      	uxtb	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d9c:	6a39      	ldr	r1, [r7, #32]
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	f000 f93e 	bl	8004020 <I2C_WaitOnTXEFlagUntilTimeout>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00d      	beq.n	8003dc6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	d107      	bne.n	8003dc2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dc0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e050      	b.n	8003e68 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003dc6:	893b      	ldrh	r3, [r7, #8]
 8003dc8:	b2da      	uxtb	r2, r3
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dd2:	6a39      	ldr	r1, [r7, #32]
 8003dd4:	68f8      	ldr	r0, [r7, #12]
 8003dd6:	f000 f923 	bl	8004020 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00d      	beq.n	8003dfc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de4:	2b04      	cmp	r3, #4
 8003de6:	d107      	bne.n	8003df8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003df6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e035      	b.n	8003e68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e0a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0e:	9300      	str	r3, [sp, #0]
 8003e10:	6a3b      	ldr	r3, [r7, #32]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e18:	68f8      	ldr	r0, [r7, #12]
 8003e1a:	f000 f82b 	bl	8003e74 <I2C_WaitOnFlagUntilTimeout>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00d      	beq.n	8003e40 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e32:	d103      	bne.n	8003e3c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e3a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e013      	b.n	8003e68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003e40:	897b      	ldrh	r3, [r7, #10]
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	f043 0301 	orr.w	r3, r3, #1
 8003e48:	b2da      	uxtb	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e52:	6a3a      	ldr	r2, [r7, #32]
 8003e54:	4906      	ldr	r1, [pc, #24]	; (8003e70 <I2C_RequestMemoryRead+0x1cc>)
 8003e56:	68f8      	ldr	r0, [r7, #12]
 8003e58:	f000 f863 	bl	8003f22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e000      	b.n	8003e68 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3718      	adds	r7, #24
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	00010002 	.word	0x00010002

08003e74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	603b      	str	r3, [r7, #0]
 8003e80:	4613      	mov	r3, r2
 8003e82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e84:	e025      	b.n	8003ed2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e8c:	d021      	beq.n	8003ed2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e8e:	f7fe fedb 	bl	8002c48 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d302      	bcc.n	8003ea4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d116      	bne.n	8003ed2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2220      	movs	r2, #32
 8003eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebe:	f043 0220 	orr.w	r2, r3, #32
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e023      	b.n	8003f1a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	0c1b      	lsrs	r3, r3, #16
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d10d      	bne.n	8003ef8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	43da      	mvns	r2, r3
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	bf0c      	ite	eq
 8003eee:	2301      	moveq	r3, #1
 8003ef0:	2300      	movne	r3, #0
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	e00c      	b.n	8003f12 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	43da      	mvns	r2, r3
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	4013      	ands	r3, r2
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	bf0c      	ite	eq
 8003f0a:	2301      	moveq	r3, #1
 8003f0c:	2300      	movne	r3, #0
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	461a      	mov	r2, r3
 8003f12:	79fb      	ldrb	r3, [r7, #7]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d0b6      	beq.n	8003e86 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3710      	adds	r7, #16
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b084      	sub	sp, #16
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	60f8      	str	r0, [r7, #12]
 8003f2a:	60b9      	str	r1, [r7, #8]
 8003f2c:	607a      	str	r2, [r7, #4]
 8003f2e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f30:	e051      	b.n	8003fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	695b      	ldr	r3, [r3, #20]
 8003f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f40:	d123      	bne.n	8003f8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f50:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f5a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2220      	movs	r2, #32
 8003f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f76:	f043 0204 	orr.w	r2, r3, #4
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e046      	b.n	8004018 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f90:	d021      	beq.n	8003fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f92:	f7fe fe59 	bl	8002c48 <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d302      	bcc.n	8003fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d116      	bne.n	8003fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2220      	movs	r2, #32
 8003fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc2:	f043 0220 	orr.w	r2, r3, #32
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e020      	b.n	8004018 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	0c1b      	lsrs	r3, r3, #16
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d10c      	bne.n	8003ffa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	43da      	mvns	r2, r3
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	4013      	ands	r3, r2
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	bf14      	ite	ne
 8003ff2:	2301      	movne	r3, #1
 8003ff4:	2300      	moveq	r3, #0
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	e00b      	b.n	8004012 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	43da      	mvns	r2, r3
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	4013      	ands	r3, r2
 8004006:	b29b      	uxth	r3, r3
 8004008:	2b00      	cmp	r3, #0
 800400a:	bf14      	ite	ne
 800400c:	2301      	movne	r3, #1
 800400e:	2300      	moveq	r3, #0
 8004010:	b2db      	uxtb	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d18d      	bne.n	8003f32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800402c:	e02d      	b.n	800408a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800402e:	68f8      	ldr	r0, [r7, #12]
 8004030:	f000 f8ce 	bl	80041d0 <I2C_IsAcknowledgeFailed>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d001      	beq.n	800403e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e02d      	b.n	800409a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004044:	d021      	beq.n	800408a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004046:	f7fe fdff 	bl	8002c48 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	68ba      	ldr	r2, [r7, #8]
 8004052:	429a      	cmp	r2, r3
 8004054:	d302      	bcc.n	800405c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d116      	bne.n	800408a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2220      	movs	r2, #32
 8004066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004076:	f043 0220 	orr.w	r2, r3, #32
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e007      	b.n	800409a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	695b      	ldr	r3, [r3, #20]
 8004090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004094:	2b80      	cmp	r3, #128	; 0x80
 8004096:	d1ca      	bne.n	800402e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b084      	sub	sp, #16
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	60f8      	str	r0, [r7, #12]
 80040aa:	60b9      	str	r1, [r7, #8]
 80040ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040ae:	e02d      	b.n	800410c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f000 f88d 	bl	80041d0 <I2C_IsAcknowledgeFailed>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e02d      	b.n	800411c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c6:	d021      	beq.n	800410c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040c8:	f7fe fdbe 	bl	8002c48 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	68ba      	ldr	r2, [r7, #8]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d302      	bcc.n	80040de <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d116      	bne.n	800410c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2220      	movs	r2, #32
 80040e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f8:	f043 0220 	orr.w	r2, r3, #32
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e007      	b.n	800411c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	f003 0304 	and.w	r3, r3, #4
 8004116:	2b04      	cmp	r3, #4
 8004118:	d1ca      	bne.n	80040b0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	3710      	adds	r7, #16
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004130:	e042      	b.n	80041b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	695b      	ldr	r3, [r3, #20]
 8004138:	f003 0310 	and.w	r3, r3, #16
 800413c:	2b10      	cmp	r3, #16
 800413e:	d119      	bne.n	8004174 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f06f 0210 	mvn.w	r2, #16
 8004148:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2220      	movs	r2, #32
 8004154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e029      	b.n	80041c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004174:	f7fe fd68 	bl	8002c48 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	68ba      	ldr	r2, [r7, #8]
 8004180:	429a      	cmp	r2, r3
 8004182:	d302      	bcc.n	800418a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d116      	bne.n	80041b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2220      	movs	r2, #32
 8004194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a4:	f043 0220 	orr.w	r2, r3, #32
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e007      	b.n	80041c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c2:	2b40      	cmp	r3, #64	; 0x40
 80041c4:	d1b5      	bne.n	8004132 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3710      	adds	r7, #16
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041e6:	d11b      	bne.n	8004220 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041f0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2220      	movs	r2, #32
 80041fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420c:	f043 0204 	orr.w	r2, r3, #4
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e000      	b.n	8004222 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	370c      	adds	r7, #12
 8004226:	46bd      	mov	sp, r7
 8004228:	bc80      	pop	{r7}
 800422a:	4770      	bx	lr

0800422c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b086      	sub	sp, #24
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d101      	bne.n	800423e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e26c      	b.n	8004718 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0301 	and.w	r3, r3, #1
 8004246:	2b00      	cmp	r3, #0
 8004248:	f000 8087 	beq.w	800435a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800424c:	4b92      	ldr	r3, [pc, #584]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f003 030c 	and.w	r3, r3, #12
 8004254:	2b04      	cmp	r3, #4
 8004256:	d00c      	beq.n	8004272 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004258:	4b8f      	ldr	r3, [pc, #572]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f003 030c 	and.w	r3, r3, #12
 8004260:	2b08      	cmp	r3, #8
 8004262:	d112      	bne.n	800428a <HAL_RCC_OscConfig+0x5e>
 8004264:	4b8c      	ldr	r3, [pc, #560]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800426c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004270:	d10b      	bne.n	800428a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004272:	4b89      	ldr	r3, [pc, #548]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d06c      	beq.n	8004358 <HAL_RCC_OscConfig+0x12c>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d168      	bne.n	8004358 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e246      	b.n	8004718 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004292:	d106      	bne.n	80042a2 <HAL_RCC_OscConfig+0x76>
 8004294:	4b80      	ldr	r3, [pc, #512]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a7f      	ldr	r2, [pc, #508]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 800429a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800429e:	6013      	str	r3, [r2, #0]
 80042a0:	e02e      	b.n	8004300 <HAL_RCC_OscConfig+0xd4>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d10c      	bne.n	80042c4 <HAL_RCC_OscConfig+0x98>
 80042aa:	4b7b      	ldr	r3, [pc, #492]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a7a      	ldr	r2, [pc, #488]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80042b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042b4:	6013      	str	r3, [r2, #0]
 80042b6:	4b78      	ldr	r3, [pc, #480]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a77      	ldr	r2, [pc, #476]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80042bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042c0:	6013      	str	r3, [r2, #0]
 80042c2:	e01d      	b.n	8004300 <HAL_RCC_OscConfig+0xd4>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042cc:	d10c      	bne.n	80042e8 <HAL_RCC_OscConfig+0xbc>
 80042ce:	4b72      	ldr	r3, [pc, #456]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a71      	ldr	r2, [pc, #452]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80042d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042d8:	6013      	str	r3, [r2, #0]
 80042da:	4b6f      	ldr	r3, [pc, #444]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a6e      	ldr	r2, [pc, #440]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80042e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042e4:	6013      	str	r3, [r2, #0]
 80042e6:	e00b      	b.n	8004300 <HAL_RCC_OscConfig+0xd4>
 80042e8:	4b6b      	ldr	r3, [pc, #428]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a6a      	ldr	r2, [pc, #424]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80042ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042f2:	6013      	str	r3, [r2, #0]
 80042f4:	4b68      	ldr	r3, [pc, #416]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a67      	ldr	r2, [pc, #412]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80042fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d013      	beq.n	8004330 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004308:	f7fe fc9e 	bl	8002c48 <HAL_GetTick>
 800430c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800430e:	e008      	b.n	8004322 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004310:	f7fe fc9a 	bl	8002c48 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b64      	cmp	r3, #100	; 0x64
 800431c:	d901      	bls.n	8004322 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e1fa      	b.n	8004718 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004322:	4b5d      	ldr	r3, [pc, #372]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d0f0      	beq.n	8004310 <HAL_RCC_OscConfig+0xe4>
 800432e:	e014      	b.n	800435a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004330:	f7fe fc8a 	bl	8002c48 <HAL_GetTick>
 8004334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004336:	e008      	b.n	800434a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004338:	f7fe fc86 	bl	8002c48 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b64      	cmp	r3, #100	; 0x64
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e1e6      	b.n	8004718 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800434a:	4b53      	ldr	r3, [pc, #332]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1f0      	bne.n	8004338 <HAL_RCC_OscConfig+0x10c>
 8004356:	e000      	b.n	800435a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004358:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	2b00      	cmp	r3, #0
 8004364:	d063      	beq.n	800442e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004366:	4b4c      	ldr	r3, [pc, #304]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f003 030c 	and.w	r3, r3, #12
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00b      	beq.n	800438a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004372:	4b49      	ldr	r3, [pc, #292]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f003 030c 	and.w	r3, r3, #12
 800437a:	2b08      	cmp	r3, #8
 800437c:	d11c      	bne.n	80043b8 <HAL_RCC_OscConfig+0x18c>
 800437e:	4b46      	ldr	r3, [pc, #280]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d116      	bne.n	80043b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800438a:	4b43      	ldr	r3, [pc, #268]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d005      	beq.n	80043a2 <HAL_RCC_OscConfig+0x176>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d001      	beq.n	80043a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e1ba      	b.n	8004718 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043a2:	4b3d      	ldr	r3, [pc, #244]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	00db      	lsls	r3, r3, #3
 80043b0:	4939      	ldr	r1, [pc, #228]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043b6:	e03a      	b.n	800442e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d020      	beq.n	8004402 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043c0:	4b36      	ldr	r3, [pc, #216]	; (800449c <HAL_RCC_OscConfig+0x270>)
 80043c2:	2201      	movs	r2, #1
 80043c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c6:	f7fe fc3f 	bl	8002c48 <HAL_GetTick>
 80043ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043cc:	e008      	b.n	80043e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043ce:	f7fe fc3b 	bl	8002c48 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d901      	bls.n	80043e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e19b      	b.n	8004718 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043e0:	4b2d      	ldr	r3, [pc, #180]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0302 	and.w	r3, r3, #2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d0f0      	beq.n	80043ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ec:	4b2a      	ldr	r3, [pc, #168]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	695b      	ldr	r3, [r3, #20]
 80043f8:	00db      	lsls	r3, r3, #3
 80043fa:	4927      	ldr	r1, [pc, #156]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	600b      	str	r3, [r1, #0]
 8004400:	e015      	b.n	800442e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004402:	4b26      	ldr	r3, [pc, #152]	; (800449c <HAL_RCC_OscConfig+0x270>)
 8004404:	2200      	movs	r2, #0
 8004406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004408:	f7fe fc1e 	bl	8002c48 <HAL_GetTick>
 800440c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800440e:	e008      	b.n	8004422 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004410:	f7fe fc1a 	bl	8002c48 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b02      	cmp	r3, #2
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e17a      	b.n	8004718 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004422:	4b1d      	ldr	r3, [pc, #116]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1f0      	bne.n	8004410 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0308 	and.w	r3, r3, #8
 8004436:	2b00      	cmp	r3, #0
 8004438:	d03a      	beq.n	80044b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d019      	beq.n	8004476 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004442:	4b17      	ldr	r3, [pc, #92]	; (80044a0 <HAL_RCC_OscConfig+0x274>)
 8004444:	2201      	movs	r2, #1
 8004446:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004448:	f7fe fbfe 	bl	8002c48 <HAL_GetTick>
 800444c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800444e:	e008      	b.n	8004462 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004450:	f7fe fbfa 	bl	8002c48 <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	2b02      	cmp	r3, #2
 800445c:	d901      	bls.n	8004462 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e15a      	b.n	8004718 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004462:	4b0d      	ldr	r3, [pc, #52]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 8004464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d0f0      	beq.n	8004450 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800446e:	2001      	movs	r0, #1
 8004470:	f000 fad8 	bl	8004a24 <RCC_Delay>
 8004474:	e01c      	b.n	80044b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004476:	4b0a      	ldr	r3, [pc, #40]	; (80044a0 <HAL_RCC_OscConfig+0x274>)
 8004478:	2200      	movs	r2, #0
 800447a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800447c:	f7fe fbe4 	bl	8002c48 <HAL_GetTick>
 8004480:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004482:	e00f      	b.n	80044a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004484:	f7fe fbe0 	bl	8002c48 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b02      	cmp	r3, #2
 8004490:	d908      	bls.n	80044a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e140      	b.n	8004718 <HAL_RCC_OscConfig+0x4ec>
 8004496:	bf00      	nop
 8004498:	40021000 	.word	0x40021000
 800449c:	42420000 	.word	0x42420000
 80044a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044a4:	4b9e      	ldr	r3, [pc, #632]	; (8004720 <HAL_RCC_OscConfig+0x4f4>)
 80044a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a8:	f003 0302 	and.w	r3, r3, #2
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1e9      	bne.n	8004484 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0304 	and.w	r3, r3, #4
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f000 80a6 	beq.w	800460a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044be:	2300      	movs	r3, #0
 80044c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044c2:	4b97      	ldr	r3, [pc, #604]	; (8004720 <HAL_RCC_OscConfig+0x4f4>)
 80044c4:	69db      	ldr	r3, [r3, #28]
 80044c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d10d      	bne.n	80044ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044ce:	4b94      	ldr	r3, [pc, #592]	; (8004720 <HAL_RCC_OscConfig+0x4f4>)
 80044d0:	69db      	ldr	r3, [r3, #28]
 80044d2:	4a93      	ldr	r2, [pc, #588]	; (8004720 <HAL_RCC_OscConfig+0x4f4>)
 80044d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044d8:	61d3      	str	r3, [r2, #28]
 80044da:	4b91      	ldr	r3, [pc, #580]	; (8004720 <HAL_RCC_OscConfig+0x4f4>)
 80044dc:	69db      	ldr	r3, [r3, #28]
 80044de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044e2:	60bb      	str	r3, [r7, #8]
 80044e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044e6:	2301      	movs	r3, #1
 80044e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ea:	4b8e      	ldr	r3, [pc, #568]	; (8004724 <HAL_RCC_OscConfig+0x4f8>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d118      	bne.n	8004528 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044f6:	4b8b      	ldr	r3, [pc, #556]	; (8004724 <HAL_RCC_OscConfig+0x4f8>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a8a      	ldr	r2, [pc, #552]	; (8004724 <HAL_RCC_OscConfig+0x4f8>)
 80044fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004500:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004502:	f7fe fba1 	bl	8002c48 <HAL_GetTick>
 8004506:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004508:	e008      	b.n	800451c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800450a:	f7fe fb9d 	bl	8002c48 <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	2b64      	cmp	r3, #100	; 0x64
 8004516:	d901      	bls.n	800451c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e0fd      	b.n	8004718 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800451c:	4b81      	ldr	r3, [pc, #516]	; (8004724 <HAL_RCC_OscConfig+0x4f8>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004524:	2b00      	cmp	r3, #0
 8004526:	d0f0      	beq.n	800450a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d106      	bne.n	800453e <HAL_RCC_OscConfig+0x312>
 8004530:	4b7b      	ldr	r3, [pc, #492]	; (8004720 <HAL_RCC_OscConfig+0x4f4>)
 8004532:	6a1b      	ldr	r3, [r3, #32]
 8004534:	4a7a      	ldr	r2, [pc, #488]	; (8004720 <HAL_RCC_OscConfig+0x4f4>)
 8004536:	f043 0301 	orr.w	r3, r3, #1
 800453a:	6213      	str	r3, [r2, #32]
 800453c:	e02d      	b.n	800459a <HAL_RCC_OscConfig+0x36e>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d10c      	bne.n	8004560 <HAL_RCC_OscConfig+0x334>
 8004546:	4b76      	ldr	r3, [pc, #472]	; (8004720 <HAL_RCC_OscConfig+0x4f4>)
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	4a75      	ldr	r2, [pc, #468]	; (8004720 <HAL_RCC_OscConfig+0x4f4>)
 800454c:	f023 0301 	bic.w	r3, r3, #1
 8004550:	6213      	str	r3, [r2, #32]
 8004552:	4b73      	ldr	r3, [pc, #460]	; (8004720 <HAL_RCC_OscConfig+0x4f4>)
 8004554:	6a1b      	ldr	r3, [r3, #32]
 8004556:	4a72      	ldr	r2, [pc, #456]	; (8004720 <HAL_RCC_OscConfig+0x4f4>)
 8004558:	f023 0304 	bic.w	r3, r3, #4
 800455c:	6213      	str	r3, [r2, #32]
 800455e:	e01c      	b.n	800459a <HAL_RCC_OscConfig+0x36e>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	2b05      	cmp	r3, #5
 8004566:	d10c      	bne.n	8004582 <HAL_RCC_OscConfig+0x356>
 8004568:	4b6d      	ldr	r3, [pc, #436]	; (8004720 <HAL_RCC_OscConfig+0x4f4>)
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	4a6c      	ldr	r2, [pc, #432]	; (8004720 <HAL_RCC_OscConfig+0x4f4>)
 800456e:	f043 0304 	orr.w	r3, r3, #4
 8004572:	6213      	str	r3, [r2, #32]
 8004574:	4b6a      	ldr	r3, [pc, #424]	; (8004720 <HAL_RCC_OscConfig+0x4f4>)
 8004576:	6a1b      	ldr	r3, [r3, #32]
 8004578:	4a69      	ldr	r2, [pc, #420]	; (8004720 <HAL_RCC_OscConfig+0x4f4>)
 800457a:	f043 0301 	orr.w	r3, r3, #1
 800457e:	6213      	str	r3, [r2, #32]
 8004580:	e00b      	b.n	800459a <HAL_RCC_OscConfig+0x36e>
 8004582:	4b67      	ldr	r3, [pc, #412]	; (8004720 <HAL_RCC_OscConfig+0x4f4>)
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	4a66      	ldr	r2, [pc, #408]	; (8004720 <HAL_RCC_OscConfig+0x4f4>)
 8004588:	f023 0301 	bic.w	r3, r3, #1
 800458c:	6213      	str	r3, [r2, #32]
 800458e:	4b64      	ldr	r3, [pc, #400]	; (8004720 <HAL_RCC_OscConfig+0x4f4>)
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	4a63      	ldr	r2, [pc, #396]	; (8004720 <HAL_RCC_OscConfig+0x4f4>)
 8004594:	f023 0304 	bic.w	r3, r3, #4
 8004598:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d015      	beq.n	80045ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045a2:	f7fe fb51 	bl	8002c48 <HAL_GetTick>
 80045a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045a8:	e00a      	b.n	80045c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045aa:	f7fe fb4d 	bl	8002c48 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d901      	bls.n	80045c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e0ab      	b.n	8004718 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045c0:	4b57      	ldr	r3, [pc, #348]	; (8004720 <HAL_RCC_OscConfig+0x4f4>)
 80045c2:	6a1b      	ldr	r3, [r3, #32]
 80045c4:	f003 0302 	and.w	r3, r3, #2
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d0ee      	beq.n	80045aa <HAL_RCC_OscConfig+0x37e>
 80045cc:	e014      	b.n	80045f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045ce:	f7fe fb3b 	bl	8002c48 <HAL_GetTick>
 80045d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045d4:	e00a      	b.n	80045ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045d6:	f7fe fb37 	bl	8002c48 <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d901      	bls.n	80045ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e095      	b.n	8004718 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045ec:	4b4c      	ldr	r3, [pc, #304]	; (8004720 <HAL_RCC_OscConfig+0x4f4>)
 80045ee:	6a1b      	ldr	r3, [r3, #32]
 80045f0:	f003 0302 	and.w	r3, r3, #2
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d1ee      	bne.n	80045d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80045f8:	7dfb      	ldrb	r3, [r7, #23]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d105      	bne.n	800460a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045fe:	4b48      	ldr	r3, [pc, #288]	; (8004720 <HAL_RCC_OscConfig+0x4f4>)
 8004600:	69db      	ldr	r3, [r3, #28]
 8004602:	4a47      	ldr	r2, [pc, #284]	; (8004720 <HAL_RCC_OscConfig+0x4f4>)
 8004604:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004608:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	69db      	ldr	r3, [r3, #28]
 800460e:	2b00      	cmp	r3, #0
 8004610:	f000 8081 	beq.w	8004716 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004614:	4b42      	ldr	r3, [pc, #264]	; (8004720 <HAL_RCC_OscConfig+0x4f4>)
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	f003 030c 	and.w	r3, r3, #12
 800461c:	2b08      	cmp	r3, #8
 800461e:	d061      	beq.n	80046e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	69db      	ldr	r3, [r3, #28]
 8004624:	2b02      	cmp	r3, #2
 8004626:	d146      	bne.n	80046b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004628:	4b3f      	ldr	r3, [pc, #252]	; (8004728 <HAL_RCC_OscConfig+0x4fc>)
 800462a:	2200      	movs	r2, #0
 800462c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800462e:	f7fe fb0b 	bl	8002c48 <HAL_GetTick>
 8004632:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004634:	e008      	b.n	8004648 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004636:	f7fe fb07 	bl	8002c48 <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	2b02      	cmp	r3, #2
 8004642:	d901      	bls.n	8004648 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e067      	b.n	8004718 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004648:	4b35      	ldr	r3, [pc, #212]	; (8004720 <HAL_RCC_OscConfig+0x4f4>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1f0      	bne.n	8004636 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a1b      	ldr	r3, [r3, #32]
 8004658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800465c:	d108      	bne.n	8004670 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800465e:	4b30      	ldr	r3, [pc, #192]	; (8004720 <HAL_RCC_OscConfig+0x4f4>)
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	492d      	ldr	r1, [pc, #180]	; (8004720 <HAL_RCC_OscConfig+0x4f4>)
 800466c:	4313      	orrs	r3, r2
 800466e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004670:	4b2b      	ldr	r3, [pc, #172]	; (8004720 <HAL_RCC_OscConfig+0x4f4>)
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a19      	ldr	r1, [r3, #32]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004680:	430b      	orrs	r3, r1
 8004682:	4927      	ldr	r1, [pc, #156]	; (8004720 <HAL_RCC_OscConfig+0x4f4>)
 8004684:	4313      	orrs	r3, r2
 8004686:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004688:	4b27      	ldr	r3, [pc, #156]	; (8004728 <HAL_RCC_OscConfig+0x4fc>)
 800468a:	2201      	movs	r2, #1
 800468c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800468e:	f7fe fadb 	bl	8002c48 <HAL_GetTick>
 8004692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004694:	e008      	b.n	80046a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004696:	f7fe fad7 	bl	8002c48 <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d901      	bls.n	80046a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e037      	b.n	8004718 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046a8:	4b1d      	ldr	r3, [pc, #116]	; (8004720 <HAL_RCC_OscConfig+0x4f4>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d0f0      	beq.n	8004696 <HAL_RCC_OscConfig+0x46a>
 80046b4:	e02f      	b.n	8004716 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046b6:	4b1c      	ldr	r3, [pc, #112]	; (8004728 <HAL_RCC_OscConfig+0x4fc>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046bc:	f7fe fac4 	bl	8002c48 <HAL_GetTick>
 80046c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046c2:	e008      	b.n	80046d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046c4:	f7fe fac0 	bl	8002c48 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d901      	bls.n	80046d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e020      	b.n	8004718 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046d6:	4b12      	ldr	r3, [pc, #72]	; (8004720 <HAL_RCC_OscConfig+0x4f4>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d1f0      	bne.n	80046c4 <HAL_RCC_OscConfig+0x498>
 80046e2:	e018      	b.n	8004716 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	69db      	ldr	r3, [r3, #28]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d101      	bne.n	80046f0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e013      	b.n	8004718 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80046f0:	4b0b      	ldr	r3, [pc, #44]	; (8004720 <HAL_RCC_OscConfig+0x4f4>)
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a1b      	ldr	r3, [r3, #32]
 8004700:	429a      	cmp	r2, r3
 8004702:	d106      	bne.n	8004712 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800470e:	429a      	cmp	r2, r3
 8004710:	d001      	beq.n	8004716 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e000      	b.n	8004718 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3718      	adds	r7, #24
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	40021000 	.word	0x40021000
 8004724:	40007000 	.word	0x40007000
 8004728:	42420060 	.word	0x42420060

0800472c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d101      	bne.n	8004740 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e0d0      	b.n	80048e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004740:	4b6a      	ldr	r3, [pc, #424]	; (80048ec <HAL_RCC_ClockConfig+0x1c0>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0307 	and.w	r3, r3, #7
 8004748:	683a      	ldr	r2, [r7, #0]
 800474a:	429a      	cmp	r2, r3
 800474c:	d910      	bls.n	8004770 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800474e:	4b67      	ldr	r3, [pc, #412]	; (80048ec <HAL_RCC_ClockConfig+0x1c0>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f023 0207 	bic.w	r2, r3, #7
 8004756:	4965      	ldr	r1, [pc, #404]	; (80048ec <HAL_RCC_ClockConfig+0x1c0>)
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	4313      	orrs	r3, r2
 800475c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800475e:	4b63      	ldr	r3, [pc, #396]	; (80048ec <HAL_RCC_ClockConfig+0x1c0>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0307 	and.w	r3, r3, #7
 8004766:	683a      	ldr	r2, [r7, #0]
 8004768:	429a      	cmp	r2, r3
 800476a:	d001      	beq.n	8004770 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e0b8      	b.n	80048e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0302 	and.w	r3, r3, #2
 8004778:	2b00      	cmp	r3, #0
 800477a:	d020      	beq.n	80047be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0304 	and.w	r3, r3, #4
 8004784:	2b00      	cmp	r3, #0
 8004786:	d005      	beq.n	8004794 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004788:	4b59      	ldr	r3, [pc, #356]	; (80048f0 <HAL_RCC_ClockConfig+0x1c4>)
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	4a58      	ldr	r2, [pc, #352]	; (80048f0 <HAL_RCC_ClockConfig+0x1c4>)
 800478e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004792:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0308 	and.w	r3, r3, #8
 800479c:	2b00      	cmp	r3, #0
 800479e:	d005      	beq.n	80047ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047a0:	4b53      	ldr	r3, [pc, #332]	; (80048f0 <HAL_RCC_ClockConfig+0x1c4>)
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	4a52      	ldr	r2, [pc, #328]	; (80048f0 <HAL_RCC_ClockConfig+0x1c4>)
 80047a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80047aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047ac:	4b50      	ldr	r3, [pc, #320]	; (80048f0 <HAL_RCC_ClockConfig+0x1c4>)
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	494d      	ldr	r1, [pc, #308]	; (80048f0 <HAL_RCC_ClockConfig+0x1c4>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0301 	and.w	r3, r3, #1
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d040      	beq.n	800484c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d107      	bne.n	80047e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047d2:	4b47      	ldr	r3, [pc, #284]	; (80048f0 <HAL_RCC_ClockConfig+0x1c4>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d115      	bne.n	800480a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e07f      	b.n	80048e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d107      	bne.n	80047fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047ea:	4b41      	ldr	r3, [pc, #260]	; (80048f0 <HAL_RCC_ClockConfig+0x1c4>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d109      	bne.n	800480a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e073      	b.n	80048e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047fa:	4b3d      	ldr	r3, [pc, #244]	; (80048f0 <HAL_RCC_ClockConfig+0x1c4>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0302 	and.w	r3, r3, #2
 8004802:	2b00      	cmp	r3, #0
 8004804:	d101      	bne.n	800480a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e06b      	b.n	80048e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800480a:	4b39      	ldr	r3, [pc, #228]	; (80048f0 <HAL_RCC_ClockConfig+0x1c4>)
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f023 0203 	bic.w	r2, r3, #3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	4936      	ldr	r1, [pc, #216]	; (80048f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004818:	4313      	orrs	r3, r2
 800481a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800481c:	f7fe fa14 	bl	8002c48 <HAL_GetTick>
 8004820:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004822:	e00a      	b.n	800483a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004824:	f7fe fa10 	bl	8002c48 <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004832:	4293      	cmp	r3, r2
 8004834:	d901      	bls.n	800483a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e053      	b.n	80048e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800483a:	4b2d      	ldr	r3, [pc, #180]	; (80048f0 <HAL_RCC_ClockConfig+0x1c4>)
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f003 020c 	and.w	r2, r3, #12
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	429a      	cmp	r2, r3
 800484a:	d1eb      	bne.n	8004824 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800484c:	4b27      	ldr	r3, [pc, #156]	; (80048ec <HAL_RCC_ClockConfig+0x1c0>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0307 	and.w	r3, r3, #7
 8004854:	683a      	ldr	r2, [r7, #0]
 8004856:	429a      	cmp	r2, r3
 8004858:	d210      	bcs.n	800487c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800485a:	4b24      	ldr	r3, [pc, #144]	; (80048ec <HAL_RCC_ClockConfig+0x1c0>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f023 0207 	bic.w	r2, r3, #7
 8004862:	4922      	ldr	r1, [pc, #136]	; (80048ec <HAL_RCC_ClockConfig+0x1c0>)
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	4313      	orrs	r3, r2
 8004868:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800486a:	4b20      	ldr	r3, [pc, #128]	; (80048ec <HAL_RCC_ClockConfig+0x1c0>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0307 	and.w	r3, r3, #7
 8004872:	683a      	ldr	r2, [r7, #0]
 8004874:	429a      	cmp	r2, r3
 8004876:	d001      	beq.n	800487c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e032      	b.n	80048e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0304 	and.w	r3, r3, #4
 8004884:	2b00      	cmp	r3, #0
 8004886:	d008      	beq.n	800489a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004888:	4b19      	ldr	r3, [pc, #100]	; (80048f0 <HAL_RCC_ClockConfig+0x1c4>)
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	4916      	ldr	r1, [pc, #88]	; (80048f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004896:	4313      	orrs	r3, r2
 8004898:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0308 	and.w	r3, r3, #8
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d009      	beq.n	80048ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80048a6:	4b12      	ldr	r3, [pc, #72]	; (80048f0 <HAL_RCC_ClockConfig+0x1c4>)
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	00db      	lsls	r3, r3, #3
 80048b4:	490e      	ldr	r1, [pc, #56]	; (80048f0 <HAL_RCC_ClockConfig+0x1c4>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048ba:	f000 f821 	bl	8004900 <HAL_RCC_GetSysClockFreq>
 80048be:	4602      	mov	r2, r0
 80048c0:	4b0b      	ldr	r3, [pc, #44]	; (80048f0 <HAL_RCC_ClockConfig+0x1c4>)
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	091b      	lsrs	r3, r3, #4
 80048c6:	f003 030f 	and.w	r3, r3, #15
 80048ca:	490a      	ldr	r1, [pc, #40]	; (80048f4 <HAL_RCC_ClockConfig+0x1c8>)
 80048cc:	5ccb      	ldrb	r3, [r1, r3]
 80048ce:	fa22 f303 	lsr.w	r3, r2, r3
 80048d2:	4a09      	ldr	r2, [pc, #36]	; (80048f8 <HAL_RCC_ClockConfig+0x1cc>)
 80048d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80048d6:	4b09      	ldr	r3, [pc, #36]	; (80048fc <HAL_RCC_ClockConfig+0x1d0>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4618      	mov	r0, r3
 80048dc:	f7fe f972 	bl	8002bc4 <HAL_InitTick>

  return HAL_OK;
 80048e0:	2300      	movs	r3, #0
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3710      	adds	r7, #16
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	40022000 	.word	0x40022000
 80048f0:	40021000 	.word	0x40021000
 80048f4:	0800845c 	.word	0x0800845c
 80048f8:	20000000 	.word	0x20000000
 80048fc:	20000004 	.word	0x20000004

08004900 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004900:	b490      	push	{r4, r7}
 8004902:	b08a      	sub	sp, #40	; 0x28
 8004904:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004906:	4b2a      	ldr	r3, [pc, #168]	; (80049b0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004908:	1d3c      	adds	r4, r7, #4
 800490a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800490c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004910:	f240 2301 	movw	r3, #513	; 0x201
 8004914:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004916:	2300      	movs	r3, #0
 8004918:	61fb      	str	r3, [r7, #28]
 800491a:	2300      	movs	r3, #0
 800491c:	61bb      	str	r3, [r7, #24]
 800491e:	2300      	movs	r3, #0
 8004920:	627b      	str	r3, [r7, #36]	; 0x24
 8004922:	2300      	movs	r3, #0
 8004924:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004926:	2300      	movs	r3, #0
 8004928:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800492a:	4b22      	ldr	r3, [pc, #136]	; (80049b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	f003 030c 	and.w	r3, r3, #12
 8004936:	2b04      	cmp	r3, #4
 8004938:	d002      	beq.n	8004940 <HAL_RCC_GetSysClockFreq+0x40>
 800493a:	2b08      	cmp	r3, #8
 800493c:	d003      	beq.n	8004946 <HAL_RCC_GetSysClockFreq+0x46>
 800493e:	e02d      	b.n	800499c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004940:	4b1d      	ldr	r3, [pc, #116]	; (80049b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004942:	623b      	str	r3, [r7, #32]
      break;
 8004944:	e02d      	b.n	80049a2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	0c9b      	lsrs	r3, r3, #18
 800494a:	f003 030f 	and.w	r3, r3, #15
 800494e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004952:	4413      	add	r3, r2
 8004954:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004958:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d013      	beq.n	800498c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004964:	4b13      	ldr	r3, [pc, #76]	; (80049b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	0c5b      	lsrs	r3, r3, #17
 800496a:	f003 0301 	and.w	r3, r3, #1
 800496e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004972:	4413      	add	r3, r2
 8004974:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004978:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	4a0e      	ldr	r2, [pc, #56]	; (80049b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800497e:	fb02 f203 	mul.w	r2, r2, r3
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	fbb2 f3f3 	udiv	r3, r2, r3
 8004988:	627b      	str	r3, [r7, #36]	; 0x24
 800498a:	e004      	b.n	8004996 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	4a0b      	ldr	r2, [pc, #44]	; (80049bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004990:	fb02 f303 	mul.w	r3, r2, r3
 8004994:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004998:	623b      	str	r3, [r7, #32]
      break;
 800499a:	e002      	b.n	80049a2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800499c:	4b06      	ldr	r3, [pc, #24]	; (80049b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800499e:	623b      	str	r3, [r7, #32]
      break;
 80049a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049a2:	6a3b      	ldr	r3, [r7, #32]
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3728      	adds	r7, #40	; 0x28
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bc90      	pop	{r4, r7}
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	08008418 	.word	0x08008418
 80049b4:	40021000 	.word	0x40021000
 80049b8:	007a1200 	.word	0x007a1200
 80049bc:	003d0900 	.word	0x003d0900

080049c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049c0:	b480      	push	{r7}
 80049c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049c4:	4b02      	ldr	r3, [pc, #8]	; (80049d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80049c6:	681b      	ldr	r3, [r3, #0]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bc80      	pop	{r7}
 80049ce:	4770      	bx	lr
 80049d0:	20000000 	.word	0x20000000

080049d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80049d8:	f7ff fff2 	bl	80049c0 <HAL_RCC_GetHCLKFreq>
 80049dc:	4602      	mov	r2, r0
 80049de:	4b05      	ldr	r3, [pc, #20]	; (80049f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	0a1b      	lsrs	r3, r3, #8
 80049e4:	f003 0307 	and.w	r3, r3, #7
 80049e8:	4903      	ldr	r1, [pc, #12]	; (80049f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049ea:	5ccb      	ldrb	r3, [r1, r3]
 80049ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	40021000 	.word	0x40021000
 80049f8:	0800846c 	.word	0x0800846c

080049fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a00:	f7ff ffde 	bl	80049c0 <HAL_RCC_GetHCLKFreq>
 8004a04:	4602      	mov	r2, r0
 8004a06:	4b05      	ldr	r3, [pc, #20]	; (8004a1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	0adb      	lsrs	r3, r3, #11
 8004a0c:	f003 0307 	and.w	r3, r3, #7
 8004a10:	4903      	ldr	r1, [pc, #12]	; (8004a20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a12:	5ccb      	ldrb	r3, [r1, r3]
 8004a14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	40021000 	.word	0x40021000
 8004a20:	0800846c 	.word	0x0800846c

08004a24 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b085      	sub	sp, #20
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a2c:	4b0a      	ldr	r3, [pc, #40]	; (8004a58 <RCC_Delay+0x34>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a0a      	ldr	r2, [pc, #40]	; (8004a5c <RCC_Delay+0x38>)
 8004a32:	fba2 2303 	umull	r2, r3, r2, r3
 8004a36:	0a5b      	lsrs	r3, r3, #9
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	fb02 f303 	mul.w	r3, r2, r3
 8004a3e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004a40:	bf00      	nop
  }
  while (Delay --);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	1e5a      	subs	r2, r3, #1
 8004a46:	60fa      	str	r2, [r7, #12]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d1f9      	bne.n	8004a40 <RCC_Delay+0x1c>
}
 8004a4c:	bf00      	nop
 8004a4e:	bf00      	nop
 8004a50:	3714      	adds	r7, #20
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bc80      	pop	{r7}
 8004a56:	4770      	bx	lr
 8004a58:	20000000 	.word	0x20000000
 8004a5c:	10624dd3 	.word	0x10624dd3

08004a60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d101      	bne.n	8004a72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e041      	b.n	8004af6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d106      	bne.n	8004a8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f7fd fed4 	bl	8002834 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2202      	movs	r2, #2
 8004a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	3304      	adds	r3, #4
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	4610      	mov	r0, r2
 8004aa0:	f000 fe98 	bl	80057d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3708      	adds	r7, #8
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
	...

08004b00 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b085      	sub	sp, #20
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d001      	beq.n	8004b18 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e032      	b.n	8004b7e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2202      	movs	r2, #2
 8004b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a18      	ldr	r2, [pc, #96]	; (8004b88 <HAL_TIM_Base_Start+0x88>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d00e      	beq.n	8004b48 <HAL_TIM_Base_Start+0x48>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b32:	d009      	beq.n	8004b48 <HAL_TIM_Base_Start+0x48>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a14      	ldr	r2, [pc, #80]	; (8004b8c <HAL_TIM_Base_Start+0x8c>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d004      	beq.n	8004b48 <HAL_TIM_Base_Start+0x48>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a13      	ldr	r2, [pc, #76]	; (8004b90 <HAL_TIM_Base_Start+0x90>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d111      	bne.n	8004b6c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	f003 0307 	and.w	r3, r3, #7
 8004b52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2b06      	cmp	r3, #6
 8004b58:	d010      	beq.n	8004b7c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f042 0201 	orr.w	r2, r2, #1
 8004b68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b6a:	e007      	b.n	8004b7c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f042 0201 	orr.w	r2, r2, #1
 8004b7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3714      	adds	r7, #20
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bc80      	pop	{r7}
 8004b86:	4770      	bx	lr
 8004b88:	40012c00 	.word	0x40012c00
 8004b8c:	40000400 	.word	0x40000400
 8004b90:	40000800 	.word	0x40000800

08004b94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d001      	beq.n	8004bac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e03a      	b.n	8004c22 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2202      	movs	r2, #2
 8004bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68da      	ldr	r2, [r3, #12]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f042 0201 	orr.w	r2, r2, #1
 8004bc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a18      	ldr	r2, [pc, #96]	; (8004c2c <HAL_TIM_Base_Start_IT+0x98>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d00e      	beq.n	8004bec <HAL_TIM_Base_Start_IT+0x58>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bd6:	d009      	beq.n	8004bec <HAL_TIM_Base_Start_IT+0x58>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a14      	ldr	r2, [pc, #80]	; (8004c30 <HAL_TIM_Base_Start_IT+0x9c>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d004      	beq.n	8004bec <HAL_TIM_Base_Start_IT+0x58>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a13      	ldr	r2, [pc, #76]	; (8004c34 <HAL_TIM_Base_Start_IT+0xa0>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d111      	bne.n	8004c10 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f003 0307 	and.w	r3, r3, #7
 8004bf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2b06      	cmp	r3, #6
 8004bfc:	d010      	beq.n	8004c20 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f042 0201 	orr.w	r2, r2, #1
 8004c0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c0e:	e007      	b.n	8004c20 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f042 0201 	orr.w	r2, r2, #1
 8004c1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3714      	adds	r7, #20
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bc80      	pop	{r7}
 8004c2a:	4770      	bx	lr
 8004c2c:	40012c00 	.word	0x40012c00
 8004c30:	40000400 	.word	0x40000400
 8004c34:	40000800 	.word	0x40000800

08004c38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d101      	bne.n	8004c4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e041      	b.n	8004cce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d106      	bne.n	8004c64 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f7fd fdca 	bl	80027f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2202      	movs	r2, #2
 8004c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	3304      	adds	r3, #4
 8004c74:	4619      	mov	r1, r3
 8004c76:	4610      	mov	r0, r2
 8004c78:	f000 fdac 	bl	80057d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3708      	adds	r7, #8
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
	...

08004cd8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d109      	bne.n	8004cfc <HAL_TIM_PWM_Start+0x24>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	bf14      	ite	ne
 8004cf4:	2301      	movne	r3, #1
 8004cf6:	2300      	moveq	r3, #0
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	e022      	b.n	8004d42 <HAL_TIM_PWM_Start+0x6a>
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	2b04      	cmp	r3, #4
 8004d00:	d109      	bne.n	8004d16 <HAL_TIM_PWM_Start+0x3e>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	bf14      	ite	ne
 8004d0e:	2301      	movne	r3, #1
 8004d10:	2300      	moveq	r3, #0
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	e015      	b.n	8004d42 <HAL_TIM_PWM_Start+0x6a>
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	2b08      	cmp	r3, #8
 8004d1a:	d109      	bne.n	8004d30 <HAL_TIM_PWM_Start+0x58>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	bf14      	ite	ne
 8004d28:	2301      	movne	r3, #1
 8004d2a:	2300      	moveq	r3, #0
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	e008      	b.n	8004d42 <HAL_TIM_PWM_Start+0x6a>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	bf14      	ite	ne
 8004d3c:	2301      	movne	r3, #1
 8004d3e:	2300      	moveq	r3, #0
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d001      	beq.n	8004d4a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e05e      	b.n	8004e08 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d104      	bne.n	8004d5a <HAL_TIM_PWM_Start+0x82>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2202      	movs	r2, #2
 8004d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d58:	e013      	b.n	8004d82 <HAL_TIM_PWM_Start+0xaa>
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	2b04      	cmp	r3, #4
 8004d5e:	d104      	bne.n	8004d6a <HAL_TIM_PWM_Start+0x92>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2202      	movs	r2, #2
 8004d64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d68:	e00b      	b.n	8004d82 <HAL_TIM_PWM_Start+0xaa>
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	2b08      	cmp	r3, #8
 8004d6e:	d104      	bne.n	8004d7a <HAL_TIM_PWM_Start+0xa2>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2202      	movs	r2, #2
 8004d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d78:	e003      	b.n	8004d82 <HAL_TIM_PWM_Start+0xaa>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2202      	movs	r2, #2
 8004d7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2201      	movs	r2, #1
 8004d88:	6839      	ldr	r1, [r7, #0]
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f001 f8af 	bl	8005eee <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a1e      	ldr	r2, [pc, #120]	; (8004e10 <HAL_TIM_PWM_Start+0x138>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d107      	bne.n	8004daa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004da8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a18      	ldr	r2, [pc, #96]	; (8004e10 <HAL_TIM_PWM_Start+0x138>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d00e      	beq.n	8004dd2 <HAL_TIM_PWM_Start+0xfa>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dbc:	d009      	beq.n	8004dd2 <HAL_TIM_PWM_Start+0xfa>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a14      	ldr	r2, [pc, #80]	; (8004e14 <HAL_TIM_PWM_Start+0x13c>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d004      	beq.n	8004dd2 <HAL_TIM_PWM_Start+0xfa>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a12      	ldr	r2, [pc, #72]	; (8004e18 <HAL_TIM_PWM_Start+0x140>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d111      	bne.n	8004df6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	f003 0307 	and.w	r3, r3, #7
 8004ddc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2b06      	cmp	r3, #6
 8004de2:	d010      	beq.n	8004e06 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f042 0201 	orr.w	r2, r2, #1
 8004df2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004df4:	e007      	b.n	8004e06 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f042 0201 	orr.w	r2, r2, #1
 8004e04:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3710      	adds	r7, #16
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	40012c00 	.word	0x40012c00
 8004e14:	40000400 	.word	0x40000400
 8004e18:	40000800 	.word	0x40000800

08004e1c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d101      	bne.n	8004e2e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e041      	b.n	8004eb2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d106      	bne.n	8004e48 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 f839 	bl	8004eba <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2202      	movs	r2, #2
 8004e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	3304      	adds	r3, #4
 8004e58:	4619      	mov	r1, r3
 8004e5a:	4610      	mov	r0, r2
 8004e5c:	f000 fcba 	bl	80057d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3708      	adds	r7, #8
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b083      	sub	sp, #12
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004ec2:	bf00      	nop
 8004ec4:	370c      	adds	r7, #12
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bc80      	pop	{r7}
 8004eca:	4770      	bx	lr

08004ecc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d104      	bne.n	8004ee6 <HAL_TIM_IC_Start_IT+0x1a>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	e013      	b.n	8004f0e <HAL_TIM_IC_Start_IT+0x42>
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	2b04      	cmp	r3, #4
 8004eea:	d104      	bne.n	8004ef6 <HAL_TIM_IC_Start_IT+0x2a>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	e00b      	b.n	8004f0e <HAL_TIM_IC_Start_IT+0x42>
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	2b08      	cmp	r3, #8
 8004efa:	d104      	bne.n	8004f06 <HAL_TIM_IC_Start_IT+0x3a>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	e003      	b.n	8004f0e <HAL_TIM_IC_Start_IT+0x42>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d104      	bne.n	8004f20 <HAL_TIM_IC_Start_IT+0x54>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	e013      	b.n	8004f48 <HAL_TIM_IC_Start_IT+0x7c>
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	2b04      	cmp	r3, #4
 8004f24:	d104      	bne.n	8004f30 <HAL_TIM_IC_Start_IT+0x64>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	e00b      	b.n	8004f48 <HAL_TIM_IC_Start_IT+0x7c>
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	2b08      	cmp	r3, #8
 8004f34:	d104      	bne.n	8004f40 <HAL_TIM_IC_Start_IT+0x74>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	e003      	b.n	8004f48 <HAL_TIM_IC_Start_IT+0x7c>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f4a:	7bfb      	ldrb	r3, [r7, #15]
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d102      	bne.n	8004f56 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f50:	7bbb      	ldrb	r3, [r7, #14]
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d001      	beq.n	8004f5a <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e0b3      	b.n	80050c2 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d104      	bne.n	8004f6a <HAL_TIM_IC_Start_IT+0x9e>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2202      	movs	r2, #2
 8004f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f68:	e013      	b.n	8004f92 <HAL_TIM_IC_Start_IT+0xc6>
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	2b04      	cmp	r3, #4
 8004f6e:	d104      	bne.n	8004f7a <HAL_TIM_IC_Start_IT+0xae>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2202      	movs	r2, #2
 8004f74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f78:	e00b      	b.n	8004f92 <HAL_TIM_IC_Start_IT+0xc6>
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	2b08      	cmp	r3, #8
 8004f7e:	d104      	bne.n	8004f8a <HAL_TIM_IC_Start_IT+0xbe>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2202      	movs	r2, #2
 8004f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f88:	e003      	b.n	8004f92 <HAL_TIM_IC_Start_IT+0xc6>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2202      	movs	r2, #2
 8004f8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d104      	bne.n	8004fa2 <HAL_TIM_IC_Start_IT+0xd6>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2202      	movs	r2, #2
 8004f9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fa0:	e013      	b.n	8004fca <HAL_TIM_IC_Start_IT+0xfe>
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	2b04      	cmp	r3, #4
 8004fa6:	d104      	bne.n	8004fb2 <HAL_TIM_IC_Start_IT+0xe6>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2202      	movs	r2, #2
 8004fac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fb0:	e00b      	b.n	8004fca <HAL_TIM_IC_Start_IT+0xfe>
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	2b08      	cmp	r3, #8
 8004fb6:	d104      	bne.n	8004fc2 <HAL_TIM_IC_Start_IT+0xf6>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2202      	movs	r2, #2
 8004fbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fc0:	e003      	b.n	8004fca <HAL_TIM_IC_Start_IT+0xfe>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2202      	movs	r2, #2
 8004fc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	2b0c      	cmp	r3, #12
 8004fce:	d841      	bhi.n	8005054 <HAL_TIM_IC_Start_IT+0x188>
 8004fd0:	a201      	add	r2, pc, #4	; (adr r2, 8004fd8 <HAL_TIM_IC_Start_IT+0x10c>)
 8004fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fd6:	bf00      	nop
 8004fd8:	0800500d 	.word	0x0800500d
 8004fdc:	08005055 	.word	0x08005055
 8004fe0:	08005055 	.word	0x08005055
 8004fe4:	08005055 	.word	0x08005055
 8004fe8:	0800501f 	.word	0x0800501f
 8004fec:	08005055 	.word	0x08005055
 8004ff0:	08005055 	.word	0x08005055
 8004ff4:	08005055 	.word	0x08005055
 8004ff8:	08005031 	.word	0x08005031
 8004ffc:	08005055 	.word	0x08005055
 8005000:	08005055 	.word	0x08005055
 8005004:	08005055 	.word	0x08005055
 8005008:	08005043 	.word	0x08005043
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68da      	ldr	r2, [r3, #12]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f042 0202 	orr.w	r2, r2, #2
 800501a:	60da      	str	r2, [r3, #12]
      break;
 800501c:	e01b      	b.n	8005056 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	68da      	ldr	r2, [r3, #12]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f042 0204 	orr.w	r2, r2, #4
 800502c:	60da      	str	r2, [r3, #12]
      break;
 800502e:	e012      	b.n	8005056 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68da      	ldr	r2, [r3, #12]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f042 0208 	orr.w	r2, r2, #8
 800503e:	60da      	str	r2, [r3, #12]
      break;
 8005040:	e009      	b.n	8005056 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68da      	ldr	r2, [r3, #12]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f042 0210 	orr.w	r2, r2, #16
 8005050:	60da      	str	r2, [r3, #12]
      break;
 8005052:	e000      	b.n	8005056 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8005054:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2201      	movs	r2, #1
 800505c:	6839      	ldr	r1, [r7, #0]
 800505e:	4618      	mov	r0, r3
 8005060:	f000 ff45 	bl	8005eee <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a18      	ldr	r2, [pc, #96]	; (80050cc <HAL_TIM_IC_Start_IT+0x200>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d00e      	beq.n	800508c <HAL_TIM_IC_Start_IT+0x1c0>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005076:	d009      	beq.n	800508c <HAL_TIM_IC_Start_IT+0x1c0>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a14      	ldr	r2, [pc, #80]	; (80050d0 <HAL_TIM_IC_Start_IT+0x204>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d004      	beq.n	800508c <HAL_TIM_IC_Start_IT+0x1c0>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a13      	ldr	r2, [pc, #76]	; (80050d4 <HAL_TIM_IC_Start_IT+0x208>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d111      	bne.n	80050b0 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	f003 0307 	and.w	r3, r3, #7
 8005096:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	2b06      	cmp	r3, #6
 800509c:	d010      	beq.n	80050c0 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f042 0201 	orr.w	r2, r2, #1
 80050ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ae:	e007      	b.n	80050c0 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f042 0201 	orr.w	r2, r2, #1
 80050be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3710      	adds	r7, #16
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	40012c00 	.word	0x40012c00
 80050d0:	40000400 	.word	0x40000400
 80050d4:	40000800 	.word	0x40000800

080050d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	f003 0302 	and.w	r3, r3, #2
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d122      	bne.n	8005134 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	f003 0302 	and.w	r3, r3, #2
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d11b      	bne.n	8005134 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f06f 0202 	mvn.w	r2, #2
 8005104:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2201      	movs	r2, #1
 800510a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	f003 0303 	and.w	r3, r3, #3
 8005116:	2b00      	cmp	r3, #0
 8005118:	d003      	beq.n	8005122 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f7fd f812 	bl	8002144 <HAL_TIM_IC_CaptureCallback>
 8005120:	e005      	b.n	800512e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 fb3a 	bl	800579c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 fb40 	bl	80057ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	f003 0304 	and.w	r3, r3, #4
 800513e:	2b04      	cmp	r3, #4
 8005140:	d122      	bne.n	8005188 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	f003 0304 	and.w	r3, r3, #4
 800514c:	2b04      	cmp	r3, #4
 800514e:	d11b      	bne.n	8005188 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f06f 0204 	mvn.w	r2, #4
 8005158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2202      	movs	r2, #2
 800515e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	699b      	ldr	r3, [r3, #24]
 8005166:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800516a:	2b00      	cmp	r3, #0
 800516c:	d003      	beq.n	8005176 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f7fc ffe8 	bl	8002144 <HAL_TIM_IC_CaptureCallback>
 8005174:	e005      	b.n	8005182 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 fb10 	bl	800579c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f000 fb16 	bl	80057ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	f003 0308 	and.w	r3, r3, #8
 8005192:	2b08      	cmp	r3, #8
 8005194:	d122      	bne.n	80051dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	f003 0308 	and.w	r3, r3, #8
 80051a0:	2b08      	cmp	r3, #8
 80051a2:	d11b      	bne.n	80051dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f06f 0208 	mvn.w	r2, #8
 80051ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2204      	movs	r2, #4
 80051b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	69db      	ldr	r3, [r3, #28]
 80051ba:	f003 0303 	and.w	r3, r3, #3
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d003      	beq.n	80051ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f7fc ffbe 	bl	8002144 <HAL_TIM_IC_CaptureCallback>
 80051c8:	e005      	b.n	80051d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 fae6 	bl	800579c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f000 faec 	bl	80057ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	f003 0310 	and.w	r3, r3, #16
 80051e6:	2b10      	cmp	r3, #16
 80051e8:	d122      	bne.n	8005230 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	f003 0310 	and.w	r3, r3, #16
 80051f4:	2b10      	cmp	r3, #16
 80051f6:	d11b      	bne.n	8005230 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f06f 0210 	mvn.w	r2, #16
 8005200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2208      	movs	r2, #8
 8005206:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	69db      	ldr	r3, [r3, #28]
 800520e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005212:	2b00      	cmp	r3, #0
 8005214:	d003      	beq.n	800521e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f7fc ff94 	bl	8002144 <HAL_TIM_IC_CaptureCallback>
 800521c:	e005      	b.n	800522a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 fabc 	bl	800579c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 fac2 	bl	80057ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	f003 0301 	and.w	r3, r3, #1
 800523a:	2b01      	cmp	r3, #1
 800523c:	d10e      	bne.n	800525c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	f003 0301 	and.w	r3, r3, #1
 8005248:	2b01      	cmp	r3, #1
 800524a:	d107      	bne.n	800525c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f06f 0201 	mvn.w	r2, #1
 8005254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f7fc fd9e 	bl	8001d98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005266:	2b80      	cmp	r3, #128	; 0x80
 8005268:	d10e      	bne.n	8005288 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005274:	2b80      	cmp	r3, #128	; 0x80
 8005276:	d107      	bne.n	8005288 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 ff10 	bl	80060a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005292:	2b40      	cmp	r3, #64	; 0x40
 8005294:	d10e      	bne.n	80052b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052a0:	2b40      	cmp	r3, #64	; 0x40
 80052a2:	d107      	bne.n	80052b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 fa86 	bl	80057c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	f003 0320 	and.w	r3, r3, #32
 80052be:	2b20      	cmp	r3, #32
 80052c0:	d10e      	bne.n	80052e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	f003 0320 	and.w	r3, r3, #32
 80052cc:	2b20      	cmp	r3, #32
 80052ce:	d107      	bne.n	80052e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f06f 0220 	mvn.w	r2, #32
 80052d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 fedb 	bl	8006096 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052e0:	bf00      	nop
 80052e2:	3708      	adds	r7, #8
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d101      	bne.n	8005302 <HAL_TIM_IC_ConfigChannel+0x1a>
 80052fe:	2302      	movs	r3, #2
 8005300:	e082      	b.n	8005408 <HAL_TIM_IC_ConfigChannel+0x120>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2201      	movs	r2, #1
 8005306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d11b      	bne.n	8005348 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6818      	ldr	r0, [r3, #0]
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	6819      	ldr	r1, [r3, #0]
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	685a      	ldr	r2, [r3, #4]
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	f000 fc42 	bl	8005ba8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	699a      	ldr	r2, [r3, #24]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f022 020c 	bic.w	r2, r2, #12
 8005332:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	6999      	ldr	r1, [r3, #24]
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	689a      	ldr	r2, [r3, #8]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	430a      	orrs	r2, r1
 8005344:	619a      	str	r2, [r3, #24]
 8005346:	e05a      	b.n	80053fe <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2b04      	cmp	r3, #4
 800534c:	d11c      	bne.n	8005388 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6818      	ldr	r0, [r3, #0]
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	6819      	ldr	r1, [r3, #0]
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	685a      	ldr	r2, [r3, #4]
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	f000 fcab 	bl	8005cb8 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	699a      	ldr	r2, [r3, #24]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005370:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	6999      	ldr	r1, [r3, #24]
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	021a      	lsls	r2, r3, #8
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	430a      	orrs	r2, r1
 8005384:	619a      	str	r2, [r3, #24]
 8005386:	e03a      	b.n	80053fe <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2b08      	cmp	r3, #8
 800538c:	d11b      	bne.n	80053c6 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6818      	ldr	r0, [r3, #0]
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	6819      	ldr	r1, [r3, #0]
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	685a      	ldr	r2, [r3, #4]
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	f000 fcf6 	bl	8005d8e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	69da      	ldr	r2, [r3, #28]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f022 020c 	bic.w	r2, r2, #12
 80053b0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	69d9      	ldr	r1, [r3, #28]
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	689a      	ldr	r2, [r3, #8]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	430a      	orrs	r2, r1
 80053c2:	61da      	str	r2, [r3, #28]
 80053c4:	e01b      	b.n	80053fe <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6818      	ldr	r0, [r3, #0]
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	6819      	ldr	r1, [r3, #0]
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	685a      	ldr	r2, [r3, #4]
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	f000 fd15 	bl	8005e04 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	69da      	ldr	r2, [r3, #28]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80053e8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	69d9      	ldr	r1, [r3, #28]
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	021a      	lsls	r2, r3, #8
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	430a      	orrs	r2, r1
 80053fc:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3710      	adds	r7, #16
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005422:	2b01      	cmp	r3, #1
 8005424:	d101      	bne.n	800542a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005426:	2302      	movs	r3, #2
 8005428:	e0ac      	b.n	8005584 <HAL_TIM_PWM_ConfigChannel+0x174>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2201      	movs	r2, #1
 800542e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2b0c      	cmp	r3, #12
 8005436:	f200 809f 	bhi.w	8005578 <HAL_TIM_PWM_ConfigChannel+0x168>
 800543a:	a201      	add	r2, pc, #4	; (adr r2, 8005440 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800543c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005440:	08005475 	.word	0x08005475
 8005444:	08005579 	.word	0x08005579
 8005448:	08005579 	.word	0x08005579
 800544c:	08005579 	.word	0x08005579
 8005450:	080054b5 	.word	0x080054b5
 8005454:	08005579 	.word	0x08005579
 8005458:	08005579 	.word	0x08005579
 800545c:	08005579 	.word	0x08005579
 8005460:	080054f7 	.word	0x080054f7
 8005464:	08005579 	.word	0x08005579
 8005468:	08005579 	.word	0x08005579
 800546c:	08005579 	.word	0x08005579
 8005470:	08005537 	.word	0x08005537
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68b9      	ldr	r1, [r7, #8]
 800547a:	4618      	mov	r0, r3
 800547c:	f000 fa0c 	bl	8005898 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	699a      	ldr	r2, [r3, #24]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f042 0208 	orr.w	r2, r2, #8
 800548e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	699a      	ldr	r2, [r3, #24]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f022 0204 	bic.w	r2, r2, #4
 800549e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	6999      	ldr	r1, [r3, #24]
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	691a      	ldr	r2, [r3, #16]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	430a      	orrs	r2, r1
 80054b0:	619a      	str	r2, [r3, #24]
      break;
 80054b2:	e062      	b.n	800557a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	68b9      	ldr	r1, [r7, #8]
 80054ba:	4618      	mov	r0, r3
 80054bc:	f000 fa52 	bl	8005964 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	699a      	ldr	r2, [r3, #24]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	699a      	ldr	r2, [r3, #24]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	6999      	ldr	r1, [r3, #24]
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	021a      	lsls	r2, r3, #8
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	430a      	orrs	r2, r1
 80054f2:	619a      	str	r2, [r3, #24]
      break;
 80054f4:	e041      	b.n	800557a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68b9      	ldr	r1, [r7, #8]
 80054fc:	4618      	mov	r0, r3
 80054fe:	f000 fa9b 	bl	8005a38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	69da      	ldr	r2, [r3, #28]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f042 0208 	orr.w	r2, r2, #8
 8005510:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	69da      	ldr	r2, [r3, #28]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f022 0204 	bic.w	r2, r2, #4
 8005520:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	69d9      	ldr	r1, [r3, #28]
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	691a      	ldr	r2, [r3, #16]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	430a      	orrs	r2, r1
 8005532:	61da      	str	r2, [r3, #28]
      break;
 8005534:	e021      	b.n	800557a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68b9      	ldr	r1, [r7, #8]
 800553c:	4618      	mov	r0, r3
 800553e:	f000 fae5 	bl	8005b0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	69da      	ldr	r2, [r3, #28]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005550:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	69da      	ldr	r2, [r3, #28]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005560:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	69d9      	ldr	r1, [r3, #28]
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	021a      	lsls	r2, r3, #8
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	430a      	orrs	r2, r1
 8005574:	61da      	str	r2, [r3, #28]
      break;
 8005576:	e000      	b.n	800557a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005578:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2200      	movs	r2, #0
 800557e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005582:	2300      	movs	r3, #0
}
 8005584:	4618      	mov	r0, r3
 8005586:	3710      	adds	r7, #16
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800559c:	2b01      	cmp	r3, #1
 800559e:	d101      	bne.n	80055a4 <HAL_TIM_ConfigClockSource+0x18>
 80055a0:	2302      	movs	r3, #2
 80055a2:	e0b3      	b.n	800570c <HAL_TIM_ConfigClockSource+0x180>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2202      	movs	r2, #2
 80055b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80055c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055ca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	68fa      	ldr	r2, [r7, #12]
 80055d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055dc:	d03e      	beq.n	800565c <HAL_TIM_ConfigClockSource+0xd0>
 80055de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055e2:	f200 8087 	bhi.w	80056f4 <HAL_TIM_ConfigClockSource+0x168>
 80055e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055ea:	f000 8085 	beq.w	80056f8 <HAL_TIM_ConfigClockSource+0x16c>
 80055ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055f2:	d87f      	bhi.n	80056f4 <HAL_TIM_ConfigClockSource+0x168>
 80055f4:	2b70      	cmp	r3, #112	; 0x70
 80055f6:	d01a      	beq.n	800562e <HAL_TIM_ConfigClockSource+0xa2>
 80055f8:	2b70      	cmp	r3, #112	; 0x70
 80055fa:	d87b      	bhi.n	80056f4 <HAL_TIM_ConfigClockSource+0x168>
 80055fc:	2b60      	cmp	r3, #96	; 0x60
 80055fe:	d050      	beq.n	80056a2 <HAL_TIM_ConfigClockSource+0x116>
 8005600:	2b60      	cmp	r3, #96	; 0x60
 8005602:	d877      	bhi.n	80056f4 <HAL_TIM_ConfigClockSource+0x168>
 8005604:	2b50      	cmp	r3, #80	; 0x50
 8005606:	d03c      	beq.n	8005682 <HAL_TIM_ConfigClockSource+0xf6>
 8005608:	2b50      	cmp	r3, #80	; 0x50
 800560a:	d873      	bhi.n	80056f4 <HAL_TIM_ConfigClockSource+0x168>
 800560c:	2b40      	cmp	r3, #64	; 0x40
 800560e:	d058      	beq.n	80056c2 <HAL_TIM_ConfigClockSource+0x136>
 8005610:	2b40      	cmp	r3, #64	; 0x40
 8005612:	d86f      	bhi.n	80056f4 <HAL_TIM_ConfigClockSource+0x168>
 8005614:	2b30      	cmp	r3, #48	; 0x30
 8005616:	d064      	beq.n	80056e2 <HAL_TIM_ConfigClockSource+0x156>
 8005618:	2b30      	cmp	r3, #48	; 0x30
 800561a:	d86b      	bhi.n	80056f4 <HAL_TIM_ConfigClockSource+0x168>
 800561c:	2b20      	cmp	r3, #32
 800561e:	d060      	beq.n	80056e2 <HAL_TIM_ConfigClockSource+0x156>
 8005620:	2b20      	cmp	r3, #32
 8005622:	d867      	bhi.n	80056f4 <HAL_TIM_ConfigClockSource+0x168>
 8005624:	2b00      	cmp	r3, #0
 8005626:	d05c      	beq.n	80056e2 <HAL_TIM_ConfigClockSource+0x156>
 8005628:	2b10      	cmp	r3, #16
 800562a:	d05a      	beq.n	80056e2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800562c:	e062      	b.n	80056f4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6818      	ldr	r0, [r3, #0]
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	6899      	ldr	r1, [r3, #8]
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	685a      	ldr	r2, [r3, #4]
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	f000 fc37 	bl	8005eb0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005650:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	609a      	str	r2, [r3, #8]
      break;
 800565a:	e04e      	b.n	80056fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6818      	ldr	r0, [r3, #0]
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	6899      	ldr	r1, [r3, #8]
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	685a      	ldr	r2, [r3, #4]
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	f000 fc20 	bl	8005eb0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	689a      	ldr	r2, [r3, #8]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800567e:	609a      	str	r2, [r3, #8]
      break;
 8005680:	e03b      	b.n	80056fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6818      	ldr	r0, [r3, #0]
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	6859      	ldr	r1, [r3, #4]
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	461a      	mov	r2, r3
 8005690:	f000 fae4 	bl	8005c5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2150      	movs	r1, #80	; 0x50
 800569a:	4618      	mov	r0, r3
 800569c:	f000 fbee 	bl	8005e7c <TIM_ITRx_SetConfig>
      break;
 80056a0:	e02b      	b.n	80056fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6818      	ldr	r0, [r3, #0]
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	6859      	ldr	r1, [r3, #4]
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	461a      	mov	r2, r3
 80056b0:	f000 fb3e 	bl	8005d30 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2160      	movs	r1, #96	; 0x60
 80056ba:	4618      	mov	r0, r3
 80056bc:	f000 fbde 	bl	8005e7c <TIM_ITRx_SetConfig>
      break;
 80056c0:	e01b      	b.n	80056fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6818      	ldr	r0, [r3, #0]
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	6859      	ldr	r1, [r3, #4]
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	461a      	mov	r2, r3
 80056d0:	f000 fac4 	bl	8005c5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2140      	movs	r1, #64	; 0x40
 80056da:	4618      	mov	r0, r3
 80056dc:	f000 fbce 	bl	8005e7c <TIM_ITRx_SetConfig>
      break;
 80056e0:	e00b      	b.n	80056fa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4619      	mov	r1, r3
 80056ec:	4610      	mov	r0, r2
 80056ee:	f000 fbc5 	bl	8005e7c <TIM_ITRx_SetConfig>
        break;
 80056f2:	e002      	b.n	80056fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80056f4:	bf00      	nop
 80056f6:	e000      	b.n	80056fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80056f8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3710      	adds	r7, #16
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005714:	b480      	push	{r7}
 8005716:	b085      	sub	sp, #20
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800571e:	2300      	movs	r3, #0
 8005720:	60fb      	str	r3, [r7, #12]
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	2b0c      	cmp	r3, #12
 8005726:	d831      	bhi.n	800578c <HAL_TIM_ReadCapturedValue+0x78>
 8005728:	a201      	add	r2, pc, #4	; (adr r2, 8005730 <HAL_TIM_ReadCapturedValue+0x1c>)
 800572a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800572e:	bf00      	nop
 8005730:	08005765 	.word	0x08005765
 8005734:	0800578d 	.word	0x0800578d
 8005738:	0800578d 	.word	0x0800578d
 800573c:	0800578d 	.word	0x0800578d
 8005740:	0800576f 	.word	0x0800576f
 8005744:	0800578d 	.word	0x0800578d
 8005748:	0800578d 	.word	0x0800578d
 800574c:	0800578d 	.word	0x0800578d
 8005750:	08005779 	.word	0x08005779
 8005754:	0800578d 	.word	0x0800578d
 8005758:	0800578d 	.word	0x0800578d
 800575c:	0800578d 	.word	0x0800578d
 8005760:	08005783 	.word	0x08005783
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800576a:	60fb      	str	r3, [r7, #12]

      break;
 800576c:	e00f      	b.n	800578e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005774:	60fb      	str	r3, [r7, #12]

      break;
 8005776:	e00a      	b.n	800578e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800577e:	60fb      	str	r3, [r7, #12]

      break;
 8005780:	e005      	b.n	800578e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005788:	60fb      	str	r3, [r7, #12]

      break;
 800578a:	e000      	b.n	800578e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800578c:	bf00      	nop
  }

  return tmpreg;
 800578e:	68fb      	ldr	r3, [r7, #12]
}
 8005790:	4618      	mov	r0, r3
 8005792:	3714      	adds	r7, #20
 8005794:	46bd      	mov	sp, r7
 8005796:	bc80      	pop	{r7}
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop

0800579c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bc80      	pop	{r7}
 80057ac:	4770      	bx	lr

080057ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057ae:	b480      	push	{r7}
 80057b0:	b083      	sub	sp, #12
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057b6:	bf00      	nop
 80057b8:	370c      	adds	r7, #12
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bc80      	pop	{r7}
 80057be:	4770      	bx	lr

080057c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057c8:	bf00      	nop
 80057ca:	370c      	adds	r7, #12
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bc80      	pop	{r7}
 80057d0:	4770      	bx	lr
	...

080057d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b085      	sub	sp, #20
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a29      	ldr	r2, [pc, #164]	; (800588c <TIM_Base_SetConfig+0xb8>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d00b      	beq.n	8005804 <TIM_Base_SetConfig+0x30>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057f2:	d007      	beq.n	8005804 <TIM_Base_SetConfig+0x30>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a26      	ldr	r2, [pc, #152]	; (8005890 <TIM_Base_SetConfig+0xbc>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d003      	beq.n	8005804 <TIM_Base_SetConfig+0x30>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a25      	ldr	r2, [pc, #148]	; (8005894 <TIM_Base_SetConfig+0xc0>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d108      	bne.n	8005816 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800580a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	4313      	orrs	r3, r2
 8005814:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a1c      	ldr	r2, [pc, #112]	; (800588c <TIM_Base_SetConfig+0xb8>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d00b      	beq.n	8005836 <TIM_Base_SetConfig+0x62>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005824:	d007      	beq.n	8005836 <TIM_Base_SetConfig+0x62>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a19      	ldr	r2, [pc, #100]	; (8005890 <TIM_Base_SetConfig+0xbc>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d003      	beq.n	8005836 <TIM_Base_SetConfig+0x62>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a18      	ldr	r2, [pc, #96]	; (8005894 <TIM_Base_SetConfig+0xc0>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d108      	bne.n	8005848 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800583c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	4313      	orrs	r3, r2
 8005846:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	695b      	ldr	r3, [r3, #20]
 8005852:	4313      	orrs	r3, r2
 8005854:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	689a      	ldr	r2, [r3, #8]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4a07      	ldr	r2, [pc, #28]	; (800588c <TIM_Base_SetConfig+0xb8>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d103      	bne.n	800587c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	691a      	ldr	r2, [r3, #16]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	615a      	str	r2, [r3, #20]
}
 8005882:	bf00      	nop
 8005884:	3714      	adds	r7, #20
 8005886:	46bd      	mov	sp, r7
 8005888:	bc80      	pop	{r7}
 800588a:	4770      	bx	lr
 800588c:	40012c00 	.word	0x40012c00
 8005890:	40000400 	.word	0x40000400
 8005894:	40000800 	.word	0x40000800

08005898 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005898:	b480      	push	{r7}
 800589a:	b087      	sub	sp, #28
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a1b      	ldr	r3, [r3, #32]
 80058a6:	f023 0201 	bic.w	r2, r3, #1
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a1b      	ldr	r3, [r3, #32]
 80058b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	699b      	ldr	r3, [r3, #24]
 80058be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f023 0303 	bic.w	r3, r3, #3
 80058ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	f023 0302 	bic.w	r3, r3, #2
 80058e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	697a      	ldr	r2, [r7, #20]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4a1c      	ldr	r2, [pc, #112]	; (8005960 <TIM_OC1_SetConfig+0xc8>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d10c      	bne.n	800590e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	f023 0308 	bic.w	r3, r3, #8
 80058fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	697a      	ldr	r2, [r7, #20]
 8005902:	4313      	orrs	r3, r2
 8005904:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	f023 0304 	bic.w	r3, r3, #4
 800590c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a13      	ldr	r2, [pc, #76]	; (8005960 <TIM_OC1_SetConfig+0xc8>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d111      	bne.n	800593a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800591c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005924:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	693a      	ldr	r2, [r7, #16]
 800592c:	4313      	orrs	r3, r2
 800592e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	699b      	ldr	r3, [r3, #24]
 8005934:	693a      	ldr	r2, [r7, #16]
 8005936:	4313      	orrs	r3, r2
 8005938:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	693a      	ldr	r2, [r7, #16]
 800593e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	685a      	ldr	r2, [r3, #4]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	697a      	ldr	r2, [r7, #20]
 8005952:	621a      	str	r2, [r3, #32]
}
 8005954:	bf00      	nop
 8005956:	371c      	adds	r7, #28
 8005958:	46bd      	mov	sp, r7
 800595a:	bc80      	pop	{r7}
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop
 8005960:	40012c00 	.word	0x40012c00

08005964 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005964:	b480      	push	{r7}
 8005966:	b087      	sub	sp, #28
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a1b      	ldr	r3, [r3, #32]
 8005972:	f023 0210 	bic.w	r2, r3, #16
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a1b      	ldr	r3, [r3, #32]
 800597e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	699b      	ldr	r3, [r3, #24]
 800598a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800599a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	021b      	lsls	r3, r3, #8
 80059a2:	68fa      	ldr	r2, [r7, #12]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	f023 0320 	bic.w	r3, r3, #32
 80059ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	011b      	lsls	r3, r3, #4
 80059b6:	697a      	ldr	r2, [r7, #20]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a1d      	ldr	r2, [pc, #116]	; (8005a34 <TIM_OC2_SetConfig+0xd0>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d10d      	bne.n	80059e0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	011b      	lsls	r3, r3, #4
 80059d2:	697a      	ldr	r2, [r7, #20]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a14      	ldr	r2, [pc, #80]	; (8005a34 <TIM_OC2_SetConfig+0xd0>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d113      	bne.n	8005a10 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	695b      	ldr	r3, [r3, #20]
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	693a      	ldr	r2, [r7, #16]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	699b      	ldr	r3, [r3, #24]
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	693a      	ldr	r2, [r7, #16]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	693a      	ldr	r2, [r7, #16]
 8005a14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	685a      	ldr	r2, [r3, #4]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	697a      	ldr	r2, [r7, #20]
 8005a28:	621a      	str	r2, [r3, #32]
}
 8005a2a:	bf00      	nop
 8005a2c:	371c      	adds	r7, #28
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bc80      	pop	{r7}
 8005a32:	4770      	bx	lr
 8005a34:	40012c00 	.word	0x40012c00

08005a38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b087      	sub	sp, #28
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a1b      	ldr	r3, [r3, #32]
 8005a46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	69db      	ldr	r3, [r3, #28]
 8005a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f023 0303 	bic.w	r3, r3, #3
 8005a6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	021b      	lsls	r3, r3, #8
 8005a88:	697a      	ldr	r2, [r7, #20]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a1d      	ldr	r2, [pc, #116]	; (8005b08 <TIM_OC3_SetConfig+0xd0>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d10d      	bne.n	8005ab2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	021b      	lsls	r3, r3, #8
 8005aa4:	697a      	ldr	r2, [r7, #20]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ab0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a14      	ldr	r2, [pc, #80]	; (8005b08 <TIM_OC3_SetConfig+0xd0>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d113      	bne.n	8005ae2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ac0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ac8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	011b      	lsls	r3, r3, #4
 8005ad0:	693a      	ldr	r2, [r7, #16]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	699b      	ldr	r3, [r3, #24]
 8005ada:	011b      	lsls	r3, r3, #4
 8005adc:	693a      	ldr	r2, [r7, #16]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	693a      	ldr	r2, [r7, #16]
 8005ae6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	685a      	ldr	r2, [r3, #4]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	697a      	ldr	r2, [r7, #20]
 8005afa:	621a      	str	r2, [r3, #32]
}
 8005afc:	bf00      	nop
 8005afe:	371c      	adds	r7, #28
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bc80      	pop	{r7}
 8005b04:	4770      	bx	lr
 8005b06:	bf00      	nop
 8005b08:	40012c00 	.word	0x40012c00

08005b0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b087      	sub	sp, #28
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a1b      	ldr	r3, [r3, #32]
 8005b1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a1b      	ldr	r3, [r3, #32]
 8005b26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	69db      	ldr	r3, [r3, #28]
 8005b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	021b      	lsls	r3, r3, #8
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	031b      	lsls	r3, r3, #12
 8005b5e:	693a      	ldr	r2, [r7, #16]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a0f      	ldr	r2, [pc, #60]	; (8005ba4 <TIM_OC4_SetConfig+0x98>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d109      	bne.n	8005b80 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	695b      	ldr	r3, [r3, #20]
 8005b78:	019b      	lsls	r3, r3, #6
 8005b7a:	697a      	ldr	r2, [r7, #20]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	697a      	ldr	r2, [r7, #20]
 8005b84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	685a      	ldr	r2, [r3, #4]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	693a      	ldr	r2, [r7, #16]
 8005b98:	621a      	str	r2, [r3, #32]
}
 8005b9a:	bf00      	nop
 8005b9c:	371c      	adds	r7, #28
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bc80      	pop	{r7}
 8005ba2:	4770      	bx	lr
 8005ba4:	40012c00 	.word	0x40012c00

08005ba8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b087      	sub	sp, #28
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	607a      	str	r2, [r7, #4]
 8005bb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6a1b      	ldr	r3, [r3, #32]
 8005bba:	f023 0201 	bic.w	r2, r3, #1
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6a1b      	ldr	r3, [r3, #32]
 8005bcc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	4a1f      	ldr	r2, [pc, #124]	; (8005c50 <TIM_TI1_SetConfig+0xa8>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d00b      	beq.n	8005bee <TIM_TI1_SetConfig+0x46>
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bdc:	d007      	beq.n	8005bee <TIM_TI1_SetConfig+0x46>
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	4a1c      	ldr	r2, [pc, #112]	; (8005c54 <TIM_TI1_SetConfig+0xac>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d003      	beq.n	8005bee <TIM_TI1_SetConfig+0x46>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	4a1b      	ldr	r2, [pc, #108]	; (8005c58 <TIM_TI1_SetConfig+0xb0>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d101      	bne.n	8005bf2 <TIM_TI1_SetConfig+0x4a>
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e000      	b.n	8005bf4 <TIM_TI1_SetConfig+0x4c>
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d008      	beq.n	8005c0a <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	f023 0303 	bic.w	r3, r3, #3
 8005bfe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005c00:	697a      	ldr	r2, [r7, #20]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	617b      	str	r3, [r7, #20]
 8005c08:	e003      	b.n	8005c12 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	f043 0301 	orr.w	r3, r3, #1
 8005c10:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	011b      	lsls	r3, r3, #4
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	697a      	ldr	r2, [r7, #20]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	f023 030a 	bic.w	r3, r3, #10
 8005c2c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	f003 030a 	and.w	r3, r3, #10
 8005c34:	693a      	ldr	r2, [r7, #16]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	697a      	ldr	r2, [r7, #20]
 8005c3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	693a      	ldr	r2, [r7, #16]
 8005c44:	621a      	str	r2, [r3, #32]
}
 8005c46:	bf00      	nop
 8005c48:	371c      	adds	r7, #28
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bc80      	pop	{r7}
 8005c4e:	4770      	bx	lr
 8005c50:	40012c00 	.word	0x40012c00
 8005c54:	40000400 	.word	0x40000400
 8005c58:	40000800 	.word	0x40000800

08005c5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b087      	sub	sp, #28
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	60b9      	str	r1, [r7, #8]
 8005c66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6a1b      	ldr	r3, [r3, #32]
 8005c6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	6a1b      	ldr	r3, [r3, #32]
 8005c72:	f023 0201 	bic.w	r2, r3, #1
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	699b      	ldr	r3, [r3, #24]
 8005c7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	011b      	lsls	r3, r3, #4
 8005c8c:	693a      	ldr	r2, [r7, #16]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	f023 030a 	bic.w	r3, r3, #10
 8005c98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c9a:	697a      	ldr	r2, [r7, #20]
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	693a      	ldr	r2, [r7, #16]
 8005ca6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	697a      	ldr	r2, [r7, #20]
 8005cac:	621a      	str	r2, [r3, #32]
}
 8005cae:	bf00      	nop
 8005cb0:	371c      	adds	r7, #28
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bc80      	pop	{r7}
 8005cb6:	4770      	bx	lr

08005cb8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b087      	sub	sp, #28
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	607a      	str	r2, [r7, #4]
 8005cc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6a1b      	ldr	r3, [r3, #32]
 8005cca:	f023 0210 	bic.w	r2, r3, #16
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	699b      	ldr	r3, [r3, #24]
 8005cd6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6a1b      	ldr	r3, [r3, #32]
 8005cdc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ce4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	021b      	lsls	r3, r3, #8
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005cf6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	031b      	lsls	r3, r3, #12
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	697a      	ldr	r2, [r7, #20]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d0a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	011b      	lsls	r3, r3, #4
 8005d10:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005d14:	693a      	ldr	r2, [r7, #16]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	697a      	ldr	r2, [r7, #20]
 8005d1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	621a      	str	r2, [r3, #32]
}
 8005d26:	bf00      	nop
 8005d28:	371c      	adds	r7, #28
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bc80      	pop	{r7}
 8005d2e:	4770      	bx	lr

08005d30 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b087      	sub	sp, #28
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6a1b      	ldr	r3, [r3, #32]
 8005d40:	f023 0210 	bic.w	r2, r3, #16
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	699b      	ldr	r3, [r3, #24]
 8005d4c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6a1b      	ldr	r3, [r3, #32]
 8005d52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d5a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	031b      	lsls	r3, r3, #12
 8005d60:	697a      	ldr	r2, [r7, #20]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d6c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	011b      	lsls	r3, r3, #4
 8005d72:	693a      	ldr	r2, [r7, #16]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	697a      	ldr	r2, [r7, #20]
 8005d7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	693a      	ldr	r2, [r7, #16]
 8005d82:	621a      	str	r2, [r3, #32]
}
 8005d84:	bf00      	nop
 8005d86:	371c      	adds	r7, #28
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bc80      	pop	{r7}
 8005d8c:	4770      	bx	lr

08005d8e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005d8e:	b480      	push	{r7}
 8005d90:	b087      	sub	sp, #28
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	60f8      	str	r0, [r7, #12]
 8005d96:	60b9      	str	r1, [r7, #8]
 8005d98:	607a      	str	r2, [r7, #4]
 8005d9a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6a1b      	ldr	r3, [r3, #32]
 8005da0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	69db      	ldr	r3, [r3, #28]
 8005dac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	6a1b      	ldr	r3, [r3, #32]
 8005db2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	f023 0303 	bic.w	r3, r3, #3
 8005dba:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005dbc:	697a      	ldr	r2, [r7, #20]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005dca:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	011b      	lsls	r3, r3, #4
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	697a      	ldr	r2, [r7, #20]
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005dde:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	021b      	lsls	r3, r3, #8
 8005de4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005de8:	693a      	ldr	r2, [r7, #16]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	697a      	ldr	r2, [r7, #20]
 8005df2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	693a      	ldr	r2, [r7, #16]
 8005df8:	621a      	str	r2, [r3, #32]
}
 8005dfa:	bf00      	nop
 8005dfc:	371c      	adds	r7, #28
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bc80      	pop	{r7}
 8005e02:	4770      	bx	lr

08005e04 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b087      	sub	sp, #28
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	607a      	str	r2, [r7, #4]
 8005e10:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6a1b      	ldr	r3, [r3, #32]
 8005e16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	69db      	ldr	r3, [r3, #28]
 8005e22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6a1b      	ldr	r3, [r3, #32]
 8005e28:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e30:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	021b      	lsls	r3, r3, #8
 8005e36:	697a      	ldr	r2, [r7, #20]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e42:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	031b      	lsls	r3, r3, #12
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	697a      	ldr	r2, [r7, #20]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e56:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	031b      	lsls	r3, r3, #12
 8005e5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e60:	693a      	ldr	r2, [r7, #16]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	697a      	ldr	r2, [r7, #20]
 8005e6a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	693a      	ldr	r2, [r7, #16]
 8005e70:	621a      	str	r2, [r3, #32]
}
 8005e72:	bf00      	nop
 8005e74:	371c      	adds	r7, #28
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bc80      	pop	{r7}
 8005e7a:	4770      	bx	lr

08005e7c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b085      	sub	sp, #20
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e92:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e94:	683a      	ldr	r2, [r7, #0]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	f043 0307 	orr.w	r3, r3, #7
 8005e9e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	609a      	str	r2, [r3, #8]
}
 8005ea6:	bf00      	nop
 8005ea8:	3714      	adds	r7, #20
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bc80      	pop	{r7}
 8005eae:	4770      	bx	lr

08005eb0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b087      	sub	sp, #28
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	60b9      	str	r1, [r7, #8]
 8005eba:	607a      	str	r2, [r7, #4]
 8005ebc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005eca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	021a      	lsls	r2, r3, #8
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	431a      	orrs	r2, r3
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	697a      	ldr	r2, [r7, #20]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	697a      	ldr	r2, [r7, #20]
 8005ee2:	609a      	str	r2, [r3, #8]
}
 8005ee4:	bf00      	nop
 8005ee6:	371c      	adds	r7, #28
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bc80      	pop	{r7}
 8005eec:	4770      	bx	lr

08005eee <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005eee:	b480      	push	{r7}
 8005ef0:	b087      	sub	sp, #28
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	60f8      	str	r0, [r7, #12]
 8005ef6:	60b9      	str	r1, [r7, #8]
 8005ef8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	f003 031f 	and.w	r3, r3, #31
 8005f00:	2201      	movs	r2, #1
 8005f02:	fa02 f303 	lsl.w	r3, r2, r3
 8005f06:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6a1a      	ldr	r2, [r3, #32]
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	43db      	mvns	r3, r3
 8005f10:	401a      	ands	r2, r3
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6a1a      	ldr	r2, [r3, #32]
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	f003 031f 	and.w	r3, r3, #31
 8005f20:	6879      	ldr	r1, [r7, #4]
 8005f22:	fa01 f303 	lsl.w	r3, r1, r3
 8005f26:	431a      	orrs	r2, r3
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	621a      	str	r2, [r3, #32]
}
 8005f2c:	bf00      	nop
 8005f2e:	371c      	adds	r7, #28
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bc80      	pop	{r7}
 8005f34:	4770      	bx	lr
	...

08005f38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b085      	sub	sp, #20
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d101      	bne.n	8005f50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f4c:	2302      	movs	r3, #2
 8005f4e:	e046      	b.n	8005fde <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2202      	movs	r2, #2
 8005f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	68fa      	ldr	r2, [r7, #12]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a16      	ldr	r2, [pc, #88]	; (8005fe8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d00e      	beq.n	8005fb2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f9c:	d009      	beq.n	8005fb2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a12      	ldr	r2, [pc, #72]	; (8005fec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d004      	beq.n	8005fb2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a10      	ldr	r2, [pc, #64]	; (8005ff0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d10c      	bne.n	8005fcc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	68ba      	ldr	r2, [r7, #8]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	68ba      	ldr	r2, [r7, #8]
 8005fca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3714      	adds	r7, #20
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bc80      	pop	{r7}
 8005fe6:	4770      	bx	lr
 8005fe8:	40012c00 	.word	0x40012c00
 8005fec:	40000400 	.word	0x40000400
 8005ff0:	40000800 	.word	0x40000800

08005ff4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b085      	sub	sp, #20
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005ffe:	2300      	movs	r3, #0
 8006000:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006008:	2b01      	cmp	r3, #1
 800600a:	d101      	bne.n	8006010 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800600c:	2302      	movs	r3, #2
 800600e:	e03d      	b.n	800608c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	4313      	orrs	r3, r2
 8006024:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	4313      	orrs	r3, r2
 8006032:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	4313      	orrs	r3, r2
 8006040:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4313      	orrs	r3, r2
 800604e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	4313      	orrs	r3, r2
 800605c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	695b      	ldr	r3, [r3, #20]
 8006068:	4313      	orrs	r3, r2
 800606a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	69db      	ldr	r3, [r3, #28]
 8006076:	4313      	orrs	r3, r2
 8006078:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800608a:	2300      	movs	r3, #0
}
 800608c:	4618      	mov	r0, r3
 800608e:	3714      	adds	r7, #20
 8006090:	46bd      	mov	sp, r7
 8006092:	bc80      	pop	{r7}
 8006094:	4770      	bx	lr

08006096 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006096:	b480      	push	{r7}
 8006098:	b083      	sub	sp, #12
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800609e:	bf00      	nop
 80060a0:	370c      	adds	r7, #12
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bc80      	pop	{r7}
 80060a6:	4770      	bx	lr

080060a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80060b0:	bf00      	nop
 80060b2:	370c      	adds	r7, #12
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bc80      	pop	{r7}
 80060b8:	4770      	bx	lr

080060ba <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060ba:	b580      	push	{r7, lr}
 80060bc:	b082      	sub	sp, #8
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d101      	bne.n	80060cc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	e03f      	b.n	800614c <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d106      	bne.n	80060e6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f7fc fc4f 	bl	8002984 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2224      	movs	r2, #36	; 0x24
 80060ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68da      	ldr	r2, [r3, #12]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060fc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 f904 	bl	800630c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	691a      	ldr	r2, [r3, #16]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006112:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	695a      	ldr	r2, [r3, #20]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006122:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68da      	ldr	r2, [r3, #12]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006132:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2220      	movs	r2, #32
 800613e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2220      	movs	r2, #32
 8006146:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3708      	adds	r7, #8
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b08a      	sub	sp, #40	; 0x28
 8006158:	af02      	add	r7, sp, #8
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	603b      	str	r3, [r7, #0]
 8006160:	4613      	mov	r3, r2
 8006162:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006164:	2300      	movs	r3, #0
 8006166:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800616e:	b2db      	uxtb	r3, r3
 8006170:	2b20      	cmp	r3, #32
 8006172:	d17c      	bne.n	800626e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d002      	beq.n	8006180 <HAL_UART_Transmit+0x2c>
 800617a:	88fb      	ldrh	r3, [r7, #6]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d101      	bne.n	8006184 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006180:	2301      	movs	r3, #1
 8006182:	e075      	b.n	8006270 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800618a:	2b01      	cmp	r3, #1
 800618c:	d101      	bne.n	8006192 <HAL_UART_Transmit+0x3e>
 800618e:	2302      	movs	r3, #2
 8006190:	e06e      	b.n	8006270 <HAL_UART_Transmit+0x11c>
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2201      	movs	r2, #1
 8006196:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2200      	movs	r2, #0
 800619e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2221      	movs	r2, #33	; 0x21
 80061a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80061a8:	f7fc fd4e 	bl	8002c48 <HAL_GetTick>
 80061ac:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	88fa      	ldrh	r2, [r7, #6]
 80061b2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	88fa      	ldrh	r2, [r7, #6]
 80061b8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061c2:	d108      	bne.n	80061d6 <HAL_UART_Transmit+0x82>
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d104      	bne.n	80061d6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80061cc:	2300      	movs	r3, #0
 80061ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	61bb      	str	r3, [r7, #24]
 80061d4:	e003      	b.n	80061de <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061da:	2300      	movs	r3, #0
 80061dc:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80061e6:	e02a      	b.n	800623e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	9300      	str	r3, [sp, #0]
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	2200      	movs	r2, #0
 80061f0:	2180      	movs	r1, #128	; 0x80
 80061f2:	68f8      	ldr	r0, [r7, #12]
 80061f4:	f000 f840 	bl	8006278 <UART_WaitOnFlagUntilTimeout>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d001      	beq.n	8006202 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80061fe:	2303      	movs	r3, #3
 8006200:	e036      	b.n	8006270 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d10b      	bne.n	8006220 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	881b      	ldrh	r3, [r3, #0]
 800620c:	461a      	mov	r2, r3
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006216:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	3302      	adds	r3, #2
 800621c:	61bb      	str	r3, [r7, #24]
 800621e:	e007      	b.n	8006230 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	781a      	ldrb	r2, [r3, #0]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	3301      	adds	r3, #1
 800622e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006234:	b29b      	uxth	r3, r3
 8006236:	3b01      	subs	r3, #1
 8006238:	b29a      	uxth	r2, r3
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006242:	b29b      	uxth	r3, r3
 8006244:	2b00      	cmp	r3, #0
 8006246:	d1cf      	bne.n	80061e8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	9300      	str	r3, [sp, #0]
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	2200      	movs	r2, #0
 8006250:	2140      	movs	r1, #64	; 0x40
 8006252:	68f8      	ldr	r0, [r7, #12]
 8006254:	f000 f810 	bl	8006278 <UART_WaitOnFlagUntilTimeout>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d001      	beq.n	8006262 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	e006      	b.n	8006270 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2220      	movs	r2, #32
 8006266:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800626a:	2300      	movs	r3, #0
 800626c:	e000      	b.n	8006270 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800626e:	2302      	movs	r3, #2
  }
}
 8006270:	4618      	mov	r0, r3
 8006272:	3720      	adds	r7, #32
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	603b      	str	r3, [r7, #0]
 8006284:	4613      	mov	r3, r2
 8006286:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006288:	e02c      	b.n	80062e4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006290:	d028      	beq.n	80062e4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d007      	beq.n	80062a8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006298:	f7fc fcd6 	bl	8002c48 <HAL_GetTick>
 800629c:	4602      	mov	r2, r0
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	69ba      	ldr	r2, [r7, #24]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d21d      	bcs.n	80062e4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	68da      	ldr	r2, [r3, #12]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80062b6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	695a      	ldr	r2, [r3, #20]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f022 0201 	bic.w	r2, r2, #1
 80062c6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2220      	movs	r2, #32
 80062cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2220      	movs	r2, #32
 80062d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2200      	movs	r2, #0
 80062dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80062e0:	2303      	movs	r3, #3
 80062e2:	e00f      	b.n	8006304 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	4013      	ands	r3, r2
 80062ee:	68ba      	ldr	r2, [r7, #8]
 80062f0:	429a      	cmp	r2, r3
 80062f2:	bf0c      	ite	eq
 80062f4:	2301      	moveq	r3, #1
 80062f6:	2300      	movne	r3, #0
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	461a      	mov	r2, r3
 80062fc:	79fb      	ldrb	r3, [r7, #7]
 80062fe:	429a      	cmp	r2, r3
 8006300:	d0c3      	beq.n	800628a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	3710      	adds	r7, #16
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	691b      	ldr	r3, [r3, #16]
 800631a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	68da      	ldr	r2, [r3, #12]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	430a      	orrs	r2, r1
 8006328:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	689a      	ldr	r2, [r3, #8]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	431a      	orrs	r2, r3
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	695b      	ldr	r3, [r3, #20]
 8006338:	4313      	orrs	r3, r2
 800633a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006346:	f023 030c 	bic.w	r3, r3, #12
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	6812      	ldr	r2, [r2, #0]
 800634e:	68b9      	ldr	r1, [r7, #8]
 8006350:	430b      	orrs	r3, r1
 8006352:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	695b      	ldr	r3, [r3, #20]
 800635a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	699a      	ldr	r2, [r3, #24]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	430a      	orrs	r2, r1
 8006368:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a2c      	ldr	r2, [pc, #176]	; (8006420 <UART_SetConfig+0x114>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d103      	bne.n	800637c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006374:	f7fe fb42 	bl	80049fc <HAL_RCC_GetPCLK2Freq>
 8006378:	60f8      	str	r0, [r7, #12]
 800637a:	e002      	b.n	8006382 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800637c:	f7fe fb2a 	bl	80049d4 <HAL_RCC_GetPCLK1Freq>
 8006380:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	4613      	mov	r3, r2
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	4413      	add	r3, r2
 800638a:	009a      	lsls	r2, r3, #2
 800638c:	441a      	add	r2, r3
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	fbb2 f3f3 	udiv	r3, r2, r3
 8006398:	4a22      	ldr	r2, [pc, #136]	; (8006424 <UART_SetConfig+0x118>)
 800639a:	fba2 2303 	umull	r2, r3, r2, r3
 800639e:	095b      	lsrs	r3, r3, #5
 80063a0:	0119      	lsls	r1, r3, #4
 80063a2:	68fa      	ldr	r2, [r7, #12]
 80063a4:	4613      	mov	r3, r2
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	4413      	add	r3, r2
 80063aa:	009a      	lsls	r2, r3, #2
 80063ac:	441a      	add	r2, r3
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80063b8:	4b1a      	ldr	r3, [pc, #104]	; (8006424 <UART_SetConfig+0x118>)
 80063ba:	fba3 0302 	umull	r0, r3, r3, r2
 80063be:	095b      	lsrs	r3, r3, #5
 80063c0:	2064      	movs	r0, #100	; 0x64
 80063c2:	fb00 f303 	mul.w	r3, r0, r3
 80063c6:	1ad3      	subs	r3, r2, r3
 80063c8:	011b      	lsls	r3, r3, #4
 80063ca:	3332      	adds	r3, #50	; 0x32
 80063cc:	4a15      	ldr	r2, [pc, #84]	; (8006424 <UART_SetConfig+0x118>)
 80063ce:	fba2 2303 	umull	r2, r3, r2, r3
 80063d2:	095b      	lsrs	r3, r3, #5
 80063d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063d8:	4419      	add	r1, r3
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	4613      	mov	r3, r2
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	4413      	add	r3, r2
 80063e2:	009a      	lsls	r2, r3, #2
 80063e4:	441a      	add	r2, r3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80063f0:	4b0c      	ldr	r3, [pc, #48]	; (8006424 <UART_SetConfig+0x118>)
 80063f2:	fba3 0302 	umull	r0, r3, r3, r2
 80063f6:	095b      	lsrs	r3, r3, #5
 80063f8:	2064      	movs	r0, #100	; 0x64
 80063fa:	fb00 f303 	mul.w	r3, r0, r3
 80063fe:	1ad3      	subs	r3, r2, r3
 8006400:	011b      	lsls	r3, r3, #4
 8006402:	3332      	adds	r3, #50	; 0x32
 8006404:	4a07      	ldr	r2, [pc, #28]	; (8006424 <UART_SetConfig+0x118>)
 8006406:	fba2 2303 	umull	r2, r3, r2, r3
 800640a:	095b      	lsrs	r3, r3, #5
 800640c:	f003 020f 	and.w	r2, r3, #15
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	440a      	add	r2, r1
 8006416:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006418:	bf00      	nop
 800641a:	3710      	adds	r7, #16
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}
 8006420:	40013800 	.word	0x40013800
 8006424:	51eb851f 	.word	0x51eb851f

08006428 <_ZN10ControllerC1Ev>:
    float angles[3];
    float rates[3];
    float bias[3];
};

Controller::Controller() {}
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4a3d      	ldr	r2, [pc, #244]	; (8006528 <_ZN10ControllerC1Ev+0x100>)
 8006434:	651a      	str	r2, [r3, #80]	; 0x50
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a3c      	ldr	r2, [pc, #240]	; (800652c <_ZN10ControllerC1Ev+0x104>)
 800643a:	655a      	str	r2, [r3, #84]	; 0x54
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	22c8      	movs	r2, #200	; 0xc8
 8006440:	659a      	str	r2, [r3, #88]	; 0x58
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006446:	4618      	mov	r0, r3
 8006448:	f7fa fc0a 	bl	8000c60 <__aeabi_i2f>
 800644c:	4603      	mov	r3, r0
 800644e:	4619      	mov	r1, r3
 8006450:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006454:	f7fa fd0c 	bl	8000e70 <__aeabi_fdiv>
 8006458:	4603      	mov	r3, r0
 800645a:	461a      	mov	r2, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	65da      	str	r2, [r3, #92]	; 0x5c
 8006460:	6879      	ldr	r1, [r7, #4]
 8006462:	a329      	add	r3, pc, #164	; (adr r3, 8006508 <_ZN10ControllerC1Ev+0xe0>)
 8006464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006468:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 800646c:	6879      	ldr	r1, [r7, #4]
 800646e:	a328      	add	r3, pc, #160	; (adr r3, 8006510 <_ZN10ControllerC1Ev+0xe8>)
 8006470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006474:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8006478:	6879      	ldr	r1, [r7, #4]
 800647a:	a327      	add	r3, pc, #156	; (adr r3, 8006518 <_ZN10ControllerC1Ev+0xf0>)
 800647c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006480:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800648a:	6879      	ldr	r1, [r7, #4]
 800648c:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8006496:	6879      	ldr	r1, [r7, #4]
 8006498:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80064a2:	6879      	ldr	r1, [r7, #4]
 80064a4:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
 80064a8:	6879      	ldr	r1, [r7, #4]
 80064aa:	f04f 0200 	mov.w	r2, #0
 80064ae:	4b20      	ldr	r3, [pc, #128]	; (8006530 <_ZN10ControllerC1Ev+0x108>)
 80064b0:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064b8:	4618      	mov	r0, r3
 80064ba:	f7f9 ff9b 	bl	80003f4 <__aeabi_i2d>
 80064be:	a318      	add	r3, pc, #96	; (adr r3, 8006520 <_ZN10ControllerC1Ev+0xf8>)
 80064c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c4:	f7fa f800 	bl	80004c8 <__aeabi_dmul>
 80064c8:	4602      	mov	r2, r0
 80064ca:	460b      	mov	r3, r1
 80064cc:	4610      	mov	r0, r2
 80064ce:	4619      	mov	r1, r3
 80064d0:	f7fa fabc 	bl	8000a4c <__aeabi_d2f>
 80064d4:	4602      	mov	r2, r0
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	33d0      	adds	r3, #208	; 0xd0
 80064e0:	4618      	mov	r0, r3
 80064e2:	f000 ff3f 	bl	8007364 <_ZN3PIDC1Ev>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80064ec:	4618      	mov	r0, r3
 80064ee:	f000 ff39 	bl	8007364 <_ZN3PIDC1Ev>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 80064f8:	4618      	mov	r0, r3
 80064fa:	f000 ff33 	bl	8007364 <_ZN3PIDC1Ev>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4618      	mov	r0, r3
 8006502:	3708      	adds	r7, #8
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}
 8006508:	33333333 	.word	0x33333333
 800650c:	3fd33333 	.word	0x3fd33333
 8006510:	d2f1a9fc 	.word	0xd2f1a9fc
 8006514:	3f80624d 	.word	0x3f80624d
 8006518:	47ae147b 	.word	0x47ae147b
 800651c:	3f747ae1 	.word	0x3f747ae1
 8006520:	eb851eb8 	.word	0xeb851eb8
 8006524:	3f9eb851 	.word	0x3f9eb851
 8006528:	44c1c000 	.word	0x44c1c000
 800652c:	42654ca3 	.word	0x42654ca3
 8006530:	40120000 	.word	0x40120000

08006534 <_ZN10Controller3RunE5stateS0_i>:

std::vector<double> Controller::Run (struct state state, struct state state_des, int thr) {
 8006534:	b082      	sub	sp, #8
 8006536:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800653a:	b09f      	sub	sp, #124	; 0x7c
 800653c:	af08      	add	r7, sp, #32
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8006546:	e881 000c 	stmia.w	r1, {r2, r3}
        //printf("\ngyroX: %.2f",gyro[0]);
        //printf("\naccX: %.2f",acc[0]);
        
        roll  = state.angles[0];
 800654a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800654e:	4618      	mov	r0, r3
 8006550:	f7f9 ff62 	bl	8000418 <__aeabi_f2d>
 8006554:	4602      	mov	r2, r0
 8006556:	460b      	mov	r3, r1
 8006558:	68b9      	ldr	r1, [r7, #8]
 800655a:	e9c1 2304 	strd	r2, r3, [r1, #16]
        pitch = state.angles[1];
 800655e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006562:	4618      	mov	r0, r3
 8006564:	f7f9 ff58 	bl	8000418 <__aeabi_f2d>
 8006568:	4602      	mov	r2, r0
 800656a:	460b      	mov	r3, r1
 800656c:	68b9      	ldr	r1, [r7, #8]
 800656e:	e9c1 2306 	strd	r2, r3, [r1, #24]
        yaw    = state.angles[2];
 8006572:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006576:	4618      	mov	r0, r3
 8006578:	f7f9 ff4e 	bl	8000418 <__aeabi_f2d>
 800657c:	4602      	mov	r2, r0
 800657e:	460b      	mov	r3, r1
 8006580:	68b9      	ldr	r1, [r7, #8]
 8006582:	e9c1 2308 	strd	r2, r3, [r1, #32]
        //printf("\nroll: %.2f",roll);
        //printf("\npitch: %.2f",pitch);

        roll_rate  = state.rates[0];
 8006586:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800658a:	4618      	mov	r0, r3
 800658c:	f7f9 ff44 	bl	8000418 <__aeabi_f2d>
 8006590:	4602      	mov	r2, r0
 8006592:	460b      	mov	r3, r1
 8006594:	68b9      	ldr	r1, [r7, #8]
 8006596:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
        pitch_rate = state.rates[1];
 800659a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800659e:	4618      	mov	r0, r3
 80065a0:	f7f9 ff3a 	bl	8000418 <__aeabi_f2d>
 80065a4:	4602      	mov	r2, r0
 80065a6:	460b      	mov	r3, r1
 80065a8:	68b9      	ldr	r1, [r7, #8]
 80065aa:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
        yaw_rate   = state.rates[2];
 80065ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80065b2:	4618      	mov	r0, r3
 80065b4:	f7f9 ff30 	bl	8000418 <__aeabi_f2d>
 80065b8:	4602      	mov	r2, r0
 80065ba:	460b      	mov	r3, r1
 80065bc:	68b9      	ldr	r1, [r7, #8]
 80065be:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

        roll_bias = state.bias[0];
 80065c2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	605a      	str	r2, [r3, #4]
        pitch_bias = state.bias[1];
 80065ca:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	601a      	str	r2, [r3, #0]
        yaw_bias = state.bias[2];
 80065d2:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	609a      	str	r2, [r3, #8]
        
        float roll_des     = state_des.angles[0];
 80065da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80065de:	657b      	str	r3, [r7, #84]	; 0x54
        float pitch_des 	 = state_des.angles[1];
 80065e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80065e4:	653b      	str	r3, [r7, #80]	; 0x50
        float yaw_rate_des = state_des.rates[2];
 80065e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80065ea:	64fb      	str	r3, [r7, #76]	; 0x4c

    roll_rate_des = pid_roll.P_Angle(roll_des,roll, Kp_angle);
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	f103 06d0 	add.w	r6, r3, #208	; 0xd0
 80065f2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80065f4:	f7f9 ff10 	bl	8000418 <__aeabi_f2d>
 80065f8:	4680      	mov	r8, r0
 80065fa:	4689      	mov	r9, r1
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006608:	4618      	mov	r0, r3
 800660a:	f7f9 ff05 	bl	8000418 <__aeabi_f2d>
 800660e:	4602      	mov	r2, r0
 8006610:	460b      	mov	r3, r1
 8006612:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006616:	e9cd 4500 	strd	r4, r5, [sp]
 800661a:	4642      	mov	r2, r8
 800661c:	464b      	mov	r3, r9
 800661e:	4630      	mov	r0, r6
 8006620:	f000 fed0 	bl	80073c4 <_ZN3PID7P_AngleEddd>
 8006624:	4602      	mov	r2, r0
 8006626:	460b      	mov	r3, r1
 8006628:	4610      	mov	r0, r2
 800662a:	4619      	mov	r1, r3
 800662c:	f7fa fa0e 	bl	8000a4c <__aeabi_d2f>
 8006630:	4602      	mov	r2, r0
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    pitch_rate_des = pid_pitch.P_Angle(pitch_des,pitch, Kp_angle);
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	f503 76a0 	add.w	r6, r3, #320	; 0x140
 800663e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006640:	f7f9 feea 	bl	8000418 <__aeabi_f2d>
 8006644:	4680      	mov	r8, r0
 8006646:	4689      	mov	r9, r1
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006654:	4618      	mov	r0, r3
 8006656:	f7f9 fedf 	bl	8000418 <__aeabi_f2d>
 800665a:	4602      	mov	r2, r0
 800665c:	460b      	mov	r3, r1
 800665e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006662:	e9cd 4500 	strd	r4, r5, [sp]
 8006666:	4642      	mov	r2, r8
 8006668:	464b      	mov	r3, r9
 800666a:	4630      	mov	r0, r6
 800666c:	f000 feaa 	bl	80073c4 <_ZN3PID7P_AngleEddd>
 8006670:	4602      	mov	r2, r0
 8006672:	460b      	mov	r3, r1
 8006674:	4610      	mov	r0, r2
 8006676:	4619      	mov	r1, r3
 8006678:	f7fa f9e8 	bl	8000a4c <__aeabi_d2f>
 800667c:	4602      	mov	r2, r0
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
/*
    //printf("\nroll_rate_des: %.2f",roll_rate_des);
    //printf("\npitch_rate_des: %.2f",pitch_rate_des);
    //printf("\nyaw_rate_des: %.2f",yaw_rate_des);
*/  //printf("\nroll_rate_des: %.2f",roll_rate_des);
    pd_roll  = pid_roll.PD_Rate(roll_rate_des,roll_rate, Kp_roll, Ki_roll, Kd_roll);
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	33d0      	adds	r3, #208	; 0xd0
 8006688:	607b      	str	r3, [r7, #4]
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8006690:	4618      	mov	r0, r3
 8006692:	f7f9 fec1 	bl	8000418 <__aeabi_f2d>
 8006696:	4682      	mov	sl, r0
 8006698:	468b      	mov	fp, r1
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80066a0:	68b9      	ldr	r1, [r7, #8]
 80066a2:	e9d1 0118 	ldrd	r0, r1, [r1, #96]	; 0x60
 80066a6:	68bc      	ldr	r4, [r7, #8]
 80066a8:	f104 0568 	add.w	r5, r4, #104	; 0x68
 80066ac:	e9d5 4500 	ldrd	r4, r5, [r5]
 80066b0:	68be      	ldr	r6, [r7, #8]
 80066b2:	e9d6 891c 	ldrd	r8, r9, [r6, #112]	; 0x70
 80066b6:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80066ba:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80066be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066c2:	e9cd 2300 	strd	r2, r3, [sp]
 80066c6:	4652      	mov	r2, sl
 80066c8:	465b      	mov	r3, fp
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 fe9c 	bl	8007408 <_ZN3PID7PD_RateEddddd>
 80066d0:	4602      	mov	r2, r0
 80066d2:	460b      	mov	r3, r1
 80066d4:	68b9      	ldr	r1, [r7, #8]
 80066d6:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0
    //printf("\npitch_rate_des: %.2f",pitch_rate_des);
    pd_pitch = pid_pitch.PD_Rate(pitch_rate_des,pitch_rate,Kp_pitch,Ki_pitch,Kd_pitch);
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80066e0:	607b      	str	r3, [r7, #4]
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80066e8:	4618      	mov	r0, r3
 80066ea:	f7f9 fe95 	bl	8000418 <__aeabi_f2d>
 80066ee:	4682      	mov	sl, r0
 80066f0:	468b      	mov	fp, r1
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80066f8:	68b9      	ldr	r1, [r7, #8]
 80066fa:	e9d1 011e 	ldrd	r0, r1, [r1, #120]	; 0x78
 80066fe:	68bc      	ldr	r4, [r7, #8]
 8006700:	f104 0580 	add.w	r5, r4, #128	; 0x80
 8006704:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006708:	68be      	ldr	r6, [r7, #8]
 800670a:	e9d6 8922 	ldrd	r8, r9, [r6, #136]	; 0x88
 800670e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8006712:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8006716:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800671a:	e9cd 2300 	strd	r2, r3, [sp]
 800671e:	4652      	mov	r2, sl
 8006720:	465b      	mov	r3, fp
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 fe70 	bl	8007408 <_ZN3PID7PD_RateEddddd>
 8006728:	4602      	mov	r2, r0
 800672a:	460b      	mov	r3, r1
 800672c:	68b9      	ldr	r1, [r7, #8]
 800672e:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
    p_yaw    = pid_yaw.P_Rate_Yaw(yaw_rate_des,yaw_rate,Kp_yaw);
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	f503 76d8 	add.w	r6, r3, #432	; 0x1b0
 8006738:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800673a:	f7f9 fe6d 	bl	8000418 <__aeabi_f2d>
 800673e:	4604      	mov	r4, r0
 8006740:	460d      	mov	r5, r1
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8006748:	68b9      	ldr	r1, [r7, #8]
 800674a:	e9d1 0124 	ldrd	r0, r1, [r1, #144]	; 0x90
 800674e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006752:	e9cd 2300 	strd	r2, r3, [sp]
 8006756:	4622      	mov	r2, r4
 8006758:	462b      	mov	r3, r5
 800675a:	4630      	mov	r0, r6
 800675c:	f000 ff9d 	bl	800769a <_ZN3PID10P_Rate_YawEddd>
 8006760:	4602      	mov	r2, r0
 8006762:	460b      	mov	r3, r1
 8006764:	68b9      	ldr	r1, [r7, #8]
 8006766:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
    //printf("\npd_pitch: %.2f",pd_pitch);
    //printf("\np_yaw: %.2f",p_yaw);

    ////printf("\nst: %.3f",st);

    thr = pid_roll.Sat(thr, 1800, 1000);
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	f103 04d0 	add.w	r4, r3, #208	; 0xd0
 8006770:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8006774:	f7f9 fe3e 	bl	80003f4 <__aeabi_i2d>
 8006778:	4602      	mov	r2, r0
 800677a:	460b      	mov	r3, r1
 800677c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006780:	9101      	str	r1, [sp, #4]
 8006782:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 8006786:	9100      	str	r1, [sp, #0]
 8006788:	4620      	mov	r0, r4
 800678a:	f001 f82b 	bl	80077e4 <_ZN3PID3SatEdii>
 800678e:	4602      	mov	r2, r0
 8006790:	460b      	mov	r3, r1
 8006792:	4610      	mov	r0, r2
 8006794:	4619      	mov	r1, r3
 8006796:	f7fa f931 	bl	80009fc <__aeabi_d2iz>
 800679a:	4603      	mov	r3, r0
 800679c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

    int pwm1 = thr + pd_pitch - pd_roll  - p_yaw;
 80067a0:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80067a4:	f7f9 fe26 	bl	80003f4 <__aeabi_i2d>
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 80067ae:	f7f9 fcd5 	bl	800015c <__adddf3>
 80067b2:	4602      	mov	r2, r0
 80067b4:	460b      	mov	r3, r1
 80067b6:	4610      	mov	r0, r2
 80067b8:	4619      	mov	r1, r3
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	; 0xb0
 80067c0:	f7f9 fcca 	bl	8000158 <__aeabi_dsub>
 80067c4:	4602      	mov	r2, r0
 80067c6:	460b      	mov	r3, r1
 80067c8:	4610      	mov	r0, r2
 80067ca:	4619      	mov	r1, r3
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	; 0xc0
 80067d2:	f7f9 fcc1 	bl	8000158 <__aeabi_dsub>
 80067d6:	4602      	mov	r2, r0
 80067d8:	460b      	mov	r3, r1
 80067da:	4610      	mov	r0, r2
 80067dc:	4619      	mov	r1, r3
 80067de:	f7fa f90d 	bl	80009fc <__aeabi_d2iz>
 80067e2:	4603      	mov	r3, r0
 80067e4:	64bb      	str	r3, [r7, #72]	; 0x48
    int pwm2 = thr - pd_pitch + pd_roll  - p_yaw ;
 80067e6:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80067ea:	f7f9 fe03 	bl	80003f4 <__aeabi_i2d>
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 80067f4:	f7f9 fcb0 	bl	8000158 <__aeabi_dsub>
 80067f8:	4602      	mov	r2, r0
 80067fa:	460b      	mov	r3, r1
 80067fc:	4610      	mov	r0, r2
 80067fe:	4619      	mov	r1, r3
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	; 0xb0
 8006806:	f7f9 fca9 	bl	800015c <__adddf3>
 800680a:	4602      	mov	r2, r0
 800680c:	460b      	mov	r3, r1
 800680e:	4610      	mov	r0, r2
 8006810:	4619      	mov	r1, r3
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	; 0xc0
 8006818:	f7f9 fc9e 	bl	8000158 <__aeabi_dsub>
 800681c:	4602      	mov	r2, r0
 800681e:	460b      	mov	r3, r1
 8006820:	4610      	mov	r0, r2
 8006822:	4619      	mov	r1, r3
 8006824:	f7fa f8ea 	bl	80009fc <__aeabi_d2iz>
 8006828:	4603      	mov	r3, r0
 800682a:	647b      	str	r3, [r7, #68]	; 0x44
    int pwm3 = thr + pd_pitch + pd_roll  + p_yaw ;
 800682c:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8006830:	f7f9 fde0 	bl	80003f4 <__aeabi_i2d>
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 800683a:	f7f9 fc8f 	bl	800015c <__adddf3>
 800683e:	4602      	mov	r2, r0
 8006840:	460b      	mov	r3, r1
 8006842:	4610      	mov	r0, r2
 8006844:	4619      	mov	r1, r3
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	; 0xb0
 800684c:	f7f9 fc86 	bl	800015c <__adddf3>
 8006850:	4602      	mov	r2, r0
 8006852:	460b      	mov	r3, r1
 8006854:	4610      	mov	r0, r2
 8006856:	4619      	mov	r1, r3
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	; 0xc0
 800685e:	f7f9 fc7d 	bl	800015c <__adddf3>
 8006862:	4602      	mov	r2, r0
 8006864:	460b      	mov	r3, r1
 8006866:	4610      	mov	r0, r2
 8006868:	4619      	mov	r1, r3
 800686a:	f7fa f8c7 	bl	80009fc <__aeabi_d2iz>
 800686e:	4603      	mov	r3, r0
 8006870:	643b      	str	r3, [r7, #64]	; 0x40
    int pwm4 = thr - pd_pitch - pd_roll  + p_yaw ;
 8006872:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8006876:	f7f9 fdbd 	bl	80003f4 <__aeabi_i2d>
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 8006880:	f7f9 fc6a 	bl	8000158 <__aeabi_dsub>
 8006884:	4602      	mov	r2, r0
 8006886:	460b      	mov	r3, r1
 8006888:	4610      	mov	r0, r2
 800688a:	4619      	mov	r1, r3
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	; 0xb0
 8006892:	f7f9 fc61 	bl	8000158 <__aeabi_dsub>
 8006896:	4602      	mov	r2, r0
 8006898:	460b      	mov	r3, r1
 800689a:	4610      	mov	r0, r2
 800689c:	4619      	mov	r1, r3
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	; 0xc0
 80068a4:	f7f9 fc5a 	bl	800015c <__adddf3>
 80068a8:	4602      	mov	r2, r0
 80068aa:	460b      	mov	r3, r1
 80068ac:	4610      	mov	r0, r2
 80068ae:	4619      	mov	r1, r3
 80068b0:	f7fa f8a4 	bl	80009fc <__aeabi_d2iz>
 80068b4:	4603      	mov	r3, r0
 80068b6:	63fb      	str	r3, [r7, #60]	; 0x3c


    //Saturate pwm values
    pwm1 = (int)pid_roll.Sat(pwm1,PWM_UPPER,PWM_LOWER,thr);
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	f103 04d0 	add.w	r4, r3, #208	; 0xd0
 80068be:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80068c0:	f7f9 fd98 	bl	80003f4 <__aeabi_i2d>
 80068c4:	4602      	mov	r2, r0
 80068c6:	460b      	mov	r3, r1
 80068c8:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80068cc:	9102      	str	r1, [sp, #8]
 80068ce:	f240 414c 	movw	r1, #1100	; 0x44c
 80068d2:	9101      	str	r1, [sp, #4]
 80068d4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80068d8:	9100      	str	r1, [sp, #0]
 80068da:	4620      	mov	r0, r4
 80068dc:	f000 ff3c 	bl	8007758 <_ZN3PID3SatEdiii>
 80068e0:	4602      	mov	r2, r0
 80068e2:	460b      	mov	r3, r1
 80068e4:	4610      	mov	r0, r2
 80068e6:	4619      	mov	r1, r3
 80068e8:	f7fa f888 	bl	80009fc <__aeabi_d2iz>
 80068ec:	4603      	mov	r3, r0
 80068ee:	64bb      	str	r3, [r7, #72]	; 0x48
    pwm2 = (int)pid_roll.Sat(pwm2,PWM_UPPER,PWM_LOWER,thr);
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	f103 04d0 	add.w	r4, r3, #208	; 0xd0
 80068f6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80068f8:	f7f9 fd7c 	bl	80003f4 <__aeabi_i2d>
 80068fc:	4602      	mov	r2, r0
 80068fe:	460b      	mov	r3, r1
 8006900:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8006904:	9102      	str	r1, [sp, #8]
 8006906:	f240 414c 	movw	r1, #1100	; 0x44c
 800690a:	9101      	str	r1, [sp, #4]
 800690c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006910:	9100      	str	r1, [sp, #0]
 8006912:	4620      	mov	r0, r4
 8006914:	f000 ff20 	bl	8007758 <_ZN3PID3SatEdiii>
 8006918:	4602      	mov	r2, r0
 800691a:	460b      	mov	r3, r1
 800691c:	4610      	mov	r0, r2
 800691e:	4619      	mov	r1, r3
 8006920:	f7fa f86c 	bl	80009fc <__aeabi_d2iz>
 8006924:	4603      	mov	r3, r0
 8006926:	647b      	str	r3, [r7, #68]	; 0x44
    pwm3 = (int)pid_roll.Sat(pwm3,PWM_UPPER,PWM_LOWER,thr);
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	f103 04d0 	add.w	r4, r3, #208	; 0xd0
 800692e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8006930:	f7f9 fd60 	bl	80003f4 <__aeabi_i2d>
 8006934:	4602      	mov	r2, r0
 8006936:	460b      	mov	r3, r1
 8006938:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800693c:	9102      	str	r1, [sp, #8]
 800693e:	f240 414c 	movw	r1, #1100	; 0x44c
 8006942:	9101      	str	r1, [sp, #4]
 8006944:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006948:	9100      	str	r1, [sp, #0]
 800694a:	4620      	mov	r0, r4
 800694c:	f000 ff04 	bl	8007758 <_ZN3PID3SatEdiii>
 8006950:	4602      	mov	r2, r0
 8006952:	460b      	mov	r3, r1
 8006954:	4610      	mov	r0, r2
 8006956:	4619      	mov	r1, r3
 8006958:	f7fa f850 	bl	80009fc <__aeabi_d2iz>
 800695c:	4603      	mov	r3, r0
 800695e:	643b      	str	r3, [r7, #64]	; 0x40
    pwm4 = (int)pid_roll.Sat(pwm4,PWM_UPPER,PWM_LOWER,thr);
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	f103 04d0 	add.w	r4, r3, #208	; 0xd0
 8006966:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006968:	f7f9 fd44 	bl	80003f4 <__aeabi_i2d>
 800696c:	4602      	mov	r2, r0
 800696e:	460b      	mov	r3, r1
 8006970:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8006974:	9102      	str	r1, [sp, #8]
 8006976:	f240 414c 	movw	r1, #1100	; 0x44c
 800697a:	9101      	str	r1, [sp, #4]
 800697c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006980:	9100      	str	r1, [sp, #0]
 8006982:	4620      	mov	r0, r4
 8006984:	f000 fee8 	bl	8007758 <_ZN3PID3SatEdiii>
 8006988:	4602      	mov	r2, r0
 800698a:	460b      	mov	r3, r1
 800698c:	4610      	mov	r0, r2
 800698e:	4619      	mov	r1, r3
 8006990:	f7fa f834 	bl	80009fc <__aeabi_d2iz>
 8006994:	4603      	mov	r3, r0
 8006996:	63fb      	str	r3, [r7, #60]	; 0x3c

    //Convert pwm to motor speed 
    w1 = pid_roll.pwm2mot(pwm1, 1);
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	33d0      	adds	r3, #208	; 0xd0
 800699c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800699e:	b291      	uxth	r1, r2
 80069a0:	2201      	movs	r2, #1
 80069a2:	4618      	mov	r0, r3
 80069a4:	f000 ffa8 	bl	80078f8 <_ZN3PID7pwm2motEti>
 80069a8:	4602      	mov	r2, r0
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	641a      	str	r2, [r3, #64]	; 0x40
    w2 = pid_roll.pwm2mot(pwm2, 1);
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	33d0      	adds	r3, #208	; 0xd0
 80069b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069b4:	b291      	uxth	r1, r2
 80069b6:	2201      	movs	r2, #1
 80069b8:	4618      	mov	r0, r3
 80069ba:	f000 ff9d 	bl	80078f8 <_ZN3PID7pwm2motEti>
 80069be:	4602      	mov	r2, r0
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	645a      	str	r2, [r3, #68]	; 0x44
    w3 = pid_roll.pwm2mot(pwm3,-1);
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	33d0      	adds	r3, #208	; 0xd0
 80069c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80069ca:	b291      	uxth	r1, r2
 80069cc:	f04f 32ff 	mov.w	r2, #4294967295
 80069d0:	4618      	mov	r0, r3
 80069d2:	f000 ff91 	bl	80078f8 <_ZN3PID7pwm2motEti>
 80069d6:	4602      	mov	r2, r0
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	649a      	str	r2, [r3, #72]	; 0x48
    w4 = pid_roll.pwm2mot(pwm4,-1);
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	33d0      	adds	r3, #208	; 0xd0
 80069e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80069e2:	b291      	uxth	r1, r2
 80069e4:	f04f 32ff 	mov.w	r2, #4294967295
 80069e8:	4618      	mov	r0, r3
 80069ea:	f000 ff85 	bl	80078f8 <_ZN3PID7pwm2motEti>
 80069ee:	4602      	mov	r2, r0
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	64da      	str	r2, [r3, #76]	; 0x4c


    std::vector<double> controller_output = 	{w1,w2,w3,w4};
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f8:	4618      	mov	r0, r3
 80069fa:	f7f9 fd0d 	bl	8000418 <__aeabi_f2d>
 80069fe:	4602      	mov	r2, r0
 8006a00:	460b      	mov	r3, r1
 8006a02:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f7f9 fd04 	bl	8000418 <__aeabi_f2d>
 8006a10:	4602      	mov	r2, r0
 8006a12:	460b      	mov	r3, r1
 8006a14:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f7f9 fcfb 	bl	8000418 <__aeabi_f2d>
 8006a22:	4602      	mov	r2, r0
 8006a24:	460b      	mov	r3, r1
 8006a26:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f7f9 fcf2 	bl	8000418 <__aeabi_f2d>
 8006a34:	4602      	mov	r2, r0
 8006a36:	460b      	mov	r3, r1
 8006a38:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8006a3c:	f107 0318 	add.w	r3, r7, #24
 8006a40:	613b      	str	r3, [r7, #16]
 8006a42:	2304      	movs	r3, #4
 8006a44:	617b      	str	r3, [r7, #20]
 8006a46:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f7fb fc84 	bl	8002358 <_ZNSaIdEC1Ev>
 8006a50:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006a54:	f107 0210 	add.w	r2, r7, #16
 8006a58:	ca06      	ldmia	r2, {r1, r2}
 8006a5a:	68f8      	ldr	r0, [r7, #12]
 8006a5c:	f000 f837 	bl	8006ace <_ZNSt6vectorIdSaIdEEC1ESt16initializer_listIdERKS0_>
 8006a60:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006a64:	4618      	mov	r0, r3
 8006a66:	f7fb fc22 	bl	80022ae <_ZNSaIdED1Ev>
    controller_output_pwm[0] = pwm1;
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a6e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    controller_output_pwm[1] = pwm2;
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a76:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    controller_output_pwm[2] = pwm3;
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a7e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    controller_output_pwm[3] = pwm4;
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006a86:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

    return controller_output;
 8006a8a:	bf00      	nop
}
 8006a8c:	68f8      	ldr	r0, [r7, #12]
 8006a8e:	375c      	adds	r7, #92	; 0x5c
 8006a90:	46bd      	mov	sp, r7
 8006a92:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a96:	b002      	add	sp, #8
 8006a98:	4770      	bx	lr

08006a9a <_ZN10ControllerD1Ev>:

Controller::~Controller() {}
 8006a9a:	b580      	push	{r7, lr}
 8006a9c:	b082      	sub	sp, #8
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f000 ff6d 	bl	8007988 <_ZN3PIDD1Ev>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f000 ff67 	bl	8007988 <_ZN3PIDD1Ev>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	33d0      	adds	r3, #208	; 0xd0
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f000 ff62 	bl	8007988 <_ZN3PIDD1Ev>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3708      	adds	r7, #8
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}

08006ace <_ZNSt6vectorIdSaIdEEC1ESt16initializer_listIdERKS0_>:
      vector(initializer_list<value_type> __l,
 8006ace:	b5b0      	push	{r4, r5, r7, lr}
 8006ad0:	b086      	sub	sp, #24
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	60f8      	str	r0, [r7, #12]
 8006ad6:	1d38      	adds	r0, r7, #4
 8006ad8:	e880 0006 	stmia.w	r0, {r1, r2}
 8006adc:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	6839      	ldr	r1, [r7, #0]
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f7fb fd75 	bl	80025d2 <_ZNSt12_Vector_baseIdSaIdEEC1ERKS0_>
	_M_range_initialize(__l.begin(), __l.end(),
 8006ae8:	1d3b      	adds	r3, r7, #4
 8006aea:	4618      	mov	r0, r3
 8006aec:	f000 f810 	bl	8006b10 <_ZNKSt16initializer_listIdE5beginEv>
 8006af0:	4604      	mov	r4, r0
 8006af2:	1d3b      	adds	r3, r7, #4
 8006af4:	4618      	mov	r0, r3
 8006af6:	f000 f816 	bl	8006b26 <_ZNKSt16initializer_listIdE3endEv>
 8006afa:	4602      	mov	r2, r0
 8006afc:	462b      	mov	r3, r5
 8006afe:	4621      	mov	r1, r4
 8006b00:	68f8      	ldr	r0, [r7, #12]
 8006b02:	f000 f822 	bl	8006b4a <_ZNSt6vectorIdSaIdEE19_M_range_initializeIPKdEEvT_S5_St20forward_iterator_tag>
      }
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3718      	adds	r7, #24
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bdb0      	pop	{r4, r5, r7, pc}

08006b10 <_ZNKSt16initializer_listIdE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	370c      	adds	r7, #12
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bc80      	pop	{r7}
 8006b24:	4770      	bx	lr

08006b26 <_ZNKSt16initializer_listIdE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8006b26:	b590      	push	{r4, r7, lr}
 8006b28:	b083      	sub	sp, #12
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f7ff ffee 	bl	8006b10 <_ZNKSt16initializer_listIdE5beginEv>
 8006b34:	4604      	mov	r4, r0
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 f840 	bl	8006bbc <_ZNKSt16initializer_listIdE4sizeEv>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	00db      	lsls	r3, r3, #3
 8006b40:	4423      	add	r3, r4
 8006b42:	4618      	mov	r0, r3
 8006b44:	370c      	adds	r7, #12
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd90      	pop	{r4, r7, pc}

08006b4a <_ZNSt6vectorIdSaIdEE19_M_range_initializeIPKdEEvT_S5_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 8006b4a:	b590      	push	{r4, r7, lr}
 8006b4c:	b087      	sub	sp, #28
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	60f8      	str	r0, [r7, #12]
 8006b52:	60b9      	str	r1, [r7, #8]
 8006b54:	607a      	str	r2, [r7, #4]
 8006b56:	703b      	strb	r3, [r7, #0]
	  const size_type __n = std::distance(__first, __last);
 8006b58:	6879      	ldr	r1, [r7, #4]
 8006b5a:	68b8      	ldr	r0, [r7, #8]
 8006b5c:	f000 f839 	bl	8006bd2 <_ZSt8distanceIPKdENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 8006b60:	4603      	mov	r3, r0
 8006b62:	617b      	str	r3, [r7, #20]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8006b64:	68fc      	ldr	r4, [r7, #12]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f7fb fc31 	bl	80023d0 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	4619      	mov	r1, r3
 8006b72:	6978      	ldr	r0, [r7, #20]
 8006b74:	f000 f842 	bl	8006bfc <_ZNSt6vectorIdSaIdEE17_S_check_init_lenEjRKS0_>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	4620      	mov	r0, r4
 8006b7e:	f000 f865 	bl	8006c4c <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEj>
 8006b82:	4602      	mov	r2, r0
	  this->_M_impl._M_start
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	00db      	lsls	r3, r3, #3
 8006b90:	441a      	add	r2, r3
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	609a      	str	r2, [r3, #8]
	    std::__uninitialized_copy_a(__first, __last,
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f7fb fc17 	bl	80023d0 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8006ba2:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 8006ba4:	4622      	mov	r2, r4
 8006ba6:	6879      	ldr	r1, [r7, #4]
 8006ba8:	68b8      	ldr	r0, [r7, #8]
 8006baa:	f000 f863 	bl	8006c74 <_ZSt22__uninitialized_copy_aIPKdPddET0_T_S4_S3_RSaIT1_E>
 8006bae:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	605a      	str	r2, [r3, #4]
	}
 8006bb4:	bf00      	nop
 8006bb6:	371c      	adds	r7, #28
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd90      	pop	{r4, r7, pc}

08006bbc <_ZNKSt16initializer_listIdE4sizeEv>:
      size() const noexcept { return _M_len; }
 8006bbc:	b480      	push	{r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	4618      	mov	r0, r3
 8006bca:	370c      	adds	r7, #12
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bc80      	pop	{r7}
 8006bd0:	4770      	bx	lr

08006bd2 <_ZSt8distanceIPKdENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8006bd2:	b5b0      	push	{r4, r5, r7, lr}
 8006bd4:	b084      	sub	sp, #16
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
 8006bda:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8006bdc:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8006bde:	1d3b      	adds	r3, r7, #4
 8006be0:	4618      	mov	r0, r3
 8006be2:	f000 f858 	bl	8006c96 <_ZSt19__iterator_categoryIPKdENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 8006be6:	462a      	mov	r2, r5
 8006be8:	6839      	ldr	r1, [r7, #0]
 8006bea:	4620      	mov	r0, r4
 8006bec:	f000 f85c 	bl	8006ca8 <_ZSt10__distanceIPKdENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 8006bf0:	4603      	mov	r3, r0
    }
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3710      	adds	r7, #16
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006bfc <_ZNSt6vectorIdSaIdEE17_S_check_init_lenEjRKS0_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 8006bfc:	b590      	push	{r4, r7, lr}
 8006bfe:	b085      	sub	sp, #20
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8006c06:	f107 030c 	add.w	r3, r7, #12
 8006c0a:	6839      	ldr	r1, [r7, #0]
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f7fb fcd2 	bl	80025b6 <_ZNSaIdEC1ERKS_>
 8006c12:	f107 030c 	add.w	r3, r7, #12
 8006c16:	4618      	mov	r0, r3
 8006c18:	f000 f855 	bl	8006cc6 <_ZNSt6vectorIdSaIdEE11_S_max_sizeERKS0_>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4293      	cmp	r3, r2
 8006c22:	bf8c      	ite	hi
 8006c24:	2301      	movhi	r3, #1
 8006c26:	2300      	movls	r3, #0
 8006c28:	b2dc      	uxtb	r4, r3
 8006c2a:	f107 030c 	add.w	r3, r7, #12
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f7fb fb3d 	bl	80022ae <_ZNSaIdED1Ev>
 8006c34:	2c00      	cmp	r4, #0
 8006c36:	d002      	beq.n	8006c3e <_ZNSt6vectorIdSaIdEE17_S_check_init_lenEjRKS0_+0x42>
	  __throw_length_error(
 8006c38:	4803      	ldr	r0, [pc, #12]	; (8006c48 <_ZNSt6vectorIdSaIdEE17_S_check_init_lenEjRKS0_+0x4c>)
 8006c3a:	f000 fec5 	bl	80079c8 <_ZSt20__throw_length_errorPKc>
	return __n;
 8006c3e:	687b      	ldr	r3, [r7, #4]
      }
 8006c40:	4618      	mov	r0, r3
 8006c42:	3714      	adds	r7, #20
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd90      	pop	{r4, r7, pc}
 8006c48:	08008428 	.word	0x08008428

08006c4c <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d006      	beq.n	8006c6a <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEj+0x1e>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6839      	ldr	r1, [r7, #0]
 8006c60:	4618      	mov	r0, r3
 8006c62:	f000 f84a 	bl	8006cfa <_ZNSt16allocator_traitsISaIdEE8allocateERS0_j>
 8006c66:	4603      	mov	r3, r0
 8006c68:	e000      	b.n	8006c6c <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEj+0x20>
 8006c6a:	2300      	movs	r3, #0
      }
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3708      	adds	r7, #8
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <_ZSt22__uninitialized_copy_aIPKdPddET0_T_S4_S3_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b084      	sub	sp, #16
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	60b9      	str	r1, [r7, #8]
 8006c7e:	607a      	str	r2, [r7, #4]
 8006c80:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	68b9      	ldr	r1, [r7, #8]
 8006c86:	68f8      	ldr	r0, [r7, #12]
 8006c88:	f000 f846 	bl	8006d18 <_ZSt18uninitialized_copyIPKdPdET0_T_S4_S3_>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3710      	adds	r7, #16
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}

08006c96 <_ZSt19__iterator_categoryIPKdENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8006c96:	b480      	push	{r7}
 8006c98:	b083      	sub	sp, #12
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	370c      	adds	r7, #12
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bc80      	pop	{r7}
 8006ca6:	4770      	bx	lr

08006ca8 <_ZSt10__distanceIPKdENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8006ca8:	b480      	push	{r7}
 8006caa:	b085      	sub	sp, #20
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	60f8      	str	r0, [r7, #12]
 8006cb0:	60b9      	str	r1, [r7, #8]
 8006cb2:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8006cb4:	68ba      	ldr	r2, [r7, #8]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	1ad3      	subs	r3, r2, r3
 8006cba:	10db      	asrs	r3, r3, #3
    }
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3714      	adds	r7, #20
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bc80      	pop	{r7}
 8006cc4:	4770      	bx	lr

08006cc6 <_ZNSt6vectorIdSaIdEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8006cc6:	b580      	push	{r7, lr}
 8006cc8:	b084      	sub	sp, #16
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8006cce:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8006cd2:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 f831 	bl	8006d3c <_ZNSt16allocator_traitsISaIdEE8max_sizeERKS0_>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8006cde:	f107 0208 	add.w	r2, r7, #8
 8006ce2:	f107 030c 	add.w	r3, r7, #12
 8006ce6:	4611      	mov	r1, r2
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f000 f833 	bl	8006d54 <_ZSt3minIjERKT_S2_S2_>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	681b      	ldr	r3, [r3, #0]
      }
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3710      	adds	r7, #16
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}

08006cfa <_ZNSt16allocator_traitsISaIdEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8006cfa:	b580      	push	{r7, lr}
 8006cfc:	b082      	sub	sp, #8
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
 8006d02:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8006d04:	2200      	movs	r2, #0
 8006d06:	6839      	ldr	r1, [r7, #0]
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f000 f836 	bl	8006d7a <_ZN9__gnu_cxx13new_allocatorIdE8allocateEjPKv>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	4618      	mov	r0, r3
 8006d12:	3708      	adds	r7, #8
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <_ZSt18uninitialized_copyIPKdPdET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b086      	sub	sp, #24
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	60b9      	str	r1, [r7, #8]
 8006d22:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8006d24:	2301      	movs	r3, #1
 8006d26:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8006d28:	687a      	ldr	r2, [r7, #4]
 8006d2a:	68b9      	ldr	r1, [r7, #8]
 8006d2c:	68f8      	ldr	r0, [r7, #12]
 8006d2e:	f000 f842 	bl	8006db6 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKdPdEET0_T_S6_S5_>
 8006d32:	4603      	mov	r3, r0
    }
 8006d34:	4618      	mov	r0, r3
 8006d36:	3718      	adds	r7, #24
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <_ZNSt16allocator_traitsISaIdEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a) noexcept
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b082      	sub	sp, #8
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f000 f846 	bl	8006dd6 <_ZNK9__gnu_cxx13new_allocatorIdE8max_sizeEv>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3708      	adds	r7, #8
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <_ZSt3minIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8006d54:	b480      	push	{r7}
 8006d56:	b083      	sub	sp, #12
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d201      	bcs.n	8006d6e <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	e000      	b.n	8006d70 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8006d6e:	687b      	ldr	r3, [r7, #4]
    }
 8006d70:	4618      	mov	r0, r3
 8006d72:	370c      	adds	r7, #12
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bc80      	pop	{r7}
 8006d78:	4770      	bx	lr

08006d7a <_ZN9__gnu_cxx13new_allocatorIdE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8006d7a:	b580      	push	{r7, lr}
 8006d7c:	b084      	sub	sp, #16
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	60f8      	str	r0, [r7, #12]
 8006d82:	60b9      	str	r1, [r7, #8]
 8006d84:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8006d86:	68f8      	ldr	r0, [r7, #12]
 8006d88:	f000 f825 	bl	8006dd6 <_ZNK9__gnu_cxx13new_allocatorIdE8max_sizeEv>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	4293      	cmp	r3, r2
 8006d92:	bf8c      	ite	hi
 8006d94:	2301      	movhi	r3, #1
 8006d96:	2300      	movls	r3, #0
 8006d98:	b2db      	uxtb	r3, r3
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d001      	beq.n	8006da2 <_ZN9__gnu_cxx13new_allocatorIdE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8006d9e:	f000 fe10 	bl	80079c2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	00db      	lsls	r3, r3, #3
 8006da6:	4618      	mov	r0, r3
 8006da8:	f000 fdfa 	bl	80079a0 <_Znwj>
 8006dac:	4603      	mov	r3, r0
      }
 8006dae:	4618      	mov	r0, r3
 8006db0:	3710      	adds	r7, #16
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKdPdEET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b084      	sub	sp, #16
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	60f8      	str	r0, [r7, #12]
 8006dbe:	60b9      	str	r1, [r7, #8]
 8006dc0:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	68b9      	ldr	r1, [r7, #8]
 8006dc6:	68f8      	ldr	r0, [r7, #12]
 8006dc8:	f000 f810 	bl	8006dec <_ZSt4copyIPKdPdET0_T_S4_S3_>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3710      	adds	r7, #16
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}

08006dd6 <_ZNK9__gnu_cxx13new_allocatorIdE8max_sizeEv>:

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8006dd6:	b480      	push	{r7}
 8006dd8:	b083      	sub	sp, #12
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8006dde:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
#else
	return size_t(-1) / sizeof(_Tp);
#endif
      }
 8006de2:	4618      	mov	r0, r3
 8006de4:	370c      	adds	r7, #12
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bc80      	pop	{r7}
 8006dea:	4770      	bx	lr

08006dec <_ZSt4copyIPKdPdET0_T_S4_S3_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8006dec:	b590      	push	{r4, r7, lr}
 8006dee:	b085      	sub	sp, #20
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	60f8      	str	r0, [r7, #12]
 8006df4:	60b9      	str	r1, [r7, #8]
 8006df6:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a2<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8006df8:	68f8      	ldr	r0, [r7, #12]
 8006dfa:	f000 f80f 	bl	8006e1c <_ZSt12__miter_baseIPKdET_S2_>
 8006dfe:	4604      	mov	r4, r0
 8006e00:	68b8      	ldr	r0, [r7, #8]
 8006e02:	f000 f80b 	bl	8006e1c <_ZSt12__miter_baseIPKdET_S2_>
 8006e06:	4603      	mov	r3, r0
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	4620      	mov	r0, r4
 8006e0e:	f000 f80f 	bl	8006e30 <_ZSt14__copy_move_a2ILb0EPKdPdET1_T0_S4_S3_>
 8006e12:	4603      	mov	r3, r0
    }
 8006e14:	4618      	mov	r0, r3
 8006e16:	3714      	adds	r7, #20
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd90      	pop	{r4, r7, pc}

08006e1c <_ZSt12__miter_baseIPKdET_S2_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
    { return __it; }
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	4618      	mov	r0, r3
 8006e28:	370c      	adds	r7, #12
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bc80      	pop	{r7}
 8006e2e:	4770      	bx	lr

08006e30 <_ZSt14__copy_move_a2ILb0EPKdPdET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8006e30:	b5b0      	push	{r4, r5, r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8006e3c:	68f8      	ldr	r0, [r7, #12]
 8006e3e:	f000 f81a 	bl	8006e76 <_ZSt12__niter_baseIPKdET_S2_>
 8006e42:	4604      	mov	r4, r0
 8006e44:	68b8      	ldr	r0, [r7, #8]
 8006e46:	f000 f816 	bl	8006e76 <_ZSt12__niter_baseIPKdET_S2_>
 8006e4a:	4605      	mov	r5, r0
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f000 f81b 	bl	8006e8a <_ZSt12__niter_baseIPdET_S1_>
 8006e54:	4603      	mov	r3, r0
 8006e56:	461a      	mov	r2, r3
 8006e58:	4629      	mov	r1, r5
 8006e5a:	4620      	mov	r0, r4
 8006e5c:	f000 f81f 	bl	8006e9e <_ZSt13__copy_move_aILb0EPKdPdET1_T0_S4_S3_>
 8006e60:	4602      	mov	r2, r0
 8006e62:	1d3b      	adds	r3, r7, #4
 8006e64:	4611      	mov	r1, r2
 8006e66:	4618      	mov	r0, r3
 8006e68:	f000 f82b 	bl	8006ec2 <_ZSt12__niter_wrapIPdET_RKS1_S1_>
 8006e6c:	4603      	mov	r3, r0
    }
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3710      	adds	r7, #16
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bdb0      	pop	{r4, r5, r7, pc}

08006e76 <_ZSt12__niter_baseIPKdET_S2_>:
    __niter_base(_Iterator __it)
 8006e76:	b480      	push	{r7}
 8006e78:	b083      	sub	sp, #12
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
    { return __it; }
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	4618      	mov	r0, r3
 8006e82:	370c      	adds	r7, #12
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bc80      	pop	{r7}
 8006e88:	4770      	bx	lr

08006e8a <_ZSt12__niter_baseIPdET_S1_>:
    __niter_base(_Iterator __it)
 8006e8a:	b480      	push	{r7}
 8006e8c:	b083      	sub	sp, #12
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
    { return __it; }
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	4618      	mov	r0, r3
 8006e96:	370c      	adds	r7, #12
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bc80      	pop	{r7}
 8006e9c:	4770      	bx	lr

08006e9e <_ZSt13__copy_move_aILb0EPKdPdET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8006e9e:	b580      	push	{r7, lr}
 8006ea0:	b086      	sub	sp, #24
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	60f8      	str	r0, [r7, #12]
 8006ea6:	60b9      	str	r1, [r7, #8]
 8006ea8:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 8006eaa:	2301      	movs	r3, #1
 8006eac:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	68b9      	ldr	r1, [r7, #8]
 8006eb2:	68f8      	ldr	r0, [r7, #12]
 8006eb4:	f000 f810 	bl	8006ed8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_>
 8006eb8:	4603      	mov	r3, r0
    }
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3718      	adds	r7, #24
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}

08006ec2 <_ZSt12__niter_wrapIPdET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8006ec2:	b480      	push	{r7}
 8006ec4:	b083      	sub	sp, #12
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
 8006eca:	6039      	str	r1, [r7, #0]
    { return __res; }
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	4618      	mov	r0, r3
 8006ed0:	370c      	adds	r7, #12
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bc80      	pop	{r7}
 8006ed6:	4770      	bx	lr

08006ed8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b086      	sub	sp, #24
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	60f8      	str	r0, [r7, #12]
 8006ee0:	60b9      	str	r1, [r7, #8]
 8006ee2:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8006ee4:	68ba      	ldr	r2, [r7, #8]
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	1ad3      	subs	r3, r2, r3
 8006eea:	10db      	asrs	r3, r3, #3
 8006eec:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d006      	beq.n	8006f02 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	00db      	lsls	r3, r3, #3
 8006ef8:	461a      	mov	r2, r3
 8006efa:	68f9      	ldr	r1, [r7, #12]
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f001 f953 	bl	80081a8 <memmove>
	  return __result + _Num;
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	00db      	lsls	r3, r3, #3
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	4413      	add	r3, r2
	}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3718      	adds	r7, #24
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
 8006f12:	0000      	movs	r0, r0
 8006f14:	0000      	movs	r0, r0
	...

08006f18 <_ZN15Kalman_FiltresiC1Ev>:
#include "Kalman.hpp"
#include <math.h>


Kalman_Filtresi::Kalman_Filtresi()  {
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b082      	sub	sp, #8
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6879      	ldr	r1, [r7, #4]
 8006f22:	a31f      	add	r3, pc, #124	; (adr r3, 8006fa0 <_ZN15Kalman_FiltresiC1Ev+0x88>)
 8006f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f28:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8006f2c:	6879      	ldr	r1, [r7, #4]
 8006f2e:	a31c      	add	r3, pc, #112	; (adr r3, 8006fa0 <_ZN15Kalman_FiltresiC1Ev+0x88>)
 8006f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f34:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
 8006f38:	6879      	ldr	r1, [r7, #4]
 8006f3a:	a319      	add	r3, pc, #100	; (adr r3, 8006fa0 <_ZN15Kalman_FiltresiC1Ev+0x88>)
 8006f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f40:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
 8006f44:	6879      	ldr	r1, [r7, #4]
 8006f46:	a316      	add	r3, pc, #88	; (adr r3, 8006fa0 <_ZN15Kalman_FiltresiC1Ev+0x88>)
 8006f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4c:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
 8006f50:	6879      	ldr	r1, [r7, #4]
 8006f52:	f04f 0200 	mov.w	r2, #0
 8006f56:	4b14      	ldr	r3, [pc, #80]	; (8006fa8 <_ZN15Kalman_FiltresiC1Ev+0x90>)
 8006f58:	e9c1 2336 	strd	r2, r3, [r1, #216]	; 0xd8
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	4a13      	ldr	r2, [pc, #76]	; (8006fac <_ZN15Kalman_FiltresiC1Ev+0x94>)
 8006f60:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	22c8      	movs	r2, #200	; 0xc8
 8006f68:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7f9 fe74 	bl	8000c60 <__aeabi_i2f>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006f80:	f7f9 ff76 	bl	8000e70 <__aeabi_fdiv>
 8006f84:	4603      	mov	r3, r0
 8006f86:	4618      	mov	r0, r3
 8006f88:	f7f9 fa46 	bl	8000418 <__aeabi_f2d>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	460b      	mov	r3, r1
 8006f90:	6879      	ldr	r1, [r7, #4]
 8006f92:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8

}
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3708      	adds	r7, #8
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}
 8006fa0:	47ae147b 	.word	0x47ae147b
 8006fa4:	3f847ae1 	.word	0x3f847ae1
 8006fa8:	3ff80000 	.word	0x3ff80000
 8006fac:	42654ca3 	.word	0x42654ca3

08006fb0 <_ZN15Kalman_Filtresi3RunEPfS0_>:
	y_prev = y;

	return y;
}

void Kalman_Filtresi::Run(float gyro[3], float acc[3]) {
 8006fb0:	b5b0      	push	{r4, r5, r7, lr}
 8006fb2:	b08c      	sub	sp, #48	; 0x30
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	607a      	str	r2, [r7, #4]

  float accX = acc[0]; 
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  float accY = acc[1];
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	62bb      	str	r3, [r7, #40]	; 0x28
  float accZ = acc[2];
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	627b      	str	r3, [r7, #36]	; 0x24

  float gyroX = gyro[0]; 
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	623b      	str	r3, [r7, #32]
  float gyroY = gyro[1];
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	61fb      	str	r3, [r7, #28]
  float gyroZ = gyro[2];
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	61bb      	str	r3, [r7, #24]

    //---IMU KİSMİ----
    //=================================
  float acctop=sqrt(accX*accX+accY*accY+accZ*accZ);
 8006fe0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006fe2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006fe4:	f7f9 fe90 	bl	8000d08 <__aeabi_fmul>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	461c      	mov	r4, r3
 8006fec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006fee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ff0:	f7f9 fe8a 	bl	8000d08 <__aeabi_fmul>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	4620      	mov	r0, r4
 8006ffa:	f7f9 fd7d 	bl	8000af8 <__addsf3>
 8006ffe:	4603      	mov	r3, r0
 8007000:	461c      	mov	r4, r3
 8007002:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007004:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007006:	f7f9 fe7f 	bl	8000d08 <__aeabi_fmul>
 800700a:	4603      	mov	r3, r0
 800700c:	4619      	mov	r1, r3
 800700e:	4620      	mov	r0, r4
 8007010:	f7f9 fd72 	bl	8000af8 <__addsf3>
 8007014:	4603      	mov	r3, r0
 8007016:	4618      	mov	r0, r3
 8007018:	f7fa f884 	bl	8001124 <_ZSt4sqrtf>
 800701c:	6178      	str	r0, [r7, #20]

  pitch_acc =  asin(accX/acctop)*rad2deg + PITCH_OFFSET;
 800701e:	6979      	ldr	r1, [r7, #20]
 8007020:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007022:	f7f9 ff25 	bl	8000e70 <__aeabi_fdiv>
 8007026:	4603      	mov	r3, r0
 8007028:	4618      	mov	r0, r3
 800702a:	f7fa f86f 	bl	800110c <_ZSt4asinf>
 800702e:	4602      	mov	r2, r0
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007036:	4619      	mov	r1, r3
 8007038:	4610      	mov	r0, r2
 800703a:	f7f9 fe65 	bl	8000d08 <__aeabi_fmul>
 800703e:	4603      	mov	r3, r0
 8007040:	499d      	ldr	r1, [pc, #628]	; (80072b8 <_ZN15Kalman_Filtresi3RunEPfS0_+0x308>)
 8007042:	4618      	mov	r0, r3
 8007044:	f7f9 fd56 	bl	8000af4 <__aeabi_fsub>
 8007048:	4603      	mov	r3, r0
 800704a:	461a      	mov	r2, r3
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
  roll_acc  =  asin(accY/acctop)*rad2deg + ROLL_OFFSET;
 8007052:	6979      	ldr	r1, [r7, #20]
 8007054:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007056:	f7f9 ff0b 	bl	8000e70 <__aeabi_fdiv>
 800705a:	4603      	mov	r3, r0
 800705c:	4618      	mov	r0, r3
 800705e:	f7fa f855 	bl	800110c <_ZSt4asinf>
 8007062:	4602      	mov	r2, r0
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800706a:	4619      	mov	r1, r3
 800706c:	4610      	mov	r0, r2
 800706e:	f7f9 fe4b 	bl	8000d08 <__aeabi_fmul>
 8007072:	4603      	mov	r3, r0
 8007074:	f04f 0100 	mov.w	r1, #0
 8007078:	4618      	mov	r0, r3
 800707a:	f7f9 fd3d 	bl	8000af8 <__addsf3>
 800707e:	4603      	mov	r3, r0
 8007080:	461a      	mov	r2, r3
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

  //pitch_acc = lpf(pitch_acc);
  //roll_acc = lpf(roll_acc);


  pitch_gyro = gyroY * st;
 8007088:	69f8      	ldr	r0, [r7, #28]
 800708a:	f7f9 f9c5 	bl	8000418 <__aeabi_f2d>
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8007094:	f7f9 fa18 	bl	80004c8 <__aeabi_dmul>
 8007098:	4602      	mov	r2, r0
 800709a:	460b      	mov	r3, r1
 800709c:	4610      	mov	r0, r2
 800709e:	4619      	mov	r1, r3
 80070a0:	f7f9 fcd4 	bl	8000a4c <__aeabi_d2f>
 80070a4:	4602      	mov	r2, r0
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
  roll_gyro =  gyroX * st;
 80070ac:	6a38      	ldr	r0, [r7, #32]
 80070ae:	f7f9 f9b3 	bl	8000418 <__aeabi_f2d>
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 80070b8:	f7f9 fa06 	bl	80004c8 <__aeabi_dmul>
 80070bc:	4602      	mov	r2, r0
 80070be:	460b      	mov	r3, r1
 80070c0:	4610      	mov	r0, r2
 80070c2:	4619      	mov	r1, r3
 80070c4:	f7f9 fcc2 	bl	8000a4c <__aeabi_d2f>
 80070c8:	4602      	mov	r2, r0
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    attitude.pitch_acc = pitch_acc;
    attitude.yaw_acc = yaw_acc;
    //printf("\npitc_acc: %.2f", pitch_acc);
  #endif
    
    if(gyro_ready) {
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d06c      	beq.n	80071b4 <_ZN15Kalman_Filtresi3RunEPfS0_+0x204>

    pitch_comp=(pitch_gyro+pitch_eski)*0.998+pitch_acc*0.002;	//Tümleyen filtre
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80070e6:	4619      	mov	r1, r3
 80070e8:	4610      	mov	r0, r2
 80070ea:	f7f9 fd05 	bl	8000af8 <__addsf3>
 80070ee:	4603      	mov	r3, r0
 80070f0:	4618      	mov	r0, r3
 80070f2:	f7f9 f991 	bl	8000418 <__aeabi_f2d>
 80070f6:	a36c      	add	r3, pc, #432	; (adr r3, 80072a8 <_ZN15Kalman_Filtresi3RunEPfS0_+0x2f8>)
 80070f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070fc:	f7f9 f9e4 	bl	80004c8 <__aeabi_dmul>
 8007100:	4602      	mov	r2, r0
 8007102:	460b      	mov	r3, r1
 8007104:	4614      	mov	r4, r2
 8007106:	461d      	mov	r5, r3
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800710e:	4618      	mov	r0, r3
 8007110:	f7f9 f982 	bl	8000418 <__aeabi_f2d>
 8007114:	a366      	add	r3, pc, #408	; (adr r3, 80072b0 <_ZN15Kalman_Filtresi3RunEPfS0_+0x300>)
 8007116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800711a:	f7f9 f9d5 	bl	80004c8 <__aeabi_dmul>
 800711e:	4602      	mov	r2, r0
 8007120:	460b      	mov	r3, r1
 8007122:	4620      	mov	r0, r4
 8007124:	4629      	mov	r1, r5
 8007126:	f7f9 f819 	bl	800015c <__adddf3>
 800712a:	4602      	mov	r2, r0
 800712c:	460b      	mov	r3, r1
 800712e:	4610      	mov	r0, r2
 8007130:	4619      	mov	r1, r3
 8007132:	f7f9 fc8b 	bl	8000a4c <__aeabi_d2f>
 8007136:	4602      	mov	r2, r0
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    roll_comp =(roll_gyro+roll_eski)*0.998+roll_acc*0.002;		//Tümleyen filtre
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800714a:	4619      	mov	r1, r3
 800714c:	4610      	mov	r0, r2
 800714e:	f7f9 fcd3 	bl	8000af8 <__addsf3>
 8007152:	4603      	mov	r3, r0
 8007154:	4618      	mov	r0, r3
 8007156:	f7f9 f95f 	bl	8000418 <__aeabi_f2d>
 800715a:	a353      	add	r3, pc, #332	; (adr r3, 80072a8 <_ZN15Kalman_Filtresi3RunEPfS0_+0x2f8>)
 800715c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007160:	f7f9 f9b2 	bl	80004c8 <__aeabi_dmul>
 8007164:	4602      	mov	r2, r0
 8007166:	460b      	mov	r3, r1
 8007168:	4614      	mov	r4, r2
 800716a:	461d      	mov	r5, r3
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8007172:	4618      	mov	r0, r3
 8007174:	f7f9 f950 	bl	8000418 <__aeabi_f2d>
 8007178:	a34d      	add	r3, pc, #308	; (adr r3, 80072b0 <_ZN15Kalman_Filtresi3RunEPfS0_+0x300>)
 800717a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800717e:	f7f9 f9a3 	bl	80004c8 <__aeabi_dmul>
 8007182:	4602      	mov	r2, r0
 8007184:	460b      	mov	r3, r1
 8007186:	4620      	mov	r0, r4
 8007188:	4629      	mov	r1, r5
 800718a:	f7f8 ffe7 	bl	800015c <__adddf3>
 800718e:	4602      	mov	r2, r0
 8007190:	460b      	mov	r3, r1
 8007192:	4610      	mov	r0, r2
 8007194:	4619      	mov	r1, r3
 8007196:	f7f9 fc59 	bl	8000a4c <__aeabi_d2f>
 800719a:	4602      	mov	r2, r0
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140

	S11_p_yaw = -S11_m_yaw*(Kt11_yaw-1);  S12_p_yaw = -S12_m_yaw*(Kt11_yaw-1);
	S21_p_yaw = S21_m_yaw-S11_m_yaw*Kt21_yaw; S22_p_yaw = S22_m_yaw-S12_m_yaw*Kt21_yaw;

	S11_m_yaw = S11_p_yaw; S12_m_yaw = S12_p_yaw; S21_m_yaw = S21_p_yaw; S22_m_yaw = S22_p_yaw; */
  yaw_rate = gyroZ;
 80071a2:	69b8      	ldr	r0, [r7, #24]
 80071a4:	f7f9 f938 	bl	8000418 <__aeabi_f2d>
 80071a8:	4602      	mov	r2, r0
 80071aa:	460b      	mov	r3, r1
 80071ac:	68f9      	ldr	r1, [r7, #12]
 80071ae:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 80071b2:	e025      	b.n	8007200 <_ZN15Kalman_Filtresi3RunEPfS0_+0x250>
    //=================================

    }

    else {
    	roll = roll_acc;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80071ba:	4618      	mov	r0, r3
 80071bc:	f7f9 f92c 	bl	8000418 <__aeabi_f2d>
 80071c0:	4602      	mov	r2, r0
 80071c2:	460b      	mov	r3, r1
 80071c4:	68f9      	ldr	r1, [r7, #12]
 80071c6:	e9c1 2300 	strd	r2, r3, [r1]
    	pitch = pitch_acc;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 80071d0:	4618      	mov	r0, r3
 80071d2:	f7f9 f921 	bl	8000418 <__aeabi_f2d>
 80071d6:	4602      	mov	r2, r0
 80071d8:	460b      	mov	r3, r1
 80071da:	68f9      	ldr	r1, [r7, #12]
 80071dc:	e9c1 2302 	strd	r2, r3, [r1, #8]

    	roll_comp  = roll_acc;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    	pitch_comp = pitch_acc;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c

    	gyro_ready = true;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2201      	movs	r2, #1
 80071fc:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    }

	pitch_eski=pitch_comp;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	roll_eski=roll_comp;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

    state.angles[0] = roll_comp;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    state.angles[1] = pitch_comp;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    state.angles[2] = 0;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f04f 0200 	mov.w	r2, #0
 8007236:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

    state.rates[0] = roll_rate;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8007240:	4610      	mov	r0, r2
 8007242:	4619      	mov	r1, r3
 8007244:	f7f9 fc02 	bl	8000a4c <__aeabi_d2f>
 8007248:	4602      	mov	r2, r0
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    state.rates[1] = pitch_rate;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007256:	4610      	mov	r0, r2
 8007258:	4619      	mov	r1, r3
 800725a:	f7f9 fbf7 	bl	8000a4c <__aeabi_d2f>
 800725e:	4602      	mov	r2, r0
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    state.rates[2] = yaw_rate;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800726c:	4610      	mov	r0, r2
 800726e:	4619      	mov	r1, r3
 8007270:	f7f9 fbec 	bl	8000a4c <__aeabi_d2f>
 8007274:	4602      	mov	r2, r0
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

    state.bias[0] = roll_bias;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    state.bias[1] = pitch_bias;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    state.bias[2] = yaw_bias;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124

}
 800729a:	bf00      	nop
 800729c:	3730      	adds	r7, #48	; 0x30
 800729e:	46bd      	mov	sp, r7
 80072a0:	bdb0      	pop	{r4, r5, r7, pc}
 80072a2:	bf00      	nop
 80072a4:	f3af 8000 	nop.w
 80072a8:	b22d0e56 	.word	0xb22d0e56
 80072ac:	3fefef9d 	.word	0x3fefef9d
 80072b0:	d2f1a9fc 	.word	0xd2f1a9fc
 80072b4:	3f60624d 	.word	0x3f60624d
 80072b8:	40500000 	.word	0x40500000

080072bc <_ZN15Kalman_FiltresiD1Ev>:

Kalman_Filtresi::~Kalman_Filtresi() {}
 80072bc:	b480      	push	{r7}
 80072be:	b083      	sub	sp, #12
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	4618      	mov	r0, r3
 80072c8:	370c      	adds	r7, #12
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bc80      	pop	{r7}
 80072ce:	4770      	bx	lr

080072d0 <_ZN13LowPassFilterC1Eff>:

LowPassFilter::LowPassFilter():
	output(0),
	ePow(0){}

LowPassFilter::LowPassFilter(float iCutOffFrequency, float iDeltaTime):
 80072d0:	b5b0      	push	{r4, r5, r7, lr}
 80072d2:	b084      	sub	sp, #16
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	60f8      	str	r0, [r7, #12]
 80072d8:	60b9      	str	r1, [r7, #8]
 80072da:	607a      	str	r2, [r7, #4]
	output(0),
	ePow(1-exp(-iDeltaTime * 2 * M_PI * iCutOffFrequency))
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f04f 0200 	mov.w	r2, #0
 80072e2:	601a      	str	r2, [r3, #0]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80072ea:	4619      	mov	r1, r3
 80072ec:	4618      	mov	r0, r3
 80072ee:	f7f9 fc03 	bl	8000af8 <__addsf3>
 80072f2:	4603      	mov	r3, r0
 80072f4:	4618      	mov	r0, r3
 80072f6:	f7f9 f88f 	bl	8000418 <__aeabi_f2d>
 80072fa:	a317      	add	r3, pc, #92	; (adr r3, 8007358 <_ZN13LowPassFilterC1Eff+0x88>)
 80072fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007300:	f7f9 f8e2 	bl	80004c8 <__aeabi_dmul>
 8007304:	4602      	mov	r2, r0
 8007306:	460b      	mov	r3, r1
 8007308:	4614      	mov	r4, r2
 800730a:	461d      	mov	r5, r3
 800730c:	68b8      	ldr	r0, [r7, #8]
 800730e:	f7f9 f883 	bl	8000418 <__aeabi_f2d>
 8007312:	4602      	mov	r2, r0
 8007314:	460b      	mov	r3, r1
 8007316:	4620      	mov	r0, r4
 8007318:	4629      	mov	r1, r5
 800731a:	f7f9 f8d5 	bl	80004c8 <__aeabi_dmul>
 800731e:	4602      	mov	r2, r0
 8007320:	460b      	mov	r3, r1
 8007322:	4610      	mov	r0, r2
 8007324:	4619      	mov	r1, r3
 8007326:	f000 fb5b 	bl	80079e0 <exp>
 800732a:	4602      	mov	r2, r0
 800732c:	460b      	mov	r3, r1
 800732e:	f04f 0000 	mov.w	r0, #0
 8007332:	490b      	ldr	r1, [pc, #44]	; (8007360 <_ZN13LowPassFilterC1Eff+0x90>)
 8007334:	f7f8 ff10 	bl	8000158 <__aeabi_dsub>
 8007338:	4602      	mov	r2, r0
 800733a:	460b      	mov	r3, r1
 800733c:	4610      	mov	r0, r2
 800733e:	4619      	mov	r1, r3
 8007340:	f7f9 fb84 	bl	8000a4c <__aeabi_d2f>
 8007344:	4602      	mov	r2, r0
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	605a      	str	r2, [r3, #4]
	if(iCutOffFrequency <= 0){
		std::cout << "Warning: A LowPassFilter instance has been configured with 0 Hz as cut-off frequency.";
		ePow = 0;
	}
	#endif
}
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	4618      	mov	r0, r3
 800734e:	3710      	adds	r7, #16
 8007350:	46bd      	mov	sp, r7
 8007352:	bdb0      	pop	{r4, r5, r7, pc}
 8007354:	f3af 8000 	nop.w
 8007358:	54442d18 	.word	0x54442d18
 800735c:	400921fb 	.word	0x400921fb
 8007360:	3ff00000 	.word	0x3ff00000

08007364 <_ZN3PIDC1Ev>:
#include "PID.hpp"

PID::PID(): lpf(LP_FILTER_CUT_FREQ,st) {};
 8007364:	b580      	push	{r7, lr}
 8007366:	b082      	sub	sp, #8
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	4a13      	ldr	r2, [pc, #76]	; (80073bc <_ZN3PIDC1Ev+0x58>)
 8007370:	601a      	str	r2, [r3, #0]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	4a12      	ldr	r2, [pc, #72]	; (80073c0 <_ZN3PIDC1Ev+0x5c>)
 8007376:	605a      	str	r2, [r3, #4]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	22c8      	movs	r2, #200	; 0xc8
 800737c:	609a      	str	r2, [r3, #8]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	4618      	mov	r0, r3
 8007384:	f7f9 fc6c 	bl	8000c60 <__aeabi_i2f>
 8007388:	4603      	mov	r3, r0
 800738a:	4619      	mov	r1, r3
 800738c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007390:	f7f9 fd6e 	bl	8000e70 <__aeabi_fdiv>
 8007394:	4603      	mov	r3, r0
 8007396:	461a      	mov	r2, r3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	60da      	str	r2, [r3, #12]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f103 0018 	add.w	r0, r3, #24
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	68db      	ldr	r3, [r3, #12]
 80073a6:	461a      	mov	r2, r3
 80073a8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80073ac:	f7ff ff90 	bl	80072d0 <_ZN13LowPassFilterC1Eff>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	4618      	mov	r0, r3
 80073b4:	3708      	adds	r7, #8
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	bf00      	nop
 80073bc:	42f00000 	.word	0x42f00000
 80073c0:	c2f00000 	.word	0xc2f00000

080073c4 <_ZN3PID7P_AngleEddd>:

double PID::P_Angle(double alpha_des, double alpha, double Kp_angle) {
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b088      	sub	sp, #32
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	e9c7 2300 	strd	r2, r3, [r7]
	double P;
	double e = alpha_des - alpha;
 80073d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80073d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073d8:	f7f8 febe 	bl	8000158 <__aeabi_dsub>
 80073dc:	4602      	mov	r2, r0
 80073de:	460b      	mov	r3, r1
 80073e0:	e9c7 2306 	strd	r2, r3, [r7, #24]
	P = Kp_angle*e;
 80073e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80073e8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80073ec:	f7f9 f86c 	bl	80004c8 <__aeabi_dmul>
 80073f0:	4602      	mov	r2, r0
 80073f2:	460b      	mov	r3, r1
 80073f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    return P;
 80073f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]

}
 80073fc:	4610      	mov	r0, r2
 80073fe:	4619      	mov	r1, r3
 8007400:	3720      	adds	r7, #32
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}
	...

08007408 <_ZN3PID7PD_RateEddddd>:


double PID::PD_Rate(double alpha_dot_des, double alpha_dot, double Kp, double Ki, double Kd) {
 8007408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800740a:	b089      	sub	sp, #36	; 0x24
 800740c:	af02      	add	r7, sp, #8
 800740e:	60f8      	str	r0, [r7, #12]
 8007410:	e9c7 2300 	strd	r2, r3, [r7]

	e_roll = alpha_dot_des - alpha_dot;
 8007414:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007418:	e9d7 0100 	ldrd	r0, r1, [r7]
 800741c:	f7f8 fe9c 	bl	8000158 <__aeabi_dsub>
 8007420:	4602      	mov	r2, r0
 8007422:	460b      	mov	r3, r1
 8007424:	4610      	mov	r0, r2
 8007426:	4619      	mov	r1, r3
 8007428:	f7f9 fb10 	bl	8000a4c <__aeabi_d2f>
 800742c:	4602      	mov	r2, r0
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	621a      	str	r2, [r3, #32]
  double e_roll_int = e_roll;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	6a1b      	ldr	r3, [r3, #32]
 8007436:	4618      	mov	r0, r3
 8007438:	f7f8 ffee 	bl	8000418 <__aeabi_f2d>
 800743c:	4602      	mov	r2, r0
 800743e:	460b      	mov	r3, r1
 8007440:	e9c7 2304 	strd	r2, r3, [r7, #16]

  if((int)pd_roll_buf != (int)pd_roll_sat_buf) {
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	691b      	ldr	r3, [r3, #16]
 8007448:	4618      	mov	r0, r3
 800744a:	f7f9 fe39 	bl	80010c0 <__aeabi_f2iz>
 800744e:	4604      	mov	r4, r0
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007454:	4618      	mov	r0, r3
 8007456:	f7f9 fe33 	bl	80010c0 <__aeabi_f2iz>
 800745a:	4603      	mov	r3, r0
 800745c:	429c      	cmp	r4, r3
 800745e:	d02b      	beq.n	80074b8 <_ZN3PID7PD_RateEddddd+0xb0>
    if(sgn(e_roll) == sgn(pd_roll_sat_buf)) {
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	6a1b      	ldr	r3, [r3, #32]
 8007464:	4618      	mov	r0, r3
 8007466:	f7f8 ffd7 	bl	8000418 <__aeabi_f2d>
 800746a:	4602      	mov	r2, r0
 800746c:	460b      	mov	r3, r1
 800746e:	68f8      	ldr	r0, [r7, #12]
 8007470:	f000 f940 	bl	80076f4 <_ZN3PID3sgnEd>
 8007474:	4604      	mov	r4, r0
 8007476:	460d      	mov	r5, r1
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800747c:	4618      	mov	r0, r3
 800747e:	f7f8 ffcb 	bl	8000418 <__aeabi_f2d>
 8007482:	4602      	mov	r2, r0
 8007484:	460b      	mov	r3, r1
 8007486:	68f8      	ldr	r0, [r7, #12]
 8007488:	f000 f934 	bl	80076f4 <_ZN3PID3sgnEd>
 800748c:	4602      	mov	r2, r0
 800748e:	460b      	mov	r3, r1
 8007490:	2101      	movs	r1, #1
 8007492:	460e      	mov	r6, r1
 8007494:	4620      	mov	r0, r4
 8007496:	4629      	mov	r1, r5
 8007498:	f7f9 fa7e 	bl	8000998 <__aeabi_dcmpeq>
 800749c:	4603      	mov	r3, r0
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d101      	bne.n	80074a6 <_ZN3PID7PD_RateEddddd+0x9e>
 80074a2:	2300      	movs	r3, #0
 80074a4:	461e      	mov	r6, r3
 80074a6:	b2f3      	uxtb	r3, r6
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d005      	beq.n	80074b8 <_ZN3PID7PD_RateEddddd+0xb0>
      e_roll_int = 0;
 80074ac:	f04f 0200 	mov.w	r2, #0
 80074b0:	f04f 0300 	mov.w	r3, #0
 80074b4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    }
  }

  	de_filt = N * (Kd * e_roll - de_int);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	6a1b      	ldr	r3, [r3, #32]
 80074bc:	4618      	mov	r0, r3
 80074be:	f7f8 ffab 	bl	8000418 <__aeabi_f2d>
 80074c2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80074c6:	f7f8 ffff 	bl	80004c8 <__aeabi_dmul>
 80074ca:	4602      	mov	r2, r0
 80074cc:	460b      	mov	r3, r1
 80074ce:	4614      	mov	r4, r2
 80074d0:	461d      	mov	r5, r3
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074d6:	4618      	mov	r0, r3
 80074d8:	f7f8 ff9e 	bl	8000418 <__aeabi_f2d>
 80074dc:	4602      	mov	r2, r0
 80074de:	460b      	mov	r3, r1
 80074e0:	4620      	mov	r0, r4
 80074e2:	4629      	mov	r1, r5
 80074e4:	f7f8 fe38 	bl	8000158 <__aeabi_dsub>
 80074e8:	4602      	mov	r2, r0
 80074ea:	460b      	mov	r3, r1
 80074ec:	4610      	mov	r0, r2
 80074ee:	4619      	mov	r1, r3
 80074f0:	f04f 0200 	mov.w	r2, #0
 80074f4:	4b5c      	ldr	r3, [pc, #368]	; (8007668 <_ZN3PID7PD_RateEddddd+0x260>)
 80074f6:	f7f8 ffe7 	bl	80004c8 <__aeabi_dmul>
 80074fa:	4602      	mov	r2, r0
 80074fc:	460b      	mov	r3, r1
 80074fe:	4610      	mov	r0, r2
 8007500:	4619      	mov	r1, r3
 8007502:	f7f9 faa3 	bl	8000a4c <__aeabi_d2f>
 8007506:	4602      	mov	r2, r0
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	645a      	str	r2, [r3, #68]	; 0x44
  	de_int += de_filt*st;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	68db      	ldr	r3, [r3, #12]
 8007518:	4619      	mov	r1, r3
 800751a:	4610      	mov	r0, r2
 800751c:	f7f9 fbf4 	bl	8000d08 <__aeabi_fmul>
 8007520:	4603      	mov	r3, r0
 8007522:	4619      	mov	r1, r3
 8007524:	4620      	mov	r0, r4
 8007526:	f7f9 fae7 	bl	8000af8 <__addsf3>
 800752a:	4603      	mov	r3, r0
 800752c:	461a      	mov	r2, r3
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	649a      	str	r2, [r3, #72]	; 0x48

	de = e_roll - e_eski_roll;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	6a1a      	ldr	r2, [r3, #32]
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800753a:	4619      	mov	r1, r3
 800753c:	4610      	mov	r0, r2
 800753e:	f7f9 fad9 	bl	8000af4 <__aeabi_fsub>
 8007542:	4603      	mov	r3, r0
 8007544:	461a      	mov	r2, r3
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	641a      	str	r2, [r3, #64]	; 0x40
	e_eski_roll = e_roll;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	6a1a      	ldr	r2, [r3, #32]
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	629a      	str	r2, [r3, #40]	; 0x28

  ie_roll += e_roll_int*st;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007556:	4618      	mov	r0, r3
 8007558:	f7f8 ff5e 	bl	8000418 <__aeabi_f2d>
 800755c:	4604      	mov	r4, r0
 800755e:	460d      	mov	r5, r1
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	68db      	ldr	r3, [r3, #12]
 8007564:	4618      	mov	r0, r3
 8007566:	f7f8 ff57 	bl	8000418 <__aeabi_f2d>
 800756a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800756e:	f7f8 ffab 	bl	80004c8 <__aeabi_dmul>
 8007572:	4602      	mov	r2, r0
 8007574:	460b      	mov	r3, r1
 8007576:	4620      	mov	r0, r4
 8007578:	4629      	mov	r1, r5
 800757a:	f7f8 fdef 	bl	800015c <__adddf3>
 800757e:	4602      	mov	r2, r0
 8007580:	460b      	mov	r3, r1
 8007582:	4610      	mov	r0, r2
 8007584:	4619      	mov	r1, r3
 8007586:	f7f9 fa61 	bl	8000a4c <__aeabi_d2f>
 800758a:	4602      	mov	r2, r0
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	631a      	str	r2, [r3, #48]	; 0x30

  ie_roll_sat = ie_roll;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	639a      	str	r2, [r3, #56]	; 0x38
	

	P = Kp*e_roll; D = de_filt; I = Ki * ie_roll_sat;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	6a1b      	ldr	r3, [r3, #32]
 800759c:	4618      	mov	r0, r3
 800759e:	f7f8 ff3b 	bl	8000418 <__aeabi_f2d>
 80075a2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80075a6:	f7f8 ff8f 	bl	80004c8 <__aeabi_dmul>
 80075aa:	4602      	mov	r2, r0
 80075ac:	460b      	mov	r3, r1
 80075ae:	68f9      	ldr	r1, [r7, #12]
 80075b0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075b8:	4618      	mov	r0, r3
 80075ba:	f7f8 ff2d 	bl	8000418 <__aeabi_f2d>
 80075be:	4602      	mov	r2, r0
 80075c0:	460b      	mov	r3, r1
 80075c2:	68f9      	ldr	r1, [r7, #12]
 80075c4:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075cc:	4618      	mov	r0, r3
 80075ce:	f7f8 ff23 	bl	8000418 <__aeabi_f2d>
 80075d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80075d6:	f7f8 ff77 	bl	80004c8 <__aeabi_dmul>
 80075da:	4602      	mov	r2, r0
 80075dc:	460b      	mov	r3, r1
 80075de:	68f9      	ldr	r1, [r7, #12]
 80075e0:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	//D = lpf.update(D);
	pd = P + I + D;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80075f0:	f7f8 fdb4 	bl	800015c <__adddf3>
 80075f4:	4602      	mov	r2, r0
 80075f6:	460b      	mov	r3, r1
 80075f8:	4610      	mov	r0, r2
 80075fa:	4619      	mov	r1, r3
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8007602:	f7f8 fdab 	bl	800015c <__adddf3>
 8007606:	4602      	mov	r2, r0
 8007608:	460b      	mov	r3, r1
 800760a:	68f9      	ldr	r1, [r7, #12]
 800760c:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
  	pd_roll_buf = pd;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8007616:	4610      	mov	r0, r2
 8007618:	4619      	mov	r1, r3
 800761a:	f7f9 fa17 	bl	8000a4c <__aeabi_d2f>
 800761e:	4602      	mov	r2, r0
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	611a      	str	r2, [r3, #16]
	pd  = Sat(pd,  300, -300);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800762a:	4910      	ldr	r1, [pc, #64]	; (800766c <_ZN3PID7PD_RateEddddd+0x264>)
 800762c:	9101      	str	r1, [sp, #4]
 800762e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8007632:	9100      	str	r1, [sp, #0]
 8007634:	68f8      	ldr	r0, [r7, #12]
 8007636:	f000 f8d5 	bl	80077e4 <_ZN3PID3SatEdii>
 800763a:	4602      	mov	r2, r0
 800763c:	460b      	mov	r3, r1
 800763e:	68f9      	ldr	r1, [r7, #12]
 8007640:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	pd_roll_sat_buf = pd;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800764a:	4610      	mov	r0, r2
 800764c:	4619      	mov	r1, r3
 800764e:	f7f9 f9fd 	bl	8000a4c <__aeabi_d2f>
 8007652:	4602      	mov	r2, r0
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	63da      	str	r2, [r3, #60]	; 0x3c
    return pd;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68

}
 800765e:	4610      	mov	r0, r2
 8007660:	4619      	mov	r1, r3
 8007662:	371c      	adds	r7, #28
 8007664:	46bd      	mov	sp, r7
 8007666:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007668:	40240000 	.word	0x40240000
 800766c:	fffffed4 	.word	0xfffffed4

08007670 <_ZN3PID5resetEv>:

void PID::reset() {
 8007670:	b480      	push	{r7}
 8007672:	b083      	sub	sp, #12
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
	ie_roll_sat = 0;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f04f 0200 	mov.w	r2, #0
 800767e:	639a      	str	r2, [r3, #56]	; 0x38
	de_filt = 0;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f04f 0200 	mov.w	r2, #0
 8007686:	645a      	str	r2, [r3, #68]	; 0x44
	de_int = 0;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f04f 0200 	mov.w	r2, #0
 800768e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8007690:	bf00      	nop
 8007692:	370c      	adds	r7, #12
 8007694:	46bd      	mov	sp, r7
 8007696:	bc80      	pop	{r7}
 8007698:	4770      	bx	lr

0800769a <_ZN3PID10P_Rate_YawEddd>:


double PID::P_Rate_Yaw(double alpha_dot_des, double alpha_dot, double Kp) {
 800769a:	b580      	push	{r7, lr}
 800769c:	b08a      	sub	sp, #40	; 0x28
 800769e:	af02      	add	r7, sp, #8
 80076a0:	60f8      	str	r0, [r7, #12]
 80076a2:	e9c7 2300 	strd	r2, r3, [r7]
	double P;
	double e_yaw = alpha_dot_des - alpha_dot;	
 80076a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80076aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80076ae:	f7f8 fd53 	bl	8000158 <__aeabi_dsub>
 80076b2:	4602      	mov	r2, r0
 80076b4:	460b      	mov	r3, r1
 80076b6:	e9c7 2306 	strd	r2, r3, [r7, #24]
	P = Kp*e_yaw;
 80076ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80076be:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80076c2:	f7f8 ff01 	bl	80004c8 <__aeabi_dmul>
 80076c6:	4602      	mov	r2, r0
 80076c8:	460b      	mov	r3, r1
 80076ca:	e9c7 2304 	strd	r2, r3, [r7, #16]
	P    = Sat(P,    150, -150);
 80076ce:	f06f 0395 	mvn.w	r3, #149	; 0x95
 80076d2:	9301      	str	r3, [sp, #4]
 80076d4:	2396      	movs	r3, #150	; 0x96
 80076d6:	9300      	str	r3, [sp, #0]
 80076d8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80076dc:	68f8      	ldr	r0, [r7, #12]
 80076de:	f000 f881 	bl	80077e4 <_ZN3PID3SatEdii>
 80076e2:	e9c7 0104 	strd	r0, r1, [r7, #16]

    return P;
 80076e6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]

}
 80076ea:	4610      	mov	r0, r2
 80076ec:	4619      	mov	r1, r3
 80076ee:	3720      	adds	r7, #32
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <_ZN3PID3sgnEd>:

double PID::sgn(double v) {
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b084      	sub	sp, #16
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	60f8      	str	r0, [r7, #12]
 80076fc:	e9c7 2300 	strd	r2, r3, [r7]
  if (v < 0) return -1;
 8007700:	f04f 0200 	mov.w	r2, #0
 8007704:	f04f 0300 	mov.w	r3, #0
 8007708:	e9d7 0100 	ldrd	r0, r1, [r7]
 800770c:	f7f9 f94e 	bl	80009ac <__aeabi_dcmplt>
 8007710:	4603      	mov	r3, r0
 8007712:	2b00      	cmp	r3, #0
 8007714:	d003      	beq.n	800771e <_ZN3PID3sgnEd+0x2a>
 8007716:	f04f 0200 	mov.w	r2, #0
 800771a:	4b0d      	ldr	r3, [pc, #52]	; (8007750 <_ZN3PID3sgnEd+0x5c>)
 800771c:	e012      	b.n	8007744 <_ZN3PID3sgnEd+0x50>
  if (v > 0) return 1;
 800771e:	f04f 0200 	mov.w	r2, #0
 8007722:	f04f 0300 	mov.w	r3, #0
 8007726:	e9d7 0100 	ldrd	r0, r1, [r7]
 800772a:	f7f9 f95d 	bl	80009e8 <__aeabi_dcmpgt>
 800772e:	4603      	mov	r3, r0
 8007730:	2b00      	cmp	r3, #0
 8007732:	d003      	beq.n	800773c <_ZN3PID3sgnEd+0x48>
 8007734:	f04f 0200 	mov.w	r2, #0
 8007738:	4b06      	ldr	r3, [pc, #24]	; (8007754 <_ZN3PID3sgnEd+0x60>)
 800773a:	e003      	b.n	8007744 <_ZN3PID3sgnEd+0x50>
  return 0;
 800773c:	f04f 0200 	mov.w	r2, #0
 8007740:	f04f 0300 	mov.w	r3, #0
}
 8007744:	4610      	mov	r0, r2
 8007746:	4619      	mov	r1, r3
 8007748:	3710      	adds	r7, #16
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
 800774e:	bf00      	nop
 8007750:	bff00000 	.word	0xbff00000
 8007754:	3ff00000 	.word	0x3ff00000

08007758 <_ZN3PID3SatEdiii>:

 double PID::Sat(double pwm, int max, int min, int thr) {
 8007758:	b580      	push	{r7, lr}
 800775a:	b086      	sub	sp, #24
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	e9c7 2300 	strd	r2, r3, [r7]
	double pwm_out;

	if(thr > 1020) {
 8007764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007766:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 800776a:	dd2c      	ble.n	80077c6 <_ZN3PID3SatEdiii+0x6e>
		if(pwm > max) {
 800776c:	6a38      	ldr	r0, [r7, #32]
 800776e:	f7f8 fe41 	bl	80003f4 <__aeabi_i2d>
 8007772:	4602      	mov	r2, r0
 8007774:	460b      	mov	r3, r1
 8007776:	e9d7 0100 	ldrd	r0, r1, [r7]
 800777a:	f7f9 f935 	bl	80009e8 <__aeabi_dcmpgt>
 800777e:	4603      	mov	r3, r0
 8007780:	2b00      	cmp	r3, #0
 8007782:	d007      	beq.n	8007794 <_ZN3PID3SatEdiii+0x3c>
			pwm_out = max;
 8007784:	6a38      	ldr	r0, [r7, #32]
 8007786:	f7f8 fe35 	bl	80003f4 <__aeabi_i2d>
 800778a:	4602      	mov	r2, r0
 800778c:	460b      	mov	r3, r1
 800778e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8007792:	e01d      	b.n	80077d0 <_ZN3PID3SatEdiii+0x78>
		}

		else if (pwm < min) {
 8007794:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007796:	f7f8 fe2d 	bl	80003f4 <__aeabi_i2d>
 800779a:	4602      	mov	r2, r0
 800779c:	460b      	mov	r3, r1
 800779e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80077a2:	f7f9 f903 	bl	80009ac <__aeabi_dcmplt>
 80077a6:	4603      	mov	r3, r0
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d007      	beq.n	80077bc <_ZN3PID3SatEdiii+0x64>
			pwm_out = min;
 80077ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80077ae:	f7f8 fe21 	bl	80003f4 <__aeabi_i2d>
 80077b2:	4602      	mov	r2, r0
 80077b4:	460b      	mov	r3, r1
 80077b6:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80077ba:	e009      	b.n	80077d0 <_ZN3PID3SatEdiii+0x78>
		}

		else {
			pwm_out = pwm;
 80077bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077c0:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80077c4:	e004      	b.n	80077d0 <_ZN3PID3SatEdiii+0x78>


	}

	else {
		pwm_out = 1000;
 80077c6:	f04f 0200 	mov.w	r2, #0
 80077ca:	4b05      	ldr	r3, [pc, #20]	; (80077e0 <_ZN3PID3SatEdiii+0x88>)
 80077cc:	e9c7 2304 	strd	r2, r3, [r7, #16]
	}
	return pwm_out;
 80077d0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 80077d4:	4610      	mov	r0, r2
 80077d6:	4619      	mov	r1, r3
 80077d8:	3718      	adds	r7, #24
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	408f4000 	.word	0x408f4000

080077e4 <_ZN3PID3SatEdii>:

 double PID::Sat(double pwm, int max, int min) {
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b086      	sub	sp, #24
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	e9c7 2300 	strd	r2, r3, [r7]
	double pwm_out;

		if(pwm > max) {
 80077f0:	6a38      	ldr	r0, [r7, #32]
 80077f2:	f7f8 fdff 	bl	80003f4 <__aeabi_i2d>
 80077f6:	4602      	mov	r2, r0
 80077f8:	460b      	mov	r3, r1
 80077fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80077fe:	f7f9 f8f3 	bl	80009e8 <__aeabi_dcmpgt>
 8007802:	4603      	mov	r3, r0
 8007804:	2b00      	cmp	r3, #0
 8007806:	d007      	beq.n	8007818 <_ZN3PID3SatEdii+0x34>
			pwm_out = max;
 8007808:	6a38      	ldr	r0, [r7, #32]
 800780a:	f7f8 fdf3 	bl	80003f4 <__aeabi_i2d>
 800780e:	4602      	mov	r2, r0
 8007810:	460b      	mov	r3, r1
 8007812:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8007816:	e017      	b.n	8007848 <_ZN3PID3SatEdii+0x64>
		}

		else if (pwm < min) {
 8007818:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800781a:	f7f8 fdeb 	bl	80003f4 <__aeabi_i2d>
 800781e:	4602      	mov	r2, r0
 8007820:	460b      	mov	r3, r1
 8007822:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007826:	f7f9 f8c1 	bl	80009ac <__aeabi_dcmplt>
 800782a:	4603      	mov	r3, r0
 800782c:	2b00      	cmp	r3, #0
 800782e:	d007      	beq.n	8007840 <_ZN3PID3SatEdii+0x5c>
			pwm_out = min;
 8007830:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007832:	f7f8 fddf 	bl	80003f4 <__aeabi_i2d>
 8007836:	4602      	mov	r2, r0
 8007838:	460b      	mov	r3, r1
 800783a:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800783e:	e003      	b.n	8007848 <_ZN3PID3SatEdii+0x64>
		}

		else {
			pwm_out = pwm;
 8007840:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007844:	e9c7 2304 	strd	r2, r3, [r7, #16]
		}




	return pwm_out;
 8007848:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 800784c:	4610      	mov	r0, r2
 800784e:	4619      	mov	r1, r3
 8007850:	3718      	adds	r7, #24
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}

08007856 <_ZN3PID7pwm2angEt>:

float PID::pwm2ang(unsigned short int pwm) {
 8007856:	b580      	push	{r7, lr}
 8007858:	b086      	sub	sp, #24
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
 800785e:	460b      	mov	r3, r1
 8007860:	807b      	strh	r3, [r7, #2]
	int in_min  = 1000;
 8007862:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007866:	617b      	str	r3, [r7, #20]
	int in_max  = 2000;
 8007868:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800786c:	613b      	str	r3, [r7, #16]
	int out_min = -30;
 800786e:	f06f 031d 	mvn.w	r3, #29
 8007872:	60fb      	str	r3, [r7, #12]
	int out_max  = 30;
 8007874:	231e      	movs	r3, #30
 8007876:	60bb      	str	r3, [r7, #8]

	return (pwm - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8007878:	887a      	ldrh	r2, [r7, #2]
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	1ad3      	subs	r3, r2, r3
 800787e:	68b9      	ldr	r1, [r7, #8]
 8007880:	68fa      	ldr	r2, [r7, #12]
 8007882:	1a8a      	subs	r2, r1, r2
 8007884:	fb02 f203 	mul.w	r2, r2, r3
 8007888:	6939      	ldr	r1, [r7, #16]
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	1acb      	subs	r3, r1, r3
 800788e:	fb92 f2f3 	sdiv	r2, r2, r3
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	4413      	add	r3, r2
 8007896:	4618      	mov	r0, r3
 8007898:	f7f9 f9e2 	bl	8000c60 <__aeabi_i2f>
 800789c:	4603      	mov	r3, r0
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3718      	adds	r7, #24
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}

080078a6 <_ZN3PID8pwm2rateEt>:

float PID::pwm2rate(unsigned short int pwm) {
 80078a6:	b580      	push	{r7, lr}
 80078a8:	b086      	sub	sp, #24
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]
 80078ae:	460b      	mov	r3, r1
 80078b0:	807b      	strh	r3, [r7, #2]
	int in_min  = 1000;
 80078b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80078b6:	617b      	str	r3, [r7, #20]
	int in_max  = 2000;
 80078b8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80078bc:	613b      	str	r3, [r7, #16]
	int out_min = -100;
 80078be:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80078c2:	60fb      	str	r3, [r7, #12]
	int out_max  = 100;
 80078c4:	2364      	movs	r3, #100	; 0x64
 80078c6:	60bb      	str	r3, [r7, #8]

	return -1 * ((pwm - in_min) * (out_max - out_min) / (in_max - in_min) + out_min);
 80078c8:	887a      	ldrh	r2, [r7, #2]
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	1ad3      	subs	r3, r2, r3
 80078ce:	68b9      	ldr	r1, [r7, #8]
 80078d0:	68fa      	ldr	r2, [r7, #12]
 80078d2:	1a8a      	subs	r2, r1, r2
 80078d4:	fb02 f203 	mul.w	r2, r2, r3
 80078d8:	6939      	ldr	r1, [r7, #16]
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	1acb      	subs	r3, r1, r3
 80078de:	fb92 f2f3 	sdiv	r2, r2, r3
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	4413      	add	r3, r2
 80078e6:	425b      	negs	r3, r3
 80078e8:	4618      	mov	r0, r3
 80078ea:	f7f9 f9b9 	bl	8000c60 <__aeabi_i2f>
 80078ee:	4603      	mov	r3, r0
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3718      	adds	r7, #24
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}

080078f8 <_ZN3PID7pwm2motEti>:

//Convert pwm to motor speed for simulation
float PID::pwm2mot(unsigned short int pwm, int dir) {
 80078f8:	b590      	push	{r4, r7, lr}
 80078fa:	b089      	sub	sp, #36	; 0x24
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	460b      	mov	r3, r1
 8007902:	607a      	str	r2, [r7, #4]
 8007904:	817b      	strh	r3, [r7, #10]
	float in_min  = 1000;
 8007906:	4b1d      	ldr	r3, [pc, #116]	; (800797c <_ZN3PID7pwm2motEti+0x84>)
 8007908:	61fb      	str	r3, [r7, #28]
	float in_max  = 2000;
 800790a:	4b1d      	ldr	r3, [pc, #116]	; (8007980 <_ZN3PID7pwm2motEti+0x88>)
 800790c:	61bb      	str	r3, [r7, #24]
	float out_min = 0;
 800790e:	f04f 0300 	mov.w	r3, #0
 8007912:	617b      	str	r3, [r7, #20]
	float out_max  = 1326;
 8007914:	4b1b      	ldr	r3, [pc, #108]	; (8007984 <_ZN3PID7pwm2motEti+0x8c>)
 8007916:	613b      	str	r3, [r7, #16]

	return (float)(dir) * ((float)pwm - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f7f9 f9a1 	bl	8000c60 <__aeabi_i2f>
 800791e:	4604      	mov	r4, r0
 8007920:	897b      	ldrh	r3, [r7, #10]
 8007922:	4618      	mov	r0, r3
 8007924:	f7f9 f998 	bl	8000c58 <__aeabi_ui2f>
 8007928:	4603      	mov	r3, r0
 800792a:	69f9      	ldr	r1, [r7, #28]
 800792c:	4618      	mov	r0, r3
 800792e:	f7f9 f8e1 	bl	8000af4 <__aeabi_fsub>
 8007932:	4603      	mov	r3, r0
 8007934:	4619      	mov	r1, r3
 8007936:	4620      	mov	r0, r4
 8007938:	f7f9 f9e6 	bl	8000d08 <__aeabi_fmul>
 800793c:	4603      	mov	r3, r0
 800793e:	461c      	mov	r4, r3
 8007940:	6979      	ldr	r1, [r7, #20]
 8007942:	6938      	ldr	r0, [r7, #16]
 8007944:	f7f9 f8d6 	bl	8000af4 <__aeabi_fsub>
 8007948:	4603      	mov	r3, r0
 800794a:	4619      	mov	r1, r3
 800794c:	4620      	mov	r0, r4
 800794e:	f7f9 f9db 	bl	8000d08 <__aeabi_fmul>
 8007952:	4603      	mov	r3, r0
 8007954:	461c      	mov	r4, r3
 8007956:	69f9      	ldr	r1, [r7, #28]
 8007958:	69b8      	ldr	r0, [r7, #24]
 800795a:	f7f9 f8cb 	bl	8000af4 <__aeabi_fsub>
 800795e:	4603      	mov	r3, r0
 8007960:	4619      	mov	r1, r3
 8007962:	4620      	mov	r0, r4
 8007964:	f7f9 fa84 	bl	8000e70 <__aeabi_fdiv>
 8007968:	4603      	mov	r3, r0
 800796a:	6979      	ldr	r1, [r7, #20]
 800796c:	4618      	mov	r0, r3
 800796e:	f7f9 f8c3 	bl	8000af8 <__addsf3>
 8007972:	4603      	mov	r3, r0
}
 8007974:	4618      	mov	r0, r3
 8007976:	3724      	adds	r7, #36	; 0x24
 8007978:	46bd      	mov	sp, r7
 800797a:	bd90      	pop	{r4, r7, pc}
 800797c:	447a0000 	.word	0x447a0000
 8007980:	44fa0000 	.word	0x44fa0000
 8007984:	44a5c000 	.word	0x44a5c000

08007988 <_ZN3PIDD1Ev>:

PID::~PID() {};
 8007988:	b480      	push	{r7}
 800798a:	b083      	sub	sp, #12
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	4618      	mov	r0, r3
 8007994:	370c      	adds	r7, #12
 8007996:	46bd      	mov	sp, r7
 8007998:	bc80      	pop	{r7}
 800799a:	4770      	bx	lr

0800799c <_ZdlPv>:
 800799c:	f000 bbee 	b.w	800817c <free>

080079a0 <_Znwj>:
 80079a0:	2801      	cmp	r0, #1
 80079a2:	bf38      	it	cc
 80079a4:	2001      	movcc	r0, #1
 80079a6:	b510      	push	{r4, lr}
 80079a8:	4604      	mov	r4, r0
 80079aa:	4620      	mov	r0, r4
 80079ac:	f000 fbde 	bl	800816c <malloc>
 80079b0:	b930      	cbnz	r0, 80079c0 <_Znwj+0x20>
 80079b2:	f000 f80d 	bl	80079d0 <_ZSt15get_new_handlerv>
 80079b6:	b908      	cbnz	r0, 80079bc <_Znwj+0x1c>
 80079b8:	f000 fba6 	bl	8008108 <abort>
 80079bc:	4780      	blx	r0
 80079be:	e7f4      	b.n	80079aa <_Znwj+0xa>
 80079c0:	bd10      	pop	{r4, pc}

080079c2 <_ZSt17__throw_bad_allocv>:
 80079c2:	b508      	push	{r3, lr}
 80079c4:	f000 fba0 	bl	8008108 <abort>

080079c8 <_ZSt20__throw_length_errorPKc>:
 80079c8:	b508      	push	{r3, lr}
 80079ca:	f000 fb9d 	bl	8008108 <abort>
	...

080079d0 <_ZSt15get_new_handlerv>:
 80079d0:	4b02      	ldr	r3, [pc, #8]	; (80079dc <_ZSt15get_new_handlerv+0xc>)
 80079d2:	6818      	ldr	r0, [r3, #0]
 80079d4:	f3bf 8f5b 	dmb	ish
 80079d8:	4770      	bx	lr
 80079da:	bf00      	nop
 80079dc:	200007e4 	.word	0x200007e4

080079e0 <exp>:
 80079e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079e2:	4606      	mov	r6, r0
 80079e4:	460f      	mov	r7, r1
 80079e6:	f000 f883 	bl	8007af0 <__ieee754_exp>
 80079ea:	4b1b      	ldr	r3, [pc, #108]	; (8007a58 <exp+0x78>)
 80079ec:	4604      	mov	r4, r0
 80079ee:	f993 3000 	ldrsb.w	r3, [r3]
 80079f2:	460d      	mov	r5, r1
 80079f4:	3301      	adds	r3, #1
 80079f6:	d012      	beq.n	8007a1e <exp+0x3e>
 80079f8:	4630      	mov	r0, r6
 80079fa:	4639      	mov	r1, r7
 80079fc:	f000 fb77 	bl	80080ee <finite>
 8007a00:	b168      	cbz	r0, 8007a1e <exp+0x3e>
 8007a02:	a311      	add	r3, pc, #68	; (adr r3, 8007a48 <exp+0x68>)
 8007a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a08:	4630      	mov	r0, r6
 8007a0a:	4639      	mov	r1, r7
 8007a0c:	f7f8 ffec 	bl	80009e8 <__aeabi_dcmpgt>
 8007a10:	b140      	cbz	r0, 8007a24 <exp+0x44>
 8007a12:	f000 fb81 	bl	8008118 <__errno>
 8007a16:	2322      	movs	r3, #34	; 0x22
 8007a18:	2400      	movs	r4, #0
 8007a1a:	4d10      	ldr	r5, [pc, #64]	; (8007a5c <exp+0x7c>)
 8007a1c:	6003      	str	r3, [r0, #0]
 8007a1e:	4620      	mov	r0, r4
 8007a20:	4629      	mov	r1, r5
 8007a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a24:	4630      	mov	r0, r6
 8007a26:	a30a      	add	r3, pc, #40	; (adr r3, 8007a50 <exp+0x70>)
 8007a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a2c:	4639      	mov	r1, r7
 8007a2e:	f7f8 ffbd 	bl	80009ac <__aeabi_dcmplt>
 8007a32:	2800      	cmp	r0, #0
 8007a34:	d0f3      	beq.n	8007a1e <exp+0x3e>
 8007a36:	f000 fb6f 	bl	8008118 <__errno>
 8007a3a:	2322      	movs	r3, #34	; 0x22
 8007a3c:	2400      	movs	r4, #0
 8007a3e:	2500      	movs	r5, #0
 8007a40:	6003      	str	r3, [r0, #0]
 8007a42:	e7ec      	b.n	8007a1e <exp+0x3e>
 8007a44:	f3af 8000 	nop.w
 8007a48:	fefa39ef 	.word	0xfefa39ef
 8007a4c:	40862e42 	.word	0x40862e42
 8007a50:	d52d3051 	.word	0xd52d3051
 8007a54:	c0874910 	.word	0xc0874910
 8007a58:	20000009 	.word	0x20000009
 8007a5c:	7ff00000 	.word	0x7ff00000

08007a60 <asinf>:
 8007a60:	b538      	push	{r3, r4, r5, lr}
 8007a62:	4604      	mov	r4, r0
 8007a64:	f000 f9ae 	bl	8007dc4 <__ieee754_asinf>
 8007a68:	4b0e      	ldr	r3, [pc, #56]	; (8007aa4 <asinf+0x44>)
 8007a6a:	4605      	mov	r5, r0
 8007a6c:	f993 3000 	ldrsb.w	r3, [r3]
 8007a70:	3301      	adds	r3, #1
 8007a72:	d015      	beq.n	8007aa0 <asinf+0x40>
 8007a74:	4621      	mov	r1, r4
 8007a76:	4620      	mov	r0, r4
 8007a78:	f7f9 fb0c 	bl	8001094 <__aeabi_fcmpun>
 8007a7c:	b980      	cbnz	r0, 8007aa0 <asinf+0x40>
 8007a7e:	4620      	mov	r0, r4
 8007a80:	f000 fb3b 	bl	80080fa <fabsf>
 8007a84:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8007a88:	f7f9 fafa 	bl	8001080 <__aeabi_fcmpgt>
 8007a8c:	b140      	cbz	r0, 8007aa0 <asinf+0x40>
 8007a8e:	f000 fb43 	bl	8008118 <__errno>
 8007a92:	2321      	movs	r3, #33	; 0x21
 8007a94:	6003      	str	r3, [r0, #0]
 8007a96:	4804      	ldr	r0, [pc, #16]	; (8007aa8 <asinf+0x48>)
 8007a98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a9c:	f000 bb30 	b.w	8008100 <nanf>
 8007aa0:	4628      	mov	r0, r5
 8007aa2:	bd38      	pop	{r3, r4, r5, pc}
 8007aa4:	20000009 	.word	0x20000009
 8007aa8:	08008474 	.word	0x08008474

08007aac <sqrtf>:
 8007aac:	b538      	push	{r3, r4, r5, lr}
 8007aae:	4605      	mov	r5, r0
 8007ab0:	f000 facc 	bl	800804c <__ieee754_sqrtf>
 8007ab4:	4b0d      	ldr	r3, [pc, #52]	; (8007aec <sqrtf+0x40>)
 8007ab6:	4604      	mov	r4, r0
 8007ab8:	f993 3000 	ldrsb.w	r3, [r3]
 8007abc:	3301      	adds	r3, #1
 8007abe:	d012      	beq.n	8007ae6 <sqrtf+0x3a>
 8007ac0:	4629      	mov	r1, r5
 8007ac2:	4628      	mov	r0, r5
 8007ac4:	f7f9 fae6 	bl	8001094 <__aeabi_fcmpun>
 8007ac8:	b968      	cbnz	r0, 8007ae6 <sqrtf+0x3a>
 8007aca:	2100      	movs	r1, #0
 8007acc:	4628      	mov	r0, r5
 8007ace:	f7f9 fab9 	bl	8001044 <__aeabi_fcmplt>
 8007ad2:	b140      	cbz	r0, 8007ae6 <sqrtf+0x3a>
 8007ad4:	f000 fb20 	bl	8008118 <__errno>
 8007ad8:	2321      	movs	r3, #33	; 0x21
 8007ada:	2100      	movs	r1, #0
 8007adc:	6003      	str	r3, [r0, #0]
 8007ade:	4608      	mov	r0, r1
 8007ae0:	f7f9 f9c6 	bl	8000e70 <__aeabi_fdiv>
 8007ae4:	4604      	mov	r4, r0
 8007ae6:	4620      	mov	r0, r4
 8007ae8:	bd38      	pop	{r3, r4, r5, pc}
 8007aea:	bf00      	nop
 8007aec:	20000009 	.word	0x20000009

08007af0 <__ieee754_exp>:
 8007af0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007af4:	4faa      	ldr	r7, [pc, #680]	; (8007da0 <__ieee754_exp+0x2b0>)
 8007af6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007afa:	42bb      	cmp	r3, r7
 8007afc:	4605      	mov	r5, r0
 8007afe:	460c      	mov	r4, r1
 8007b00:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 8007b04:	d92f      	bls.n	8007b66 <__ieee754_exp+0x76>
 8007b06:	4fa7      	ldr	r7, [pc, #668]	; (8007da4 <__ieee754_exp+0x2b4>)
 8007b08:	42bb      	cmp	r3, r7
 8007b0a:	d911      	bls.n	8007b30 <__ieee754_exp+0x40>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8007b12:	4313      	orrs	r3, r2
 8007b14:	d006      	beq.n	8007b24 <__ieee754_exp+0x34>
 8007b16:	4602      	mov	r2, r0
 8007b18:	460b      	mov	r3, r1
 8007b1a:	f7f8 fb1f 	bl	800015c <__adddf3>
 8007b1e:	4605      	mov	r5, r0
 8007b20:	460c      	mov	r4, r1
 8007b22:	e000      	b.n	8007b26 <__ieee754_exp+0x36>
 8007b24:	b9e6      	cbnz	r6, 8007b60 <__ieee754_exp+0x70>
 8007b26:	4628      	mov	r0, r5
 8007b28:	4621      	mov	r1, r4
 8007b2a:	b004      	add	sp, #16
 8007b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b30:	a385      	add	r3, pc, #532	; (adr r3, 8007d48 <__ieee754_exp+0x258>)
 8007b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b36:	f7f8 ff57 	bl	80009e8 <__aeabi_dcmpgt>
 8007b3a:	b138      	cbz	r0, 8007b4c <__ieee754_exp+0x5c>
 8007b3c:	a384      	add	r3, pc, #528	; (adr r3, 8007d50 <__ieee754_exp+0x260>)
 8007b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b42:	4610      	mov	r0, r2
 8007b44:	4619      	mov	r1, r3
 8007b46:	f7f8 fcbf 	bl	80004c8 <__aeabi_dmul>
 8007b4a:	e7e8      	b.n	8007b1e <__ieee754_exp+0x2e>
 8007b4c:	4628      	mov	r0, r5
 8007b4e:	a382      	add	r3, pc, #520	; (adr r3, 8007d58 <__ieee754_exp+0x268>)
 8007b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b54:	4621      	mov	r1, r4
 8007b56:	f7f8 ff29 	bl	80009ac <__aeabi_dcmplt>
 8007b5a:	2800      	cmp	r0, #0
 8007b5c:	f000 8082 	beq.w	8007c64 <__ieee754_exp+0x174>
 8007b60:	2500      	movs	r5, #0
 8007b62:	462c      	mov	r4, r5
 8007b64:	e7df      	b.n	8007b26 <__ieee754_exp+0x36>
 8007b66:	4a90      	ldr	r2, [pc, #576]	; (8007da8 <__ieee754_exp+0x2b8>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	f240 80a7 	bls.w	8007cbc <__ieee754_exp+0x1cc>
 8007b6e:	4a8f      	ldr	r2, [pc, #572]	; (8007dac <__ieee754_exp+0x2bc>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d877      	bhi.n	8007c64 <__ieee754_exp+0x174>
 8007b74:	4b8e      	ldr	r3, [pc, #568]	; (8007db0 <__ieee754_exp+0x2c0>)
 8007b76:	00f4      	lsls	r4, r6, #3
 8007b78:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b80:	f7f8 faea 	bl	8000158 <__aeabi_dsub>
 8007b84:	4680      	mov	r8, r0
 8007b86:	4689      	mov	r9, r1
 8007b88:	4b8a      	ldr	r3, [pc, #552]	; (8007db4 <__ieee754_exp+0x2c4>)
 8007b8a:	f1c6 0a01 	rsb	sl, r6, #1
 8007b8e:	4423      	add	r3, r4
 8007b90:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007b94:	e9cd 3400 	strd	r3, r4, [sp]
 8007b98:	ebaa 0a06 	sub.w	sl, sl, r6
 8007b9c:	4640      	mov	r0, r8
 8007b9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ba2:	4649      	mov	r1, r9
 8007ba4:	f7f8 fad8 	bl	8000158 <__aeabi_dsub>
 8007ba8:	4605      	mov	r5, r0
 8007baa:	460c      	mov	r4, r1
 8007bac:	462a      	mov	r2, r5
 8007bae:	4623      	mov	r3, r4
 8007bb0:	4628      	mov	r0, r5
 8007bb2:	4621      	mov	r1, r4
 8007bb4:	f7f8 fc88 	bl	80004c8 <__aeabi_dmul>
 8007bb8:	a369      	add	r3, pc, #420	; (adr r3, 8007d60 <__ieee754_exp+0x270>)
 8007bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bbe:	4606      	mov	r6, r0
 8007bc0:	460f      	mov	r7, r1
 8007bc2:	f7f8 fc81 	bl	80004c8 <__aeabi_dmul>
 8007bc6:	a368      	add	r3, pc, #416	; (adr r3, 8007d68 <__ieee754_exp+0x278>)
 8007bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bcc:	f7f8 fac4 	bl	8000158 <__aeabi_dsub>
 8007bd0:	4632      	mov	r2, r6
 8007bd2:	463b      	mov	r3, r7
 8007bd4:	f7f8 fc78 	bl	80004c8 <__aeabi_dmul>
 8007bd8:	a365      	add	r3, pc, #404	; (adr r3, 8007d70 <__ieee754_exp+0x280>)
 8007bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bde:	f7f8 fabd 	bl	800015c <__adddf3>
 8007be2:	4632      	mov	r2, r6
 8007be4:	463b      	mov	r3, r7
 8007be6:	f7f8 fc6f 	bl	80004c8 <__aeabi_dmul>
 8007bea:	a363      	add	r3, pc, #396	; (adr r3, 8007d78 <__ieee754_exp+0x288>)
 8007bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf0:	f7f8 fab2 	bl	8000158 <__aeabi_dsub>
 8007bf4:	4632      	mov	r2, r6
 8007bf6:	463b      	mov	r3, r7
 8007bf8:	f7f8 fc66 	bl	80004c8 <__aeabi_dmul>
 8007bfc:	a360      	add	r3, pc, #384	; (adr r3, 8007d80 <__ieee754_exp+0x290>)
 8007bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c02:	f7f8 faab 	bl	800015c <__adddf3>
 8007c06:	4632      	mov	r2, r6
 8007c08:	463b      	mov	r3, r7
 8007c0a:	f7f8 fc5d 	bl	80004c8 <__aeabi_dmul>
 8007c0e:	4602      	mov	r2, r0
 8007c10:	460b      	mov	r3, r1
 8007c12:	4628      	mov	r0, r5
 8007c14:	4621      	mov	r1, r4
 8007c16:	f7f8 fa9f 	bl	8000158 <__aeabi_dsub>
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	4606      	mov	r6, r0
 8007c20:	460f      	mov	r7, r1
 8007c22:	4628      	mov	r0, r5
 8007c24:	4621      	mov	r1, r4
 8007c26:	f7f8 fc4f 	bl	80004c8 <__aeabi_dmul>
 8007c2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c2e:	f1ba 0f00 	cmp.w	sl, #0
 8007c32:	d15a      	bne.n	8007cea <__ieee754_exp+0x1fa>
 8007c34:	2200      	movs	r2, #0
 8007c36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007c3a:	4630      	mov	r0, r6
 8007c3c:	4639      	mov	r1, r7
 8007c3e:	f7f8 fa8b 	bl	8000158 <__aeabi_dsub>
 8007c42:	4602      	mov	r2, r0
 8007c44:	460b      	mov	r3, r1
 8007c46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c4a:	f7f8 fd67 	bl	800071c <__aeabi_ddiv>
 8007c4e:	462a      	mov	r2, r5
 8007c50:	4623      	mov	r3, r4
 8007c52:	f7f8 fa81 	bl	8000158 <__aeabi_dsub>
 8007c56:	4602      	mov	r2, r0
 8007c58:	460b      	mov	r3, r1
 8007c5a:	2000      	movs	r0, #0
 8007c5c:	4956      	ldr	r1, [pc, #344]	; (8007db8 <__ieee754_exp+0x2c8>)
 8007c5e:	f7f8 fa7b 	bl	8000158 <__aeabi_dsub>
 8007c62:	e75c      	b.n	8007b1e <__ieee754_exp+0x2e>
 8007c64:	4855      	ldr	r0, [pc, #340]	; (8007dbc <__ieee754_exp+0x2cc>)
 8007c66:	a348      	add	r3, pc, #288	; (adr r3, 8007d88 <__ieee754_exp+0x298>)
 8007c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6c:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8007c70:	4621      	mov	r1, r4
 8007c72:	4628      	mov	r0, r5
 8007c74:	f7f8 fc28 	bl	80004c8 <__aeabi_dmul>
 8007c78:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007c7c:	f7f8 fa6e 	bl	800015c <__adddf3>
 8007c80:	f7f8 febc 	bl	80009fc <__aeabi_d2iz>
 8007c84:	4682      	mov	sl, r0
 8007c86:	f7f8 fbb5 	bl	80003f4 <__aeabi_i2d>
 8007c8a:	a341      	add	r3, pc, #260	; (adr r3, 8007d90 <__ieee754_exp+0x2a0>)
 8007c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c90:	4606      	mov	r6, r0
 8007c92:	460f      	mov	r7, r1
 8007c94:	f7f8 fc18 	bl	80004c8 <__aeabi_dmul>
 8007c98:	4602      	mov	r2, r0
 8007c9a:	460b      	mov	r3, r1
 8007c9c:	4628      	mov	r0, r5
 8007c9e:	4621      	mov	r1, r4
 8007ca0:	f7f8 fa5a 	bl	8000158 <__aeabi_dsub>
 8007ca4:	a33c      	add	r3, pc, #240	; (adr r3, 8007d98 <__ieee754_exp+0x2a8>)
 8007ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007caa:	4680      	mov	r8, r0
 8007cac:	4689      	mov	r9, r1
 8007cae:	4630      	mov	r0, r6
 8007cb0:	4639      	mov	r1, r7
 8007cb2:	f7f8 fc09 	bl	80004c8 <__aeabi_dmul>
 8007cb6:	e9cd 0100 	strd	r0, r1, [sp]
 8007cba:	e76f      	b.n	8007b9c <__ieee754_exp+0xac>
 8007cbc:	4a40      	ldr	r2, [pc, #256]	; (8007dc0 <__ieee754_exp+0x2d0>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d80e      	bhi.n	8007ce0 <__ieee754_exp+0x1f0>
 8007cc2:	a323      	add	r3, pc, #140	; (adr r3, 8007d50 <__ieee754_exp+0x260>)
 8007cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc8:	f7f8 fa48 	bl	800015c <__adddf3>
 8007ccc:	2200      	movs	r2, #0
 8007cce:	4b3a      	ldr	r3, [pc, #232]	; (8007db8 <__ieee754_exp+0x2c8>)
 8007cd0:	f7f8 fe8a 	bl	80009e8 <__aeabi_dcmpgt>
 8007cd4:	b138      	cbz	r0, 8007ce6 <__ieee754_exp+0x1f6>
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	4628      	mov	r0, r5
 8007cda:	4621      	mov	r1, r4
 8007cdc:	4b36      	ldr	r3, [pc, #216]	; (8007db8 <__ieee754_exp+0x2c8>)
 8007cde:	e71c      	b.n	8007b1a <__ieee754_exp+0x2a>
 8007ce0:	f04f 0a00 	mov.w	sl, #0
 8007ce4:	e762      	b.n	8007bac <__ieee754_exp+0xbc>
 8007ce6:	4682      	mov	sl, r0
 8007ce8:	e760      	b.n	8007bac <__ieee754_exp+0xbc>
 8007cea:	4632      	mov	r2, r6
 8007cec:	463b      	mov	r3, r7
 8007cee:	2000      	movs	r0, #0
 8007cf0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007cf4:	f7f8 fa30 	bl	8000158 <__aeabi_dsub>
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	460b      	mov	r3, r1
 8007cfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d00:	f7f8 fd0c 	bl	800071c <__aeabi_ddiv>
 8007d04:	4602      	mov	r2, r0
 8007d06:	460b      	mov	r3, r1
 8007d08:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d0c:	f7f8 fa24 	bl	8000158 <__aeabi_dsub>
 8007d10:	4642      	mov	r2, r8
 8007d12:	464b      	mov	r3, r9
 8007d14:	f7f8 fa20 	bl	8000158 <__aeabi_dsub>
 8007d18:	4602      	mov	r2, r0
 8007d1a:	460b      	mov	r3, r1
 8007d1c:	2000      	movs	r0, #0
 8007d1e:	4926      	ldr	r1, [pc, #152]	; (8007db8 <__ieee754_exp+0x2c8>)
 8007d20:	f7f8 fa1a 	bl	8000158 <__aeabi_dsub>
 8007d24:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8007d28:	4592      	cmp	sl, r2
 8007d2a:	db02      	blt.n	8007d32 <__ieee754_exp+0x242>
 8007d2c:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8007d30:	e6f5      	b.n	8007b1e <__ieee754_exp+0x2e>
 8007d32:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8007d36:	2200      	movs	r2, #0
 8007d38:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8007d3c:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8007d40:	e701      	b.n	8007b46 <__ieee754_exp+0x56>
 8007d42:	bf00      	nop
 8007d44:	f3af 8000 	nop.w
 8007d48:	fefa39ef 	.word	0xfefa39ef
 8007d4c:	40862e42 	.word	0x40862e42
 8007d50:	8800759c 	.word	0x8800759c
 8007d54:	7e37e43c 	.word	0x7e37e43c
 8007d58:	d52d3051 	.word	0xd52d3051
 8007d5c:	c0874910 	.word	0xc0874910
 8007d60:	72bea4d0 	.word	0x72bea4d0
 8007d64:	3e663769 	.word	0x3e663769
 8007d68:	c5d26bf1 	.word	0xc5d26bf1
 8007d6c:	3ebbbd41 	.word	0x3ebbbd41
 8007d70:	af25de2c 	.word	0xaf25de2c
 8007d74:	3f11566a 	.word	0x3f11566a
 8007d78:	16bebd93 	.word	0x16bebd93
 8007d7c:	3f66c16c 	.word	0x3f66c16c
 8007d80:	5555553e 	.word	0x5555553e
 8007d84:	3fc55555 	.word	0x3fc55555
 8007d88:	652b82fe 	.word	0x652b82fe
 8007d8c:	3ff71547 	.word	0x3ff71547
 8007d90:	fee00000 	.word	0xfee00000
 8007d94:	3fe62e42 	.word	0x3fe62e42
 8007d98:	35793c76 	.word	0x35793c76
 8007d9c:	3dea39ef 	.word	0x3dea39ef
 8007da0:	40862e41 	.word	0x40862e41
 8007da4:	7fefffff 	.word	0x7fefffff
 8007da8:	3fd62e42 	.word	0x3fd62e42
 8007dac:	3ff0a2b1 	.word	0x3ff0a2b1
 8007db0:	08008488 	.word	0x08008488
 8007db4:	08008498 	.word	0x08008498
 8007db8:	3ff00000 	.word	0x3ff00000
 8007dbc:	08008478 	.word	0x08008478
 8007dc0:	3e2fffff 	.word	0x3e2fffff

08007dc4 <__ieee754_asinf>:
 8007dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dc8:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 8007dcc:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8007dd0:	4604      	mov	r4, r0
 8007dd2:	4605      	mov	r5, r0
 8007dd4:	d10c      	bne.n	8007df0 <__ieee754_asinf+0x2c>
 8007dd6:	498d      	ldr	r1, [pc, #564]	; (800800c <__ieee754_asinf+0x248>)
 8007dd8:	f7f8 ff96 	bl	8000d08 <__aeabi_fmul>
 8007ddc:	498c      	ldr	r1, [pc, #560]	; (8008010 <__ieee754_asinf+0x24c>)
 8007dde:	4605      	mov	r5, r0
 8007de0:	4620      	mov	r0, r4
 8007de2:	f7f8 ff91 	bl	8000d08 <__aeabi_fmul>
 8007de6:	4601      	mov	r1, r0
 8007de8:	4628      	mov	r0, r5
 8007dea:	f7f8 fe85 	bl	8000af8 <__addsf3>
 8007dee:	e006      	b.n	8007dfe <__ieee754_asinf+0x3a>
 8007df0:	dd07      	ble.n	8007e02 <__ieee754_asinf+0x3e>
 8007df2:	4601      	mov	r1, r0
 8007df4:	f7f8 fe7e 	bl	8000af4 <__aeabi_fsub>
 8007df8:	4601      	mov	r1, r0
 8007dfa:	f7f9 f839 	bl	8000e70 <__aeabi_fdiv>
 8007dfe:	4604      	mov	r4, r0
 8007e00:	e00e      	b.n	8007e20 <__ieee754_asinf+0x5c>
 8007e02:	f1b8 5f7c 	cmp.w	r8, #1056964608	; 0x3f000000
 8007e06:	da58      	bge.n	8007eba <__ieee754_asinf+0xf6>
 8007e08:	f1b8 5f48 	cmp.w	r8, #838860800	; 0x32000000
 8007e0c:	da0b      	bge.n	8007e26 <__ieee754_asinf+0x62>
 8007e0e:	4981      	ldr	r1, [pc, #516]	; (8008014 <__ieee754_asinf+0x250>)
 8007e10:	f7f8 fe72 	bl	8000af8 <__addsf3>
 8007e14:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8007e18:	f7f9 f932 	bl	8001080 <__aeabi_fcmpgt>
 8007e1c:	2800      	cmp	r0, #0
 8007e1e:	d04c      	beq.n	8007eba <__ieee754_asinf+0xf6>
 8007e20:	4620      	mov	r0, r4
 8007e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e26:	4601      	mov	r1, r0
 8007e28:	f7f8 ff6e 	bl	8000d08 <__aeabi_fmul>
 8007e2c:	4605      	mov	r5, r0
 8007e2e:	497a      	ldr	r1, [pc, #488]	; (8008018 <__ieee754_asinf+0x254>)
 8007e30:	f7f8 ff6a 	bl	8000d08 <__aeabi_fmul>
 8007e34:	4979      	ldr	r1, [pc, #484]	; (800801c <__ieee754_asinf+0x258>)
 8007e36:	f7f8 fe5f 	bl	8000af8 <__addsf3>
 8007e3a:	4629      	mov	r1, r5
 8007e3c:	f7f8 ff64 	bl	8000d08 <__aeabi_fmul>
 8007e40:	4977      	ldr	r1, [pc, #476]	; (8008020 <__ieee754_asinf+0x25c>)
 8007e42:	f7f8 fe57 	bl	8000af4 <__aeabi_fsub>
 8007e46:	4629      	mov	r1, r5
 8007e48:	f7f8 ff5e 	bl	8000d08 <__aeabi_fmul>
 8007e4c:	4975      	ldr	r1, [pc, #468]	; (8008024 <__ieee754_asinf+0x260>)
 8007e4e:	f7f8 fe53 	bl	8000af8 <__addsf3>
 8007e52:	4629      	mov	r1, r5
 8007e54:	f7f8 ff58 	bl	8000d08 <__aeabi_fmul>
 8007e58:	4973      	ldr	r1, [pc, #460]	; (8008028 <__ieee754_asinf+0x264>)
 8007e5a:	f7f8 fe4b 	bl	8000af4 <__aeabi_fsub>
 8007e5e:	4629      	mov	r1, r5
 8007e60:	f7f8 ff52 	bl	8000d08 <__aeabi_fmul>
 8007e64:	4971      	ldr	r1, [pc, #452]	; (800802c <__ieee754_asinf+0x268>)
 8007e66:	f7f8 fe47 	bl	8000af8 <__addsf3>
 8007e6a:	4629      	mov	r1, r5
 8007e6c:	f7f8 ff4c 	bl	8000d08 <__aeabi_fmul>
 8007e70:	496f      	ldr	r1, [pc, #444]	; (8008030 <__ieee754_asinf+0x26c>)
 8007e72:	4606      	mov	r6, r0
 8007e74:	4628      	mov	r0, r5
 8007e76:	f7f8 ff47 	bl	8000d08 <__aeabi_fmul>
 8007e7a:	496e      	ldr	r1, [pc, #440]	; (8008034 <__ieee754_asinf+0x270>)
 8007e7c:	f7f8 fe3a 	bl	8000af4 <__aeabi_fsub>
 8007e80:	4629      	mov	r1, r5
 8007e82:	f7f8 ff41 	bl	8000d08 <__aeabi_fmul>
 8007e86:	496c      	ldr	r1, [pc, #432]	; (8008038 <__ieee754_asinf+0x274>)
 8007e88:	f7f8 fe36 	bl	8000af8 <__addsf3>
 8007e8c:	4629      	mov	r1, r5
 8007e8e:	f7f8 ff3b 	bl	8000d08 <__aeabi_fmul>
 8007e92:	496a      	ldr	r1, [pc, #424]	; (800803c <__ieee754_asinf+0x278>)
 8007e94:	f7f8 fe2e 	bl	8000af4 <__aeabi_fsub>
 8007e98:	4629      	mov	r1, r5
 8007e9a:	f7f8 ff35 	bl	8000d08 <__aeabi_fmul>
 8007e9e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8007ea2:	f7f8 fe29 	bl	8000af8 <__addsf3>
 8007ea6:	4601      	mov	r1, r0
 8007ea8:	4630      	mov	r0, r6
 8007eaa:	f7f8 ffe1 	bl	8000e70 <__aeabi_fdiv>
 8007eae:	4621      	mov	r1, r4
 8007eb0:	f7f8 ff2a 	bl	8000d08 <__aeabi_fmul>
 8007eb4:	4601      	mov	r1, r0
 8007eb6:	4620      	mov	r0, r4
 8007eb8:	e797      	b.n	8007dea <__ieee754_asinf+0x26>
 8007eba:	4620      	mov	r0, r4
 8007ebc:	f000 f91d 	bl	80080fa <fabsf>
 8007ec0:	4601      	mov	r1, r0
 8007ec2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007ec6:	f7f8 fe15 	bl	8000af4 <__aeabi_fsub>
 8007eca:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8007ece:	f7f8 ff1b 	bl	8000d08 <__aeabi_fmul>
 8007ed2:	4606      	mov	r6, r0
 8007ed4:	4950      	ldr	r1, [pc, #320]	; (8008018 <__ieee754_asinf+0x254>)
 8007ed6:	f7f8 ff17 	bl	8000d08 <__aeabi_fmul>
 8007eda:	4950      	ldr	r1, [pc, #320]	; (800801c <__ieee754_asinf+0x258>)
 8007edc:	f7f8 fe0c 	bl	8000af8 <__addsf3>
 8007ee0:	4631      	mov	r1, r6
 8007ee2:	f7f8 ff11 	bl	8000d08 <__aeabi_fmul>
 8007ee6:	494e      	ldr	r1, [pc, #312]	; (8008020 <__ieee754_asinf+0x25c>)
 8007ee8:	f7f8 fe04 	bl	8000af4 <__aeabi_fsub>
 8007eec:	4631      	mov	r1, r6
 8007eee:	f7f8 ff0b 	bl	8000d08 <__aeabi_fmul>
 8007ef2:	494c      	ldr	r1, [pc, #304]	; (8008024 <__ieee754_asinf+0x260>)
 8007ef4:	f7f8 fe00 	bl	8000af8 <__addsf3>
 8007ef8:	4631      	mov	r1, r6
 8007efa:	f7f8 ff05 	bl	8000d08 <__aeabi_fmul>
 8007efe:	494a      	ldr	r1, [pc, #296]	; (8008028 <__ieee754_asinf+0x264>)
 8007f00:	f7f8 fdf8 	bl	8000af4 <__aeabi_fsub>
 8007f04:	4631      	mov	r1, r6
 8007f06:	f7f8 feff 	bl	8000d08 <__aeabi_fmul>
 8007f0a:	4948      	ldr	r1, [pc, #288]	; (800802c <__ieee754_asinf+0x268>)
 8007f0c:	f7f8 fdf4 	bl	8000af8 <__addsf3>
 8007f10:	4631      	mov	r1, r6
 8007f12:	f7f8 fef9 	bl	8000d08 <__aeabi_fmul>
 8007f16:	4946      	ldr	r1, [pc, #280]	; (8008030 <__ieee754_asinf+0x26c>)
 8007f18:	4681      	mov	r9, r0
 8007f1a:	4630      	mov	r0, r6
 8007f1c:	f7f8 fef4 	bl	8000d08 <__aeabi_fmul>
 8007f20:	4944      	ldr	r1, [pc, #272]	; (8008034 <__ieee754_asinf+0x270>)
 8007f22:	f7f8 fde7 	bl	8000af4 <__aeabi_fsub>
 8007f26:	4631      	mov	r1, r6
 8007f28:	f7f8 feee 	bl	8000d08 <__aeabi_fmul>
 8007f2c:	4942      	ldr	r1, [pc, #264]	; (8008038 <__ieee754_asinf+0x274>)
 8007f2e:	f7f8 fde3 	bl	8000af8 <__addsf3>
 8007f32:	4631      	mov	r1, r6
 8007f34:	f7f8 fee8 	bl	8000d08 <__aeabi_fmul>
 8007f38:	4940      	ldr	r1, [pc, #256]	; (800803c <__ieee754_asinf+0x278>)
 8007f3a:	f7f8 fddb 	bl	8000af4 <__aeabi_fsub>
 8007f3e:	4631      	mov	r1, r6
 8007f40:	f7f8 fee2 	bl	8000d08 <__aeabi_fmul>
 8007f44:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8007f48:	f7f8 fdd6 	bl	8000af8 <__addsf3>
 8007f4c:	4682      	mov	sl, r0
 8007f4e:	4630      	mov	r0, r6
 8007f50:	f000 f87c 	bl	800804c <__ieee754_sqrtf>
 8007f54:	4b3a      	ldr	r3, [pc, #232]	; (8008040 <__ieee754_asinf+0x27c>)
 8007f56:	4607      	mov	r7, r0
 8007f58:	4598      	cmp	r8, r3
 8007f5a:	dd1a      	ble.n	8007f92 <__ieee754_asinf+0x1ce>
 8007f5c:	4651      	mov	r1, sl
 8007f5e:	4648      	mov	r0, r9
 8007f60:	f7f8 ff86 	bl	8000e70 <__aeabi_fdiv>
 8007f64:	4639      	mov	r1, r7
 8007f66:	f7f8 fecf 	bl	8000d08 <__aeabi_fmul>
 8007f6a:	4639      	mov	r1, r7
 8007f6c:	f7f8 fdc4 	bl	8000af8 <__addsf3>
 8007f70:	4601      	mov	r1, r0
 8007f72:	f7f8 fdc1 	bl	8000af8 <__addsf3>
 8007f76:	4933      	ldr	r1, [pc, #204]	; (8008044 <__ieee754_asinf+0x280>)
 8007f78:	f7f8 fdbe 	bl	8000af8 <__addsf3>
 8007f7c:	4601      	mov	r1, r0
 8007f7e:	4823      	ldr	r0, [pc, #140]	; (800800c <__ieee754_asinf+0x248>)
 8007f80:	f7f8 fdb8 	bl	8000af4 <__aeabi_fsub>
 8007f84:	2d00      	cmp	r5, #0
 8007f86:	4604      	mov	r4, r0
 8007f88:	f73f af4a 	bgt.w	8007e20 <__ieee754_asinf+0x5c>
 8007f8c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8007f90:	e735      	b.n	8007dfe <__ieee754_asinf+0x3a>
 8007f92:	4601      	mov	r1, r0
 8007f94:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 8007f98:	f7f8 fdae 	bl	8000af8 <__addsf3>
 8007f9c:	4651      	mov	r1, sl
 8007f9e:	4604      	mov	r4, r0
 8007fa0:	4648      	mov	r0, r9
 8007fa2:	f7f8 ff65 	bl	8000e70 <__aeabi_fdiv>
 8007fa6:	4601      	mov	r1, r0
 8007fa8:	4620      	mov	r0, r4
 8007faa:	f7f8 fead 	bl	8000d08 <__aeabi_fmul>
 8007fae:	f028 080f 	bic.w	r8, r8, #15
 8007fb2:	4681      	mov	r9, r0
 8007fb4:	4641      	mov	r1, r8
 8007fb6:	4640      	mov	r0, r8
 8007fb8:	f7f8 fea6 	bl	8000d08 <__aeabi_fmul>
 8007fbc:	4601      	mov	r1, r0
 8007fbe:	4630      	mov	r0, r6
 8007fc0:	f7f8 fd98 	bl	8000af4 <__aeabi_fsub>
 8007fc4:	4641      	mov	r1, r8
 8007fc6:	4604      	mov	r4, r0
 8007fc8:	4638      	mov	r0, r7
 8007fca:	f7f8 fd95 	bl	8000af8 <__addsf3>
 8007fce:	4601      	mov	r1, r0
 8007fd0:	4620      	mov	r0, r4
 8007fd2:	f7f8 ff4d 	bl	8000e70 <__aeabi_fdiv>
 8007fd6:	4601      	mov	r1, r0
 8007fd8:	f7f8 fd8e 	bl	8000af8 <__addsf3>
 8007fdc:	4601      	mov	r1, r0
 8007fde:	480c      	ldr	r0, [pc, #48]	; (8008010 <__ieee754_asinf+0x24c>)
 8007fe0:	f7f8 fd88 	bl	8000af4 <__aeabi_fsub>
 8007fe4:	4601      	mov	r1, r0
 8007fe6:	4648      	mov	r0, r9
 8007fe8:	f7f8 fd84 	bl	8000af4 <__aeabi_fsub>
 8007fec:	4641      	mov	r1, r8
 8007fee:	4604      	mov	r4, r0
 8007ff0:	4640      	mov	r0, r8
 8007ff2:	f7f8 fd81 	bl	8000af8 <__addsf3>
 8007ff6:	4601      	mov	r1, r0
 8007ff8:	4813      	ldr	r0, [pc, #76]	; (8008048 <__ieee754_asinf+0x284>)
 8007ffa:	f7f8 fd7b 	bl	8000af4 <__aeabi_fsub>
 8007ffe:	4601      	mov	r1, r0
 8008000:	4620      	mov	r0, r4
 8008002:	f7f8 fd77 	bl	8000af4 <__aeabi_fsub>
 8008006:	4601      	mov	r1, r0
 8008008:	480f      	ldr	r0, [pc, #60]	; (8008048 <__ieee754_asinf+0x284>)
 800800a:	e7b9      	b.n	8007f80 <__ieee754_asinf+0x1bc>
 800800c:	3fc90fdb 	.word	0x3fc90fdb
 8008010:	b33bbd2e 	.word	0xb33bbd2e
 8008014:	7149f2ca 	.word	0x7149f2ca
 8008018:	3811ef08 	.word	0x3811ef08
 800801c:	3a4f7f04 	.word	0x3a4f7f04
 8008020:	3d241146 	.word	0x3d241146
 8008024:	3e4e0aa8 	.word	0x3e4e0aa8
 8008028:	3ea6b090 	.word	0x3ea6b090
 800802c:	3e2aaaab 	.word	0x3e2aaaab
 8008030:	3d9dc62e 	.word	0x3d9dc62e
 8008034:	3f303361 	.word	0x3f303361
 8008038:	4001572d 	.word	0x4001572d
 800803c:	4019d139 	.word	0x4019d139
 8008040:	3f799999 	.word	0x3f799999
 8008044:	333bbd2e 	.word	0x333bbd2e
 8008048:	3f490fdb 	.word	0x3f490fdb

0800804c <__ieee754_sqrtf>:
 800804c:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8008050:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008054:	b570      	push	{r4, r5, r6, lr}
 8008056:	4603      	mov	r3, r0
 8008058:	4604      	mov	r4, r0
 800805a:	d309      	bcc.n	8008070 <__ieee754_sqrtf+0x24>
 800805c:	4601      	mov	r1, r0
 800805e:	f7f8 fe53 	bl	8000d08 <__aeabi_fmul>
 8008062:	4601      	mov	r1, r0
 8008064:	4620      	mov	r0, r4
 8008066:	f7f8 fd47 	bl	8000af8 <__addsf3>
 800806a:	4604      	mov	r4, r0
 800806c:	4620      	mov	r0, r4
 800806e:	bd70      	pop	{r4, r5, r6, pc}
 8008070:	2a00      	cmp	r2, #0
 8008072:	d0fb      	beq.n	800806c <__ieee754_sqrtf+0x20>
 8008074:	2800      	cmp	r0, #0
 8008076:	da06      	bge.n	8008086 <__ieee754_sqrtf+0x3a>
 8008078:	4601      	mov	r1, r0
 800807a:	f7f8 fd3b 	bl	8000af4 <__aeabi_fsub>
 800807e:	4601      	mov	r1, r0
 8008080:	f7f8 fef6 	bl	8000e70 <__aeabi_fdiv>
 8008084:	e7f1      	b.n	800806a <__ieee754_sqrtf+0x1e>
 8008086:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 800808a:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800808e:	d029      	beq.n	80080e4 <__ieee754_sqrtf+0x98>
 8008090:	f3c3 0216 	ubfx	r2, r3, #0, #23
 8008094:	07cb      	lsls	r3, r1, #31
 8008096:	f04f 0300 	mov.w	r3, #0
 800809a:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 800809e:	f04f 0419 	mov.w	r4, #25
 80080a2:	461e      	mov	r6, r3
 80080a4:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 80080a8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80080ac:	bf58      	it	pl
 80080ae:	0052      	lslpl	r2, r2, #1
 80080b0:	1040      	asrs	r0, r0, #1
 80080b2:	0052      	lsls	r2, r2, #1
 80080b4:	1875      	adds	r5, r6, r1
 80080b6:	4295      	cmp	r5, r2
 80080b8:	bfde      	ittt	le
 80080ba:	186e      	addle	r6, r5, r1
 80080bc:	1b52      	suble	r2, r2, r5
 80080be:	185b      	addle	r3, r3, r1
 80080c0:	3c01      	subs	r4, #1
 80080c2:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80080c6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80080ca:	d1f3      	bne.n	80080b4 <__ieee754_sqrtf+0x68>
 80080cc:	b112      	cbz	r2, 80080d4 <__ieee754_sqrtf+0x88>
 80080ce:	3301      	adds	r3, #1
 80080d0:	f023 0301 	bic.w	r3, r3, #1
 80080d4:	105c      	asrs	r4, r3, #1
 80080d6:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 80080da:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 80080de:	e7c5      	b.n	800806c <__ieee754_sqrtf+0x20>
 80080e0:	005b      	lsls	r3, r3, #1
 80080e2:	3201      	adds	r2, #1
 80080e4:	0218      	lsls	r0, r3, #8
 80080e6:	d5fb      	bpl.n	80080e0 <__ieee754_sqrtf+0x94>
 80080e8:	3a01      	subs	r2, #1
 80080ea:	1a89      	subs	r1, r1, r2
 80080ec:	e7d0      	b.n	8008090 <__ieee754_sqrtf+0x44>

080080ee <finite>:
 80080ee:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 80080f2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80080f6:	0fc0      	lsrs	r0, r0, #31
 80080f8:	4770      	bx	lr

080080fa <fabsf>:
 80080fa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80080fe:	4770      	bx	lr

08008100 <nanf>:
 8008100:	4800      	ldr	r0, [pc, #0]	; (8008104 <nanf+0x4>)
 8008102:	4770      	bx	lr
 8008104:	7fc00000 	.word	0x7fc00000

08008108 <abort>:
 8008108:	2006      	movs	r0, #6
 800810a:	b508      	push	{r3, lr}
 800810c:	f000 f94c 	bl	80083a8 <raise>
 8008110:	2001      	movs	r0, #1
 8008112:	f7fa fcd4 	bl	8002abe <_exit>
	...

08008118 <__errno>:
 8008118:	4b01      	ldr	r3, [pc, #4]	; (8008120 <__errno+0x8>)
 800811a:	6818      	ldr	r0, [r3, #0]
 800811c:	4770      	bx	lr
 800811e:	bf00      	nop
 8008120:	2000000c 	.word	0x2000000c

08008124 <__libc_init_array>:
 8008124:	b570      	push	{r4, r5, r6, lr}
 8008126:	2600      	movs	r6, #0
 8008128:	4d0c      	ldr	r5, [pc, #48]	; (800815c <__libc_init_array+0x38>)
 800812a:	4c0d      	ldr	r4, [pc, #52]	; (8008160 <__libc_init_array+0x3c>)
 800812c:	1b64      	subs	r4, r4, r5
 800812e:	10a4      	asrs	r4, r4, #2
 8008130:	42a6      	cmp	r6, r4
 8008132:	d109      	bne.n	8008148 <__libc_init_array+0x24>
 8008134:	f000 f962 	bl	80083fc <_init>
 8008138:	2600      	movs	r6, #0
 800813a:	4d0a      	ldr	r5, [pc, #40]	; (8008164 <__libc_init_array+0x40>)
 800813c:	4c0a      	ldr	r4, [pc, #40]	; (8008168 <__libc_init_array+0x44>)
 800813e:	1b64      	subs	r4, r4, r5
 8008140:	10a4      	asrs	r4, r4, #2
 8008142:	42a6      	cmp	r6, r4
 8008144:	d105      	bne.n	8008152 <__libc_init_array+0x2e>
 8008146:	bd70      	pop	{r4, r5, r6, pc}
 8008148:	f855 3b04 	ldr.w	r3, [r5], #4
 800814c:	4798      	blx	r3
 800814e:	3601      	adds	r6, #1
 8008150:	e7ee      	b.n	8008130 <__libc_init_array+0xc>
 8008152:	f855 3b04 	ldr.w	r3, [r5], #4
 8008156:	4798      	blx	r3
 8008158:	3601      	adds	r6, #1
 800815a:	e7f2      	b.n	8008142 <__libc_init_array+0x1e>
 800815c:	08008508 	.word	0x08008508
 8008160:	08008508 	.word	0x08008508
 8008164:	08008508 	.word	0x08008508
 8008168:	08008510 	.word	0x08008510

0800816c <malloc>:
 800816c:	4b02      	ldr	r3, [pc, #8]	; (8008178 <malloc+0xc>)
 800816e:	4601      	mov	r1, r0
 8008170:	6818      	ldr	r0, [r3, #0]
 8008172:	f000 b887 	b.w	8008284 <_malloc_r>
 8008176:	bf00      	nop
 8008178:	2000000c 	.word	0x2000000c

0800817c <free>:
 800817c:	4b02      	ldr	r3, [pc, #8]	; (8008188 <free+0xc>)
 800817e:	4601      	mov	r1, r0
 8008180:	6818      	ldr	r0, [r3, #0]
 8008182:	f000 b833 	b.w	80081ec <_free_r>
 8008186:	bf00      	nop
 8008188:	2000000c 	.word	0x2000000c

0800818c <memcpy>:
 800818c:	440a      	add	r2, r1
 800818e:	4291      	cmp	r1, r2
 8008190:	f100 33ff 	add.w	r3, r0, #4294967295
 8008194:	d100      	bne.n	8008198 <memcpy+0xc>
 8008196:	4770      	bx	lr
 8008198:	b510      	push	{r4, lr}
 800819a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800819e:	4291      	cmp	r1, r2
 80081a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081a4:	d1f9      	bne.n	800819a <memcpy+0xe>
 80081a6:	bd10      	pop	{r4, pc}

080081a8 <memmove>:
 80081a8:	4288      	cmp	r0, r1
 80081aa:	b510      	push	{r4, lr}
 80081ac:	eb01 0402 	add.w	r4, r1, r2
 80081b0:	d902      	bls.n	80081b8 <memmove+0x10>
 80081b2:	4284      	cmp	r4, r0
 80081b4:	4623      	mov	r3, r4
 80081b6:	d807      	bhi.n	80081c8 <memmove+0x20>
 80081b8:	1e43      	subs	r3, r0, #1
 80081ba:	42a1      	cmp	r1, r4
 80081bc:	d008      	beq.n	80081d0 <memmove+0x28>
 80081be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80081c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80081c6:	e7f8      	b.n	80081ba <memmove+0x12>
 80081c8:	4601      	mov	r1, r0
 80081ca:	4402      	add	r2, r0
 80081cc:	428a      	cmp	r2, r1
 80081ce:	d100      	bne.n	80081d2 <memmove+0x2a>
 80081d0:	bd10      	pop	{r4, pc}
 80081d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80081d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80081da:	e7f7      	b.n	80081cc <memmove+0x24>

080081dc <memset>:
 80081dc:	4603      	mov	r3, r0
 80081de:	4402      	add	r2, r0
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d100      	bne.n	80081e6 <memset+0xa>
 80081e4:	4770      	bx	lr
 80081e6:	f803 1b01 	strb.w	r1, [r3], #1
 80081ea:	e7f9      	b.n	80081e0 <memset+0x4>

080081ec <_free_r>:
 80081ec:	b538      	push	{r3, r4, r5, lr}
 80081ee:	4605      	mov	r5, r0
 80081f0:	2900      	cmp	r1, #0
 80081f2:	d043      	beq.n	800827c <_free_r+0x90>
 80081f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081f8:	1f0c      	subs	r4, r1, #4
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	bfb8      	it	lt
 80081fe:	18e4      	addlt	r4, r4, r3
 8008200:	f000 f8f0 	bl	80083e4 <__malloc_lock>
 8008204:	4a1e      	ldr	r2, [pc, #120]	; (8008280 <_free_r+0x94>)
 8008206:	6813      	ldr	r3, [r2, #0]
 8008208:	4610      	mov	r0, r2
 800820a:	b933      	cbnz	r3, 800821a <_free_r+0x2e>
 800820c:	6063      	str	r3, [r4, #4]
 800820e:	6014      	str	r4, [r2, #0]
 8008210:	4628      	mov	r0, r5
 8008212:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008216:	f000 b8eb 	b.w	80083f0 <__malloc_unlock>
 800821a:	42a3      	cmp	r3, r4
 800821c:	d90a      	bls.n	8008234 <_free_r+0x48>
 800821e:	6821      	ldr	r1, [r4, #0]
 8008220:	1862      	adds	r2, r4, r1
 8008222:	4293      	cmp	r3, r2
 8008224:	bf01      	itttt	eq
 8008226:	681a      	ldreq	r2, [r3, #0]
 8008228:	685b      	ldreq	r3, [r3, #4]
 800822a:	1852      	addeq	r2, r2, r1
 800822c:	6022      	streq	r2, [r4, #0]
 800822e:	6063      	str	r3, [r4, #4]
 8008230:	6004      	str	r4, [r0, #0]
 8008232:	e7ed      	b.n	8008210 <_free_r+0x24>
 8008234:	461a      	mov	r2, r3
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	b10b      	cbz	r3, 800823e <_free_r+0x52>
 800823a:	42a3      	cmp	r3, r4
 800823c:	d9fa      	bls.n	8008234 <_free_r+0x48>
 800823e:	6811      	ldr	r1, [r2, #0]
 8008240:	1850      	adds	r0, r2, r1
 8008242:	42a0      	cmp	r0, r4
 8008244:	d10b      	bne.n	800825e <_free_r+0x72>
 8008246:	6820      	ldr	r0, [r4, #0]
 8008248:	4401      	add	r1, r0
 800824a:	1850      	adds	r0, r2, r1
 800824c:	4283      	cmp	r3, r0
 800824e:	6011      	str	r1, [r2, #0]
 8008250:	d1de      	bne.n	8008210 <_free_r+0x24>
 8008252:	6818      	ldr	r0, [r3, #0]
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	4401      	add	r1, r0
 8008258:	6011      	str	r1, [r2, #0]
 800825a:	6053      	str	r3, [r2, #4]
 800825c:	e7d8      	b.n	8008210 <_free_r+0x24>
 800825e:	d902      	bls.n	8008266 <_free_r+0x7a>
 8008260:	230c      	movs	r3, #12
 8008262:	602b      	str	r3, [r5, #0]
 8008264:	e7d4      	b.n	8008210 <_free_r+0x24>
 8008266:	6820      	ldr	r0, [r4, #0]
 8008268:	1821      	adds	r1, r4, r0
 800826a:	428b      	cmp	r3, r1
 800826c:	bf01      	itttt	eq
 800826e:	6819      	ldreq	r1, [r3, #0]
 8008270:	685b      	ldreq	r3, [r3, #4]
 8008272:	1809      	addeq	r1, r1, r0
 8008274:	6021      	streq	r1, [r4, #0]
 8008276:	6063      	str	r3, [r4, #4]
 8008278:	6054      	str	r4, [r2, #4]
 800827a:	e7c9      	b.n	8008210 <_free_r+0x24>
 800827c:	bd38      	pop	{r3, r4, r5, pc}
 800827e:	bf00      	nop
 8008280:	200007e8 	.word	0x200007e8

08008284 <_malloc_r>:
 8008284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008286:	1ccd      	adds	r5, r1, #3
 8008288:	f025 0503 	bic.w	r5, r5, #3
 800828c:	3508      	adds	r5, #8
 800828e:	2d0c      	cmp	r5, #12
 8008290:	bf38      	it	cc
 8008292:	250c      	movcc	r5, #12
 8008294:	2d00      	cmp	r5, #0
 8008296:	4606      	mov	r6, r0
 8008298:	db01      	blt.n	800829e <_malloc_r+0x1a>
 800829a:	42a9      	cmp	r1, r5
 800829c:	d903      	bls.n	80082a6 <_malloc_r+0x22>
 800829e:	230c      	movs	r3, #12
 80082a0:	6033      	str	r3, [r6, #0]
 80082a2:	2000      	movs	r0, #0
 80082a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082a6:	f000 f89d 	bl	80083e4 <__malloc_lock>
 80082aa:	4921      	ldr	r1, [pc, #132]	; (8008330 <_malloc_r+0xac>)
 80082ac:	680a      	ldr	r2, [r1, #0]
 80082ae:	4614      	mov	r4, r2
 80082b0:	b99c      	cbnz	r4, 80082da <_malloc_r+0x56>
 80082b2:	4f20      	ldr	r7, [pc, #128]	; (8008334 <_malloc_r+0xb0>)
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	b923      	cbnz	r3, 80082c2 <_malloc_r+0x3e>
 80082b8:	4621      	mov	r1, r4
 80082ba:	4630      	mov	r0, r6
 80082bc:	f000 f83c 	bl	8008338 <_sbrk_r>
 80082c0:	6038      	str	r0, [r7, #0]
 80082c2:	4629      	mov	r1, r5
 80082c4:	4630      	mov	r0, r6
 80082c6:	f000 f837 	bl	8008338 <_sbrk_r>
 80082ca:	1c43      	adds	r3, r0, #1
 80082cc:	d123      	bne.n	8008316 <_malloc_r+0x92>
 80082ce:	230c      	movs	r3, #12
 80082d0:	4630      	mov	r0, r6
 80082d2:	6033      	str	r3, [r6, #0]
 80082d4:	f000 f88c 	bl	80083f0 <__malloc_unlock>
 80082d8:	e7e3      	b.n	80082a2 <_malloc_r+0x1e>
 80082da:	6823      	ldr	r3, [r4, #0]
 80082dc:	1b5b      	subs	r3, r3, r5
 80082de:	d417      	bmi.n	8008310 <_malloc_r+0x8c>
 80082e0:	2b0b      	cmp	r3, #11
 80082e2:	d903      	bls.n	80082ec <_malloc_r+0x68>
 80082e4:	6023      	str	r3, [r4, #0]
 80082e6:	441c      	add	r4, r3
 80082e8:	6025      	str	r5, [r4, #0]
 80082ea:	e004      	b.n	80082f6 <_malloc_r+0x72>
 80082ec:	6863      	ldr	r3, [r4, #4]
 80082ee:	42a2      	cmp	r2, r4
 80082f0:	bf0c      	ite	eq
 80082f2:	600b      	streq	r3, [r1, #0]
 80082f4:	6053      	strne	r3, [r2, #4]
 80082f6:	4630      	mov	r0, r6
 80082f8:	f000 f87a 	bl	80083f0 <__malloc_unlock>
 80082fc:	f104 000b 	add.w	r0, r4, #11
 8008300:	1d23      	adds	r3, r4, #4
 8008302:	f020 0007 	bic.w	r0, r0, #7
 8008306:	1ac2      	subs	r2, r0, r3
 8008308:	d0cc      	beq.n	80082a4 <_malloc_r+0x20>
 800830a:	1a1b      	subs	r3, r3, r0
 800830c:	50a3      	str	r3, [r4, r2]
 800830e:	e7c9      	b.n	80082a4 <_malloc_r+0x20>
 8008310:	4622      	mov	r2, r4
 8008312:	6864      	ldr	r4, [r4, #4]
 8008314:	e7cc      	b.n	80082b0 <_malloc_r+0x2c>
 8008316:	1cc4      	adds	r4, r0, #3
 8008318:	f024 0403 	bic.w	r4, r4, #3
 800831c:	42a0      	cmp	r0, r4
 800831e:	d0e3      	beq.n	80082e8 <_malloc_r+0x64>
 8008320:	1a21      	subs	r1, r4, r0
 8008322:	4630      	mov	r0, r6
 8008324:	f000 f808 	bl	8008338 <_sbrk_r>
 8008328:	3001      	adds	r0, #1
 800832a:	d1dd      	bne.n	80082e8 <_malloc_r+0x64>
 800832c:	e7cf      	b.n	80082ce <_malloc_r+0x4a>
 800832e:	bf00      	nop
 8008330:	200007e8 	.word	0x200007e8
 8008334:	200007ec 	.word	0x200007ec

08008338 <_sbrk_r>:
 8008338:	b538      	push	{r3, r4, r5, lr}
 800833a:	2300      	movs	r3, #0
 800833c:	4d05      	ldr	r5, [pc, #20]	; (8008354 <_sbrk_r+0x1c>)
 800833e:	4604      	mov	r4, r0
 8008340:	4608      	mov	r0, r1
 8008342:	602b      	str	r3, [r5, #0]
 8008344:	f7fa fbc6 	bl	8002ad4 <_sbrk>
 8008348:	1c43      	adds	r3, r0, #1
 800834a:	d102      	bne.n	8008352 <_sbrk_r+0x1a>
 800834c:	682b      	ldr	r3, [r5, #0]
 800834e:	b103      	cbz	r3, 8008352 <_sbrk_r+0x1a>
 8008350:	6023      	str	r3, [r4, #0]
 8008352:	bd38      	pop	{r3, r4, r5, pc}
 8008354:	20000800 	.word	0x20000800

08008358 <_raise_r>:
 8008358:	291f      	cmp	r1, #31
 800835a:	b538      	push	{r3, r4, r5, lr}
 800835c:	4604      	mov	r4, r0
 800835e:	460d      	mov	r5, r1
 8008360:	d904      	bls.n	800836c <_raise_r+0x14>
 8008362:	2316      	movs	r3, #22
 8008364:	6003      	str	r3, [r0, #0]
 8008366:	f04f 30ff 	mov.w	r0, #4294967295
 800836a:	bd38      	pop	{r3, r4, r5, pc}
 800836c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800836e:	b112      	cbz	r2, 8008376 <_raise_r+0x1e>
 8008370:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008374:	b94b      	cbnz	r3, 800838a <_raise_r+0x32>
 8008376:	4620      	mov	r0, r4
 8008378:	f000 f830 	bl	80083dc <_getpid_r>
 800837c:	462a      	mov	r2, r5
 800837e:	4601      	mov	r1, r0
 8008380:	4620      	mov	r0, r4
 8008382:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008386:	f000 b817 	b.w	80083b8 <_kill_r>
 800838a:	2b01      	cmp	r3, #1
 800838c:	d00a      	beq.n	80083a4 <_raise_r+0x4c>
 800838e:	1c59      	adds	r1, r3, #1
 8008390:	d103      	bne.n	800839a <_raise_r+0x42>
 8008392:	2316      	movs	r3, #22
 8008394:	6003      	str	r3, [r0, #0]
 8008396:	2001      	movs	r0, #1
 8008398:	e7e7      	b.n	800836a <_raise_r+0x12>
 800839a:	2400      	movs	r4, #0
 800839c:	4628      	mov	r0, r5
 800839e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80083a2:	4798      	blx	r3
 80083a4:	2000      	movs	r0, #0
 80083a6:	e7e0      	b.n	800836a <_raise_r+0x12>

080083a8 <raise>:
 80083a8:	4b02      	ldr	r3, [pc, #8]	; (80083b4 <raise+0xc>)
 80083aa:	4601      	mov	r1, r0
 80083ac:	6818      	ldr	r0, [r3, #0]
 80083ae:	f7ff bfd3 	b.w	8008358 <_raise_r>
 80083b2:	bf00      	nop
 80083b4:	2000000c 	.word	0x2000000c

080083b8 <_kill_r>:
 80083b8:	b538      	push	{r3, r4, r5, lr}
 80083ba:	2300      	movs	r3, #0
 80083bc:	4d06      	ldr	r5, [pc, #24]	; (80083d8 <_kill_r+0x20>)
 80083be:	4604      	mov	r4, r0
 80083c0:	4608      	mov	r0, r1
 80083c2:	4611      	mov	r1, r2
 80083c4:	602b      	str	r3, [r5, #0]
 80083c6:	f7fa fb6a 	bl	8002a9e <_kill>
 80083ca:	1c43      	adds	r3, r0, #1
 80083cc:	d102      	bne.n	80083d4 <_kill_r+0x1c>
 80083ce:	682b      	ldr	r3, [r5, #0]
 80083d0:	b103      	cbz	r3, 80083d4 <_kill_r+0x1c>
 80083d2:	6023      	str	r3, [r4, #0]
 80083d4:	bd38      	pop	{r3, r4, r5, pc}
 80083d6:	bf00      	nop
 80083d8:	20000800 	.word	0x20000800

080083dc <_getpid_r>:
 80083dc:	f7fa bb58 	b.w	8002a90 <_getpid>

080083e0 <__retarget_lock_acquire_recursive>:
 80083e0:	4770      	bx	lr

080083e2 <__retarget_lock_release_recursive>:
 80083e2:	4770      	bx	lr

080083e4 <__malloc_lock>:
 80083e4:	4801      	ldr	r0, [pc, #4]	; (80083ec <__malloc_lock+0x8>)
 80083e6:	f7ff bffb 	b.w	80083e0 <__retarget_lock_acquire_recursive>
 80083ea:	bf00      	nop
 80083ec:	200007f8 	.word	0x200007f8

080083f0 <__malloc_unlock>:
 80083f0:	4801      	ldr	r0, [pc, #4]	; (80083f8 <__malloc_unlock+0x8>)
 80083f2:	f7ff bff6 	b.w	80083e2 <__retarget_lock_release_recursive>
 80083f6:	bf00      	nop
 80083f8:	200007f8 	.word	0x200007f8

080083fc <_init>:
 80083fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083fe:	bf00      	nop
 8008400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008402:	bc08      	pop	{r3}
 8008404:	469e      	mov	lr, r3
 8008406:	4770      	bx	lr

08008408 <_fini>:
 8008408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800840a:	bf00      	nop
 800840c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800840e:	bc08      	pop	{r3}
 8008410:	469e      	mov	lr, r3
 8008412:	4770      	bx	lr
