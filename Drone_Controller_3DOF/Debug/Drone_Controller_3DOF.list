
Drone_Controller_3DOF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000898c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08008aa0  08008aa0  00018aa0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b90  08008b90  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08008b90  08008b90  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008b90  08008b90  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008b90  08008b90  00018b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08008b98  08008b98  00018b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008ba0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000078c  20000070  08008c10  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200007fc  08008c10  000207fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cfbc  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a82  00000000  00000000  0003d055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c0  00000000  00000000  00040ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011c0  00000000  00000000  00041d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c7b3  00000000  00000000  00042f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000142a0  00000000  00000000  0005f70b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095f80  00000000  00000000  000739ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010992b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c0c  00000000  00000000  00109980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08008a84 	.word	0x08008a84

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08008a84 	.word	0x08008a84

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_frsub>:
 8000aec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000af0:	e002      	b.n	8000af8 <__addsf3>
 8000af2:	bf00      	nop

08000af4 <__aeabi_fsub>:
 8000af4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000af8 <__addsf3>:
 8000af8:	0042      	lsls	r2, r0, #1
 8000afa:	bf1f      	itttt	ne
 8000afc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b00:	ea92 0f03 	teqne	r2, r3
 8000b04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b0c:	d06a      	beq.n	8000be4 <__addsf3+0xec>
 8000b0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b16:	bfc1      	itttt	gt
 8000b18:	18d2      	addgt	r2, r2, r3
 8000b1a:	4041      	eorgt	r1, r0
 8000b1c:	4048      	eorgt	r0, r1
 8000b1e:	4041      	eorgt	r1, r0
 8000b20:	bfb8      	it	lt
 8000b22:	425b      	neglt	r3, r3
 8000b24:	2b19      	cmp	r3, #25
 8000b26:	bf88      	it	hi
 8000b28:	4770      	bxhi	lr
 8000b2a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4240      	negne	r0, r0
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b42:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4249      	negne	r1, r1
 8000b4a:	ea92 0f03 	teq	r2, r3
 8000b4e:	d03f      	beq.n	8000bd0 <__addsf3+0xd8>
 8000b50:	f1a2 0201 	sub.w	r2, r2, #1
 8000b54:	fa41 fc03 	asr.w	ip, r1, r3
 8000b58:	eb10 000c 	adds.w	r0, r0, ip
 8000b5c:	f1c3 0320 	rsb	r3, r3, #32
 8000b60:	fa01 f103 	lsl.w	r1, r1, r3
 8000b64:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b68:	d502      	bpl.n	8000b70 <__addsf3+0x78>
 8000b6a:	4249      	negs	r1, r1
 8000b6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b74:	d313      	bcc.n	8000b9e <__addsf3+0xa6>
 8000b76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b7a:	d306      	bcc.n	8000b8a <__addsf3+0x92>
 8000b7c:	0840      	lsrs	r0, r0, #1
 8000b7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b82:	f102 0201 	add.w	r2, r2, #1
 8000b86:	2afe      	cmp	r2, #254	; 0xfe
 8000b88:	d251      	bcs.n	8000c2e <__addsf3+0x136>
 8000b8a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b92:	bf08      	it	eq
 8000b94:	f020 0001 	biceq.w	r0, r0, #1
 8000b98:	ea40 0003 	orr.w	r0, r0, r3
 8000b9c:	4770      	bx	lr
 8000b9e:	0049      	lsls	r1, r1, #1
 8000ba0:	eb40 0000 	adc.w	r0, r0, r0
 8000ba4:	3a01      	subs	r2, #1
 8000ba6:	bf28      	it	cs
 8000ba8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bac:	d2ed      	bcs.n	8000b8a <__addsf3+0x92>
 8000bae:	fab0 fc80 	clz	ip, r0
 8000bb2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bb6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bbe:	bfaa      	itet	ge
 8000bc0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc4:	4252      	neglt	r2, r2
 8000bc6:	4318      	orrge	r0, r3
 8000bc8:	bfbc      	itt	lt
 8000bca:	40d0      	lsrlt	r0, r2
 8000bcc:	4318      	orrlt	r0, r3
 8000bce:	4770      	bx	lr
 8000bd0:	f092 0f00 	teq	r2, #0
 8000bd4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bd8:	bf06      	itte	eq
 8000bda:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bde:	3201      	addeq	r2, #1
 8000be0:	3b01      	subne	r3, #1
 8000be2:	e7b5      	b.n	8000b50 <__addsf3+0x58>
 8000be4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bec:	bf18      	it	ne
 8000bee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf2:	d021      	beq.n	8000c38 <__addsf3+0x140>
 8000bf4:	ea92 0f03 	teq	r2, r3
 8000bf8:	d004      	beq.n	8000c04 <__addsf3+0x10c>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	bf08      	it	eq
 8000c00:	4608      	moveq	r0, r1
 8000c02:	4770      	bx	lr
 8000c04:	ea90 0f01 	teq	r0, r1
 8000c08:	bf1c      	itt	ne
 8000c0a:	2000      	movne	r0, #0
 8000c0c:	4770      	bxne	lr
 8000c0e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c12:	d104      	bne.n	8000c1e <__addsf3+0x126>
 8000c14:	0040      	lsls	r0, r0, #1
 8000c16:	bf28      	it	cs
 8000c18:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c1c:	4770      	bx	lr
 8000c1e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c22:	bf3c      	itt	cc
 8000c24:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bxcc	lr
 8000c2a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c2e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c36:	4770      	bx	lr
 8000c38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c3c:	bf16      	itet	ne
 8000c3e:	4608      	movne	r0, r1
 8000c40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c44:	4601      	movne	r1, r0
 8000c46:	0242      	lsls	r2, r0, #9
 8000c48:	bf06      	itte	eq
 8000c4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c4e:	ea90 0f01 	teqeq	r0, r1
 8000c52:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_ui2f>:
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	e004      	b.n	8000c68 <__aeabi_i2f+0x8>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_i2f>:
 8000c60:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c64:	bf48      	it	mi
 8000c66:	4240      	negmi	r0, r0
 8000c68:	ea5f 0c00 	movs.w	ip, r0
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c74:	4601      	mov	r1, r0
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	e01c      	b.n	8000cb6 <__aeabi_l2f+0x2a>

08000c7c <__aeabi_ul2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e00a      	b.n	8000ca0 <__aeabi_l2f+0x14>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_l2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c98:	d502      	bpl.n	8000ca0 <__aeabi_l2f+0x14>
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	ea5f 0c01 	movs.w	ip, r1
 8000ca4:	bf02      	ittt	eq
 8000ca6:	4684      	moveq	ip, r0
 8000ca8:	4601      	moveq	r1, r0
 8000caa:	2000      	moveq	r0, #0
 8000cac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cb0:	bf08      	it	eq
 8000cb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cba:	fabc f28c 	clz	r2, ip
 8000cbe:	3a08      	subs	r2, #8
 8000cc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc4:	db10      	blt.n	8000ce8 <__aeabi_l2f+0x5c>
 8000cc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cca:	4463      	add	r3, ip
 8000ccc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd0:	f1c2 0220 	rsb	r2, r2, #32
 8000cd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cdc:	eb43 0002 	adc.w	r0, r3, r2
 8000ce0:	bf08      	it	eq
 8000ce2:	f020 0001 	biceq.w	r0, r0, #1
 8000ce6:	4770      	bx	lr
 8000ce8:	f102 0220 	add.w	r2, r2, #32
 8000cec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf0:	f1c2 0220 	rsb	r2, r2, #32
 8000cf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cfc:	eb43 0002 	adc.w	r0, r3, r2
 8000d00:	bf08      	it	eq
 8000d02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_fmul>:
 8000d08:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d10:	bf1e      	ittt	ne
 8000d12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d16:	ea92 0f0c 	teqne	r2, ip
 8000d1a:	ea93 0f0c 	teqne	r3, ip
 8000d1e:	d06f      	beq.n	8000e00 <__aeabi_fmul+0xf8>
 8000d20:	441a      	add	r2, r3
 8000d22:	ea80 0c01 	eor.w	ip, r0, r1
 8000d26:	0240      	lsls	r0, r0, #9
 8000d28:	bf18      	it	ne
 8000d2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d2e:	d01e      	beq.n	8000d6e <__aeabi_fmul+0x66>
 8000d30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d3c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d44:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d48:	bf3e      	ittt	cc
 8000d4a:	0049      	lslcc	r1, r1, #1
 8000d4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d50:	005b      	lslcc	r3, r3, #1
 8000d52:	ea40 0001 	orr.w	r0, r0, r1
 8000d56:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d5a:	2afd      	cmp	r2, #253	; 0xfd
 8000d5c:	d81d      	bhi.n	8000d9a <__aeabi_fmul+0x92>
 8000d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d66:	bf08      	it	eq
 8000d68:	f020 0001 	biceq.w	r0, r0, #1
 8000d6c:	4770      	bx	lr
 8000d6e:	f090 0f00 	teq	r0, #0
 8000d72:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d76:	bf08      	it	eq
 8000d78:	0249      	lsleq	r1, r1, #9
 8000d7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d82:	3a7f      	subs	r2, #127	; 0x7f
 8000d84:	bfc2      	ittt	gt
 8000d86:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d8e:	4770      	bxgt	lr
 8000d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	3a01      	subs	r2, #1
 8000d9a:	dc5d      	bgt.n	8000e58 <__aeabi_fmul+0x150>
 8000d9c:	f112 0f19 	cmn.w	r2, #25
 8000da0:	bfdc      	itt	le
 8000da2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000da6:	4770      	bxle	lr
 8000da8:	f1c2 0200 	rsb	r2, r2, #0
 8000dac:	0041      	lsls	r1, r0, #1
 8000dae:	fa21 f102 	lsr.w	r1, r1, r2
 8000db2:	f1c2 0220 	rsb	r2, r2, #32
 8000db6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dba:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dbe:	f140 0000 	adc.w	r0, r0, #0
 8000dc2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dc6:	bf08      	it	eq
 8000dc8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dcc:	4770      	bx	lr
 8000dce:	f092 0f00 	teq	r2, #0
 8000dd2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd6:	bf02      	ittt	eq
 8000dd8:	0040      	lsleq	r0, r0, #1
 8000dda:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dde:	3a01      	subeq	r2, #1
 8000de0:	d0f9      	beq.n	8000dd6 <__aeabi_fmul+0xce>
 8000de2:	ea40 000c 	orr.w	r0, r0, ip
 8000de6:	f093 0f00 	teq	r3, #0
 8000dea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dee:	bf02      	ittt	eq
 8000df0:	0049      	lsleq	r1, r1, #1
 8000df2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df6:	3b01      	subeq	r3, #1
 8000df8:	d0f9      	beq.n	8000dee <__aeabi_fmul+0xe6>
 8000dfa:	ea41 010c 	orr.w	r1, r1, ip
 8000dfe:	e78f      	b.n	8000d20 <__aeabi_fmul+0x18>
 8000e00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e04:	ea92 0f0c 	teq	r2, ip
 8000e08:	bf18      	it	ne
 8000e0a:	ea93 0f0c 	teqne	r3, ip
 8000e0e:	d00a      	beq.n	8000e26 <__aeabi_fmul+0x11e>
 8000e10:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e14:	bf18      	it	ne
 8000e16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	d1d8      	bne.n	8000dce <__aeabi_fmul+0xc6>
 8000e1c:	ea80 0001 	eor.w	r0, r0, r1
 8000e20:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e24:	4770      	bx	lr
 8000e26:	f090 0f00 	teq	r0, #0
 8000e2a:	bf17      	itett	ne
 8000e2c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e30:	4608      	moveq	r0, r1
 8000e32:	f091 0f00 	teqne	r1, #0
 8000e36:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e3a:	d014      	beq.n	8000e66 <__aeabi_fmul+0x15e>
 8000e3c:	ea92 0f0c 	teq	r2, ip
 8000e40:	d101      	bne.n	8000e46 <__aeabi_fmul+0x13e>
 8000e42:	0242      	lsls	r2, r0, #9
 8000e44:	d10f      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e46:	ea93 0f0c 	teq	r3, ip
 8000e4a:	d103      	bne.n	8000e54 <__aeabi_fmul+0x14c>
 8000e4c:	024b      	lsls	r3, r1, #9
 8000e4e:	bf18      	it	ne
 8000e50:	4608      	movne	r0, r1
 8000e52:	d108      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e54:	ea80 0001 	eor.w	r0, r0, r1
 8000e58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e64:	4770      	bx	lr
 8000e66:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e6a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e6e:	4770      	bx	lr

08000e70 <__aeabi_fdiv>:
 8000e70:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e78:	bf1e      	ittt	ne
 8000e7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e7e:	ea92 0f0c 	teqne	r2, ip
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d069      	beq.n	8000f5c <__aeabi_fdiv+0xec>
 8000e88:	eba2 0203 	sub.w	r2, r2, r3
 8000e8c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e90:	0249      	lsls	r1, r1, #9
 8000e92:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e96:	d037      	beq.n	8000f08 <__aeabi_fdiv+0x98>
 8000e98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ea0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ea4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	bf38      	it	cc
 8000eac:	005b      	lslcc	r3, r3, #1
 8000eae:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eb2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	bf24      	itt	cs
 8000eba:	1a5b      	subcs	r3, r3, r1
 8000ebc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ec0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ec4:	bf24      	itt	cs
 8000ec6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ece:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ed2:	bf24      	itt	cs
 8000ed4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ed8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000edc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ee6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eea:	011b      	lsls	r3, r3, #4
 8000eec:	bf18      	it	ne
 8000eee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ef2:	d1e0      	bne.n	8000eb6 <__aeabi_fdiv+0x46>
 8000ef4:	2afd      	cmp	r2, #253	; 0xfd
 8000ef6:	f63f af50 	bhi.w	8000d9a <__aeabi_fmul+0x92>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f00:	bf08      	it	eq
 8000f02:	f020 0001 	biceq.w	r0, r0, #1
 8000f06:	4770      	bx	lr
 8000f08:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f10:	327f      	adds	r2, #127	; 0x7f
 8000f12:	bfc2      	ittt	gt
 8000f14:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f1c:	4770      	bxgt	lr
 8000f1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f22:	f04f 0300 	mov.w	r3, #0
 8000f26:	3a01      	subs	r2, #1
 8000f28:	e737      	b.n	8000d9a <__aeabi_fmul+0x92>
 8000f2a:	f092 0f00 	teq	r2, #0
 8000f2e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f32:	bf02      	ittt	eq
 8000f34:	0040      	lsleq	r0, r0, #1
 8000f36:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f3a:	3a01      	subeq	r2, #1
 8000f3c:	d0f9      	beq.n	8000f32 <__aeabi_fdiv+0xc2>
 8000f3e:	ea40 000c 	orr.w	r0, r0, ip
 8000f42:	f093 0f00 	teq	r3, #0
 8000f46:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f4a:	bf02      	ittt	eq
 8000f4c:	0049      	lsleq	r1, r1, #1
 8000f4e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f52:	3b01      	subeq	r3, #1
 8000f54:	d0f9      	beq.n	8000f4a <__aeabi_fdiv+0xda>
 8000f56:	ea41 010c 	orr.w	r1, r1, ip
 8000f5a:	e795      	b.n	8000e88 <__aeabi_fdiv+0x18>
 8000f5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f60:	ea92 0f0c 	teq	r2, ip
 8000f64:	d108      	bne.n	8000f78 <__aeabi_fdiv+0x108>
 8000f66:	0242      	lsls	r2, r0, #9
 8000f68:	f47f af7d 	bne.w	8000e66 <__aeabi_fmul+0x15e>
 8000f6c:	ea93 0f0c 	teq	r3, ip
 8000f70:	f47f af70 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e776      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f78:	ea93 0f0c 	teq	r3, ip
 8000f7c:	d104      	bne.n	8000f88 <__aeabi_fdiv+0x118>
 8000f7e:	024b      	lsls	r3, r1, #9
 8000f80:	f43f af4c 	beq.w	8000e1c <__aeabi_fmul+0x114>
 8000f84:	4608      	mov	r0, r1
 8000f86:	e76e      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f8c:	bf18      	it	ne
 8000f8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f92:	d1ca      	bne.n	8000f2a <__aeabi_fdiv+0xba>
 8000f94:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f98:	f47f af5c 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f9c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fa0:	f47f af3c 	bne.w	8000e1c <__aeabi_fmul+0x114>
 8000fa4:	e75f      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000fa6:	bf00      	nop

08000fa8 <__gesf2>:
 8000fa8:	f04f 3cff 	mov.w	ip, #4294967295
 8000fac:	e006      	b.n	8000fbc <__cmpsf2+0x4>
 8000fae:	bf00      	nop

08000fb0 <__lesf2>:
 8000fb0:	f04f 0c01 	mov.w	ip, #1
 8000fb4:	e002      	b.n	8000fbc <__cmpsf2+0x4>
 8000fb6:	bf00      	nop

08000fb8 <__cmpsf2>:
 8000fb8:	f04f 0c01 	mov.w	ip, #1
 8000fbc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fc0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fc4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fc8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fcc:	bf18      	it	ne
 8000fce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fd2:	d011      	beq.n	8000ff8 <__cmpsf2+0x40>
 8000fd4:	b001      	add	sp, #4
 8000fd6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fda:	bf18      	it	ne
 8000fdc:	ea90 0f01 	teqne	r0, r1
 8000fe0:	bf58      	it	pl
 8000fe2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fe6:	bf88      	it	hi
 8000fe8:	17c8      	asrhi	r0, r1, #31
 8000fea:	bf38      	it	cc
 8000fec:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ff0:	bf18      	it	ne
 8000ff2:	f040 0001 	orrne.w	r0, r0, #1
 8000ff6:	4770      	bx	lr
 8000ff8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ffc:	d102      	bne.n	8001004 <__cmpsf2+0x4c>
 8000ffe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001002:	d105      	bne.n	8001010 <__cmpsf2+0x58>
 8001004:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001008:	d1e4      	bne.n	8000fd4 <__cmpsf2+0x1c>
 800100a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800100e:	d0e1      	beq.n	8000fd4 <__cmpsf2+0x1c>
 8001010:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <__aeabi_cfrcmple>:
 8001018:	4684      	mov	ip, r0
 800101a:	4608      	mov	r0, r1
 800101c:	4661      	mov	r1, ip
 800101e:	e7ff      	b.n	8001020 <__aeabi_cfcmpeq>

08001020 <__aeabi_cfcmpeq>:
 8001020:	b50f      	push	{r0, r1, r2, r3, lr}
 8001022:	f7ff ffc9 	bl	8000fb8 <__cmpsf2>
 8001026:	2800      	cmp	r0, #0
 8001028:	bf48      	it	mi
 800102a:	f110 0f00 	cmnmi.w	r0, #0
 800102e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001030 <__aeabi_fcmpeq>:
 8001030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001034:	f7ff fff4 	bl	8001020 <__aeabi_cfcmpeq>
 8001038:	bf0c      	ite	eq
 800103a:	2001      	moveq	r0, #1
 800103c:	2000      	movne	r0, #0
 800103e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001042:	bf00      	nop

08001044 <__aeabi_fcmplt>:
 8001044:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001048:	f7ff ffea 	bl	8001020 <__aeabi_cfcmpeq>
 800104c:	bf34      	ite	cc
 800104e:	2001      	movcc	r0, #1
 8001050:	2000      	movcs	r0, #0
 8001052:	f85d fb08 	ldr.w	pc, [sp], #8
 8001056:	bf00      	nop

08001058 <__aeabi_fcmple>:
 8001058:	f84d ed08 	str.w	lr, [sp, #-8]!
 800105c:	f7ff ffe0 	bl	8001020 <__aeabi_cfcmpeq>
 8001060:	bf94      	ite	ls
 8001062:	2001      	movls	r0, #1
 8001064:	2000      	movhi	r0, #0
 8001066:	f85d fb08 	ldr.w	pc, [sp], #8
 800106a:	bf00      	nop

0800106c <__aeabi_fcmpge>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff ffd2 	bl	8001018 <__aeabi_cfrcmple>
 8001074:	bf94      	ite	ls
 8001076:	2001      	movls	r0, #1
 8001078:	2000      	movhi	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmpgt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffc8 	bl	8001018 <__aeabi_cfrcmple>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmpun>:
 8001094:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001098:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800109c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010a0:	d102      	bne.n	80010a8 <__aeabi_fcmpun+0x14>
 80010a2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010a6:	d108      	bne.n	80010ba <__aeabi_fcmpun+0x26>
 80010a8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010ac:	d102      	bne.n	80010b4 <__aeabi_fcmpun+0x20>
 80010ae:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010b2:	d102      	bne.n	80010ba <__aeabi_fcmpun+0x26>
 80010b4:	f04f 0000 	mov.w	r0, #0
 80010b8:	4770      	bx	lr
 80010ba:	f04f 0001 	mov.w	r0, #1
 80010be:	4770      	bx	lr

080010c0 <__aeabi_f2iz>:
 80010c0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010c4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010c8:	d30f      	bcc.n	80010ea <__aeabi_f2iz+0x2a>
 80010ca:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010ce:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010d2:	d90d      	bls.n	80010f0 <__aeabi_f2iz+0x30>
 80010d4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010dc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010e0:	fa23 f002 	lsr.w	r0, r3, r2
 80010e4:	bf18      	it	ne
 80010e6:	4240      	negne	r0, r0
 80010e8:	4770      	bx	lr
 80010ea:	f04f 0000 	mov.w	r0, #0
 80010ee:	4770      	bx	lr
 80010f0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010f4:	d101      	bne.n	80010fa <__aeabi_f2iz+0x3a>
 80010f6:	0242      	lsls	r2, r0, #9
 80010f8:	d105      	bne.n	8001106 <__aeabi_f2iz+0x46>
 80010fa:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010fe:	bf08      	it	eq
 8001100:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001104:	4770      	bx	lr
 8001106:	f04f 0000 	mov.w	r0, #0
 800110a:	4770      	bx	lr

0800110c <_ZSt4asinf>:
  using ::asin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  asin(float __x)
  { return __builtin_asinf(__x); }
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f006 ffe7 	bl	80080e8 <asinf>
 800111a:	4603      	mov	r3, r0
 800111c:	4618      	mov	r0, r3
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f007 f801 	bl	8008134 <sqrtf>
 8001132:	4603      	mov	r3, r0
 8001134:	4618      	mov	r0, r3
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f001 f8ac 	bl	80022a2 <_ZNSaIdED1Ev>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4618      	mov	r0, r3
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <_ZNSt12_Vector_baseIdSaIdEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4618      	mov	r0, r3
 8001160:	f001 f88f 	bl	8002282 <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implC1Ev>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4618      	mov	r0, r3
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <_ZNSt6vectorIdSaIdEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 800116e:	b580      	push	{r7, lr}
 8001170:	b082      	sub	sp, #8
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ffeb 	bl	8001154 <_ZNSt12_Vector_baseIdSaIdEEC1Ev>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4618      	mov	r0, r3
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800118c:	f001 fcfe 	bl	8002b8c <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(2000);
 8001190:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001194:	f001 fd5c 	bl	8002c50 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001198:	f000 f888 	bl	80012ac <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800119c:	f000 fb44 	bl	8001828 <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 80011a0:	f000 f8d2 	bl	8001348 <_ZL12MX_I2C1_Initv>
  MX_TIM2_Init();
 80011a4:	f000 f9ce 	bl	8001544 <_ZL12MX_TIM2_Initv>
  MX_TIM1_Init();
 80011a8:	f000 f902 	bl	80013b0 <_ZL12MX_TIM1_Initv>
  MX_USART2_UART_Init();
 80011ac:	f000 fb0e 	bl	80017cc <_ZL19MX_USART2_UART_Initv>
  MX_TIM3_Init();
 80011b0:	f000 fa24 	bl	80015fc <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 80011b4:	f000 faac 	bl	8001710 <_ZL12MX_TIM4_Initv>
  /* USER CODE BEGIN 2 */

  MPU6050_Baslat();
 80011b8:	f000 fbba 	bl	8001930 <_Z14MPU6050_Baslatv>
  //Gyro kalibrasyon hatalarını hesapla.
  HAL_Delay(2000);
 80011bc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80011c0:	f001 fd46 	bl	8002c50 <HAL_Delay>
  GyroXh=GyroErr(GYRO_X_ADDR)/65.5; GyroYh=GyroErr(GYRO_Y_ADDR)/65.5; GyroZh=GyroErr(GYRO_Z_ADDR)/65.5;
 80011c4:	2043      	movs	r0, #67	; 0x43
 80011c6:	f000 fd9f 	bl	8001d08 <_Z7GyroErrh>
 80011ca:	4603      	mov	r3, r0
 80011cc:	492d      	ldr	r1, [pc, #180]	; (8001284 <main+0xfc>)
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff fe4e 	bl	8000e70 <__aeabi_fdiv>
 80011d4:	4603      	mov	r3, r0
 80011d6:	461a      	mov	r2, r3
 80011d8:	4b2b      	ldr	r3, [pc, #172]	; (8001288 <main+0x100>)
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	2045      	movs	r0, #69	; 0x45
 80011de:	f000 fd93 	bl	8001d08 <_Z7GyroErrh>
 80011e2:	4603      	mov	r3, r0
 80011e4:	4927      	ldr	r1, [pc, #156]	; (8001284 <main+0xfc>)
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff fe42 	bl	8000e70 <__aeabi_fdiv>
 80011ec:	4603      	mov	r3, r0
 80011ee:	461a      	mov	r2, r3
 80011f0:	4b26      	ldr	r3, [pc, #152]	; (800128c <main+0x104>)
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	2047      	movs	r0, #71	; 0x47
 80011f6:	f000 fd87 	bl	8001d08 <_Z7GyroErrh>
 80011fa:	4603      	mov	r3, r0
 80011fc:	4921      	ldr	r1, [pc, #132]	; (8001284 <main+0xfc>)
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff fe36 	bl	8000e70 <__aeabi_fdiv>
 8001204:	4603      	mov	r3, r0
 8001206:	461a      	mov	r2, r3
 8001208:	4b21      	ldr	r3, [pc, #132]	; (8001290 <main+0x108>)
 800120a:	601a      	str	r2, [r3, #0]
  //Kontrolcü Timer'ı
  HAL_TIM_Base_Start_IT(&htim2);
 800120c:	4821      	ldr	r0, [pc, #132]	; (8001294 <main+0x10c>)
 800120e:	f003 fcbb 	bl	8004b88 <HAL_TIM_Base_Start_IT>

  //Micros timer
  HAL_TIM_Base_Start(&htim3);
 8001212:	4821      	ldr	r0, [pc, #132]	; (8001298 <main+0x110>)
 8001214:	f003 fc6e 	bl	8004af4 <HAL_TIM_Base_Start>


  //PWM çıkış timer'ları
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001218:	2100      	movs	r1, #0
 800121a:	4820      	ldr	r0, [pc, #128]	; (800129c <main+0x114>)
 800121c:	f003 fd56 	bl	8004ccc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001220:	2104      	movs	r1, #4
 8001222:	481e      	ldr	r0, [pc, #120]	; (800129c <main+0x114>)
 8001224:	f003 fd52 	bl	8004ccc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001228:	2108      	movs	r1, #8
 800122a:	481c      	ldr	r0, [pc, #112]	; (800129c <main+0x114>)
 800122c:	f003 fd4e 	bl	8004ccc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001230:	210c      	movs	r1, #12
 8001232:	481a      	ldr	r0, [pc, #104]	; (800129c <main+0x114>)
 8001234:	f003 fd4a 	bl	8004ccc <HAL_TIM_PWM_Start>

  //PPM Input Capture Kanalları
  //HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8001238:	2104      	movs	r1, #4
 800123a:	4817      	ldr	r0, [pc, #92]	; (8001298 <main+0x110>)
 800123c:	f003 fe40 	bl	8004ec0 <HAL_TIM_IC_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //micros = __HAL_TIM_GET_COUNTER(&htim3);
	  //sprintf(buf,"%d\r\n",int(roll)); // @suppress("Float formatting support")
	  if(HAL_GetTick()- sent_time > 100) {
 8001240:	f001 fcfc 	bl	8002c3c <HAL_GetTick>
 8001244:	4603      	mov	r3, r0
 8001246:	4a16      	ldr	r2, [pc, #88]	; (80012a0 <main+0x118>)
 8001248:	6812      	ldr	r2, [r2, #0]
 800124a:	1a9b      	subs	r3, r3, r2
 800124c:	2b64      	cmp	r3, #100	; 0x64
 800124e:	bf8c      	ite	hi
 8001250:	2301      	movhi	r3, #1
 8001252:	2300      	movls	r3, #0
 8001254:	b2db      	uxtb	r3, r3
 8001256:	2b00      	cmp	r3, #0
 8001258:	d00e      	beq.n	8001278 <main+0xf0>
		  TelemPack();
 800125a:	f000 fc41 	bl	8001ae0 <_Z9TelemPackv>
		  HAL_UART_Transmit(&huart2, (uint8_t*)buf, sizeof(struct telem_pack), 1000);
 800125e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001262:	226c      	movs	r2, #108	; 0x6c
 8001264:	490f      	ldr	r1, [pc, #60]	; (80012a4 <main+0x11c>)
 8001266:	4810      	ldr	r0, [pc, #64]	; (80012a8 <main+0x120>)
 8001268:	f004 ff6e 	bl	8006148 <HAL_UART_Transmit>
		  sent_time = HAL_GetTick();
 800126c:	f001 fce6 	bl	8002c3c <HAL_GetTick>
 8001270:	4603      	mov	r3, r0
 8001272:	461a      	mov	r2, r3
 8001274:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <main+0x118>)
 8001276:	601a      	str	r2, [r3, #0]

	  }
	  //sprintf(buf,"%s\n","test");

	  Check_Arm();
 8001278:	f000 fb8e 	bl	8001998 <_Z9Check_Armv>
	  Check_Disarm();
 800127c:	f000 fbe4 	bl	8001a48 <_Z12Check_Disarmv>
	  if(HAL_GetTick()- sent_time > 100) {
 8001280:	e7de      	b.n	8001240 <main+0xb8>
 8001282:	bf00      	nop
 8001284:	42830000 	.word	0x42830000
 8001288:	20000258 	.word	0x20000258
 800128c:	2000025c 	.word	0x2000025c
 8001290:	20000260 	.word	0x20000260
 8001294:	20000128 	.word	0x20000128
 8001298:	20000170 	.word	0x20000170
 800129c:	200000e0 	.word	0x200000e0
 80012a0:	200007c4 	.word	0x200007c4
 80012a4:	2000031c 	.word	0x2000031c
 80012a8:	20000200 	.word	0x20000200

080012ac <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b090      	sub	sp, #64	; 0x40
 80012b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012b2:	f107 0318 	add.w	r3, r7, #24
 80012b6:	2228      	movs	r2, #40	; 0x28
 80012b8:	2100      	movs	r1, #0
 80012ba:	4618      	mov	r0, r3
 80012bc:	f007 fad2 	bl	8008864 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012c0:	1d3b      	adds	r3, r7, #4
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]
 80012c8:	609a      	str	r2, [r3, #8]
 80012ca:	60da      	str	r2, [r3, #12]
 80012cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012ce:	2301      	movs	r3, #1
 80012d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012d8:	2300      	movs	r3, #0
 80012da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012dc:	2301      	movs	r3, #1
 80012de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012e0:	2302      	movs	r3, #2
 80012e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80012ea:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80012ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f0:	f107 0318 	add.w	r3, r7, #24
 80012f4:	4618      	mov	r0, r3
 80012f6:	f002 ff93 	bl	8004220 <HAL_RCC_OscConfig>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	bf14      	ite	ne
 8001300:	2301      	movne	r3, #1
 8001302:	2300      	moveq	r3, #0
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 800130a:	f000 ffb5 	bl	8002278 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800130e:	230f      	movs	r3, #15
 8001310:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001312:	2302      	movs	r3, #2
 8001314:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800131a:	2300      	movs	r3, #0
 800131c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800131e:	2300      	movs	r3, #0
 8001320:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	2101      	movs	r1, #1
 8001326:	4618      	mov	r0, r3
 8001328:	f003 f9fa 	bl	8004720 <HAL_RCC_ClockConfig>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	bf14      	ite	ne
 8001332:	2301      	movne	r3, #1
 8001334:	2300      	moveq	r3, #0
 8001336:	b2db      	uxtb	r3, r3
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <_Z18SystemClock_Configv+0x94>
  {
    Error_Handler();
 800133c:	f000 ff9c 	bl	8002278 <Error_Handler>
  }
}
 8001340:	bf00      	nop
 8001342:	3740      	adds	r7, #64	; 0x40
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800134c:	4b15      	ldr	r3, [pc, #84]	; (80013a4 <_ZL12MX_I2C1_Initv+0x5c>)
 800134e:	4a16      	ldr	r2, [pc, #88]	; (80013a8 <_ZL12MX_I2C1_Initv+0x60>)
 8001350:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001352:	4b14      	ldr	r3, [pc, #80]	; (80013a4 <_ZL12MX_I2C1_Initv+0x5c>)
 8001354:	4a15      	ldr	r2, [pc, #84]	; (80013ac <_ZL12MX_I2C1_Initv+0x64>)
 8001356:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001358:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <_ZL12MX_I2C1_Initv+0x5c>)
 800135a:	2200      	movs	r2, #0
 800135c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800135e:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <_ZL12MX_I2C1_Initv+0x5c>)
 8001360:	2200      	movs	r2, #0
 8001362:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001364:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <_ZL12MX_I2C1_Initv+0x5c>)
 8001366:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800136a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800136c:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <_ZL12MX_I2C1_Initv+0x5c>)
 800136e:	2200      	movs	r2, #0
 8001370:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001372:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <_ZL12MX_I2C1_Initv+0x5c>)
 8001374:	2200      	movs	r2, #0
 8001376:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001378:	4b0a      	ldr	r3, [pc, #40]	; (80013a4 <_ZL12MX_I2C1_Initv+0x5c>)
 800137a:	2200      	movs	r2, #0
 800137c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800137e:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <_ZL12MX_I2C1_Initv+0x5c>)
 8001380:	2200      	movs	r2, #0
 8001382:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001384:	4807      	ldr	r0, [pc, #28]	; (80013a4 <_ZL12MX_I2C1_Initv+0x5c>)
 8001386:	f001 ff4b 	bl	8003220 <HAL_I2C_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	bf14      	ite	ne
 8001390:	2301      	movne	r3, #1
 8001392:	2300      	moveq	r3, #0
 8001394:	b2db      	uxtb	r3, r3
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 800139a:	f000 ff6d 	bl	8002278 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	2000008c 	.word	0x2000008c
 80013a8:	40005400 	.word	0x40005400
 80013ac:	00061a80 	.word	0x00061a80

080013b0 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b092      	sub	sp, #72	; 0x48
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
 80013d0:	615a      	str	r2, [r3, #20]
 80013d2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	2220      	movs	r2, #32
 80013d8:	2100      	movs	r1, #0
 80013da:	4618      	mov	r0, r3
 80013dc:	f007 fa42 	bl	8008864 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013e0:	4b56      	ldr	r3, [pc, #344]	; (800153c <_ZL12MX_TIM1_Initv+0x18c>)
 80013e2:	4a57      	ldr	r2, [pc, #348]	; (8001540 <_ZL12MX_TIM1_Initv+0x190>)
 80013e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32-1;
 80013e6:	4b55      	ldr	r3, [pc, #340]	; (800153c <_ZL12MX_TIM1_Initv+0x18c>)
 80013e8:	221f      	movs	r2, #31
 80013ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ec:	4b53      	ldr	r3, [pc, #332]	; (800153c <_ZL12MX_TIM1_Initv+0x18c>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 80013f2:	4b52      	ldr	r3, [pc, #328]	; (800153c <_ZL12MX_TIM1_Initv+0x18c>)
 80013f4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80013f8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013fa:	4b50      	ldr	r3, [pc, #320]	; (800153c <_ZL12MX_TIM1_Initv+0x18c>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001400:	4b4e      	ldr	r3, [pc, #312]	; (800153c <_ZL12MX_TIM1_Initv+0x18c>)
 8001402:	2200      	movs	r2, #0
 8001404:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001406:	4b4d      	ldr	r3, [pc, #308]	; (800153c <_ZL12MX_TIM1_Initv+0x18c>)
 8001408:	2200      	movs	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800140c:	484b      	ldr	r0, [pc, #300]	; (800153c <_ZL12MX_TIM1_Initv+0x18c>)
 800140e:	f003 fc0d 	bl	8004c2c <HAL_TIM_PWM_Init>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	bf14      	ite	ne
 8001418:	2301      	movne	r3, #1
 800141a:	2300      	moveq	r3, #0
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 8001422:	f000 ff29 	bl	8002278 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001426:	2300      	movs	r3, #0
 8001428:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800142a:	2300      	movs	r3, #0
 800142c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800142e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001432:	4619      	mov	r1, r3
 8001434:	4841      	ldr	r0, [pc, #260]	; (800153c <_ZL12MX_TIM1_Initv+0x18c>)
 8001436:	f004 fd79 	bl	8005f2c <HAL_TIMEx_MasterConfigSynchronization>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	bf14      	ite	ne
 8001440:	2301      	movne	r3, #1
 8001442:	2300      	moveq	r3, #0
 8001444:	b2db      	uxtb	r3, r3
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 800144a:	f000 ff15 	bl	8002278 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800144e:	2360      	movs	r3, #96	; 0x60
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001452:	2300      	movs	r3, #0
 8001454:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001456:	2300      	movs	r3, #0
 8001458:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800145a:	2300      	movs	r3, #0
 800145c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800145e:	2300      	movs	r3, #0
 8001460:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001462:	2300      	movs	r3, #0
 8001464:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001466:	2300      	movs	r3, #0
 8001468:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800146a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800146e:	2200      	movs	r2, #0
 8001470:	4619      	mov	r1, r3
 8001472:	4832      	ldr	r0, [pc, #200]	; (800153c <_ZL12MX_TIM1_Initv+0x18c>)
 8001474:	f003 ffc6 	bl	8005404 <HAL_TIM_PWM_ConfigChannel>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	bf14      	ite	ne
 800147e:	2301      	movne	r3, #1
 8001480:	2300      	moveq	r3, #0
 8001482:	b2db      	uxtb	r3, r3
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <_ZL12MX_TIM1_Initv+0xdc>
  {
    Error_Handler();
 8001488:	f000 fef6 	bl	8002278 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800148c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001490:	2204      	movs	r2, #4
 8001492:	4619      	mov	r1, r3
 8001494:	4829      	ldr	r0, [pc, #164]	; (800153c <_ZL12MX_TIM1_Initv+0x18c>)
 8001496:	f003 ffb5 	bl	8005404 <HAL_TIM_PWM_ConfigChannel>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	bf14      	ite	ne
 80014a0:	2301      	movne	r3, #1
 80014a2:	2300      	moveq	r3, #0
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <_ZL12MX_TIM1_Initv+0xfe>
  {
    Error_Handler();
 80014aa:	f000 fee5 	bl	8002278 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b2:	2208      	movs	r2, #8
 80014b4:	4619      	mov	r1, r3
 80014b6:	4821      	ldr	r0, [pc, #132]	; (800153c <_ZL12MX_TIM1_Initv+0x18c>)
 80014b8:	f003 ffa4 	bl	8005404 <HAL_TIM_PWM_ConfigChannel>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	bf14      	ite	ne
 80014c2:	2301      	movne	r3, #1
 80014c4:	2300      	moveq	r3, #0
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <_ZL12MX_TIM1_Initv+0x120>
  {
    Error_Handler();
 80014cc:	f000 fed4 	bl	8002278 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d4:	220c      	movs	r2, #12
 80014d6:	4619      	mov	r1, r3
 80014d8:	4818      	ldr	r0, [pc, #96]	; (800153c <_ZL12MX_TIM1_Initv+0x18c>)
 80014da:	f003 ff93 	bl	8005404 <HAL_TIM_PWM_ConfigChannel>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	bf14      	ite	ne
 80014e4:	2301      	movne	r3, #1
 80014e6:	2300      	moveq	r3, #0
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <_ZL12MX_TIM1_Initv+0x142>
  {
    Error_Handler();
 80014ee:	f000 fec3 	bl	8002278 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014f2:	2300      	movs	r3, #0
 80014f4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014f6:	2300      	movs	r3, #0
 80014f8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014fe:	2300      	movs	r3, #0
 8001500:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001502:	2300      	movs	r3, #0
 8001504:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001506:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800150a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800150c:	2300      	movs	r3, #0
 800150e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001510:	1d3b      	adds	r3, r7, #4
 8001512:	4619      	mov	r1, r3
 8001514:	4809      	ldr	r0, [pc, #36]	; (800153c <_ZL12MX_TIM1_Initv+0x18c>)
 8001516:	f004 fd67 	bl	8005fe8 <HAL_TIMEx_ConfigBreakDeadTime>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	bf14      	ite	ne
 8001520:	2301      	movne	r3, #1
 8001522:	2300      	moveq	r3, #0
 8001524:	b2db      	uxtb	r3, r3
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <_ZL12MX_TIM1_Initv+0x17e>
  {
    Error_Handler();
 800152a:	f000 fea5 	bl	8002278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800152e:	4803      	ldr	r0, [pc, #12]	; (800153c <_ZL12MX_TIM1_Initv+0x18c>)
 8001530:	f001 f9ee 	bl	8002910 <HAL_TIM_MspPostInit>

}
 8001534:	bf00      	nop
 8001536:	3748      	adds	r7, #72	; 0x48
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	200000e0 	.word	0x200000e0
 8001540:	40012c00 	.word	0x40012c00

08001544 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800154a:	f107 0308 	add.w	r3, r7, #8
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	609a      	str	r2, [r3, #8]
 8001556:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001558:	463b      	mov	r3, r7
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001560:	4b25      	ldr	r3, [pc, #148]	; (80015f8 <_ZL12MX_TIM2_Initv+0xb4>)
 8001562:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001566:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 8001568:	4b23      	ldr	r3, [pc, #140]	; (80015f8 <_ZL12MX_TIM2_Initv+0xb4>)
 800156a:	221f      	movs	r2, #31
 800156c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800156e:	4b22      	ldr	r3, [pc, #136]	; (80015f8 <_ZL12MX_TIM2_Initv+0xb4>)
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 8001574:	4b20      	ldr	r3, [pc, #128]	; (80015f8 <_ZL12MX_TIM2_Initv+0xb4>)
 8001576:	f241 3288 	movw	r2, #5000	; 0x1388
 800157a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800157c:	4b1e      	ldr	r3, [pc, #120]	; (80015f8 <_ZL12MX_TIM2_Initv+0xb4>)
 800157e:	2200      	movs	r2, #0
 8001580:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001582:	4b1d      	ldr	r3, [pc, #116]	; (80015f8 <_ZL12MX_TIM2_Initv+0xb4>)
 8001584:	2200      	movs	r2, #0
 8001586:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001588:	481b      	ldr	r0, [pc, #108]	; (80015f8 <_ZL12MX_TIM2_Initv+0xb4>)
 800158a:	f003 fa63 	bl	8004a54 <HAL_TIM_Base_Init>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	bf14      	ite	ne
 8001594:	2301      	movne	r3, #1
 8001596:	2300      	moveq	r3, #0
 8001598:	b2db      	uxtb	r3, r3
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 800159e:	f000 fe6b 	bl	8002278 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015a8:	f107 0308 	add.w	r3, r7, #8
 80015ac:	4619      	mov	r1, r3
 80015ae:	4812      	ldr	r0, [pc, #72]	; (80015f8 <_ZL12MX_TIM2_Initv+0xb4>)
 80015b0:	f003 ffe6 	bl	8005580 <HAL_TIM_ConfigClockSource>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	bf14      	ite	ne
 80015ba:	2301      	movne	r3, #1
 80015bc:	2300      	moveq	r3, #0
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 80015c4:	f000 fe58 	bl	8002278 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015c8:	2300      	movs	r3, #0
 80015ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015cc:	2300      	movs	r3, #0
 80015ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015d0:	463b      	mov	r3, r7
 80015d2:	4619      	mov	r1, r3
 80015d4:	4808      	ldr	r0, [pc, #32]	; (80015f8 <_ZL12MX_TIM2_Initv+0xb4>)
 80015d6:	f004 fca9 	bl	8005f2c <HAL_TIMEx_MasterConfigSynchronization>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	bf14      	ite	ne
 80015e0:	2301      	movne	r3, #1
 80015e2:	2300      	moveq	r3, #0
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 80015ea:	f000 fe45 	bl	8002278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015ee:	bf00      	nop
 80015f0:	3718      	adds	r7, #24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000128 	.word	0x20000128

080015fc <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08a      	sub	sp, #40	; 0x28
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001602:	f107 0318 	add.w	r3, r7, #24
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	605a      	str	r2, [r3, #4]
 800160c:	609a      	str	r2, [r3, #8]
 800160e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001610:	f107 0310 	add.w	r3, r7, #16
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800161a:	463b      	mov	r3, r7
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001626:	4b38      	ldr	r3, [pc, #224]	; (8001708 <_ZL12MX_TIM3_Initv+0x10c>)
 8001628:	4a38      	ldr	r2, [pc, #224]	; (800170c <_ZL12MX_TIM3_Initv+0x110>)
 800162a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32-1;
 800162c:	4b36      	ldr	r3, [pc, #216]	; (8001708 <_ZL12MX_TIM3_Initv+0x10c>)
 800162e:	221f      	movs	r2, #31
 8001630:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001632:	4b35      	ldr	r3, [pc, #212]	; (8001708 <_ZL12MX_TIM3_Initv+0x10c>)
 8001634:	2200      	movs	r2, #0
 8001636:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001638:	4b33      	ldr	r3, [pc, #204]	; (8001708 <_ZL12MX_TIM3_Initv+0x10c>)
 800163a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800163e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001640:	4b31      	ldr	r3, [pc, #196]	; (8001708 <_ZL12MX_TIM3_Initv+0x10c>)
 8001642:	2200      	movs	r2, #0
 8001644:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001646:	4b30      	ldr	r3, [pc, #192]	; (8001708 <_ZL12MX_TIM3_Initv+0x10c>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800164c:	482e      	ldr	r0, [pc, #184]	; (8001708 <_ZL12MX_TIM3_Initv+0x10c>)
 800164e:	f003 fa01 	bl	8004a54 <HAL_TIM_Base_Init>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	bf14      	ite	ne
 8001658:	2301      	movne	r3, #1
 800165a:	2300      	moveq	r3, #0
 800165c:	b2db      	uxtb	r3, r3
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <_ZL12MX_TIM3_Initv+0x6a>
  {
    Error_Handler();
 8001662:	f000 fe09 	bl	8002278 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001666:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800166a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800166c:	f107 0318 	add.w	r3, r7, #24
 8001670:	4619      	mov	r1, r3
 8001672:	4825      	ldr	r0, [pc, #148]	; (8001708 <_ZL12MX_TIM3_Initv+0x10c>)
 8001674:	f003 ff84 	bl	8005580 <HAL_TIM_ConfigClockSource>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	bf14      	ite	ne
 800167e:	2301      	movne	r3, #1
 8001680:	2300      	moveq	r3, #0
 8001682:	b2db      	uxtb	r3, r3
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <_ZL12MX_TIM3_Initv+0x90>
  {
    Error_Handler();
 8001688:	f000 fdf6 	bl	8002278 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800168c:	481e      	ldr	r0, [pc, #120]	; (8001708 <_ZL12MX_TIM3_Initv+0x10c>)
 800168e:	f003 fbbf 	bl	8004e10 <HAL_TIM_IC_Init>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	bf14      	ite	ne
 8001698:	2301      	movne	r3, #1
 800169a:	2300      	moveq	r3, #0
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <_ZL12MX_TIM3_Initv+0xaa>
  {
    Error_Handler();
 80016a2:	f000 fde9 	bl	8002278 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a6:	2300      	movs	r3, #0
 80016a8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016aa:	2300      	movs	r3, #0
 80016ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016ae:	f107 0310 	add.w	r3, r7, #16
 80016b2:	4619      	mov	r1, r3
 80016b4:	4814      	ldr	r0, [pc, #80]	; (8001708 <_ZL12MX_TIM3_Initv+0x10c>)
 80016b6:	f004 fc39 	bl	8005f2c <HAL_TIMEx_MasterConfigSynchronization>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	bf14      	ite	ne
 80016c0:	2301      	movne	r3, #1
 80016c2:	2300      	moveq	r3, #0
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <_ZL12MX_TIM3_Initv+0xd2>
  {
    Error_Handler();
 80016ca:	f000 fdd5 	bl	8002278 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80016ce:	2300      	movs	r3, #0
 80016d0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80016d2:	2301      	movs	r3, #1
 80016d4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80016d6:	2300      	movs	r3, #0
 80016d8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80016da:	2300      	movs	r3, #0
 80016dc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80016de:	463b      	mov	r3, r7
 80016e0:	2204      	movs	r2, #4
 80016e2:	4619      	mov	r1, r3
 80016e4:	4808      	ldr	r0, [pc, #32]	; (8001708 <_ZL12MX_TIM3_Initv+0x10c>)
 80016e6:	f003 fdf9 	bl	80052dc <HAL_TIM_IC_ConfigChannel>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	bf14      	ite	ne
 80016f0:	2301      	movne	r3, #1
 80016f2:	2300      	moveq	r3, #0
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <_ZL12MX_TIM3_Initv+0x102>
  {
    Error_Handler();
 80016fa:	f000 fdbd 	bl	8002278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80016fe:	bf00      	nop
 8001700:	3728      	adds	r7, #40	; 0x28
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000170 	.word	0x20000170
 800170c:	40000400 	.word	0x40000400

08001710 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001716:	f107 0308 	add.w	r3, r7, #8
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	605a      	str	r2, [r3, #4]
 8001720:	609a      	str	r2, [r3, #8]
 8001722:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001724:	463b      	mov	r3, r7
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800172c:	4b25      	ldr	r3, [pc, #148]	; (80017c4 <_ZL12MX_TIM4_Initv+0xb4>)
 800172e:	4a26      	ldr	r2, [pc, #152]	; (80017c8 <_ZL12MX_TIM4_Initv+0xb8>)
 8001730:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 32000-1;
 8001732:	4b24      	ldr	r3, [pc, #144]	; (80017c4 <_ZL12MX_TIM4_Initv+0xb4>)
 8001734:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8001738:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800173a:	4b22      	ldr	r3, [pc, #136]	; (80017c4 <_ZL12MX_TIM4_Initv+0xb4>)
 800173c:	2200      	movs	r2, #0
 800173e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001740:	4b20      	ldr	r3, [pc, #128]	; (80017c4 <_ZL12MX_TIM4_Initv+0xb4>)
 8001742:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001746:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001748:	4b1e      	ldr	r3, [pc, #120]	; (80017c4 <_ZL12MX_TIM4_Initv+0xb4>)
 800174a:	2200      	movs	r2, #0
 800174c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800174e:	4b1d      	ldr	r3, [pc, #116]	; (80017c4 <_ZL12MX_TIM4_Initv+0xb4>)
 8001750:	2200      	movs	r2, #0
 8001752:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001754:	481b      	ldr	r0, [pc, #108]	; (80017c4 <_ZL12MX_TIM4_Initv+0xb4>)
 8001756:	f003 f97d 	bl	8004a54 <HAL_TIM_Base_Init>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	bf14      	ite	ne
 8001760:	2301      	movne	r3, #1
 8001762:	2300      	moveq	r3, #0
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <_ZL12MX_TIM4_Initv+0x5e>
  {
    Error_Handler();
 800176a:	f000 fd85 	bl	8002278 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800176e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001772:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001774:	f107 0308 	add.w	r3, r7, #8
 8001778:	4619      	mov	r1, r3
 800177a:	4812      	ldr	r0, [pc, #72]	; (80017c4 <_ZL12MX_TIM4_Initv+0xb4>)
 800177c:	f003 ff00 	bl	8005580 <HAL_TIM_ConfigClockSource>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	bf14      	ite	ne
 8001786:	2301      	movne	r3, #1
 8001788:	2300      	moveq	r3, #0
 800178a:	b2db      	uxtb	r3, r3
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <_ZL12MX_TIM4_Initv+0x84>
  {
    Error_Handler();
 8001790:	f000 fd72 	bl	8002278 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001794:	2300      	movs	r3, #0
 8001796:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001798:	2300      	movs	r3, #0
 800179a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800179c:	463b      	mov	r3, r7
 800179e:	4619      	mov	r1, r3
 80017a0:	4808      	ldr	r0, [pc, #32]	; (80017c4 <_ZL12MX_TIM4_Initv+0xb4>)
 80017a2:	f004 fbc3 	bl	8005f2c <HAL_TIMEx_MasterConfigSynchronization>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	bf14      	ite	ne
 80017ac:	2301      	movne	r3, #1
 80017ae:	2300      	moveq	r3, #0
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <_ZL12MX_TIM4_Initv+0xaa>
  {
    Error_Handler();
 80017b6:	f000 fd5f 	bl	8002278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80017ba:	bf00      	nop
 80017bc:	3718      	adds	r7, #24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	200001b8 	.word	0x200001b8
 80017c8:	40000800 	.word	0x40000800

080017cc <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017d0:	4b13      	ldr	r3, [pc, #76]	; (8001820 <_ZL19MX_USART2_UART_Initv+0x54>)
 80017d2:	4a14      	ldr	r2, [pc, #80]	; (8001824 <_ZL19MX_USART2_UART_Initv+0x58>)
 80017d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80017d6:	4b12      	ldr	r3, [pc, #72]	; (8001820 <_ZL19MX_USART2_UART_Initv+0x54>)
 80017d8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017de:	4b10      	ldr	r3, [pc, #64]	; (8001820 <_ZL19MX_USART2_UART_Initv+0x54>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017e4:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <_ZL19MX_USART2_UART_Initv+0x54>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017ea:	4b0d      	ldr	r3, [pc, #52]	; (8001820 <_ZL19MX_USART2_UART_Initv+0x54>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017f0:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <_ZL19MX_USART2_UART_Initv+0x54>)
 80017f2:	220c      	movs	r2, #12
 80017f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017f6:	4b0a      	ldr	r3, [pc, #40]	; (8001820 <_ZL19MX_USART2_UART_Initv+0x54>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017fc:	4b08      	ldr	r3, [pc, #32]	; (8001820 <_ZL19MX_USART2_UART_Initv+0x54>)
 80017fe:	2200      	movs	r2, #0
 8001800:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001802:	4807      	ldr	r0, [pc, #28]	; (8001820 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001804:	f004 fc53 	bl	80060ae <HAL_UART_Init>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	bf14      	ite	ne
 800180e:	2301      	movne	r3, #1
 8001810:	2300      	moveq	r3, #0
 8001812:	b2db      	uxtb	r3, r3
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8001818:	f000 fd2e 	bl	8002278 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800181c:	bf00      	nop
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20000200 	.word	0x20000200
 8001824:	40004400 	.word	0x40004400

08001828 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b088      	sub	sp, #32
 800182c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182e:	f107 0310 	add.w	r3, r7, #16
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	609a      	str	r2, [r3, #8]
 800183a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800183c:	4b38      	ldr	r3, [pc, #224]	; (8001920 <_ZL12MX_GPIO_Initv+0xf8>)
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	4a37      	ldr	r2, [pc, #220]	; (8001920 <_ZL12MX_GPIO_Initv+0xf8>)
 8001842:	f043 0310 	orr.w	r3, r3, #16
 8001846:	6193      	str	r3, [r2, #24]
 8001848:	4b35      	ldr	r3, [pc, #212]	; (8001920 <_ZL12MX_GPIO_Initv+0xf8>)
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	f003 0310 	and.w	r3, r3, #16
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001854:	4b32      	ldr	r3, [pc, #200]	; (8001920 <_ZL12MX_GPIO_Initv+0xf8>)
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	4a31      	ldr	r2, [pc, #196]	; (8001920 <_ZL12MX_GPIO_Initv+0xf8>)
 800185a:	f043 0320 	orr.w	r3, r3, #32
 800185e:	6193      	str	r3, [r2, #24]
 8001860:	4b2f      	ldr	r3, [pc, #188]	; (8001920 <_ZL12MX_GPIO_Initv+0xf8>)
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	f003 0320 	and.w	r3, r3, #32
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800186c:	4b2c      	ldr	r3, [pc, #176]	; (8001920 <_ZL12MX_GPIO_Initv+0xf8>)
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	4a2b      	ldr	r2, [pc, #172]	; (8001920 <_ZL12MX_GPIO_Initv+0xf8>)
 8001872:	f043 0304 	orr.w	r3, r3, #4
 8001876:	6193      	str	r3, [r2, #24]
 8001878:	4b29      	ldr	r3, [pc, #164]	; (8001920 <_ZL12MX_GPIO_Initv+0xf8>)
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	f003 0304 	and.w	r3, r3, #4
 8001880:	607b      	str	r3, [r7, #4]
 8001882:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001884:	4b26      	ldr	r3, [pc, #152]	; (8001920 <_ZL12MX_GPIO_Initv+0xf8>)
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	4a25      	ldr	r2, [pc, #148]	; (8001920 <_ZL12MX_GPIO_Initv+0xf8>)
 800188a:	f043 0308 	orr.w	r3, r3, #8
 800188e:	6193      	str	r3, [r2, #24]
 8001890:	4b23      	ldr	r3, [pc, #140]	; (8001920 <_ZL12MX_GPIO_Initv+0xf8>)
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	f003 0308 	and.w	r3, r3, #8
 8001898:	603b      	str	r3, [r7, #0]
 800189a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800189c:	2200      	movs	r2, #0
 800189e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018a2:	4820      	ldr	r0, [pc, #128]	; (8001924 <_ZL12MX_GPIO_Initv+0xfc>)
 80018a4:	f001 fc8a 	bl	80031bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80018a8:	2200      	movs	r2, #0
 80018aa:	2102      	movs	r1, #2
 80018ac:	481e      	ldr	r0, [pc, #120]	; (8001928 <_ZL12MX_GPIO_Initv+0x100>)
 80018ae:	f001 fc85 	bl	80031bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80018b2:	2200      	movs	r2, #0
 80018b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018b8:	481c      	ldr	r0, [pc, #112]	; (800192c <_ZL12MX_GPIO_Initv+0x104>)
 80018ba:	f001 fc7f 	bl	80031bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80018be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c4:	2301      	movs	r3, #1
 80018c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018cc:	2302      	movs	r3, #2
 80018ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80018d0:	f107 0310 	add.w	r3, r7, #16
 80018d4:	4619      	mov	r1, r3
 80018d6:	4813      	ldr	r0, [pc, #76]	; (8001924 <_ZL12MX_GPIO_Initv+0xfc>)
 80018d8:	f001 faec 	bl	8002eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80018dc:	2302      	movs	r3, #2
 80018de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e0:	2301      	movs	r3, #1
 80018e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e8:	2302      	movs	r3, #2
 80018ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ec:	f107 0310 	add.w	r3, r7, #16
 80018f0:	4619      	mov	r1, r3
 80018f2:	480d      	ldr	r0, [pc, #52]	; (8001928 <_ZL12MX_GPIO_Initv+0x100>)
 80018f4:	f001 fade 	bl	8002eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80018f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018fe:	2301      	movs	r3, #1
 8001900:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001906:	2302      	movs	r3, #2
 8001908:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190a:	f107 0310 	add.w	r3, r7, #16
 800190e:	4619      	mov	r1, r3
 8001910:	4806      	ldr	r0, [pc, #24]	; (800192c <_ZL12MX_GPIO_Initv+0x104>)
 8001912:	f001 facf 	bl	8002eb4 <HAL_GPIO_Init>

}
 8001916:	bf00      	nop
 8001918:	3720      	adds	r7, #32
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40021000 	.word	0x40021000
 8001924:	40011000 	.word	0x40011000
 8001928:	40010c00 	.word	0x40010c00
 800192c:	40010800 	.word	0x40010800

08001930 <_Z14MPU6050_Baslatv>:

/* USER CODE BEGIN 4 */
void MPU6050_Baslat(void) {
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af04      	add	r7, sp, #16
	uint8_t config = 0x00;
 8001936:	2300      	movs	r3, #0
 8001938:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, MPU6050_POW_REG, 1, &config, 1, 5); //Güç registerını aktif et
 800193a:	2305      	movs	r3, #5
 800193c:	9302      	str	r3, [sp, #8]
 800193e:	2301      	movs	r3, #1
 8001940:	9301      	str	r3, [sp, #4]
 8001942:	1dfb      	adds	r3, r7, #7
 8001944:	9300      	str	r3, [sp, #0]
 8001946:	2301      	movs	r3, #1
 8001948:	226b      	movs	r2, #107	; 0x6b
 800194a:	21d0      	movs	r1, #208	; 0xd0
 800194c:	4811      	ldr	r0, [pc, #68]	; (8001994 <_Z14MPU6050_Baslatv+0x64>)
 800194e:	f001 fdab 	bl	80034a8 <HAL_I2C_Mem_Write>
	config = 0x08;
 8001952:	2308      	movs	r3, #8
 8001954:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, GYRO_CONF_REG, 1, &config, 1, 5); //Gyro 250 d/s'ye ayarlandi.
 8001956:	2305      	movs	r3, #5
 8001958:	9302      	str	r3, [sp, #8]
 800195a:	2301      	movs	r3, #1
 800195c:	9301      	str	r3, [sp, #4]
 800195e:	1dfb      	adds	r3, r7, #7
 8001960:	9300      	str	r3, [sp, #0]
 8001962:	2301      	movs	r3, #1
 8001964:	221b      	movs	r2, #27
 8001966:	21d0      	movs	r1, #208	; 0xd0
 8001968:	480a      	ldr	r0, [pc, #40]	; (8001994 <_Z14MPU6050_Baslatv+0x64>)
 800196a:	f001 fd9d 	bl	80034a8 <HAL_I2C_Mem_Write>
	config = 0x10;
 800196e:	2310      	movs	r3, #16
 8001970:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, ACC_CONF_REG, 1, &config, 1, 5); //Acc +-8g'ye ayarlandi.
 8001972:	2305      	movs	r3, #5
 8001974:	9302      	str	r3, [sp, #8]
 8001976:	2301      	movs	r3, #1
 8001978:	9301      	str	r3, [sp, #4]
 800197a:	1dfb      	adds	r3, r7, #7
 800197c:	9300      	str	r3, [sp, #0]
 800197e:	2301      	movs	r3, #1
 8001980:	221c      	movs	r2, #28
 8001982:	21d0      	movs	r1, #208	; 0xd0
 8001984:	4803      	ldr	r0, [pc, #12]	; (8001994 <_Z14MPU6050_Baslatv+0x64>)
 8001986:	f001 fd8f 	bl	80034a8 <HAL_I2C_Mem_Write>
}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	2000008c 	.word	0x2000008c

08001998 <_Z9Check_Armv>:


void Check_Arm() {
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
	if(!armed) {
 800199c:	4b23      	ldr	r3, [pc, #140]	; (8001a2c <_Z9Check_Armv+0x94>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	f083 0301 	eor.w	r3, r3, #1
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d03e      	beq.n	8001a28 <_Z9Check_Armv+0x90>
		if((ch[2] < 1100) && (ch[3] > 1700)) {
 80019aa:	4b21      	ldr	r3, [pc, #132]	; (8001a30 <_Z9Check_Armv+0x98>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f240 424b 	movw	r2, #1099	; 0x44b
 80019b2:	4293      	cmp	r3, r2
 80019b4:	dc34      	bgt.n	8001a20 <_Z9Check_Armv+0x88>
 80019b6:	4b1e      	ldr	r3, [pc, #120]	; (8001a30 <_Z9Check_Armv+0x98>)
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	f240 62a4 	movw	r2, #1700	; 0x6a4
 80019be:	4293      	cmp	r3, r2
 80019c0:	dd2e      	ble.n	8001a20 <_Z9Check_Armv+0x88>
				if(!arm_start){
 80019c2:	4b1c      	ldr	r3, [pc, #112]	; (8001a34 <_Z9Check_Armv+0x9c>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	f083 0301 	eor.w	r3, r3, #1
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d008      	beq.n	80019e2 <_Z9Check_Armv+0x4a>
					arm_timer = HAL_GetTick();
 80019d0:	f001 f934 	bl	8002c3c <HAL_GetTick>
 80019d4:	4603      	mov	r3, r0
 80019d6:	461a      	mov	r2, r3
 80019d8:	4b17      	ldr	r3, [pc, #92]	; (8001a38 <_Z9Check_Armv+0xa0>)
 80019da:	601a      	str	r2, [r3, #0]
					arm_start = true;
 80019dc:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <_Z9Check_Armv+0x9c>)
 80019de:	2201      	movs	r2, #1
 80019e0:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GetTick() - arm_timer > 3000) {
 80019e2:	f001 f92b 	bl	8002c3c <HAL_GetTick>
 80019e6:	4603      	mov	r3, r0
 80019e8:	4a13      	ldr	r2, [pc, #76]	; (8001a38 <_Z9Check_Armv+0xa0>)
 80019ea:	6812      	ldr	r2, [r2, #0]
 80019ec:	1a9b      	subs	r3, r3, r2
 80019ee:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80019f2:	4293      	cmp	r3, r2
 80019f4:	bf8c      	ite	hi
 80019f6:	2301      	movhi	r3, #1
 80019f8:	2300      	movls	r3, #0
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d013      	beq.n	8001a28 <_Z9Check_Armv+0x90>
					controller.pid_roll.reset();
 8001a00:	480e      	ldr	r0, [pc, #56]	; (8001a3c <_Z9Check_Armv+0xa4>)
 8001a02:	f006 f977 	bl	8007cf4 <_ZN3PID5resetEv>
					controller.pid_pitch.reset();
 8001a06:	480e      	ldr	r0, [pc, #56]	; (8001a40 <_Z9Check_Armv+0xa8>)
 8001a08:	f006 f974 	bl	8007cf4 <_ZN3PID5resetEv>
					armed = true;
 8001a0c:	4b07      	ldr	r3, [pc, #28]	; (8001a2c <_Z9Check_Armv+0x94>)
 8001a0e:	2201      	movs	r2, #1
 8001a10:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001a12:	2201      	movs	r2, #1
 8001a14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a18:	480a      	ldr	r0, [pc, #40]	; (8001a44 <_Z9Check_Armv+0xac>)
 8001a1a:	f001 fbcf 	bl	80031bc <HAL_GPIO_WritePin>
				if(HAL_GetTick() - arm_timer > 3000) {
 8001a1e:	e003      	b.n	8001a28 <_Z9Check_Armv+0x90>
				}

		}

		else {
			arm_start = false;
 8001a20:	4b04      	ldr	r3, [pc, #16]	; (8001a34 <_Z9Check_Armv+0x9c>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	701a      	strb	r2, [r3, #0]
		}
	}

}
 8001a26:	e7ff      	b.n	8001a28 <_Z9Check_Armv+0x90>
 8001a28:	bf00      	nop
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	200007c9 	.word	0x200007c9
 8001a30:	20000794 	.word	0x20000794
 8001a34:	200007c8 	.word	0x200007c8
 8001a38:	200007bc 	.word	0x200007bc
 8001a3c:	20000610 	.word	0x20000610
 8001a40:	20000680 	.word	0x20000680
 8001a44:	40010800 	.word	0x40010800

08001a48 <_Z12Check_Disarmv>:

void Check_Disarm() {
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
	if(armed) {
 8001a4c:	4b1f      	ldr	r3, [pc, #124]	; (8001acc <_Z12Check_Disarmv+0x84>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d038      	beq.n	8001ac6 <_Z12Check_Disarmv+0x7e>
		if((ch[2] < 1100) && (ch[3] < 1100)) {
 8001a54:	4b1e      	ldr	r3, [pc, #120]	; (8001ad0 <_Z12Check_Disarmv+0x88>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f240 424b 	movw	r2, #1099	; 0x44b
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	dc2e      	bgt.n	8001abe <_Z12Check_Disarmv+0x76>
 8001a60:	4b1b      	ldr	r3, [pc, #108]	; (8001ad0 <_Z12Check_Disarmv+0x88>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	f240 424b 	movw	r2, #1099	; 0x44b
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	dc28      	bgt.n	8001abe <_Z12Check_Disarmv+0x76>
				if(!disarm_start){
 8001a6c:	4b19      	ldr	r3, [pc, #100]	; (8001ad4 <_Z12Check_Disarmv+0x8c>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	f083 0301 	eor.w	r3, r3, #1
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d008      	beq.n	8001a8c <_Z12Check_Disarmv+0x44>
					disarm_timer = HAL_GetTick();
 8001a7a:	f001 f8df 	bl	8002c3c <HAL_GetTick>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	461a      	mov	r2, r3
 8001a82:	4b15      	ldr	r3, [pc, #84]	; (8001ad8 <_Z12Check_Disarmv+0x90>)
 8001a84:	601a      	str	r2, [r3, #0]
					disarm_start = true;
 8001a86:	4b13      	ldr	r3, [pc, #76]	; (8001ad4 <_Z12Check_Disarmv+0x8c>)
 8001a88:	2201      	movs	r2, #1
 8001a8a:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GetTick() - disarm_timer > 3000) {
 8001a8c:	f001 f8d6 	bl	8002c3c <HAL_GetTick>
 8001a90:	4603      	mov	r3, r0
 8001a92:	4a11      	ldr	r2, [pc, #68]	; (8001ad8 <_Z12Check_Disarmv+0x90>)
 8001a94:	6812      	ldr	r2, [r2, #0]
 8001a96:	1a9b      	subs	r3, r3, r2
 8001a98:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	bf8c      	ite	hi
 8001aa0:	2301      	movhi	r3, #1
 8001aa2:	2300      	movls	r3, #0
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d00d      	beq.n	8001ac6 <_Z12Check_Disarmv+0x7e>
					armed = false;
 8001aaa:	4b08      	ldr	r3, [pc, #32]	; (8001acc <_Z12Check_Disarmv+0x84>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ab6:	4809      	ldr	r0, [pc, #36]	; (8001adc <_Z12Check_Disarmv+0x94>)
 8001ab8:	f001 fb80 	bl	80031bc <HAL_GPIO_WritePin>
				if(HAL_GetTick() - disarm_timer > 3000) {
 8001abc:	e003      	b.n	8001ac6 <_Z12Check_Disarmv+0x7e>
				}

		}

		else {
			disarm_start = false;
 8001abe:	4b05      	ldr	r3, [pc, #20]	; (8001ad4 <_Z12Check_Disarmv+0x8c>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001ac4:	e7ff      	b.n	8001ac6 <_Z12Check_Disarmv+0x7e>
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	200007c9 	.word	0x200007c9
 8001ad0:	20000794 	.word	0x20000794
 8001ad4:	200007cb 	.word	0x200007cb
 8001ad8:	200007c0 	.word	0x200007c0
 8001adc:	40010800 	.word	0x40010800

08001ae0 <_Z9TelemPackv>:

void TelemPack() {
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
	  telem_pack.attitude.roll  = state.angles[0];
 8001ae4:	4b52      	ldr	r3, [pc, #328]	; (8001c30 <_Z9TelemPackv+0x150>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a52      	ldr	r2, [pc, #328]	; (8001c34 <_Z9TelemPackv+0x154>)
 8001aea:	6013      	str	r3, [r2, #0]
	  telem_pack.attitude.pitch = state.angles[1];
 8001aec:	4b50      	ldr	r3, [pc, #320]	; (8001c30 <_Z9TelemPackv+0x150>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	4a50      	ldr	r2, [pc, #320]	; (8001c34 <_Z9TelemPackv+0x154>)
 8001af2:	6053      	str	r3, [r2, #4]
	  telem_pack.attitude.yaw   = state.angles[2];
 8001af4:	4b4e      	ldr	r3, [pc, #312]	; (8001c30 <_Z9TelemPackv+0x150>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	4a4e      	ldr	r2, [pc, #312]	; (8001c34 <_Z9TelemPackv+0x154>)
 8001afa:	6093      	str	r3, [r2, #8]

	  telem_pack.pwm.w1 = controller_output[0];
 8001afc:	4b4e      	ldr	r3, [pc, #312]	; (8001c38 <_Z9TelemPackv+0x158>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	4b4c      	ldr	r3, [pc, #304]	; (8001c34 <_Z9TelemPackv+0x154>)
 8001b04:	861a      	strh	r2, [r3, #48]	; 0x30
	  telem_pack.pwm.w2 = controller_output[1];
 8001b06:	4b4c      	ldr	r3, [pc, #304]	; (8001c38 <_Z9TelemPackv+0x158>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	4b49      	ldr	r3, [pc, #292]	; (8001c34 <_Z9TelemPackv+0x154>)
 8001b0e:	865a      	strh	r2, [r3, #50]	; 0x32
	  telem_pack.pwm.w3 = controller_output[2];
 8001b10:	4b49      	ldr	r3, [pc, #292]	; (8001c38 <_Z9TelemPackv+0x158>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	4b47      	ldr	r3, [pc, #284]	; (8001c34 <_Z9TelemPackv+0x154>)
 8001b18:	869a      	strh	r2, [r3, #52]	; 0x34
	  telem_pack.pwm.w4 = controller_output[3];
 8001b1a:	4b47      	ldr	r3, [pc, #284]	; (8001c38 <_Z9TelemPackv+0x158>)
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	4b44      	ldr	r3, [pc, #272]	; (8001c34 <_Z9TelemPackv+0x154>)
 8001b22:	86da      	strh	r2, [r3, #54]	; 0x36

	  telem_pack.attitude_des.roll  = state_des.angles[0];
 8001b24:	4b45      	ldr	r3, [pc, #276]	; (8001c3c <_Z9TelemPackv+0x15c>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a42      	ldr	r2, [pc, #264]	; (8001c34 <_Z9TelemPackv+0x154>)
 8001b2a:	60d3      	str	r3, [r2, #12]
	  telem_pack.attitude_des.pitch = state_des.angles[1];
 8001b2c:	4b43      	ldr	r3, [pc, #268]	; (8001c3c <_Z9TelemPackv+0x15c>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	4a40      	ldr	r2, [pc, #256]	; (8001c34 <_Z9TelemPackv+0x154>)
 8001b32:	6113      	str	r3, [r2, #16]
	  telem_pack.attitude_des.yaw   = state_des.angles[2];
 8001b34:	4b41      	ldr	r3, [pc, #260]	; (8001c3c <_Z9TelemPackv+0x15c>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	4a3e      	ldr	r2, [pc, #248]	; (8001c34 <_Z9TelemPackv+0x154>)
 8001b3a:	6153      	str	r3, [r2, #20]

	  telem_pack.attitude_rate.roll =  state.rates[0];
 8001b3c:	4b3c      	ldr	r3, [pc, #240]	; (8001c30 <_Z9TelemPackv+0x150>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	4a3c      	ldr	r2, [pc, #240]	; (8001c34 <_Z9TelemPackv+0x154>)
 8001b42:	6193      	str	r3, [r2, #24]
	  telem_pack.attitude_rate.pitch = state.rates[1];
 8001b44:	4b3a      	ldr	r3, [pc, #232]	; (8001c30 <_Z9TelemPackv+0x150>)
 8001b46:	691b      	ldr	r3, [r3, #16]
 8001b48:	4a3a      	ldr	r2, [pc, #232]	; (8001c34 <_Z9TelemPackv+0x154>)
 8001b4a:	61d3      	str	r3, [r2, #28]

	  telem_pack.attitude_rate_des.roll =  state_des.rates[0];
 8001b4c:	4b3b      	ldr	r3, [pc, #236]	; (8001c3c <_Z9TelemPackv+0x15c>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	4a38      	ldr	r2, [pc, #224]	; (8001c34 <_Z9TelemPackv+0x154>)
 8001b52:	6253      	str	r3, [r2, #36]	; 0x24
	  telem_pack.attitude_rate_des.pitch = state_des.rates[1];
 8001b54:	4b39      	ldr	r3, [pc, #228]	; (8001c3c <_Z9TelemPackv+0x15c>)
 8001b56:	691b      	ldr	r3, [r3, #16]
 8001b58:	4a36      	ldr	r2, [pc, #216]	; (8001c34 <_Z9TelemPackv+0x154>)
 8001b5a:	6293      	str	r3, [r2, #40]	; 0x28

	  telem_pack.ekf.roll_acc  = EKF.roll_acc;
 8001b5c:	4b38      	ldr	r3, [pc, #224]	; (8001c40 <_Z9TelemPackv+0x160>)
 8001b5e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8001b62:	4a34      	ldr	r2, [pc, #208]	; (8001c34 <_Z9TelemPackv+0x154>)
 8001b64:	6393      	str	r3, [r2, #56]	; 0x38
	  telem_pack.ekf.pitch_acc = EKF.pitch_acc;
 8001b66:	4b36      	ldr	r3, [pc, #216]	; (8001c40 <_Z9TelemPackv+0x160>)
 8001b68:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8001b6c:	4a31      	ldr	r2, [pc, #196]	; (8001c34 <_Z9TelemPackv+0x154>)
 8001b6e:	63d3      	str	r3, [r2, #60]	; 0x3c
	  telem_pack.ekf.yaw_acc   = EKF.yaw_acc;
 8001b70:	4b33      	ldr	r3, [pc, #204]	; (8001c40 <_Z9TelemPackv+0x160>)
 8001b72:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8001b76:	4a2f      	ldr	r2, [pc, #188]	; (8001c34 <_Z9TelemPackv+0x154>)
 8001b78:	6413      	str	r3, [r2, #64]	; 0x40

	  telem_pack.ekf.roll_gyro =  EKF.roll_comp;
 8001b7a:	4b31      	ldr	r3, [pc, #196]	; (8001c40 <_Z9TelemPackv+0x160>)
 8001b7c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001b80:	4a2c      	ldr	r2, [pc, #176]	; (8001c34 <_Z9TelemPackv+0x154>)
 8001b82:	6453      	str	r3, [r2, #68]	; 0x44
	  telem_pack.ekf.pitch_gyro = EKF.pitch_comp;
 8001b84:	4b2e      	ldr	r3, [pc, #184]	; (8001c40 <_Z9TelemPackv+0x160>)
 8001b86:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8001b8a:	4a2a      	ldr	r2, [pc, #168]	; (8001c34 <_Z9TelemPackv+0x154>)
 8001b8c:	6493      	str	r3, [r2, #72]	; 0x48

	  telem_pack.pid_roll.P = controller.pid_roll.P;
 8001b8e:	4b2d      	ldr	r3, [pc, #180]	; (8001c44 <_Z9TelemPackv+0x164>)
 8001b90:	e9d3 2348 	ldrd	r2, r3, [r3, #288]	; 0x120
 8001b94:	4610      	mov	r0, r2
 8001b96:	4619      	mov	r1, r3
 8001b98:	f7fe ff58 	bl	8000a4c <__aeabi_d2f>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	4a25      	ldr	r2, [pc, #148]	; (8001c34 <_Z9TelemPackv+0x154>)
 8001ba0:	64d3      	str	r3, [r2, #76]	; 0x4c
	  telem_pack.pid_roll.I = controller.pid_roll.I;
 8001ba2:	4b28      	ldr	r3, [pc, #160]	; (8001c44 <_Z9TelemPackv+0x164>)
 8001ba4:	e9d3 234a 	ldrd	r2, r3, [r3, #296]	; 0x128
 8001ba8:	4610      	mov	r0, r2
 8001baa:	4619      	mov	r1, r3
 8001bac:	f7fe ff4e 	bl	8000a4c <__aeabi_d2f>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	4a20      	ldr	r2, [pc, #128]	; (8001c34 <_Z9TelemPackv+0x154>)
 8001bb4:	6513      	str	r3, [r2, #80]	; 0x50
	  telem_pack.pid_roll.D = controller.pid_roll.D;
 8001bb6:	4b23      	ldr	r3, [pc, #140]	; (8001c44 <_Z9TelemPackv+0x164>)
 8001bb8:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 8001bbc:	4610      	mov	r0, r2
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	f7fe ff44 	bl	8000a4c <__aeabi_d2f>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	4a1b      	ldr	r2, [pc, #108]	; (8001c34 <_Z9TelemPackv+0x154>)
 8001bc8:	6553      	str	r3, [r2, #84]	; 0x54
	  telem_pack.pid_roll.pd_roll_sat_buf = controller.pid_roll.pd_roll_sat_buf;
 8001bca:	4b1e      	ldr	r3, [pc, #120]	; (8001c44 <_Z9TelemPackv+0x164>)
 8001bcc:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001bd0:	4a18      	ldr	r2, [pc, #96]	; (8001c34 <_Z9TelemPackv+0x154>)
 8001bd2:	6593      	str	r3, [r2, #88]	; 0x58

	  telem_pack.pid_pitch.P = controller.pid_pitch.P;
 8001bd4:	4b1b      	ldr	r3, [pc, #108]	; (8001c44 <_Z9TelemPackv+0x164>)
 8001bd6:	e9d3 2364 	ldrd	r2, r3, [r3, #400]	; 0x190
 8001bda:	4610      	mov	r0, r2
 8001bdc:	4619      	mov	r1, r3
 8001bde:	f7fe ff35 	bl	8000a4c <__aeabi_d2f>
 8001be2:	4603      	mov	r3, r0
 8001be4:	4a13      	ldr	r2, [pc, #76]	; (8001c34 <_Z9TelemPackv+0x154>)
 8001be6:	65d3      	str	r3, [r2, #92]	; 0x5c
	  telem_pack.pid_pitch.I = controller.pid_pitch.I;
 8001be8:	4b16      	ldr	r3, [pc, #88]	; (8001c44 <_Z9TelemPackv+0x164>)
 8001bea:	e9d3 2366 	ldrd	r2, r3, [r3, #408]	; 0x198
 8001bee:	4610      	mov	r0, r2
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	f7fe ff2b 	bl	8000a4c <__aeabi_d2f>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	4a0e      	ldr	r2, [pc, #56]	; (8001c34 <_Z9TelemPackv+0x154>)
 8001bfa:	6613      	str	r3, [r2, #96]	; 0x60
	  telem_pack.pid_pitch.D = controller.pid_pitch.D;
 8001bfc:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <_Z9TelemPackv+0x164>)
 8001bfe:	e9d3 2368 	ldrd	r2, r3, [r3, #416]	; 0x1a0
 8001c02:	4610      	mov	r0, r2
 8001c04:	4619      	mov	r1, r3
 8001c06:	f7fe ff21 	bl	8000a4c <__aeabi_d2f>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	4a09      	ldr	r2, [pc, #36]	; (8001c34 <_Z9TelemPackv+0x154>)
 8001c0e:	6653      	str	r3, [r2, #100]	; 0x64
	  telem_pack.pid_pitch.pd_roll_sat_buf = controller.pid_pitch.pd_roll_sat_buf;
 8001c10:	4b0c      	ldr	r3, [pc, #48]	; (8001c44 <_Z9TelemPackv+0x164>)
 8001c12:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8001c16:	4a07      	ldr	r2, [pc, #28]	; (8001c34 <_Z9TelemPackv+0x154>)
 8001c18:	6693      	str	r3, [r2, #104]	; 0x68

	  memcpy(buf,&telem_pack,sizeof(telem_pack));
 8001c1a:	4a0b      	ldr	r2, [pc, #44]	; (8001c48 <_Z9TelemPackv+0x168>)
 8001c1c:	4b05      	ldr	r3, [pc, #20]	; (8001c34 <_Z9TelemPackv+0x154>)
 8001c1e:	4610      	mov	r0, r2
 8001c20:	4619      	mov	r1, r3
 8001c22:	236c      	movs	r3, #108	; 0x6c
 8001c24:	461a      	mov	r2, r3
 8001c26:	f006 fdf5 	bl	8008814 <memcpy>
}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	2000028c 	.word	0x2000028c
 8001c34:	200002b0 	.word	0x200002b0
 8001c38:	20000760 	.word	0x20000760
 8001c3c:	20000268 	.word	0x20000268
 8001c40:	20000388 	.word	0x20000388
 8001c44:	20000540 	.word	0x20000540
 8001c48:	2000031c 	.word	0x2000031c

08001c4c <_Z7GyroOkuh>:

int16_t GyroOku (uint8_t addr) {
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b088      	sub	sp, #32
 8001c50:	af04      	add	r7, sp, #16
 8001c52:	4603      	mov	r3, r0
 8001c54:	71fb      	strb	r3, [r7, #7]
	uint8_t gyro_data[2];
	HAL_I2C_Mem_Read(&hi2c1, (uint16_t)MPU6050 | I2C_READ, addr, 1, gyro_data, 2, 1);
 8001c56:	79fb      	ldrb	r3, [r7, #7]
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	9302      	str	r3, [sp, #8]
 8001c5e:	2302      	movs	r3, #2
 8001c60:	9301      	str	r3, [sp, #4]
 8001c62:	f107 030c 	add.w	r3, r7, #12
 8001c66:	9300      	str	r3, [sp, #0]
 8001c68:	2301      	movs	r3, #1
 8001c6a:	21d1      	movs	r1, #209	; 0xd1
 8001c6c:	4807      	ldr	r0, [pc, #28]	; (8001c8c <_Z7GyroOkuh+0x40>)
 8001c6e:	f001 fd15 	bl	800369c <HAL_I2C_Mem_Read>
	int16_t gyro = gyro_data[0]<<8 | gyro_data[1];
 8001c72:	7b3b      	ldrb	r3, [r7, #12]
 8001c74:	021b      	lsls	r3, r3, #8
 8001c76:	b21a      	sxth	r2, r3
 8001c78:	7b7b      	ldrb	r3, [r7, #13]
 8001c7a:	b21b      	sxth	r3, r3
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	81fb      	strh	r3, [r7, #14]
	return gyro;
 8001c80:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3710      	adds	r7, #16
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	2000008c 	.word	0x2000008c

08001c90 <_Z6PWMYazv>:




void PWMYaz() {
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
	  if(ch[EMERGENCY_CH-1] < 1500) {
 8001c94:	4b19      	ldr	r3, [pc, #100]	; (8001cfc <_Z6PWMYazv+0x6c>)
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	f240 52db 	movw	r2, #1499	; 0x5db
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	dc14      	bgt.n	8001cca <_Z6PWMYazv+0x3a>
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,controller_output[0]);
 8001ca0:	4b17      	ldr	r3, [pc, #92]	; (8001d00 <_Z6PWMYazv+0x70>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4b17      	ldr	r3, [pc, #92]	; (8001d04 <_Z6PWMYazv+0x74>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,controller_output[1]);
 8001caa:	4b15      	ldr	r3, [pc, #84]	; (8001d00 <_Z6PWMYazv+0x70>)
 8001cac:	685a      	ldr	r2, [r3, #4]
 8001cae:	4b15      	ldr	r3, [pc, #84]	; (8001d04 <_Z6PWMYazv+0x74>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	639a      	str	r2, [r3, #56]	; 0x38
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,controller_output[2]);
 8001cb4:	4b12      	ldr	r3, [pc, #72]	; (8001d00 <_Z6PWMYazv+0x70>)
 8001cb6:	689a      	ldr	r2, [r3, #8]
 8001cb8:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <_Z6PWMYazv+0x74>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	63da      	str	r2, [r3, #60]	; 0x3c
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,controller_output[3]);
 8001cbe:	4b10      	ldr	r3, [pc, #64]	; (8001d00 <_Z6PWMYazv+0x70>)
 8001cc0:	68da      	ldr	r2, [r3, #12]
 8001cc2:	4b10      	ldr	r3, [pc, #64]	; (8001d04 <_Z6PWMYazv+0x74>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	641a      	str	r2, [r3, #64]	; 0x40
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
	  }
}
 8001cc8:	e013      	b.n	8001cf2 <_Z6PWMYazv+0x62>
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 8001cca:	4b0e      	ldr	r3, [pc, #56]	; (8001d04 <_Z6PWMYazv+0x74>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cd2:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 8001cd4:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <_Z6PWMYazv+0x74>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cdc:	639a      	str	r2, [r3, #56]	; 0x38
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
 8001cde:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <_Z6PWMYazv+0x74>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ce6:	63da      	str	r2, [r3, #60]	; 0x3c
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
 8001ce8:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <_Z6PWMYazv+0x74>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cf0:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001cf2:	bf00      	nop
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bc80      	pop	{r7}
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	20000794 	.word	0x20000794
 8001d00:	20000760 	.word	0x20000760
 8001d04:	200000e0 	.word	0x200000e0

08001d08 <_Z7GyroErrh>:


float GyroErr(uint8_t addr) {
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	71fb      	strb	r3, [r7, #7]
	float GyroXh=0;
 8001d12:	f04f 0300 	mov.w	r3, #0
 8001d16:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2000; i++)
 8001d18:	2300      	movs	r3, #0
 8001d1a:	60bb      	str	r3, [r7, #8]
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001d22:	da0c      	bge.n	8001d3e <_Z7GyroErrh+0x36>
	{
		GyroXh = (GyroOku(GYRO_X_ADDR));
 8001d24:	2043      	movs	r0, #67	; 0x43
 8001d26:	f7ff ff91 	bl	8001c4c <_Z7GyroOkuh>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7fe ff97 	bl	8000c60 <__aeabi_i2f>
 8001d32:	4603      	mov	r3, r0
 8001d34:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2000; i++)
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	60bb      	str	r3, [r7, #8]
 8001d3c:	e7ee      	b.n	8001d1c <_Z7GyroErrh+0x14>

	} //Haberleşmeyi durdur.
	GyroXh=GyroXh/2000; //Son okunan değeri 2000'e böl.
 8001d3e:	4905      	ldr	r1, [pc, #20]	; (8001d54 <_Z7GyroErrh+0x4c>)
 8001d40:	68f8      	ldr	r0, [r7, #12]
 8001d42:	f7ff f895 	bl	8000e70 <__aeabi_fdiv>
 8001d46:	4603      	mov	r3, r0
 8001d48:	60fb      	str	r3, [r7, #12]
	return GyroXh;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3710      	adds	r7, #16
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	44fa0000 	.word	0x44fa0000

08001d58 <_Z11MotorBaslatv>:

void MotorBaslat(void) {
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 8001d5c:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <_Z11MotorBaslatv+0x38>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d64:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 8001d66:	4b0a      	ldr	r3, [pc, #40]	; (8001d90 <_Z11MotorBaslatv+0x38>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d6e:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
 8001d70:	4b07      	ldr	r3, [pc, #28]	; (8001d90 <_Z11MotorBaslatv+0x38>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d78:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
 8001d7a:	4b05      	ldr	r3, [pc, #20]	; (8001d90 <_Z11MotorBaslatv+0x38>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d82:	641a      	str	r2, [r3, #64]	; 0x40
	 // Delay(600);
	HAL_Delay(1000);
 8001d84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d88:	f000 ff62 	bl	8002c50 <HAL_Delay>
}
 8001d8c:	bf00      	nop
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	200000e0 	.word	0x200000e0
 8001d94:	00000000 	.word	0x00000000

08001d98 <HAL_TIM_PeriodElapsedCallback>:
		ITM_SendChar((*ptr++));
	}
	return len;
}

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim) {
 8001d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d9a:	b09f      	sub	sp, #124	; 0x7c
 8001d9c:	af12      	add	r7, sp, #72	; 0x48
 8001d9e:	6078      	str	r0, [r7, #4]

	if(htim == &htim2) {
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4ab1      	ldr	r2, [pc, #708]	; (8002068 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	f040 81b0 	bne.w	800210a <HAL_TIM_PeriodElapsedCallback+0x372>


		  gyroX = (GyroOku(GYRO_X_ADDR))/65.5 - GyroXh;
 8001daa:	2043      	movs	r0, #67	; 0x43
 8001dac:	f7ff ff4e 	bl	8001c4c <_Z7GyroOkuh>
 8001db0:	4603      	mov	r3, r0
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7fe fb1e 	bl	80003f4 <__aeabi_i2d>
 8001db8:	a3a7      	add	r3, pc, #668	; (adr r3, 8002058 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dbe:	f7fe fcad 	bl	800071c <__aeabi_ddiv>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	4614      	mov	r4, r2
 8001dc8:	461d      	mov	r5, r3
 8001dca:	4ba8      	ldr	r3, [pc, #672]	; (800206c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7fe fb22 	bl	8000418 <__aeabi_f2d>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	4620      	mov	r0, r4
 8001dda:	4629      	mov	r1, r5
 8001ddc:	f7fe f9bc 	bl	8000158 <__aeabi_dsub>
 8001de0:	4602      	mov	r2, r0
 8001de2:	460b      	mov	r3, r1
 8001de4:	4610      	mov	r0, r2
 8001de6:	4619      	mov	r1, r3
 8001de8:	f7fe fe30 	bl	8000a4c <__aeabi_d2f>
 8001dec:	4603      	mov	r3, r0
 8001dee:	4aa0      	ldr	r2, [pc, #640]	; (8002070 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001df0:	6013      	str	r3, [r2, #0]
		  gyroY = (GyroOku(GYRO_Y_ADDR))/65.5 - GyroYh;
 8001df2:	2045      	movs	r0, #69	; 0x45
 8001df4:	f7ff ff2a 	bl	8001c4c <_Z7GyroOkuh>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7fe fafa 	bl	80003f4 <__aeabi_i2d>
 8001e00:	a395      	add	r3, pc, #596	; (adr r3, 8002058 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e06:	f7fe fc89 	bl	800071c <__aeabi_ddiv>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	4614      	mov	r4, r2
 8001e10:	461d      	mov	r5, r3
 8001e12:	4b98      	ldr	r3, [pc, #608]	; (8002074 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7fe fafe 	bl	8000418 <__aeabi_f2d>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	460b      	mov	r3, r1
 8001e20:	4620      	mov	r0, r4
 8001e22:	4629      	mov	r1, r5
 8001e24:	f7fe f998 	bl	8000158 <__aeabi_dsub>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	4610      	mov	r0, r2
 8001e2e:	4619      	mov	r1, r3
 8001e30:	f7fe fe0c 	bl	8000a4c <__aeabi_d2f>
 8001e34:	4603      	mov	r3, r0
 8001e36:	4a90      	ldr	r2, [pc, #576]	; (8002078 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001e38:	6013      	str	r3, [r2, #0]
		  gyroZ = (GyroOku(GYRO_Z_ADDR))/65.5 - GyroZh;
 8001e3a:	2047      	movs	r0, #71	; 0x47
 8001e3c:	f7ff ff06 	bl	8001c4c <_Z7GyroOkuh>
 8001e40:	4603      	mov	r3, r0
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7fe fad6 	bl	80003f4 <__aeabi_i2d>
 8001e48:	a383      	add	r3, pc, #524	; (adr r3, 8002058 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e4e:	f7fe fc65 	bl	800071c <__aeabi_ddiv>
 8001e52:	4602      	mov	r2, r0
 8001e54:	460b      	mov	r3, r1
 8001e56:	4614      	mov	r4, r2
 8001e58:	461d      	mov	r5, r3
 8001e5a:	4b88      	ldr	r3, [pc, #544]	; (800207c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7fe fada 	bl	8000418 <__aeabi_f2d>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	4620      	mov	r0, r4
 8001e6a:	4629      	mov	r1, r5
 8001e6c:	f7fe f974 	bl	8000158 <__aeabi_dsub>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	4610      	mov	r0, r2
 8001e76:	4619      	mov	r1, r3
 8001e78:	f7fe fde8 	bl	8000a4c <__aeabi_d2f>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	4a80      	ldr	r2, [pc, #512]	; (8002080 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001e80:	6013      	str	r3, [r2, #0]
		  //gyroX_a_x = (GyroOku(GYRO_X_ADDR)-gyro_e_x)/65.5;
		  //gyroX_a += gyroX_a_x * st;

		  float gyro[3];
		  gyro[0] = gyroX;
 8001e82:	4b7b      	ldr	r3, [pc, #492]	; (8002070 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	617b      	str	r3, [r7, #20]
		  gyro[1] = -1*gyroY;
 8001e88:	4b7b      	ldr	r3, [pc, #492]	; (8002078 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001e90:	61bb      	str	r3, [r7, #24]
		  gyro[2] = gyroZ;
 8001e92:	4b7b      	ldr	r3, [pc, #492]	; (8002080 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	61fb      	str	r3, [r7, #28]

		  //İvmeölçer degerlerini oku
		  accX = GyroOku(ACC_X_ADDR);
 8001e98:	203b      	movs	r0, #59	; 0x3b
 8001e9a:	f7ff fed7 	bl	8001c4c <_Z7GyroOkuh>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7fe fedd 	bl	8000c60 <__aeabi_i2f>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	4a76      	ldr	r2, [pc, #472]	; (8002084 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001eaa:	6013      	str	r3, [r2, #0]
		  accY = GyroOku(ACC_Y_ADDR);
 8001eac:	203d      	movs	r0, #61	; 0x3d
 8001eae:	f7ff fecd 	bl	8001c4c <_Z7GyroOkuh>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7fe fed3 	bl	8000c60 <__aeabi_i2f>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	4a72      	ldr	r2, [pc, #456]	; (8002088 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001ebe:	6013      	str	r3, [r2, #0]
		  accZ = GyroOku(ACC_Z_ADDR);
 8001ec0:	203f      	movs	r0, #63	; 0x3f
 8001ec2:	f7ff fec3 	bl	8001c4c <_Z7GyroOkuh>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7fe fec9 	bl	8000c60 <__aeabi_i2f>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	4a6e      	ldr	r2, [pc, #440]	; (800208c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001ed2:	6013      	str	r3, [r2, #0]

		  float acc[3];
		  acc[0] = accX;
 8001ed4:	4b6b      	ldr	r3, [pc, #428]	; (8002084 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	60bb      	str	r3, [r7, #8]
		  acc[1] = accY;
 8001eda:	4b6b      	ldr	r3, [pc, #428]	; (8002088 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	60fb      	str	r3, [r7, #12]
		  acc[2] = accZ;
 8001ee0:	4b6a      	ldr	r3, [pc, #424]	; (800208c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	613b      	str	r3, [r7, #16]

		  float acctop=sqrt(accX*accX+accY*accY+accZ*accZ);		//Toplam ivme
 8001ee6:	4b67      	ldr	r3, [pc, #412]	; (8002084 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a66      	ldr	r2, [pc, #408]	; (8002084 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001eec:	6812      	ldr	r2, [r2, #0]
 8001eee:	4611      	mov	r1, r2
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7fe ff09 	bl	8000d08 <__aeabi_fmul>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	461c      	mov	r4, r3
 8001efa:	4b63      	ldr	r3, [pc, #396]	; (8002088 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a62      	ldr	r2, [pc, #392]	; (8002088 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001f00:	6812      	ldr	r2, [r2, #0]
 8001f02:	4611      	mov	r1, r2
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7fe feff 	bl	8000d08 <__aeabi_fmul>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4620      	mov	r0, r4
 8001f10:	f7fe fdf2 	bl	8000af8 <__addsf3>
 8001f14:	4603      	mov	r3, r0
 8001f16:	461c      	mov	r4, r3
 8001f18:	4b5c      	ldr	r3, [pc, #368]	; (800208c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a5b      	ldr	r2, [pc, #364]	; (800208c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001f1e:	6812      	ldr	r2, [r2, #0]
 8001f20:	4611      	mov	r1, r2
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7fe fef0 	bl	8000d08 <__aeabi_fmul>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4620      	mov	r0, r4
 8001f2e:	f7fe fde3 	bl	8000af8 <__addsf3>
 8001f32:	4603      	mov	r3, r0
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff f8f5 	bl	8001124 <_ZSt4sqrtf>
 8001f3a:	62f8      	str	r0, [r7, #44]	; 0x2c
		  pitch_acc=asin(accY/acctop)*57.324;					//İvme ölçerden hesaplanan pitch açısı
 8001f3c:	4b52      	ldr	r3, [pc, #328]	; (8002088 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7fe ff94 	bl	8000e70 <__aeabi_fdiv>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff f8de 	bl	800110c <_ZSt4asinf>
 8001f50:	4603      	mov	r3, r0
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7fe fa60 	bl	8000418 <__aeabi_f2d>
 8001f58:	a341      	add	r3, pc, #260	; (adr r3, 8002060 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f5e:	f7fe fab3 	bl	80004c8 <__aeabi_dmul>
 8001f62:	4602      	mov	r2, r0
 8001f64:	460b      	mov	r3, r1
 8001f66:	4610      	mov	r0, r2
 8001f68:	4619      	mov	r1, r3
 8001f6a:	f7fe fd6f 	bl	8000a4c <__aeabi_d2f>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	4a47      	ldr	r2, [pc, #284]	; (8002090 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001f72:	6013      	str	r3, [r2, #0]

		  EKF.Run(gyro,acc);
 8001f74:	f107 0208 	add.w	r2, r7, #8
 8001f78:	f107 0314 	add.w	r3, r7, #20
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4845      	ldr	r0, [pc, #276]	; (8002094 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001f80:	f005 f80e 	bl	8006fa0 <_ZN15Kalman_Filtresi3RunEPfS0_>
		  state.angles[0]  	  = EKF.state.angles[0];
 8001f84:	4b43      	ldr	r3, [pc, #268]	; (8002094 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001f86:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001f8a:	4a43      	ldr	r2, [pc, #268]	; (8002098 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001f8c:	6013      	str	r3, [r2, #0]
		  state.angles[1] 	  = EKF.state.angles[1];
 8001f8e:	4b41      	ldr	r3, [pc, #260]	; (8002094 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001f90:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001f94:	4a40      	ldr	r2, [pc, #256]	; (8002098 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001f96:	6053      	str	r3, [r2, #4]
		  state.angles[2]     = EKF.state.angles[2];
 8001f98:	4b3e      	ldr	r3, [pc, #248]	; (8002094 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001f9a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001f9e:	4a3e      	ldr	r2, [pc, #248]	; (8002098 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001fa0:	6093      	str	r3, [r2, #8]

		  state.rates[0] = gyroX;
 8001fa2:	4b33      	ldr	r3, [pc, #204]	; (8002070 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a3c      	ldr	r2, [pc, #240]	; (8002098 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001fa8:	60d3      	str	r3, [r2, #12]
		  state.rates[1] = -1*gyroY;
 8001faa:	4b33      	ldr	r3, [pc, #204]	; (8002078 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001fb2:	4a39      	ldr	r2, [pc, #228]	; (8002098 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001fb4:	6113      	str	r3, [r2, #16]
		  state.rates[2] = gyroZ;
 8001fb6:	4b32      	ldr	r3, [pc, #200]	; (8002080 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a37      	ldr	r2, [pc, #220]	; (8002098 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001fbc:	6153      	str	r3, [r2, #20]

		 // alpha_des = 0;
		 // printf("roll: %d\r\n",int(roll));


		  controller_output_ang = controller.Run(state, state_des, ch[2]);
 8001fbe:	4b37      	ldr	r3, [pc, #220]	; (800209c <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f107 0c20 	add.w	ip, r7, #32
 8001fc6:	4e34      	ldr	r6, [pc, #208]	; (8002098 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001fc8:	9310      	str	r3, [sp, #64]	; 0x40
 8001fca:	4b35      	ldr	r3, [pc, #212]	; (80020a0 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001fcc:	ac07      	add	r4, sp, #28
 8001fce:	461d      	mov	r5, r3
 8001fd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fd8:	682b      	ldr	r3, [r5, #0]
 8001fda:	6023      	str	r3, [r4, #0]
 8001fdc:	466d      	mov	r5, sp
 8001fde:	f106 0408 	add.w	r4, r6, #8
 8001fe2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fe4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fe6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001fea:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001fee:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001ff2:	492c      	ldr	r1, [pc, #176]	; (80020a4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8001ff4:	4660      	mov	r0, ip
 8001ff6:	f004 fa95 	bl	8006524 <_ZN10Controller3RunE5stateS0_i>
 8001ffa:	f107 0320 	add.w	r3, r7, #32
 8001ffe:	4619      	mov	r1, r3
 8002000:	4829      	ldr	r0, [pc, #164]	; (80020a8 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8002002:	f000 f98e 	bl	8002322 <_ZNSt6vectorIdSaIdEEaSEOS1_>
 8002006:	f107 0320 	add.w	r3, r7, #32
 800200a:	4618      	mov	r0, r3
 800200c:	f000 f96e 	bl	80022ec <_ZNSt6vectorIdSaIdEED1Ev>
		  controller_output[0] = controller.controller_output_pwm[0];
 8002010:	4b24      	ldr	r3, [pc, #144]	; (80020a4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8002012:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002016:	4a25      	ldr	r2, [pc, #148]	; (80020ac <HAL_TIM_PeriodElapsedCallback+0x314>)
 8002018:	6013      	str	r3, [r2, #0]
		  controller_output[1] = controller.controller_output_pwm[1];
 800201a:	4b22      	ldr	r3, [pc, #136]	; (80020a4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800201c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002020:	4a22      	ldr	r2, [pc, #136]	; (80020ac <HAL_TIM_PeriodElapsedCallback+0x314>)
 8002022:	6053      	str	r3, [r2, #4]
		  controller_output[2] = controller.controller_output_pwm[2];
 8002024:	4b1f      	ldr	r3, [pc, #124]	; (80020a4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8002026:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800202a:	4a20      	ldr	r2, [pc, #128]	; (80020ac <HAL_TIM_PeriodElapsedCallback+0x314>)
 800202c:	6093      	str	r3, [r2, #8]
		  controller_output[3] = controller.controller_output_pwm[3];
 800202e:	4b1d      	ldr	r3, [pc, #116]	; (80020a4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8002030:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002034:	4a1d      	ldr	r2, [pc, #116]	; (80020ac <HAL_TIM_PeriodElapsedCallback+0x314>)
 8002036:	60d3      	str	r3, [r2, #12]

		  state_des.rates[0] = controller.roll_rate_des;
 8002038:	4b1a      	ldr	r3, [pc, #104]	; (80020a4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800203a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800203e:	4a18      	ldr	r2, [pc, #96]	; (80020a0 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8002040:	60d3      	str	r3, [r2, #12]
		  state_des.rates[1] = controller.pitch_rate_des;
 8002042:	4b18      	ldr	r3, [pc, #96]	; (80020a4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8002044:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8002048:	4a15      	ldr	r2, [pc, #84]	; (80020a0 <HAL_TIM_PeriodElapsedCallback+0x308>)
 800204a:	6113      	str	r3, [r2, #16]

		  w_ang = controller.pd_roll;
 800204c:	4b15      	ldr	r3, [pc, #84]	; (80020a4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800204e:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	; 0xb0
 8002052:	e02d      	b.n	80020b0 <HAL_TIM_PeriodElapsedCallback+0x318>
 8002054:	f3af 8000 	nop.w
 8002058:	00000000 	.word	0x00000000
 800205c:	40506000 	.word	0x40506000
 8002060:	d4fdf3b6 	.word	0xd4fdf3b6
 8002064:	404ca978 	.word	0x404ca978
 8002068:	20000128 	.word	0x20000128
 800206c:	20000258 	.word	0x20000258
 8002070:	20000240 	.word	0x20000240
 8002074:	2000025c 	.word	0x2000025c
 8002078:	20000244 	.word	0x20000244
 800207c:	20000260 	.word	0x20000260
 8002080:	20000248 	.word	0x20000248
 8002084:	2000024c 	.word	0x2000024c
 8002088:	20000250 	.word	0x20000250
 800208c:	20000254 	.word	0x20000254
 8002090:	20000264 	.word	0x20000264
 8002094:	20000388 	.word	0x20000388
 8002098:	2000028c 	.word	0x2000028c
 800209c:	20000794 	.word	0x20000794
 80020a0:	20000268 	.word	0x20000268
 80020a4:	20000540 	.word	0x20000540
 80020a8:	20000770 	.word	0x20000770
 80020ac:	20000760 	.word	0x20000760
 80020b0:	4918      	ldr	r1, [pc, #96]	; (8002114 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 80020b2:	e9c1 2300 	strd	r2, r3, [r1]


		  w1 = controller_output[0];
 80020b6:	4b18      	ldr	r3, [pc, #96]	; (8002118 <HAL_TIM_PeriodElapsedCallback+0x380>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	4b17      	ldr	r3, [pc, #92]	; (800211c <HAL_TIM_PeriodElapsedCallback+0x384>)
 80020be:	801a      	strh	r2, [r3, #0]
		  w2 = controller_output[1];
 80020c0:	4b15      	ldr	r3, [pc, #84]	; (8002118 <HAL_TIM_PeriodElapsedCallback+0x380>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	b29a      	uxth	r2, r3
 80020c6:	4b16      	ldr	r3, [pc, #88]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x388>)
 80020c8:	801a      	strh	r2, [r3, #0]
		  w3 = controller_output[2];
 80020ca:	4b13      	ldr	r3, [pc, #76]	; (8002118 <HAL_TIM_PeriodElapsedCallback+0x380>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	4b14      	ldr	r3, [pc, #80]	; (8002124 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 80020d2:	801a      	strh	r2, [r3, #0]
		  w4 = controller_output[3];
 80020d4:	4b10      	ldr	r3, [pc, #64]	; (8002118 <HAL_TIM_PeriodElapsedCallback+0x380>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	b29a      	uxth	r2, r3
 80020da:	4b13      	ldr	r3, [pc, #76]	; (8002128 <HAL_TIM_PeriodElapsedCallback+0x390>)
 80020dc:	801a      	strh	r2, [r3, #0]

		  if(armed) {
 80020de:	4b13      	ldr	r3, [pc, #76]	; (800212c <HAL_TIM_PeriodElapsedCallback+0x394>)
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d00d      	beq.n	8002102 <HAL_TIM_PeriodElapsedCallback+0x36a>
			  if(!motor_start) {
 80020e6:	4b12      	ldr	r3, [pc, #72]	; (8002130 <HAL_TIM_PeriodElapsedCallback+0x398>)
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	f083 0301 	eor.w	r3, r3, #1
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d004      	beq.n	80020fe <HAL_TIM_PeriodElapsedCallback+0x366>
				  MotorBaslat();
 80020f4:	f7ff fe30 	bl	8001d58 <_Z11MotorBaslatv>
				  motor_start = true;
 80020f8:	4b0d      	ldr	r3, [pc, #52]	; (8002130 <HAL_TIM_PeriodElapsedCallback+0x398>)
 80020fa:	2201      	movs	r2, #1
 80020fc:	701a      	strb	r2, [r3, #0]
			  }

			  PWMYaz();
 80020fe:	f7ff fdc7 	bl	8001c90 <_Z6PWMYazv>
		  }

		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8002102:	2102      	movs	r1, #2
 8002104:	480b      	ldr	r0, [pc, #44]	; (8002134 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8002106:	f001 f871 	bl	80031ec <HAL_GPIO_TogglePin>

		}
	}
 800210a:	bf00      	nop
 800210c:	3734      	adds	r7, #52	; 0x34
 800210e:	46bd      	mov	sp, r7
 8002110:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002112:	bf00      	nop
 8002114:	200007d0 	.word	0x200007d0
 8002118:	20000760 	.word	0x20000760
 800211c:	2000077c 	.word	0x2000077c
 8002120:	2000077e 	.word	0x2000077e
 8002124:	20000780 	.word	0x20000780
 8002128:	20000782 	.word	0x20000782
 800212c:	200007c9 	.word	0x200007c9
 8002130:	200007ca 	.word	0x200007ca
 8002134:	40010c00 	.word	0x40010c00

08002138 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)

{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]

 if(htim == &htim3) {
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a43      	ldr	r2, [pc, #268]	; (8002250 <HAL_TIM_IC_CaptureCallback+0x118>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d17f      	bne.n	8002248 <HAL_TIM_IC_CaptureCallback+0x110>

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)  // if the interrupt source is channel1
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	7f1b      	ldrb	r3, [r3, #28]
 800214c:	2b02      	cmp	r3, #2
 800214e:	d17b      	bne.n	8002248 <HAL_TIM_IC_CaptureCallback+0x110>
	{
				IC_Val1 = IC_Val2;
 8002150:	4b40      	ldr	r3, [pc, #256]	; (8002254 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a40      	ldr	r2, [pc, #256]	; (8002258 <HAL_TIM_IC_CaptureCallback+0x120>)
 8002156:	6013      	str	r3, [r2, #0]
				IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);  // read second value
 8002158:	2104      	movs	r1, #4
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f003 fad4 	bl	8005708 <HAL_TIM_ReadCapturedValue>
 8002160:	4603      	mov	r3, r0
 8002162:	461a      	mov	r2, r3
 8002164:	4b3b      	ldr	r3, [pc, #236]	; (8002254 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8002166:	601a      	str	r2, [r3, #0]
				Diff = IC_Val2-IC_Val1;
 8002168:	4b3a      	ldr	r3, [pc, #232]	; (8002254 <HAL_TIM_IC_CaptureCallback+0x11c>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	4b3a      	ldr	r3, [pc, #232]	; (8002258 <HAL_TIM_IC_CaptureCallback+0x120>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	4a3a      	ldr	r2, [pc, #232]	; (800225c <HAL_TIM_IC_CaptureCallback+0x124>)
 8002174:	6013      	str	r3, [r2, #0]
				if(Diff < 0) {
 8002176:	4b39      	ldr	r3, [pc, #228]	; (800225c <HAL_TIM_IC_CaptureCallback+0x124>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	0fdb      	lsrs	r3, r3, #31
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d006      	beq.n	8002190 <HAL_TIM_IC_CaptureCallback+0x58>
					Diff+=65535;
 8002182:	4b36      	ldr	r3, [pc, #216]	; (800225c <HAL_TIM_IC_CaptureCallback+0x124>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800218a:	33ff      	adds	r3, #255	; 0xff
 800218c:	4a33      	ldr	r2, [pc, #204]	; (800225c <HAL_TIM_IC_CaptureCallback+0x124>)
 800218e:	6013      	str	r3, [r2, #0]

				}
				//printf("Diff: %d\n",Diff);
				ch[i] = Diff;
 8002190:	4b33      	ldr	r3, [pc, #204]	; (8002260 <HAL_TIM_IC_CaptureCallback+0x128>)
 8002192:	881b      	ldrh	r3, [r3, #0]
 8002194:	b21b      	sxth	r3, r3
 8002196:	4619      	mov	r1, r3
 8002198:	4b30      	ldr	r3, [pc, #192]	; (800225c <HAL_TIM_IC_CaptureCallback+0x124>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a31      	ldr	r2, [pc, #196]	; (8002264 <HAL_TIM_IC_CaptureCallback+0x12c>)
 800219e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				if(1) {
					if(ch[i] > CH0) {
 80021a2:	4b2f      	ldr	r3, [pc, #188]	; (8002260 <HAL_TIM_IC_CaptureCallback+0x128>)
 80021a4:	881b      	ldrh	r3, [r3, #0]
 80021a6:	b21b      	sxth	r3, r3
 80021a8:	461a      	mov	r2, r3
 80021aa:	4b2e      	ldr	r3, [pc, #184]	; (8002264 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80021ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b4:	4293      	cmp	r3, r2
 80021b6:	bfcc      	ite	gt
 80021b8:	2301      	movgt	r3, #1
 80021ba:	2300      	movle	r3, #0
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d006      	beq.n	80021d0 <HAL_TIM_IC_CaptureCallback+0x98>
						//ch[CH_NUM] = ch[i];
						i = -1;
 80021c2:	4b27      	ldr	r3, [pc, #156]	; (8002260 <HAL_TIM_IC_CaptureCallback+0x128>)
 80021c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021c8:	801a      	strh	r2, [r3, #0]
						sync = 1;
 80021ca:	4b27      	ldr	r3, [pc, #156]	; (8002268 <HAL_TIM_IC_CaptureCallback+0x130>)
 80021cc:	2201      	movs	r2, #1
 80021ce:	801a      	strh	r2, [r3, #0]
					}
				}



				state_des.angles[0] =  pid.pwm2ang(ch[0]);
 80021d0:	4b24      	ldr	r3, [pc, #144]	; (8002264 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	4619      	mov	r1, r3
 80021d8:	4824      	ldr	r0, [pc, #144]	; (800226c <HAL_TIM_IC_CaptureCallback+0x134>)
 80021da:	f005 fe7e 	bl	8007eda <_ZN3PID7pwm2angEt>
 80021de:	4603      	mov	r3, r0
 80021e0:	4a23      	ldr	r2, [pc, #140]	; (8002270 <HAL_TIM_IC_CaptureCallback+0x138>)
 80021e2:	6013      	str	r3, [r2, #0]
				state_des.angles[1] =  pid.pwm2ang(ch[1]);
 80021e4:	4b1f      	ldr	r3, [pc, #124]	; (8002264 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	4619      	mov	r1, r3
 80021ec:	481f      	ldr	r0, [pc, #124]	; (800226c <HAL_TIM_IC_CaptureCallback+0x134>)
 80021ee:	f005 fe74 	bl	8007eda <_ZN3PID7pwm2angEt>
 80021f2:	4603      	mov	r3, r0
 80021f4:	4a1e      	ldr	r2, [pc, #120]	; (8002270 <HAL_TIM_IC_CaptureCallback+0x138>)
 80021f6:	6053      	str	r3, [r2, #4]
				state_des.angles[2] =  0;
 80021f8:	4b1d      	ldr	r3, [pc, #116]	; (8002270 <HAL_TIM_IC_CaptureCallback+0x138>)
 80021fa:	f04f 0200 	mov.w	r2, #0
 80021fe:	609a      	str	r2, [r3, #8]
				state_des.rates[2] = pid.pwm2rate(ch[3]);
 8002200:	4b18      	ldr	r3, [pc, #96]	; (8002264 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	b29b      	uxth	r3, r3
 8002206:	4619      	mov	r1, r3
 8002208:	4818      	ldr	r0, [pc, #96]	; (800226c <HAL_TIM_IC_CaptureCallback+0x134>)
 800220a:	f005 fe8e 	bl	8007f2a <_ZN3PID8pwm2rateEt>
 800220e:	4603      	mov	r3, r0
 8002210:	4a17      	ldr	r2, [pc, #92]	; (8002270 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002212:	6153      	str	r3, [r2, #20]

				i++;
 8002214:	4b12      	ldr	r3, [pc, #72]	; (8002260 <HAL_TIM_IC_CaptureCallback+0x128>)
 8002216:	881b      	ldrh	r3, [r3, #0]
 8002218:	b21b      	sxth	r3, r3
 800221a:	b29b      	uxth	r3, r3
 800221c:	3301      	adds	r3, #1
 800221e:	b29b      	uxth	r3, r3
 8002220:	b21a      	sxth	r2, r3
 8002222:	4b0f      	ldr	r3, [pc, #60]	; (8002260 <HAL_TIM_IC_CaptureCallback+0x128>)
 8002224:	801a      	strh	r2, [r3, #0]
				i = i % (CH_NUM+1);
 8002226:	4b0e      	ldr	r3, [pc, #56]	; (8002260 <HAL_TIM_IC_CaptureCallback+0x128>)
 8002228:	881b      	ldrh	r3, [r3, #0]
 800222a:	b21b      	sxth	r3, r3
 800222c:	4619      	mov	r1, r3
 800222e:	4b11      	ldr	r3, [pc, #68]	; (8002274 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8002230:	fb83 2301 	smull	r2, r3, r3, r1
 8002234:	105a      	asrs	r2, r3, #1
 8002236:	17cb      	asrs	r3, r1, #31
 8002238:	1ad2      	subs	r2, r2, r3
 800223a:	4613      	mov	r3, r2
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	4413      	add	r3, r2
 8002240:	1aca      	subs	r2, r1, r3
 8002242:	b212      	sxth	r2, r2
 8002244:	4b06      	ldr	r3, [pc, #24]	; (8002260 <HAL_TIM_IC_CaptureCallback+0x128>)
 8002246:	801a      	strh	r2, [r3, #0]
			//	__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_2,TIM_INPUTCHANNELPOLARITY_RISING);


	 }
	}
}
 8002248:	bf00      	nop
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	20000170 	.word	0x20000170
 8002254:	20000784 	.word	0x20000784
 8002258:	20000788 	.word	0x20000788
 800225c:	2000078c 	.word	0x2000078c
 8002260:	20000790 	.word	0x20000790
 8002264:	20000794 	.word	0x20000794
 8002268:	200007b8 	.word	0x200007b8
 800226c:	200004d0 	.word	0x200004d0
 8002270:	20000268 	.word	0x20000268
 8002274:	38e38e39 	.word	0x38e38e39

08002278 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800227c:	b672      	cpsid	i
}
 800227e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002280:	e7fe      	b.n	8002280 <Error_Handler+0x8>

08002282 <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8002282:	b580      	push	{r7, lr}
 8002284:	b082      	sub	sp, #8
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 f85e 	bl	800234c <_ZNSaIdEC1Ev>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4618      	mov	r0, r3
 8002294:	f000 f866 	bl	8002364 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_dataC1Ev>
	{ }
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4618      	mov	r0, r3
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <_ZNSaIdED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b082      	sub	sp, #8
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 f86d 	bl	800238a <_ZN9__gnu_cxx13new_allocatorIdED1Ev>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4618      	mov	r0, r3
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <_ZNSt12_Vector_baseIdSaIdEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b082      	sub	sp, #8
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	689a      	ldr	r2, [r3, #8]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 80022d2:	461a      	mov	r2, r3
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f000 f862 	bl	800239e <_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdj>
      }
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4618      	mov	r0, r3
 80022de:	f7fe ff2d 	bl	800113c <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implD1Ev>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4618      	mov	r0, r3
 80022e6:	3708      	adds	r7, #8
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <_ZNSt6vectorIdSaIdEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 80022ec:	b5b0      	push	{r4, r5, r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681c      	ldr	r4, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4618      	mov	r0, r3
 8002300:	f000 f860 	bl	80023c4 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8002304:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002306:	461a      	mov	r2, r3
 8002308:	4629      	mov	r1, r5
 800230a:	4620      	mov	r0, r4
 800230c:	f000 f864 	bl	80023d8 <_ZSt8_DestroyIPddEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4618      	mov	r0, r3
 8002314:	f7ff ffd1 	bl	80022ba <_ZNSt12_Vector_baseIdSaIdEED1Ev>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4618      	mov	r0, r3
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bdb0      	pop	{r4, r5, r7, pc}

08002322 <_ZNSt6vectorIdSaIdEEaSEOS1_>:
       *  Afterwards @a __x is a valid, but unspecified %vector.
       *
       *  Whether the allocator is moved depends on the allocator traits.
       */
      vector&
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 8002322:	b590      	push	{r4, r7, lr}
 8002324:	b085      	sub	sp, #20
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
 800232a:	6039      	str	r1, [r7, #0]
      {
	constexpr bool __move_storage =
 800232c:	2301      	movs	r3, #1
 800232e:	73fb      	strb	r3, [r7, #15]
	  _Alloc_traits::_S_propagate_on_move_assign()
	  || _Alloc_traits::_S_always_equal();
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 8002330:	6838      	ldr	r0, [r7, #0]
 8002332:	f000 f85f 	bl	80023f4 <_ZSt4moveIRSt6vectorIdSaIdEEEONSt16remove_referenceIT_E4typeEOS5_>
 8002336:	4603      	mov	r3, r0
 8002338:	4622      	mov	r2, r4
 800233a:	4619      	mov	r1, r3
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f000 f863 	bl	8002408 <_ZNSt6vectorIdSaIdEE14_M_move_assignEOS1_St17integral_constantIbLb1EE>
	return *this;
 8002342:	687b      	ldr	r3, [r7, #4]
      }
 8002344:	4618      	mov	r0, r3
 8002346:	3714      	adds	r7, #20
 8002348:	46bd      	mov	sp, r7
 800234a:	bd90      	pop	{r4, r7, pc}

0800234c <_ZNSaIdEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f000 f895 	bl	8002484 <_ZN9__gnu_cxx13new_allocatorIdEC1Ev>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4618      	mov	r0, r3
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	601a      	str	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	605a      	str	r2, [r3, #4]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	609a      	str	r2, [r3, #8]
	{ }
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4618      	mov	r0, r3
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	bc80      	pop	{r7}
 8002388:	4770      	bx	lr

0800238a <_ZN9__gnu_cxx13new_allocatorIdED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800238a:	b480      	push	{r7}
 800238c:	b083      	sub	sp, #12
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4618      	mov	r0, r3
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	bc80      	pop	{r7}
 800239c:	4770      	bx	lr

0800239e <_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdj>:
      _M_deallocate(pointer __p, size_t __n)
 800239e:	b580      	push	{r7, lr}
 80023a0:	b084      	sub	sp, #16
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	60f8      	str	r0, [r7, #12]
 80023a6:	60b9      	str	r1, [r7, #8]
 80023a8:	607a      	str	r2, [r7, #4]
	if (__p)
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d005      	beq.n	80023bc <_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	68b9      	ldr	r1, [r7, #8]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f000 f86e 	bl	8002498 <_ZNSt16allocator_traitsISaIdEE10deallocateERS0_Pdj>
      }
 80023bc:	bf00      	nop
 80023be:	3710      	adds	r7, #16
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4618      	mov	r0, r3
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr

080023d8 <_ZSt8_DestroyIPddEvT_S1_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 80023e4:	68b9      	ldr	r1, [r7, #8]
 80023e6:	68f8      	ldr	r0, [r7, #12]
 80023e8:	f000 f865 	bl	80024b6 <_ZSt8_DestroyIPdEvT_S1_>
    }
 80023ec:	bf00      	nop
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <_ZSt4moveIRSt6vectorIdSaIdEEEONSt16remove_referenceIT_E4typeEOS5_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4618      	mov	r0, r3
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	bc80      	pop	{r7}
 8002406:	4770      	bx	lr

08002408 <_ZNSt6vectorIdSaIdEE14_M_move_assignEOS1_St17integral_constantIbLb1EE>:
    private:
      // Constant-time move assignment when source object's memory can be
      // moved, either because the source's allocator will move too
      // or because the allocators are equal.
      void
      _M_move_assign(vector&& __x, true_type) noexcept
 8002408:	b590      	push	{r4, r7, lr}
 800240a:	b089      	sub	sp, #36	; 0x24
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	713a      	strb	r2, [r7, #4]
      {
	vector __tmp(get_allocator());
 8002414:	68fa      	ldr	r2, [r7, #12]
 8002416:	f107 031c 	add.w	r3, r7, #28
 800241a:	4611      	mov	r1, r2
 800241c:	4618      	mov	r0, r3
 800241e:	f000 f857 	bl	80024d0 <_ZNKSt12_Vector_baseIdSaIdEE13get_allocatorEv>
 8002422:	f107 021c 	add.w	r2, r7, #28
 8002426:	f107 0310 	add.w	r3, r7, #16
 800242a:	4611      	mov	r1, r2
 800242c:	4618      	mov	r0, r3
 800242e:	f000 f860 	bl	80024f2 <_ZNSt6vectorIdSaIdEEC1ERKS0_>
 8002432:	f107 031c 	add.w	r3, r7, #28
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff ff33 	bl	80022a2 <_ZNSaIdED1Ev>
	this->_M_impl._M_swap_data(__x._M_impl);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	68ba      	ldr	r2, [r7, #8]
 8002440:	4611      	mov	r1, r2
 8002442:	4618      	mov	r0, r3
 8002444:	f000 f864 	bl	8002510 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_data12_M_swap_dataERS2_>
	__tmp._M_impl._M_swap_data(__x._M_impl);
 8002448:	68ba      	ldr	r2, [r7, #8]
 800244a:	f107 0310 	add.w	r3, r7, #16
 800244e:	4611      	mov	r1, r2
 8002450:	4618      	mov	r0, r3
 8002452:	f000 f85d 	bl	8002510 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_data12_M_swap_dataERS2_>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff ffb3 	bl	80023c4 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 800245e:	4604      	mov	r4, r0
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff ffae 	bl	80023c4 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8002468:	4603      	mov	r3, r0
 800246a:	4619      	mov	r1, r3
 800246c:	4620      	mov	r0, r4
 800246e:	f000 f86d 	bl	800254c <_ZSt15__alloc_on_moveISaIdEEvRT_S2_>
	vector __tmp(get_allocator());
 8002472:	f107 0310 	add.w	r3, r7, #16
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff ff38 	bl	80022ec <_ZNSt6vectorIdSaIdEED1Ev>
      }
 800247c:	bf00      	nop
 800247e:	3724      	adds	r7, #36	; 0x24
 8002480:	46bd      	mov	sp, r7
 8002482:	bd90      	pop	{r4, r7, pc}

08002484 <_ZN9__gnu_cxx13new_allocatorIdEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4618      	mov	r0, r3
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	bc80      	pop	{r7}
 8002496:	4770      	bx	lr

08002498 <_ZNSt16allocator_traitsISaIdEE10deallocateERS0_Pdj>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	68b9      	ldr	r1, [r7, #8]
 80024a8:	68f8      	ldr	r0, [r7, #12]
 80024aa:	f000 f85d 	bl	8002568 <_ZN9__gnu_cxx13new_allocatorIdE10deallocateEPdj>
 80024ae:	bf00      	nop
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <_ZSt8_DestroyIPdEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b082      	sub	sp, #8
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
 80024be:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80024c0:	6839      	ldr	r1, [r7, #0]
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 f85d 	bl	8002582 <_ZNSt12_Destroy_auxILb1EE9__destroyIPdEEvT_S3_>
    }
 80024c8:	bf00      	nop
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <_ZNKSt12_Vector_baseIdSaIdEE13get_allocatorEv>:
      get_allocator() const _GLIBCXX_NOEXCEPT
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
      { return allocator_type(_M_get_Tp_allocator()); }
 80024da:	6838      	ldr	r0, [r7, #0]
 80024dc:	f000 f85b 	bl	8002596 <_ZNKSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 80024e0:	4603      	mov	r3, r0
 80024e2:	4619      	mov	r1, r3
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f000 f860 	bl	80025aa <_ZNSaIdEC1ERKS_>
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <_ZNSt6vectorIdSaIdEEC1ERKS0_>:
      vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b082      	sub	sp, #8
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
 80024fa:	6039      	str	r1, [r7, #0]
      : _Base(__a) { }
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6839      	ldr	r1, [r7, #0]
 8002500:	4618      	mov	r0, r3
 8002502:	f000 f860 	bl	80025c6 <_ZNSt12_Vector_baseIdSaIdEEC1ERKS0_>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4618      	mov	r0, r3
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_data12_M_swap_dataERS2_>:
	_M_swap_data(_Vector_impl_data& __x) _GLIBCXX_NOEXCEPT
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
	  _Vector_impl_data __tmp;
 800251a:	f107 030c 	add.w	r3, r7, #12
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff ff20 	bl	8002364 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_dataC1Ev>
	  __tmp._M_copy_data(*this);
 8002524:	f107 030c 	add.w	r3, r7, #12
 8002528:	6879      	ldr	r1, [r7, #4]
 800252a:	4618      	mov	r0, r3
 800252c:	f000 f85a 	bl	80025e4 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_data12_M_copy_dataERKS2_>
	  _M_copy_data(__x);
 8002530:	6839      	ldr	r1, [r7, #0]
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 f856 	bl	80025e4 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_data12_M_copy_dataERKS2_>
	  __x._M_copy_data(__tmp);
 8002538:	f107 030c 	add.w	r3, r7, #12
 800253c:	4619      	mov	r1, r3
 800253e:	6838      	ldr	r0, [r7, #0]
 8002540:	f000 f850 	bl	80025e4 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_data12_M_copy_dataERKS2_>
	}
 8002544:	bf00      	nop
 8002546:	3718      	adds	r7, #24
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <_ZSt15__alloc_on_moveISaIdEEvRT_S2_>:
  template<typename _Alloc>
    inline void __do_alloc_on_move(_Alloc&, _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_move(_Alloc& __one, _Alloc& __two)
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_move_assignment __pocma;
      __do_alloc_on_move(__one, __two, __pocma());
 8002556:	461a      	mov	r2, r3
 8002558:	6839      	ldr	r1, [r7, #0]
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f858 	bl	8002610 <_ZSt18__do_alloc_on_moveISaIdEEvRT_S2_St17integral_constantIbLb1EE>
    }
 8002560:	bf00      	nop
 8002562:	3710      	adds	r7, #16
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <_ZN9__gnu_cxx13new_allocatorIdE10deallocateEPdj>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 8002574:	68b8      	ldr	r0, [r7, #8]
 8002576:	f005 fd53 	bl	8008020 <_ZdlPv>
      }
 800257a:	bf00      	nop
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <_ZNSt12_Destroy_auxILb1EE9__destroyIPdEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8002582:	b480      	push	{r7}
 8002584:	b083      	sub	sp, #12
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
 800258a:	6039      	str	r1, [r7, #0]
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	bc80      	pop	{r7}
 8002594:	4770      	bx	lr

08002596 <_ZNKSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8002596:	b480      	push	{r7}
 8002598:	b083      	sub	sp, #12
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4618      	mov	r0, r3
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bc80      	pop	{r7}
 80025a8:	4770      	bx	lr

080025aa <_ZNSaIdEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b082      	sub	sp, #8
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
 80025b2:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80025b4:	6839      	ldr	r1, [r7, #0]
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 f837 	bl	800262a <_ZN9__gnu_cxx13new_allocatorIdEC1ERKS1_>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4618      	mov	r0, r3
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <_ZNSt12_Vector_baseIdSaIdEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b082      	sub	sp, #8
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
 80025ce:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6839      	ldr	r1, [r7, #0]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f000 f833 	bl	8002640 <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implC1ERKS0_>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4618      	mov	r0, r3
 80025de:	3708      	adds	r7, #8
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_data12_M_copy_dataERKS2_>:
	_M_copy_data(_Vector_impl_data const& __x) _GLIBCXX_NOEXCEPT
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
	  _M_start = __x._M_start;
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	601a      	str	r2, [r3, #0]
	  _M_finish = __x._M_finish;
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	605a      	str	r2, [r3, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	689a      	ldr	r2, [r3, #8]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	609a      	str	r2, [r3, #8]
	}
 8002606:	bf00      	nop
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	bc80      	pop	{r7}
 800260e:	4770      	bx	lr

08002610 <_ZSt18__do_alloc_on_moveISaIdEEvRT_S2_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 800261c:	68b8      	ldr	r0, [r7, #8]
 800261e:	f000 f821 	bl	8002664 <_ZSt4moveIRSaIdEEONSt16remove_referenceIT_E4typeEOS3_>
 8002622:	bf00      	nop
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <_ZN9__gnu_cxx13new_allocatorIdEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800262a:	b480      	push	{r7}
 800262c:	b083      	sub	sp, #12
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
 8002632:	6039      	str	r1, [r7, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4618      	mov	r0, r3
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	bc80      	pop	{r7}
 800263e:	4770      	bx	lr

08002640 <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 800264a:	6839      	ldr	r1, [r7, #0]
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f7ff ffac 	bl	80025aa <_ZNSaIdEC1ERKS_>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff fe85 	bl	8002364 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_dataC1Ev>
	{ }
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4618      	mov	r0, r3
 800265e:	3708      	adds	r7, #8
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <_ZSt4moveIRSaIdEEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4618      	mov	r0, r3
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	bc80      	pop	{r7}
 8002676:	4770      	bx	lr

08002678 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d110      	bne.n	80026aa <_Z41__static_initialization_and_destruction_0ii+0x32>
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800268e:	4293      	cmp	r3, r2
 8002690:	d10b      	bne.n	80026aa <_Z41__static_initialization_and_destruction_0ii+0x32>
Kalman_Filtresi EKF;
 8002692:	4812      	ldr	r0, [pc, #72]	; (80026dc <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8002694:	f004 fc38 	bl	8006f08 <_ZN15Kalman_FiltresiC1Ev>
PID pid;
 8002698:	4811      	ldr	r0, [pc, #68]	; (80026e0 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800269a:	f005 f9af 	bl	80079fc <_ZN3PIDC1Ev>
Controller controller;
 800269e:	4811      	ldr	r0, [pc, #68]	; (80026e4 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80026a0:	f003 febe 	bl	8006420 <_ZN10ControllerC1Ev>
std::vector<double> controller_output_ang;
 80026a4:	4810      	ldr	r0, [pc, #64]	; (80026e8 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 80026a6:	f7fe fd62 	bl	800116e <_ZNSt6vectorIdSaIdEEC1Ev>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d110      	bne.n	80026d2 <_Z41__static_initialization_and_destruction_0ii+0x5a>
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d10b      	bne.n	80026d2 <_Z41__static_initialization_and_destruction_0ii+0x5a>
 80026ba:	480b      	ldr	r0, [pc, #44]	; (80026e8 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 80026bc:	f7ff fe16 	bl	80022ec <_ZNSt6vectorIdSaIdEED1Ev>
Controller controller;
 80026c0:	4808      	ldr	r0, [pc, #32]	; (80026e4 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80026c2:	f004 f9e2 	bl	8006a8a <_ZN10ControllerD1Ev>
PID pid;
 80026c6:	4806      	ldr	r0, [pc, #24]	; (80026e0 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80026c8:	f005 fca0 	bl	800800c <_ZN3PIDD1Ev>
Kalman_Filtresi EKF;
 80026cc:	4803      	ldr	r0, [pc, #12]	; (80026dc <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80026ce:	f005 f941 	bl	8007954 <_ZN15Kalman_FiltresiD1Ev>
}
 80026d2:	bf00      	nop
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	20000388 	.word	0x20000388
 80026e0:	200004d0 	.word	0x200004d0
 80026e4:	20000540 	.word	0x20000540
 80026e8:	20000770 	.word	0x20000770

080026ec <_GLOBAL__sub_I_hi2c1>:
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80026f4:	2001      	movs	r0, #1
 80026f6:	f7ff ffbf 	bl	8002678 <_Z41__static_initialization_and_destruction_0ii>
 80026fa:	bd80      	pop	{r7, pc}

080026fc <_GLOBAL__sub_D_hi2c1>:
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
 8002700:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002704:	2000      	movs	r0, #0
 8002706:	f7ff ffb7 	bl	8002678 <_Z41__static_initialization_and_destruction_0ii>
 800270a:	bd80      	pop	{r7, pc}

0800270c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002712:	4b15      	ldr	r3, [pc, #84]	; (8002768 <HAL_MspInit+0x5c>)
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	4a14      	ldr	r2, [pc, #80]	; (8002768 <HAL_MspInit+0x5c>)
 8002718:	f043 0301 	orr.w	r3, r3, #1
 800271c:	6193      	str	r3, [r2, #24]
 800271e:	4b12      	ldr	r3, [pc, #72]	; (8002768 <HAL_MspInit+0x5c>)
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	60bb      	str	r3, [r7, #8]
 8002728:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800272a:	4b0f      	ldr	r3, [pc, #60]	; (8002768 <HAL_MspInit+0x5c>)
 800272c:	69db      	ldr	r3, [r3, #28]
 800272e:	4a0e      	ldr	r2, [pc, #56]	; (8002768 <HAL_MspInit+0x5c>)
 8002730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002734:	61d3      	str	r3, [r2, #28]
 8002736:	4b0c      	ldr	r3, [pc, #48]	; (8002768 <HAL_MspInit+0x5c>)
 8002738:	69db      	ldr	r3, [r3, #28]
 800273a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800273e:	607b      	str	r3, [r7, #4]
 8002740:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002742:	4b0a      	ldr	r3, [pc, #40]	; (800276c <HAL_MspInit+0x60>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	60fb      	str	r3, [r7, #12]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002756:	60fb      	str	r3, [r7, #12]
 8002758:	4a04      	ldr	r2, [pc, #16]	; (800276c <HAL_MspInit+0x60>)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800275e:	bf00      	nop
 8002760:	3714      	adds	r7, #20
 8002762:	46bd      	mov	sp, r7
 8002764:	bc80      	pop	{r7}
 8002766:	4770      	bx	lr
 8002768:	40021000 	.word	0x40021000
 800276c:	40010000 	.word	0x40010000

08002770 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b088      	sub	sp, #32
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002778:	f107 0310 	add.w	r3, r7, #16
 800277c:	2200      	movs	r2, #0
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	605a      	str	r2, [r3, #4]
 8002782:	609a      	str	r2, [r3, #8]
 8002784:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a15      	ldr	r2, [pc, #84]	; (80027e0 <HAL_I2C_MspInit+0x70>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d123      	bne.n	80027d8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002790:	4b14      	ldr	r3, [pc, #80]	; (80027e4 <HAL_I2C_MspInit+0x74>)
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	4a13      	ldr	r2, [pc, #76]	; (80027e4 <HAL_I2C_MspInit+0x74>)
 8002796:	f043 0308 	orr.w	r3, r3, #8
 800279a:	6193      	str	r3, [r2, #24]
 800279c:	4b11      	ldr	r3, [pc, #68]	; (80027e4 <HAL_I2C_MspInit+0x74>)
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	f003 0308 	and.w	r3, r3, #8
 80027a4:	60fb      	str	r3, [r7, #12]
 80027a6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027a8:	23c0      	movs	r3, #192	; 0xc0
 80027aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027ac:	2312      	movs	r3, #18
 80027ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027b0:	2303      	movs	r3, #3
 80027b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027b4:	f107 0310 	add.w	r3, r7, #16
 80027b8:	4619      	mov	r1, r3
 80027ba:	480b      	ldr	r0, [pc, #44]	; (80027e8 <HAL_I2C_MspInit+0x78>)
 80027bc:	f000 fb7a 	bl	8002eb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027c0:	4b08      	ldr	r3, [pc, #32]	; (80027e4 <HAL_I2C_MspInit+0x74>)
 80027c2:	69db      	ldr	r3, [r3, #28]
 80027c4:	4a07      	ldr	r2, [pc, #28]	; (80027e4 <HAL_I2C_MspInit+0x74>)
 80027c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027ca:	61d3      	str	r3, [r2, #28]
 80027cc:	4b05      	ldr	r3, [pc, #20]	; (80027e4 <HAL_I2C_MspInit+0x74>)
 80027ce:	69db      	ldr	r3, [r3, #28]
 80027d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027d4:	60bb      	str	r3, [r7, #8]
 80027d6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80027d8:	bf00      	nop
 80027da:	3720      	adds	r7, #32
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40005400 	.word	0x40005400
 80027e4:	40021000 	.word	0x40021000
 80027e8:	40010c00 	.word	0x40010c00

080027ec <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a09      	ldr	r2, [pc, #36]	; (8002820 <HAL_TIM_PWM_MspInit+0x34>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d10b      	bne.n	8002816 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027fe:	4b09      	ldr	r3, [pc, #36]	; (8002824 <HAL_TIM_PWM_MspInit+0x38>)
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	4a08      	ldr	r2, [pc, #32]	; (8002824 <HAL_TIM_PWM_MspInit+0x38>)
 8002804:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002808:	6193      	str	r3, [r2, #24]
 800280a:	4b06      	ldr	r3, [pc, #24]	; (8002824 <HAL_TIM_PWM_MspInit+0x38>)
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002812:	60fb      	str	r3, [r7, #12]
 8002814:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002816:	bf00      	nop
 8002818:	3714      	adds	r7, #20
 800281a:	46bd      	mov	sp, r7
 800281c:	bc80      	pop	{r7}
 800281e:	4770      	bx	lr
 8002820:	40012c00 	.word	0x40012c00
 8002824:	40021000 	.word	0x40021000

08002828 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b08a      	sub	sp, #40	; 0x28
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002830:	f107 0318 	add.w	r3, r7, #24
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	605a      	str	r2, [r3, #4]
 800283a:	609a      	str	r2, [r3, #8]
 800283c:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002846:	d114      	bne.n	8002872 <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002848:	4b2d      	ldr	r3, [pc, #180]	; (8002900 <HAL_TIM_Base_MspInit+0xd8>)
 800284a:	69db      	ldr	r3, [r3, #28]
 800284c:	4a2c      	ldr	r2, [pc, #176]	; (8002900 <HAL_TIM_Base_MspInit+0xd8>)
 800284e:	f043 0301 	orr.w	r3, r3, #1
 8002852:	61d3      	str	r3, [r2, #28]
 8002854:	4b2a      	ldr	r3, [pc, #168]	; (8002900 <HAL_TIM_Base_MspInit+0xd8>)
 8002856:	69db      	ldr	r3, [r3, #28]
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	617b      	str	r3, [r7, #20]
 800285e:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002860:	2200      	movs	r2, #0
 8002862:	2101      	movs	r1, #1
 8002864:	201c      	movs	r0, #28
 8002866:	f000 faee 	bl	8002e46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800286a:	201c      	movs	r0, #28
 800286c:	f000 fb07 	bl	8002e7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002870:	e042      	b.n	80028f8 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM3)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a23      	ldr	r2, [pc, #140]	; (8002904 <HAL_TIM_Base_MspInit+0xdc>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d12c      	bne.n	80028d6 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800287c:	4b20      	ldr	r3, [pc, #128]	; (8002900 <HAL_TIM_Base_MspInit+0xd8>)
 800287e:	69db      	ldr	r3, [r3, #28]
 8002880:	4a1f      	ldr	r2, [pc, #124]	; (8002900 <HAL_TIM_Base_MspInit+0xd8>)
 8002882:	f043 0302 	orr.w	r3, r3, #2
 8002886:	61d3      	str	r3, [r2, #28]
 8002888:	4b1d      	ldr	r3, [pc, #116]	; (8002900 <HAL_TIM_Base_MspInit+0xd8>)
 800288a:	69db      	ldr	r3, [r3, #28]
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	613b      	str	r3, [r7, #16]
 8002892:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002894:	4b1a      	ldr	r3, [pc, #104]	; (8002900 <HAL_TIM_Base_MspInit+0xd8>)
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	4a19      	ldr	r2, [pc, #100]	; (8002900 <HAL_TIM_Base_MspInit+0xd8>)
 800289a:	f043 0304 	orr.w	r3, r3, #4
 800289e:	6193      	str	r3, [r2, #24]
 80028a0:	4b17      	ldr	r3, [pc, #92]	; (8002900 <HAL_TIM_Base_MspInit+0xd8>)
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	f003 0304 	and.w	r3, r3, #4
 80028a8:	60fb      	str	r3, [r7, #12]
 80028aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80028ac:	2380      	movs	r3, #128	; 0x80
 80028ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028b0:	2300      	movs	r3, #0
 80028b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b4:	2300      	movs	r3, #0
 80028b6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028b8:	f107 0318 	add.w	r3, r7, #24
 80028bc:	4619      	mov	r1, r3
 80028be:	4812      	ldr	r0, [pc, #72]	; (8002908 <HAL_TIM_Base_MspInit+0xe0>)
 80028c0:	f000 faf8 	bl	8002eb4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80028c4:	2200      	movs	r2, #0
 80028c6:	2100      	movs	r1, #0
 80028c8:	201d      	movs	r0, #29
 80028ca:	f000 fabc 	bl	8002e46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80028ce:	201d      	movs	r0, #29
 80028d0:	f000 fad5 	bl	8002e7e <HAL_NVIC_EnableIRQ>
}
 80028d4:	e010      	b.n	80028f8 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM4)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a0c      	ldr	r2, [pc, #48]	; (800290c <HAL_TIM_Base_MspInit+0xe4>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d10b      	bne.n	80028f8 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80028e0:	4b07      	ldr	r3, [pc, #28]	; (8002900 <HAL_TIM_Base_MspInit+0xd8>)
 80028e2:	69db      	ldr	r3, [r3, #28]
 80028e4:	4a06      	ldr	r2, [pc, #24]	; (8002900 <HAL_TIM_Base_MspInit+0xd8>)
 80028e6:	f043 0304 	orr.w	r3, r3, #4
 80028ea:	61d3      	str	r3, [r2, #28]
 80028ec:	4b04      	ldr	r3, [pc, #16]	; (8002900 <HAL_TIM_Base_MspInit+0xd8>)
 80028ee:	69db      	ldr	r3, [r3, #28]
 80028f0:	f003 0304 	and.w	r3, r3, #4
 80028f4:	60bb      	str	r3, [r7, #8]
 80028f6:	68bb      	ldr	r3, [r7, #8]
}
 80028f8:	bf00      	nop
 80028fa:	3728      	adds	r7, #40	; 0x28
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	40021000 	.word	0x40021000
 8002904:	40000400 	.word	0x40000400
 8002908:	40010800 	.word	0x40010800
 800290c:	40000800 	.word	0x40000800

08002910 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b088      	sub	sp, #32
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002918:	f107 0310 	add.w	r3, r7, #16
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	605a      	str	r2, [r3, #4]
 8002922:	609a      	str	r2, [r3, #8]
 8002924:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a10      	ldr	r2, [pc, #64]	; (800296c <HAL_TIM_MspPostInit+0x5c>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d118      	bne.n	8002962 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002930:	4b0f      	ldr	r3, [pc, #60]	; (8002970 <HAL_TIM_MspPostInit+0x60>)
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	4a0e      	ldr	r2, [pc, #56]	; (8002970 <HAL_TIM_MspPostInit+0x60>)
 8002936:	f043 0304 	orr.w	r3, r3, #4
 800293a:	6193      	str	r3, [r2, #24]
 800293c:	4b0c      	ldr	r3, [pc, #48]	; (8002970 <HAL_TIM_MspPostInit+0x60>)
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	f003 0304 	and.w	r3, r3, #4
 8002944:	60fb      	str	r3, [r7, #12]
 8002946:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8002948:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800294c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800294e:	2302      	movs	r3, #2
 8002950:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002952:	2302      	movs	r3, #2
 8002954:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002956:	f107 0310 	add.w	r3, r7, #16
 800295a:	4619      	mov	r1, r3
 800295c:	4805      	ldr	r0, [pc, #20]	; (8002974 <HAL_TIM_MspPostInit+0x64>)
 800295e:	f000 faa9 	bl	8002eb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002962:	bf00      	nop
 8002964:	3720      	adds	r7, #32
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	40012c00 	.word	0x40012c00
 8002970:	40021000 	.word	0x40021000
 8002974:	40010800 	.word	0x40010800

08002978 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b088      	sub	sp, #32
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002980:	f107 0310 	add.w	r3, r7, #16
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	605a      	str	r2, [r3, #4]
 800298a:	609a      	str	r2, [r3, #8]
 800298c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a1b      	ldr	r2, [pc, #108]	; (8002a00 <HAL_UART_MspInit+0x88>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d12f      	bne.n	80029f8 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002998:	4b1a      	ldr	r3, [pc, #104]	; (8002a04 <HAL_UART_MspInit+0x8c>)
 800299a:	69db      	ldr	r3, [r3, #28]
 800299c:	4a19      	ldr	r2, [pc, #100]	; (8002a04 <HAL_UART_MspInit+0x8c>)
 800299e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029a2:	61d3      	str	r3, [r2, #28]
 80029a4:	4b17      	ldr	r3, [pc, #92]	; (8002a04 <HAL_UART_MspInit+0x8c>)
 80029a6:	69db      	ldr	r3, [r3, #28]
 80029a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ac:	60fb      	str	r3, [r7, #12]
 80029ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b0:	4b14      	ldr	r3, [pc, #80]	; (8002a04 <HAL_UART_MspInit+0x8c>)
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	4a13      	ldr	r2, [pc, #76]	; (8002a04 <HAL_UART_MspInit+0x8c>)
 80029b6:	f043 0304 	orr.w	r3, r3, #4
 80029ba:	6193      	str	r3, [r2, #24]
 80029bc:	4b11      	ldr	r3, [pc, #68]	; (8002a04 <HAL_UART_MspInit+0x8c>)
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	f003 0304 	and.w	r3, r3, #4
 80029c4:	60bb      	str	r3, [r7, #8]
 80029c6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80029c8:	2304      	movs	r3, #4
 80029ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029cc:	2302      	movs	r3, #2
 80029ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029d0:	2303      	movs	r3, #3
 80029d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029d4:	f107 0310 	add.w	r3, r7, #16
 80029d8:	4619      	mov	r1, r3
 80029da:	480b      	ldr	r0, [pc, #44]	; (8002a08 <HAL_UART_MspInit+0x90>)
 80029dc:	f000 fa6a 	bl	8002eb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80029e0:	2308      	movs	r3, #8
 80029e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029e4:	2300      	movs	r3, #0
 80029e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e8:	2300      	movs	r3, #0
 80029ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ec:	f107 0310 	add.w	r3, r7, #16
 80029f0:	4619      	mov	r1, r3
 80029f2:	4805      	ldr	r0, [pc, #20]	; (8002a08 <HAL_UART_MspInit+0x90>)
 80029f4:	f000 fa5e 	bl	8002eb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80029f8:	bf00      	nop
 80029fa:	3720      	adds	r7, #32
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	40004400 	.word	0x40004400
 8002a04:	40021000 	.word	0x40021000
 8002a08:	40010800 	.word	0x40010800

08002a0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a10:	e7fe      	b.n	8002a10 <NMI_Handler+0x4>

08002a12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a12:	b480      	push	{r7}
 8002a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a16:	e7fe      	b.n	8002a16 <HardFault_Handler+0x4>

08002a18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a1c:	e7fe      	b.n	8002a1c <MemManage_Handler+0x4>

08002a1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a22:	e7fe      	b.n	8002a22 <BusFault_Handler+0x4>

08002a24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a28:	e7fe      	b.n	8002a28 <UsageFault_Handler+0x4>

08002a2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a2e:	bf00      	nop
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bc80      	pop	{r7}
 8002a34:	4770      	bx	lr

08002a36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a36:	b480      	push	{r7}
 8002a38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a3a:	bf00      	nop
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bc80      	pop	{r7}
 8002a40:	4770      	bx	lr

08002a42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a42:	b480      	push	{r7}
 8002a44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a46:	bf00      	nop
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bc80      	pop	{r7}
 8002a4c:	4770      	bx	lr

08002a4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a52:	f000 f8e1 	bl	8002c18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a56:	bf00      	nop
 8002a58:	bd80      	pop	{r7, pc}
	...

08002a5c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002a60:	4802      	ldr	r0, [pc, #8]	; (8002a6c <TIM2_IRQHandler+0x10>)
 8002a62:	f002 fb33 	bl	80050cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002a66:	bf00      	nop
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	20000128 	.word	0x20000128

08002a70 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002a74:	4802      	ldr	r0, [pc, #8]	; (8002a80 <TIM3_IRQHandler+0x10>)
 8002a76:	f002 fb29 	bl	80050cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002a7a:	bf00      	nop
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	20000170 	.word	0x20000170

08002a84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
	return 1;
 8002a88:	2301      	movs	r3, #1
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bc80      	pop	{r7}
 8002a90:	4770      	bx	lr

08002a92 <_kill>:

int _kill(int pid, int sig)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b082      	sub	sp, #8
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
 8002a9a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002a9c:	f005 fe80 	bl	80087a0 <__errno>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2216      	movs	r2, #22
 8002aa4:	601a      	str	r2, [r3, #0]
	return -1;
 8002aa6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <_exit>:

void _exit (int status)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b082      	sub	sp, #8
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002aba:	f04f 31ff 	mov.w	r1, #4294967295
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f7ff ffe7 	bl	8002a92 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002ac4:	e7fe      	b.n	8002ac4 <_exit+0x12>
	...

08002ac8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ad0:	4a14      	ldr	r2, [pc, #80]	; (8002b24 <_sbrk+0x5c>)
 8002ad2:	4b15      	ldr	r3, [pc, #84]	; (8002b28 <_sbrk+0x60>)
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002adc:	4b13      	ldr	r3, [pc, #76]	; (8002b2c <_sbrk+0x64>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d102      	bne.n	8002aea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ae4:	4b11      	ldr	r3, [pc, #68]	; (8002b2c <_sbrk+0x64>)
 8002ae6:	4a12      	ldr	r2, [pc, #72]	; (8002b30 <_sbrk+0x68>)
 8002ae8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002aea:	4b10      	ldr	r3, [pc, #64]	; (8002b2c <_sbrk+0x64>)
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4413      	add	r3, r2
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d207      	bcs.n	8002b08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002af8:	f005 fe52 	bl	80087a0 <__errno>
 8002afc:	4603      	mov	r3, r0
 8002afe:	220c      	movs	r2, #12
 8002b00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b02:	f04f 33ff 	mov.w	r3, #4294967295
 8002b06:	e009      	b.n	8002b1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b08:	4b08      	ldr	r3, [pc, #32]	; (8002b2c <_sbrk+0x64>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b0e:	4b07      	ldr	r3, [pc, #28]	; (8002b2c <_sbrk+0x64>)
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4413      	add	r3, r2
 8002b16:	4a05      	ldr	r2, [pc, #20]	; (8002b2c <_sbrk+0x64>)
 8002b18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3718      	adds	r7, #24
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	20005000 	.word	0x20005000
 8002b28:	00000400 	.word	0x00000400
 8002b2c:	200007d8 	.word	0x200007d8
 8002b30:	20000800 	.word	0x20000800

08002b34 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b38:	bf00      	nop
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bc80      	pop	{r7}
 8002b3e:	4770      	bx	lr

08002b40 <Reset_Handler>:
 8002b40:	2100      	movs	r1, #0
 8002b42:	e003      	b.n	8002b4c <LoopCopyDataInit>

08002b44 <CopyDataInit>:
 8002b44:	4b0b      	ldr	r3, [pc, #44]	; (8002b74 <LoopFillZerobss+0x14>)
 8002b46:	585b      	ldr	r3, [r3, r1]
 8002b48:	5043      	str	r3, [r0, r1]
 8002b4a:	3104      	adds	r1, #4

08002b4c <LoopCopyDataInit>:
 8002b4c:	480a      	ldr	r0, [pc, #40]	; (8002b78 <LoopFillZerobss+0x18>)
 8002b4e:	4b0b      	ldr	r3, [pc, #44]	; (8002b7c <LoopFillZerobss+0x1c>)
 8002b50:	1842      	adds	r2, r0, r1
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d3f6      	bcc.n	8002b44 <CopyDataInit>
 8002b56:	4a0a      	ldr	r2, [pc, #40]	; (8002b80 <LoopFillZerobss+0x20>)
 8002b58:	e002      	b.n	8002b60 <LoopFillZerobss>

08002b5a <FillZerobss>:
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	f842 3b04 	str.w	r3, [r2], #4

08002b60 <LoopFillZerobss>:
 8002b60:	4b08      	ldr	r3, [pc, #32]	; (8002b84 <LoopFillZerobss+0x24>)
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d3f9      	bcc.n	8002b5a <FillZerobss>
 8002b66:	f7ff ffe5 	bl	8002b34 <SystemInit>
 8002b6a:	f005 fe1f 	bl	80087ac <__libc_init_array>
 8002b6e:	f7fe fb0b 	bl	8001188 <main>
 8002b72:	4770      	bx	lr
 8002b74:	08008ba0 	.word	0x08008ba0
 8002b78:	20000000 	.word	0x20000000
 8002b7c:	20000070 	.word	0x20000070
 8002b80:	20000070 	.word	0x20000070
 8002b84:	200007fc 	.word	0x200007fc

08002b88 <ADC1_2_IRQHandler>:
 8002b88:	e7fe      	b.n	8002b88 <ADC1_2_IRQHandler>
	...

08002b8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b90:	4b08      	ldr	r3, [pc, #32]	; (8002bb4 <HAL_Init+0x28>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a07      	ldr	r2, [pc, #28]	; (8002bb4 <HAL_Init+0x28>)
 8002b96:	f043 0310 	orr.w	r3, r3, #16
 8002b9a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b9c:	2003      	movs	r0, #3
 8002b9e:	f000 f947 	bl	8002e30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ba2:	2000      	movs	r0, #0
 8002ba4:	f000 f808 	bl	8002bb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ba8:	f7ff fdb0 	bl	800270c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	40022000 	.word	0x40022000

08002bb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bc0:	4b12      	ldr	r3, [pc, #72]	; (8002c0c <HAL_InitTick+0x54>)
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	4b12      	ldr	r3, [pc, #72]	; (8002c10 <HAL_InitTick+0x58>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	4619      	mov	r1, r3
 8002bca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bce:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f000 f95f 	bl	8002e9a <HAL_SYSTICK_Config>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e00e      	b.n	8002c04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2b0f      	cmp	r3, #15
 8002bea:	d80a      	bhi.n	8002c02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bec:	2200      	movs	r2, #0
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bf4:	f000 f927 	bl	8002e46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bf8:	4a06      	ldr	r2, [pc, #24]	; (8002c14 <HAL_InitTick+0x5c>)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	e000      	b.n	8002c04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3708      	adds	r7, #8
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	20000000 	.word	0x20000000
 8002c10:	20000008 	.word	0x20000008
 8002c14:	20000004 	.word	0x20000004

08002c18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c1c:	4b05      	ldr	r3, [pc, #20]	; (8002c34 <HAL_IncTick+0x1c>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	461a      	mov	r2, r3
 8002c22:	4b05      	ldr	r3, [pc, #20]	; (8002c38 <HAL_IncTick+0x20>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4413      	add	r3, r2
 8002c28:	4a03      	ldr	r2, [pc, #12]	; (8002c38 <HAL_IncTick+0x20>)
 8002c2a:	6013      	str	r3, [r2, #0]
}
 8002c2c:	bf00      	nop
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bc80      	pop	{r7}
 8002c32:	4770      	bx	lr
 8002c34:	20000008 	.word	0x20000008
 8002c38:	200007e8 	.word	0x200007e8

08002c3c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c40:	4b02      	ldr	r3, [pc, #8]	; (8002c4c <HAL_GetTick+0x10>)
 8002c42:	681b      	ldr	r3, [r3, #0]
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bc80      	pop	{r7}
 8002c4a:	4770      	bx	lr
 8002c4c:	200007e8 	.word	0x200007e8

08002c50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c58:	f7ff fff0 	bl	8002c3c <HAL_GetTick>
 8002c5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c68:	d005      	beq.n	8002c76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c6a:	4b0a      	ldr	r3, [pc, #40]	; (8002c94 <HAL_Delay+0x44>)
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	461a      	mov	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	4413      	add	r3, r2
 8002c74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c76:	bf00      	nop
 8002c78:	f7ff ffe0 	bl	8002c3c <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d8f7      	bhi.n	8002c78 <HAL_Delay+0x28>
  {
  }
}
 8002c88:	bf00      	nop
 8002c8a:	bf00      	nop
 8002c8c:	3710      	adds	r7, #16
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	20000008 	.word	0x20000008

08002c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f003 0307 	and.w	r3, r3, #7
 8002ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ca8:	4b0c      	ldr	r3, [pc, #48]	; (8002cdc <__NVIC_SetPriorityGrouping+0x44>)
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cae:	68ba      	ldr	r2, [r7, #8]
 8002cb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cca:	4a04      	ldr	r2, [pc, #16]	; (8002cdc <__NVIC_SetPriorityGrouping+0x44>)
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	60d3      	str	r3, [r2, #12]
}
 8002cd0:	bf00      	nop
 8002cd2:	3714      	adds	r7, #20
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bc80      	pop	{r7}
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	e000ed00 	.word	0xe000ed00

08002ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ce4:	4b04      	ldr	r3, [pc, #16]	; (8002cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	0a1b      	lsrs	r3, r3, #8
 8002cea:	f003 0307 	and.w	r3, r3, #7
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bc80      	pop	{r7}
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	e000ed00 	.word	0xe000ed00

08002cfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	4603      	mov	r3, r0
 8002d04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	db0b      	blt.n	8002d26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d0e:	79fb      	ldrb	r3, [r7, #7]
 8002d10:	f003 021f 	and.w	r2, r3, #31
 8002d14:	4906      	ldr	r1, [pc, #24]	; (8002d30 <__NVIC_EnableIRQ+0x34>)
 8002d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1a:	095b      	lsrs	r3, r3, #5
 8002d1c:	2001      	movs	r0, #1
 8002d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d26:	bf00      	nop
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bc80      	pop	{r7}
 8002d2e:	4770      	bx	lr
 8002d30:	e000e100 	.word	0xe000e100

08002d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	6039      	str	r1, [r7, #0]
 8002d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	db0a      	blt.n	8002d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	b2da      	uxtb	r2, r3
 8002d4c:	490c      	ldr	r1, [pc, #48]	; (8002d80 <__NVIC_SetPriority+0x4c>)
 8002d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d52:	0112      	lsls	r2, r2, #4
 8002d54:	b2d2      	uxtb	r2, r2
 8002d56:	440b      	add	r3, r1
 8002d58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d5c:	e00a      	b.n	8002d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	b2da      	uxtb	r2, r3
 8002d62:	4908      	ldr	r1, [pc, #32]	; (8002d84 <__NVIC_SetPriority+0x50>)
 8002d64:	79fb      	ldrb	r3, [r7, #7]
 8002d66:	f003 030f 	and.w	r3, r3, #15
 8002d6a:	3b04      	subs	r3, #4
 8002d6c:	0112      	lsls	r2, r2, #4
 8002d6e:	b2d2      	uxtb	r2, r2
 8002d70:	440b      	add	r3, r1
 8002d72:	761a      	strb	r2, [r3, #24]
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bc80      	pop	{r7}
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	e000e100 	.word	0xe000e100
 8002d84:	e000ed00 	.word	0xe000ed00

08002d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b089      	sub	sp, #36	; 0x24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f003 0307 	and.w	r3, r3, #7
 8002d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	f1c3 0307 	rsb	r3, r3, #7
 8002da2:	2b04      	cmp	r3, #4
 8002da4:	bf28      	it	cs
 8002da6:	2304      	movcs	r3, #4
 8002da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	3304      	adds	r3, #4
 8002dae:	2b06      	cmp	r3, #6
 8002db0:	d902      	bls.n	8002db8 <NVIC_EncodePriority+0x30>
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	3b03      	subs	r3, #3
 8002db6:	e000      	b.n	8002dba <NVIC_EncodePriority+0x32>
 8002db8:	2300      	movs	r3, #0
 8002dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	43da      	mvns	r2, r3
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	401a      	ands	r2, r3
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dda:	43d9      	mvns	r1, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002de0:	4313      	orrs	r3, r2
         );
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3724      	adds	r7, #36	; 0x24
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bc80      	pop	{r7}
 8002dea:	4770      	bx	lr

08002dec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	3b01      	subs	r3, #1
 8002df8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dfc:	d301      	bcc.n	8002e02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e00f      	b.n	8002e22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e02:	4a0a      	ldr	r2, [pc, #40]	; (8002e2c <SysTick_Config+0x40>)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	3b01      	subs	r3, #1
 8002e08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e0a:	210f      	movs	r1, #15
 8002e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e10:	f7ff ff90 	bl	8002d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e14:	4b05      	ldr	r3, [pc, #20]	; (8002e2c <SysTick_Config+0x40>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e1a:	4b04      	ldr	r3, [pc, #16]	; (8002e2c <SysTick_Config+0x40>)
 8002e1c:	2207      	movs	r2, #7
 8002e1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	e000e010 	.word	0xe000e010

08002e30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f7ff ff2d 	bl	8002c98 <__NVIC_SetPriorityGrouping>
}
 8002e3e:	bf00      	nop
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b086      	sub	sp, #24
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	60b9      	str	r1, [r7, #8]
 8002e50:	607a      	str	r2, [r7, #4]
 8002e52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e54:	2300      	movs	r3, #0
 8002e56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e58:	f7ff ff42 	bl	8002ce0 <__NVIC_GetPriorityGrouping>
 8002e5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	68b9      	ldr	r1, [r7, #8]
 8002e62:	6978      	ldr	r0, [r7, #20]
 8002e64:	f7ff ff90 	bl	8002d88 <NVIC_EncodePriority>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e6e:	4611      	mov	r1, r2
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7ff ff5f 	bl	8002d34 <__NVIC_SetPriority>
}
 8002e76:	bf00      	nop
 8002e78:	3718      	adds	r7, #24
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b082      	sub	sp, #8
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	4603      	mov	r3, r0
 8002e86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff ff35 	bl	8002cfc <__NVIC_EnableIRQ>
}
 8002e92:	bf00      	nop
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b082      	sub	sp, #8
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f7ff ffa2 	bl	8002dec <SysTick_Config>
 8002ea8:	4603      	mov	r3, r0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
	...

08002eb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b08b      	sub	sp, #44	; 0x2c
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ec6:	e169      	b.n	800319c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ec8:	2201      	movs	r2, #1
 8002eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	69fa      	ldr	r2, [r7, #28]
 8002ed8:	4013      	ands	r3, r2
 8002eda:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	f040 8158 	bne.w	8003196 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	4a9a      	ldr	r2, [pc, #616]	; (8003154 <HAL_GPIO_Init+0x2a0>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d05e      	beq.n	8002fae <HAL_GPIO_Init+0xfa>
 8002ef0:	4a98      	ldr	r2, [pc, #608]	; (8003154 <HAL_GPIO_Init+0x2a0>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d875      	bhi.n	8002fe2 <HAL_GPIO_Init+0x12e>
 8002ef6:	4a98      	ldr	r2, [pc, #608]	; (8003158 <HAL_GPIO_Init+0x2a4>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d058      	beq.n	8002fae <HAL_GPIO_Init+0xfa>
 8002efc:	4a96      	ldr	r2, [pc, #600]	; (8003158 <HAL_GPIO_Init+0x2a4>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d86f      	bhi.n	8002fe2 <HAL_GPIO_Init+0x12e>
 8002f02:	4a96      	ldr	r2, [pc, #600]	; (800315c <HAL_GPIO_Init+0x2a8>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d052      	beq.n	8002fae <HAL_GPIO_Init+0xfa>
 8002f08:	4a94      	ldr	r2, [pc, #592]	; (800315c <HAL_GPIO_Init+0x2a8>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d869      	bhi.n	8002fe2 <HAL_GPIO_Init+0x12e>
 8002f0e:	4a94      	ldr	r2, [pc, #592]	; (8003160 <HAL_GPIO_Init+0x2ac>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d04c      	beq.n	8002fae <HAL_GPIO_Init+0xfa>
 8002f14:	4a92      	ldr	r2, [pc, #584]	; (8003160 <HAL_GPIO_Init+0x2ac>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d863      	bhi.n	8002fe2 <HAL_GPIO_Init+0x12e>
 8002f1a:	4a92      	ldr	r2, [pc, #584]	; (8003164 <HAL_GPIO_Init+0x2b0>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d046      	beq.n	8002fae <HAL_GPIO_Init+0xfa>
 8002f20:	4a90      	ldr	r2, [pc, #576]	; (8003164 <HAL_GPIO_Init+0x2b0>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d85d      	bhi.n	8002fe2 <HAL_GPIO_Init+0x12e>
 8002f26:	2b12      	cmp	r3, #18
 8002f28:	d82a      	bhi.n	8002f80 <HAL_GPIO_Init+0xcc>
 8002f2a:	2b12      	cmp	r3, #18
 8002f2c:	d859      	bhi.n	8002fe2 <HAL_GPIO_Init+0x12e>
 8002f2e:	a201      	add	r2, pc, #4	; (adr r2, 8002f34 <HAL_GPIO_Init+0x80>)
 8002f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f34:	08002faf 	.word	0x08002faf
 8002f38:	08002f89 	.word	0x08002f89
 8002f3c:	08002f9b 	.word	0x08002f9b
 8002f40:	08002fdd 	.word	0x08002fdd
 8002f44:	08002fe3 	.word	0x08002fe3
 8002f48:	08002fe3 	.word	0x08002fe3
 8002f4c:	08002fe3 	.word	0x08002fe3
 8002f50:	08002fe3 	.word	0x08002fe3
 8002f54:	08002fe3 	.word	0x08002fe3
 8002f58:	08002fe3 	.word	0x08002fe3
 8002f5c:	08002fe3 	.word	0x08002fe3
 8002f60:	08002fe3 	.word	0x08002fe3
 8002f64:	08002fe3 	.word	0x08002fe3
 8002f68:	08002fe3 	.word	0x08002fe3
 8002f6c:	08002fe3 	.word	0x08002fe3
 8002f70:	08002fe3 	.word	0x08002fe3
 8002f74:	08002fe3 	.word	0x08002fe3
 8002f78:	08002f91 	.word	0x08002f91
 8002f7c:	08002fa5 	.word	0x08002fa5
 8002f80:	4a79      	ldr	r2, [pc, #484]	; (8003168 <HAL_GPIO_Init+0x2b4>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d013      	beq.n	8002fae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002f86:	e02c      	b.n	8002fe2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	623b      	str	r3, [r7, #32]
          break;
 8002f8e:	e029      	b.n	8002fe4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	3304      	adds	r3, #4
 8002f96:	623b      	str	r3, [r7, #32]
          break;
 8002f98:	e024      	b.n	8002fe4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	3308      	adds	r3, #8
 8002fa0:	623b      	str	r3, [r7, #32]
          break;
 8002fa2:	e01f      	b.n	8002fe4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	330c      	adds	r3, #12
 8002faa:	623b      	str	r3, [r7, #32]
          break;
 8002fac:	e01a      	b.n	8002fe4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d102      	bne.n	8002fbc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002fb6:	2304      	movs	r3, #4
 8002fb8:	623b      	str	r3, [r7, #32]
          break;
 8002fba:	e013      	b.n	8002fe4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d105      	bne.n	8002fd0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fc4:	2308      	movs	r3, #8
 8002fc6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	69fa      	ldr	r2, [r7, #28]
 8002fcc:	611a      	str	r2, [r3, #16]
          break;
 8002fce:	e009      	b.n	8002fe4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fd0:	2308      	movs	r3, #8
 8002fd2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	69fa      	ldr	r2, [r7, #28]
 8002fd8:	615a      	str	r2, [r3, #20]
          break;
 8002fda:	e003      	b.n	8002fe4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	623b      	str	r3, [r7, #32]
          break;
 8002fe0:	e000      	b.n	8002fe4 <HAL_GPIO_Init+0x130>
          break;
 8002fe2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	2bff      	cmp	r3, #255	; 0xff
 8002fe8:	d801      	bhi.n	8002fee <HAL_GPIO_Init+0x13a>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	e001      	b.n	8002ff2 <HAL_GPIO_Init+0x13e>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	3304      	adds	r3, #4
 8002ff2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	2bff      	cmp	r3, #255	; 0xff
 8002ff8:	d802      	bhi.n	8003000 <HAL_GPIO_Init+0x14c>
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	e002      	b.n	8003006 <HAL_GPIO_Init+0x152>
 8003000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003002:	3b08      	subs	r3, #8
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	210f      	movs	r1, #15
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	fa01 f303 	lsl.w	r3, r1, r3
 8003014:	43db      	mvns	r3, r3
 8003016:	401a      	ands	r2, r3
 8003018:	6a39      	ldr	r1, [r7, #32]
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	fa01 f303 	lsl.w	r3, r1, r3
 8003020:	431a      	orrs	r2, r3
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800302e:	2b00      	cmp	r3, #0
 8003030:	f000 80b1 	beq.w	8003196 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003034:	4b4d      	ldr	r3, [pc, #308]	; (800316c <HAL_GPIO_Init+0x2b8>)
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	4a4c      	ldr	r2, [pc, #304]	; (800316c <HAL_GPIO_Init+0x2b8>)
 800303a:	f043 0301 	orr.w	r3, r3, #1
 800303e:	6193      	str	r3, [r2, #24]
 8003040:	4b4a      	ldr	r3, [pc, #296]	; (800316c <HAL_GPIO_Init+0x2b8>)
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	f003 0301 	and.w	r3, r3, #1
 8003048:	60bb      	str	r3, [r7, #8]
 800304a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800304c:	4a48      	ldr	r2, [pc, #288]	; (8003170 <HAL_GPIO_Init+0x2bc>)
 800304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003050:	089b      	lsrs	r3, r3, #2
 8003052:	3302      	adds	r3, #2
 8003054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003058:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800305a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305c:	f003 0303 	and.w	r3, r3, #3
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	220f      	movs	r2, #15
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	43db      	mvns	r3, r3
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	4013      	ands	r3, r2
 800306e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a40      	ldr	r2, [pc, #256]	; (8003174 <HAL_GPIO_Init+0x2c0>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d013      	beq.n	80030a0 <HAL_GPIO_Init+0x1ec>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a3f      	ldr	r2, [pc, #252]	; (8003178 <HAL_GPIO_Init+0x2c4>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d00d      	beq.n	800309c <HAL_GPIO_Init+0x1e8>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a3e      	ldr	r2, [pc, #248]	; (800317c <HAL_GPIO_Init+0x2c8>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d007      	beq.n	8003098 <HAL_GPIO_Init+0x1e4>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a3d      	ldr	r2, [pc, #244]	; (8003180 <HAL_GPIO_Init+0x2cc>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d101      	bne.n	8003094 <HAL_GPIO_Init+0x1e0>
 8003090:	2303      	movs	r3, #3
 8003092:	e006      	b.n	80030a2 <HAL_GPIO_Init+0x1ee>
 8003094:	2304      	movs	r3, #4
 8003096:	e004      	b.n	80030a2 <HAL_GPIO_Init+0x1ee>
 8003098:	2302      	movs	r3, #2
 800309a:	e002      	b.n	80030a2 <HAL_GPIO_Init+0x1ee>
 800309c:	2301      	movs	r3, #1
 800309e:	e000      	b.n	80030a2 <HAL_GPIO_Init+0x1ee>
 80030a0:	2300      	movs	r3, #0
 80030a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030a4:	f002 0203 	and.w	r2, r2, #3
 80030a8:	0092      	lsls	r2, r2, #2
 80030aa:	4093      	lsls	r3, r2
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80030b2:	492f      	ldr	r1, [pc, #188]	; (8003170 <HAL_GPIO_Init+0x2bc>)
 80030b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b6:	089b      	lsrs	r3, r3, #2
 80030b8:	3302      	adds	r3, #2
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d006      	beq.n	80030da <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80030cc:	4b2d      	ldr	r3, [pc, #180]	; (8003184 <HAL_GPIO_Init+0x2d0>)
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	492c      	ldr	r1, [pc, #176]	; (8003184 <HAL_GPIO_Init+0x2d0>)
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	600b      	str	r3, [r1, #0]
 80030d8:	e006      	b.n	80030e8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80030da:	4b2a      	ldr	r3, [pc, #168]	; (8003184 <HAL_GPIO_Init+0x2d0>)
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	43db      	mvns	r3, r3
 80030e2:	4928      	ldr	r1, [pc, #160]	; (8003184 <HAL_GPIO_Init+0x2d0>)
 80030e4:	4013      	ands	r3, r2
 80030e6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d006      	beq.n	8003102 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80030f4:	4b23      	ldr	r3, [pc, #140]	; (8003184 <HAL_GPIO_Init+0x2d0>)
 80030f6:	685a      	ldr	r2, [r3, #4]
 80030f8:	4922      	ldr	r1, [pc, #136]	; (8003184 <HAL_GPIO_Init+0x2d0>)
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	604b      	str	r3, [r1, #4]
 8003100:	e006      	b.n	8003110 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003102:	4b20      	ldr	r3, [pc, #128]	; (8003184 <HAL_GPIO_Init+0x2d0>)
 8003104:	685a      	ldr	r2, [r3, #4]
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	43db      	mvns	r3, r3
 800310a:	491e      	ldr	r1, [pc, #120]	; (8003184 <HAL_GPIO_Init+0x2d0>)
 800310c:	4013      	ands	r3, r2
 800310e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d006      	beq.n	800312a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800311c:	4b19      	ldr	r3, [pc, #100]	; (8003184 <HAL_GPIO_Init+0x2d0>)
 800311e:	689a      	ldr	r2, [r3, #8]
 8003120:	4918      	ldr	r1, [pc, #96]	; (8003184 <HAL_GPIO_Init+0x2d0>)
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	4313      	orrs	r3, r2
 8003126:	608b      	str	r3, [r1, #8]
 8003128:	e006      	b.n	8003138 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800312a:	4b16      	ldr	r3, [pc, #88]	; (8003184 <HAL_GPIO_Init+0x2d0>)
 800312c:	689a      	ldr	r2, [r3, #8]
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	43db      	mvns	r3, r3
 8003132:	4914      	ldr	r1, [pc, #80]	; (8003184 <HAL_GPIO_Init+0x2d0>)
 8003134:	4013      	ands	r3, r2
 8003136:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d021      	beq.n	8003188 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003144:	4b0f      	ldr	r3, [pc, #60]	; (8003184 <HAL_GPIO_Init+0x2d0>)
 8003146:	68da      	ldr	r2, [r3, #12]
 8003148:	490e      	ldr	r1, [pc, #56]	; (8003184 <HAL_GPIO_Init+0x2d0>)
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	4313      	orrs	r3, r2
 800314e:	60cb      	str	r3, [r1, #12]
 8003150:	e021      	b.n	8003196 <HAL_GPIO_Init+0x2e2>
 8003152:	bf00      	nop
 8003154:	10320000 	.word	0x10320000
 8003158:	10310000 	.word	0x10310000
 800315c:	10220000 	.word	0x10220000
 8003160:	10210000 	.word	0x10210000
 8003164:	10120000 	.word	0x10120000
 8003168:	10110000 	.word	0x10110000
 800316c:	40021000 	.word	0x40021000
 8003170:	40010000 	.word	0x40010000
 8003174:	40010800 	.word	0x40010800
 8003178:	40010c00 	.word	0x40010c00
 800317c:	40011000 	.word	0x40011000
 8003180:	40011400 	.word	0x40011400
 8003184:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003188:	4b0b      	ldr	r3, [pc, #44]	; (80031b8 <HAL_GPIO_Init+0x304>)
 800318a:	68da      	ldr	r2, [r3, #12]
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	43db      	mvns	r3, r3
 8003190:	4909      	ldr	r1, [pc, #36]	; (80031b8 <HAL_GPIO_Init+0x304>)
 8003192:	4013      	ands	r3, r2
 8003194:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003198:	3301      	adds	r3, #1
 800319a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a2:	fa22 f303 	lsr.w	r3, r2, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f47f ae8e 	bne.w	8002ec8 <HAL_GPIO_Init+0x14>
  }
}
 80031ac:	bf00      	nop
 80031ae:	bf00      	nop
 80031b0:	372c      	adds	r7, #44	; 0x2c
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bc80      	pop	{r7}
 80031b6:	4770      	bx	lr
 80031b8:	40010400 	.word	0x40010400

080031bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	460b      	mov	r3, r1
 80031c6:	807b      	strh	r3, [r7, #2]
 80031c8:	4613      	mov	r3, r2
 80031ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031cc:	787b      	ldrb	r3, [r7, #1]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d003      	beq.n	80031da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031d2:	887a      	ldrh	r2, [r7, #2]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80031d8:	e003      	b.n	80031e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80031da:	887b      	ldrh	r3, [r7, #2]
 80031dc:	041a      	lsls	r2, r3, #16
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	611a      	str	r2, [r3, #16]
}
 80031e2:	bf00      	nop
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bc80      	pop	{r7}
 80031ea:	4770      	bx	lr

080031ec <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b085      	sub	sp, #20
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	460b      	mov	r3, r1
 80031f6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80031fe:	887a      	ldrh	r2, [r7, #2]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	4013      	ands	r3, r2
 8003204:	041a      	lsls	r2, r3, #16
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	43d9      	mvns	r1, r3
 800320a:	887b      	ldrh	r3, [r7, #2]
 800320c:	400b      	ands	r3, r1
 800320e:	431a      	orrs	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	611a      	str	r2, [r3, #16]
}
 8003214:	bf00      	nop
 8003216:	3714      	adds	r7, #20
 8003218:	46bd      	mov	sp, r7
 800321a:	bc80      	pop	{r7}
 800321c:	4770      	bx	lr
	...

08003220 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e12b      	b.n	800348a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d106      	bne.n	800324c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f7ff fa92 	bl	8002770 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2224      	movs	r2, #36	; 0x24
 8003250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f022 0201 	bic.w	r2, r2, #1
 8003262:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003272:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003282:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003284:	f001 fba0 	bl	80049c8 <HAL_RCC_GetPCLK1Freq>
 8003288:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	4a81      	ldr	r2, [pc, #516]	; (8003494 <HAL_I2C_Init+0x274>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d807      	bhi.n	80032a4 <HAL_I2C_Init+0x84>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	4a80      	ldr	r2, [pc, #512]	; (8003498 <HAL_I2C_Init+0x278>)
 8003298:	4293      	cmp	r3, r2
 800329a:	bf94      	ite	ls
 800329c:	2301      	movls	r3, #1
 800329e:	2300      	movhi	r3, #0
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	e006      	b.n	80032b2 <HAL_I2C_Init+0x92>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	4a7d      	ldr	r2, [pc, #500]	; (800349c <HAL_I2C_Init+0x27c>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	bf94      	ite	ls
 80032ac:	2301      	movls	r3, #1
 80032ae:	2300      	movhi	r3, #0
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e0e7      	b.n	800348a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	4a78      	ldr	r2, [pc, #480]	; (80034a0 <HAL_I2C_Init+0x280>)
 80032be:	fba2 2303 	umull	r2, r3, r2, r3
 80032c2:	0c9b      	lsrs	r3, r3, #18
 80032c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68ba      	ldr	r2, [r7, #8]
 80032d6:	430a      	orrs	r2, r1
 80032d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	6a1b      	ldr	r3, [r3, #32]
 80032e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	4a6a      	ldr	r2, [pc, #424]	; (8003494 <HAL_I2C_Init+0x274>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d802      	bhi.n	80032f4 <HAL_I2C_Init+0xd4>
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	3301      	adds	r3, #1
 80032f2:	e009      	b.n	8003308 <HAL_I2C_Init+0xe8>
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80032fa:	fb02 f303 	mul.w	r3, r2, r3
 80032fe:	4a69      	ldr	r2, [pc, #420]	; (80034a4 <HAL_I2C_Init+0x284>)
 8003300:	fba2 2303 	umull	r2, r3, r2, r3
 8003304:	099b      	lsrs	r3, r3, #6
 8003306:	3301      	adds	r3, #1
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	6812      	ldr	r2, [r2, #0]
 800330c:	430b      	orrs	r3, r1
 800330e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800331a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	495c      	ldr	r1, [pc, #368]	; (8003494 <HAL_I2C_Init+0x274>)
 8003324:	428b      	cmp	r3, r1
 8003326:	d819      	bhi.n	800335c <HAL_I2C_Init+0x13c>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	1e59      	subs	r1, r3, #1
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	fbb1 f3f3 	udiv	r3, r1, r3
 8003336:	1c59      	adds	r1, r3, #1
 8003338:	f640 73fc 	movw	r3, #4092	; 0xffc
 800333c:	400b      	ands	r3, r1
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00a      	beq.n	8003358 <HAL_I2C_Init+0x138>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	1e59      	subs	r1, r3, #1
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003350:	3301      	adds	r3, #1
 8003352:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003356:	e051      	b.n	80033fc <HAL_I2C_Init+0x1dc>
 8003358:	2304      	movs	r3, #4
 800335a:	e04f      	b.n	80033fc <HAL_I2C_Init+0x1dc>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d111      	bne.n	8003388 <HAL_I2C_Init+0x168>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	1e58      	subs	r0, r3, #1
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6859      	ldr	r1, [r3, #4]
 800336c:	460b      	mov	r3, r1
 800336e:	005b      	lsls	r3, r3, #1
 8003370:	440b      	add	r3, r1
 8003372:	fbb0 f3f3 	udiv	r3, r0, r3
 8003376:	3301      	adds	r3, #1
 8003378:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800337c:	2b00      	cmp	r3, #0
 800337e:	bf0c      	ite	eq
 8003380:	2301      	moveq	r3, #1
 8003382:	2300      	movne	r3, #0
 8003384:	b2db      	uxtb	r3, r3
 8003386:	e012      	b.n	80033ae <HAL_I2C_Init+0x18e>
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	1e58      	subs	r0, r3, #1
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6859      	ldr	r1, [r3, #4]
 8003390:	460b      	mov	r3, r1
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	440b      	add	r3, r1
 8003396:	0099      	lsls	r1, r3, #2
 8003398:	440b      	add	r3, r1
 800339a:	fbb0 f3f3 	udiv	r3, r0, r3
 800339e:	3301      	adds	r3, #1
 80033a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	bf0c      	ite	eq
 80033a8:	2301      	moveq	r3, #1
 80033aa:	2300      	movne	r3, #0
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <HAL_I2C_Init+0x196>
 80033b2:	2301      	movs	r3, #1
 80033b4:	e022      	b.n	80033fc <HAL_I2C_Init+0x1dc>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10e      	bne.n	80033dc <HAL_I2C_Init+0x1bc>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	1e58      	subs	r0, r3, #1
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6859      	ldr	r1, [r3, #4]
 80033c6:	460b      	mov	r3, r1
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	440b      	add	r3, r1
 80033cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80033d0:	3301      	adds	r3, #1
 80033d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033da:	e00f      	b.n	80033fc <HAL_I2C_Init+0x1dc>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	1e58      	subs	r0, r3, #1
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6859      	ldr	r1, [r3, #4]
 80033e4:	460b      	mov	r3, r1
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	440b      	add	r3, r1
 80033ea:	0099      	lsls	r1, r3, #2
 80033ec:	440b      	add	r3, r1
 80033ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80033f2:	3301      	adds	r3, #1
 80033f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033fc:	6879      	ldr	r1, [r7, #4]
 80033fe:	6809      	ldr	r1, [r1, #0]
 8003400:	4313      	orrs	r3, r2
 8003402:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	69da      	ldr	r2, [r3, #28]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	431a      	orrs	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	430a      	orrs	r2, r1
 800341e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800342a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	6911      	ldr	r1, [r2, #16]
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	68d2      	ldr	r2, [r2, #12]
 8003436:	4311      	orrs	r1, r2
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	6812      	ldr	r2, [r2, #0]
 800343c:	430b      	orrs	r3, r1
 800343e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	695a      	ldr	r2, [r3, #20]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	431a      	orrs	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	430a      	orrs	r2, r1
 800345a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f042 0201 	orr.w	r2, r2, #1
 800346a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2220      	movs	r2, #32
 8003476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	000186a0 	.word	0x000186a0
 8003498:	001e847f 	.word	0x001e847f
 800349c:	003d08ff 	.word	0x003d08ff
 80034a0:	431bde83 	.word	0x431bde83
 80034a4:	10624dd3 	.word	0x10624dd3

080034a8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b088      	sub	sp, #32
 80034ac:	af02      	add	r7, sp, #8
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	4608      	mov	r0, r1
 80034b2:	4611      	mov	r1, r2
 80034b4:	461a      	mov	r2, r3
 80034b6:	4603      	mov	r3, r0
 80034b8:	817b      	strh	r3, [r7, #10]
 80034ba:	460b      	mov	r3, r1
 80034bc:	813b      	strh	r3, [r7, #8]
 80034be:	4613      	mov	r3, r2
 80034c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034c2:	f7ff fbbb 	bl	8002c3c <HAL_GetTick>
 80034c6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	2b20      	cmp	r3, #32
 80034d2:	f040 80d9 	bne.w	8003688 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	2319      	movs	r3, #25
 80034dc:	2201      	movs	r2, #1
 80034de:	496d      	ldr	r1, [pc, #436]	; (8003694 <HAL_I2C_Mem_Write+0x1ec>)
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f000 fcc1 	bl	8003e68 <I2C_WaitOnFlagUntilTimeout>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d001      	beq.n	80034f0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80034ec:	2302      	movs	r3, #2
 80034ee:	e0cc      	b.n	800368a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d101      	bne.n	80034fe <HAL_I2C_Mem_Write+0x56>
 80034fa:	2302      	movs	r3, #2
 80034fc:	e0c5      	b.n	800368a <HAL_I2C_Mem_Write+0x1e2>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0301 	and.w	r3, r3, #1
 8003510:	2b01      	cmp	r3, #1
 8003512:	d007      	beq.n	8003524 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f042 0201 	orr.w	r2, r2, #1
 8003522:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003532:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2221      	movs	r2, #33	; 0x21
 8003538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2240      	movs	r2, #64	; 0x40
 8003540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2200      	movs	r2, #0
 8003548:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6a3a      	ldr	r2, [r7, #32]
 800354e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003554:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800355a:	b29a      	uxth	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	4a4d      	ldr	r2, [pc, #308]	; (8003698 <HAL_I2C_Mem_Write+0x1f0>)
 8003564:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003566:	88f8      	ldrh	r0, [r7, #6]
 8003568:	893a      	ldrh	r2, [r7, #8]
 800356a:	8979      	ldrh	r1, [r7, #10]
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	9301      	str	r3, [sp, #4]
 8003570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003572:	9300      	str	r3, [sp, #0]
 8003574:	4603      	mov	r3, r0
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f000 faf8 	bl	8003b6c <I2C_RequestMemoryWrite>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d052      	beq.n	8003628 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e081      	b.n	800368a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f000 fd42 	bl	8004014 <I2C_WaitOnTXEFlagUntilTimeout>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00d      	beq.n	80035b2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359a:	2b04      	cmp	r3, #4
 800359c:	d107      	bne.n	80035ae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e06b      	b.n	800368a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b6:	781a      	ldrb	r2, [r3, #0]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c2:	1c5a      	adds	r2, r3, #1
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035cc:	3b01      	subs	r3, #1
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d8:	b29b      	uxth	r3, r3
 80035da:	3b01      	subs	r3, #1
 80035dc:	b29a      	uxth	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	695b      	ldr	r3, [r3, #20]
 80035e8:	f003 0304 	and.w	r3, r3, #4
 80035ec:	2b04      	cmp	r3, #4
 80035ee:	d11b      	bne.n	8003628 <HAL_I2C_Mem_Write+0x180>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d017      	beq.n	8003628 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fc:	781a      	ldrb	r2, [r3, #0]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003608:	1c5a      	adds	r2, r3, #1
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003612:	3b01      	subs	r3, #1
 8003614:	b29a      	uxth	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800361e:	b29b      	uxth	r3, r3
 8003620:	3b01      	subs	r3, #1
 8003622:	b29a      	uxth	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800362c:	2b00      	cmp	r3, #0
 800362e:	d1aa      	bne.n	8003586 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003630:	697a      	ldr	r2, [r7, #20]
 8003632:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	f000 fd2e 	bl	8004096 <I2C_WaitOnBTFFlagUntilTimeout>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00d      	beq.n	800365c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003644:	2b04      	cmp	r3, #4
 8003646:	d107      	bne.n	8003658 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003656:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e016      	b.n	800368a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800366a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2220      	movs	r2, #32
 8003670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003684:	2300      	movs	r3, #0
 8003686:	e000      	b.n	800368a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003688:	2302      	movs	r3, #2
  }
}
 800368a:	4618      	mov	r0, r3
 800368c:	3718      	adds	r7, #24
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	00100002 	.word	0x00100002
 8003698:	ffff0000 	.word	0xffff0000

0800369c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b08c      	sub	sp, #48	; 0x30
 80036a0:	af02      	add	r7, sp, #8
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	4608      	mov	r0, r1
 80036a6:	4611      	mov	r1, r2
 80036a8:	461a      	mov	r2, r3
 80036aa:	4603      	mov	r3, r0
 80036ac:	817b      	strh	r3, [r7, #10]
 80036ae:	460b      	mov	r3, r1
 80036b0:	813b      	strh	r3, [r7, #8]
 80036b2:	4613      	mov	r3, r2
 80036b4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80036b6:	2300      	movs	r3, #0
 80036b8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80036ba:	f7ff fabf 	bl	8002c3c <HAL_GetTick>
 80036be:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	2b20      	cmp	r3, #32
 80036ca:	f040 8244 	bne.w	8003b56 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d0:	9300      	str	r3, [sp, #0]
 80036d2:	2319      	movs	r3, #25
 80036d4:	2201      	movs	r2, #1
 80036d6:	4982      	ldr	r1, [pc, #520]	; (80038e0 <HAL_I2C_Mem_Read+0x244>)
 80036d8:	68f8      	ldr	r0, [r7, #12]
 80036da:	f000 fbc5 	bl	8003e68 <I2C_WaitOnFlagUntilTimeout>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d001      	beq.n	80036e8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80036e4:	2302      	movs	r3, #2
 80036e6:	e237      	b.n	8003b58 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d101      	bne.n	80036f6 <HAL_I2C_Mem_Read+0x5a>
 80036f2:	2302      	movs	r3, #2
 80036f4:	e230      	b.n	8003b58 <HAL_I2C_Mem_Read+0x4bc>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	2b01      	cmp	r3, #1
 800370a:	d007      	beq.n	800371c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f042 0201 	orr.w	r2, r2, #1
 800371a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800372a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2222      	movs	r2, #34	; 0x22
 8003730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2240      	movs	r2, #64	; 0x40
 8003738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003746:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800374c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003752:	b29a      	uxth	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	4a62      	ldr	r2, [pc, #392]	; (80038e4 <HAL_I2C_Mem_Read+0x248>)
 800375c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800375e:	88f8      	ldrh	r0, [r7, #6]
 8003760:	893a      	ldrh	r2, [r7, #8]
 8003762:	8979      	ldrh	r1, [r7, #10]
 8003764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003766:	9301      	str	r3, [sp, #4]
 8003768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800376a:	9300      	str	r3, [sp, #0]
 800376c:	4603      	mov	r3, r0
 800376e:	68f8      	ldr	r0, [r7, #12]
 8003770:	f000 fa92 	bl	8003c98 <I2C_RequestMemoryRead>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d001      	beq.n	800377e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e1ec      	b.n	8003b58 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003782:	2b00      	cmp	r3, #0
 8003784:	d113      	bne.n	80037ae <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003786:	2300      	movs	r3, #0
 8003788:	61fb      	str	r3, [r7, #28]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	695b      	ldr	r3, [r3, #20]
 8003790:	61fb      	str	r3, [r7, #28]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	61fb      	str	r3, [r7, #28]
 800379a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037aa:	601a      	str	r2, [r3, #0]
 80037ac:	e1c0      	b.n	8003b30 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d11e      	bne.n	80037f4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037c4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80037c6:	b672      	cpsid	i
}
 80037c8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037ca:	2300      	movs	r3, #0
 80037cc:	61bb      	str	r3, [r7, #24]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	695b      	ldr	r3, [r3, #20]
 80037d4:	61bb      	str	r3, [r7, #24]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	61bb      	str	r3, [r7, #24]
 80037de:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037ee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80037f0:	b662      	cpsie	i
}
 80037f2:	e035      	b.n	8003860 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d11e      	bne.n	800383a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800380a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800380c:	b672      	cpsid	i
}
 800380e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003810:	2300      	movs	r3, #0
 8003812:	617b      	str	r3, [r7, #20]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	617b      	str	r3, [r7, #20]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	617b      	str	r3, [r7, #20]
 8003824:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003834:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003836:	b662      	cpsie	i
}
 8003838:	e012      	b.n	8003860 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003848:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800384a:	2300      	movs	r3, #0
 800384c:	613b      	str	r3, [r7, #16]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	695b      	ldr	r3, [r3, #20]
 8003854:	613b      	str	r3, [r7, #16]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	613b      	str	r3, [r7, #16]
 800385e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003860:	e166      	b.n	8003b30 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003866:	2b03      	cmp	r3, #3
 8003868:	f200 811f 	bhi.w	8003aaa <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003870:	2b01      	cmp	r3, #1
 8003872:	d123      	bne.n	80038bc <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003876:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 fc4d 	bl	8004118 <I2C_WaitOnRXNEFlagUntilTimeout>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e167      	b.n	8003b58 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	691a      	ldr	r2, [r3, #16]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003892:	b2d2      	uxtb	r2, r2
 8003894:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389a:	1c5a      	adds	r2, r3, #1
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038a4:	3b01      	subs	r3, #1
 80038a6:	b29a      	uxth	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	3b01      	subs	r3, #1
 80038b4:	b29a      	uxth	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038ba:	e139      	b.n	8003b30 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d152      	bne.n	800396a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c6:	9300      	str	r3, [sp, #0]
 80038c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ca:	2200      	movs	r2, #0
 80038cc:	4906      	ldr	r1, [pc, #24]	; (80038e8 <HAL_I2C_Mem_Read+0x24c>)
 80038ce:	68f8      	ldr	r0, [r7, #12]
 80038d0:	f000 faca 	bl	8003e68 <I2C_WaitOnFlagUntilTimeout>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d008      	beq.n	80038ec <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e13c      	b.n	8003b58 <HAL_I2C_Mem_Read+0x4bc>
 80038de:	bf00      	nop
 80038e0:	00100002 	.word	0x00100002
 80038e4:	ffff0000 	.word	0xffff0000
 80038e8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80038ec:	b672      	cpsid	i
}
 80038ee:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	691a      	ldr	r2, [r3, #16]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	b2d2      	uxtb	r2, r2
 800390c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003912:	1c5a      	adds	r2, r3, #1
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800391c:	3b01      	subs	r3, #1
 800391e:	b29a      	uxth	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003928:	b29b      	uxth	r3, r3
 800392a:	3b01      	subs	r3, #1
 800392c:	b29a      	uxth	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003932:	b662      	cpsie	i
}
 8003934:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	691a      	ldr	r2, [r3, #16]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003940:	b2d2      	uxtb	r2, r2
 8003942:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003948:	1c5a      	adds	r2, r3, #1
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003952:	3b01      	subs	r3, #1
 8003954:	b29a      	uxth	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800395e:	b29b      	uxth	r3, r3
 8003960:	3b01      	subs	r3, #1
 8003962:	b29a      	uxth	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003968:	e0e2      	b.n	8003b30 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800396a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396c:	9300      	str	r3, [sp, #0]
 800396e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003970:	2200      	movs	r2, #0
 8003972:	497b      	ldr	r1, [pc, #492]	; (8003b60 <HAL_I2C_Mem_Read+0x4c4>)
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	f000 fa77 	bl	8003e68 <I2C_WaitOnFlagUntilTimeout>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d001      	beq.n	8003984 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e0e9      	b.n	8003b58 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003992:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003994:	b672      	cpsid	i
}
 8003996:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	691a      	ldr	r2, [r3, #16]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a2:	b2d2      	uxtb	r2, r2
 80039a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039aa:	1c5a      	adds	r2, r3, #1
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039b4:	3b01      	subs	r3, #1
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	3b01      	subs	r3, #1
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80039ca:	4b66      	ldr	r3, [pc, #408]	; (8003b64 <HAL_I2C_Mem_Read+0x4c8>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	08db      	lsrs	r3, r3, #3
 80039d0:	4a65      	ldr	r2, [pc, #404]	; (8003b68 <HAL_I2C_Mem_Read+0x4cc>)
 80039d2:	fba2 2303 	umull	r2, r3, r2, r3
 80039d6:	0a1a      	lsrs	r2, r3, #8
 80039d8:	4613      	mov	r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4413      	add	r3, r2
 80039de:	00da      	lsls	r2, r3, #3
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80039e4:	6a3b      	ldr	r3, [r7, #32]
 80039e6:	3b01      	subs	r3, #1
 80039e8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80039ea:	6a3b      	ldr	r3, [r7, #32]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d118      	bne.n	8003a22 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2200      	movs	r2, #0
 80039f4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2220      	movs	r2, #32
 80039fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0a:	f043 0220 	orr.w	r2, r3, #32
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003a12:	b662      	cpsie	i
}
 8003a14:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e09a      	b.n	8003b58 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	695b      	ldr	r3, [r3, #20]
 8003a28:	f003 0304 	and.w	r3, r3, #4
 8003a2c:	2b04      	cmp	r3, #4
 8003a2e:	d1d9      	bne.n	80039e4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	691a      	ldr	r2, [r3, #16]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4a:	b2d2      	uxtb	r2, r2
 8003a4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a52:	1c5a      	adds	r2, r3, #1
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	b29a      	uxth	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	b29a      	uxth	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003a72:	b662      	cpsie	i
}
 8003a74:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	691a      	ldr	r2, [r3, #16]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a80:	b2d2      	uxtb	r2, r2
 8003a82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a88:	1c5a      	adds	r2, r3, #1
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a92:	3b01      	subs	r3, #1
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003aa8:	e042      	b.n	8003b30 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	f000 fb32 	bl	8004118 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d001      	beq.n	8003abe <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e04c      	b.n	8003b58 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	691a      	ldr	r2, [r3, #16]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac8:	b2d2      	uxtb	r2, r2
 8003aca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad0:	1c5a      	adds	r2, r3, #1
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ada:	3b01      	subs	r3, #1
 8003adc:	b29a      	uxth	r2, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	3b01      	subs	r3, #1
 8003aea:	b29a      	uxth	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	f003 0304 	and.w	r3, r3, #4
 8003afa:	2b04      	cmp	r3, #4
 8003afc:	d118      	bne.n	8003b30 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	691a      	ldr	r2, [r3, #16]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b08:	b2d2      	uxtb	r2, r2
 8003b0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b10:	1c5a      	adds	r2, r3, #1
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f47f ae94 	bne.w	8003862 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2220      	movs	r2, #32
 8003b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b52:	2300      	movs	r3, #0
 8003b54:	e000      	b.n	8003b58 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003b56:	2302      	movs	r3, #2
  }
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3728      	adds	r7, #40	; 0x28
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	00010004 	.word	0x00010004
 8003b64:	20000000 	.word	0x20000000
 8003b68:	14f8b589 	.word	0x14f8b589

08003b6c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b088      	sub	sp, #32
 8003b70:	af02      	add	r7, sp, #8
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	4608      	mov	r0, r1
 8003b76:	4611      	mov	r1, r2
 8003b78:	461a      	mov	r2, r3
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	817b      	strh	r3, [r7, #10]
 8003b7e:	460b      	mov	r3, r1
 8003b80:	813b      	strh	r3, [r7, #8]
 8003b82:	4613      	mov	r3, r2
 8003b84:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b94:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b98:	9300      	str	r3, [sp, #0]
 8003b9a:	6a3b      	ldr	r3, [r7, #32]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	f000 f960 	bl	8003e68 <I2C_WaitOnFlagUntilTimeout>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00d      	beq.n	8003bca <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bbc:	d103      	bne.n	8003bc6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bc4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e05f      	b.n	8003c8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003bca:	897b      	ldrh	r3, [r7, #10]
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	461a      	mov	r2, r3
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003bd8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bdc:	6a3a      	ldr	r2, [r7, #32]
 8003bde:	492d      	ldr	r1, [pc, #180]	; (8003c94 <I2C_RequestMemoryWrite+0x128>)
 8003be0:	68f8      	ldr	r0, [r7, #12]
 8003be2:	f000 f998 	bl	8003f16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d001      	beq.n	8003bf0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e04c      	b.n	8003c8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	617b      	str	r3, [r7, #20]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	617b      	str	r3, [r7, #20]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	617b      	str	r3, [r7, #20]
 8003c04:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c08:	6a39      	ldr	r1, [r7, #32]
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	f000 fa02 	bl	8004014 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00d      	beq.n	8003c32 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1a:	2b04      	cmp	r3, #4
 8003c1c:	d107      	bne.n	8003c2e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c2c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e02b      	b.n	8003c8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c32:	88fb      	ldrh	r3, [r7, #6]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d105      	bne.n	8003c44 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c38:	893b      	ldrh	r3, [r7, #8]
 8003c3a:	b2da      	uxtb	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	611a      	str	r2, [r3, #16]
 8003c42:	e021      	b.n	8003c88 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003c44:	893b      	ldrh	r3, [r7, #8]
 8003c46:	0a1b      	lsrs	r3, r3, #8
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	b2da      	uxtb	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c54:	6a39      	ldr	r1, [r7, #32]
 8003c56:	68f8      	ldr	r0, [r7, #12]
 8003c58:	f000 f9dc 	bl	8004014 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00d      	beq.n	8003c7e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c66:	2b04      	cmp	r3, #4
 8003c68:	d107      	bne.n	8003c7a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c78:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e005      	b.n	8003c8a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c7e:	893b      	ldrh	r3, [r7, #8]
 8003c80:	b2da      	uxtb	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3718      	adds	r7, #24
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	00010002 	.word	0x00010002

08003c98 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b088      	sub	sp, #32
 8003c9c:	af02      	add	r7, sp, #8
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	4608      	mov	r0, r1
 8003ca2:	4611      	mov	r1, r2
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	817b      	strh	r3, [r7, #10]
 8003caa:	460b      	mov	r3, r1
 8003cac:	813b      	strh	r3, [r7, #8]
 8003cae:	4613      	mov	r3, r2
 8003cb0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cc0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cd0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd4:	9300      	str	r3, [sp, #0]
 8003cd6:	6a3b      	ldr	r3, [r7, #32]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003cde:	68f8      	ldr	r0, [r7, #12]
 8003ce0:	f000 f8c2 	bl	8003e68 <I2C_WaitOnFlagUntilTimeout>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d00d      	beq.n	8003d06 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cf8:	d103      	bne.n	8003d02 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d00:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e0aa      	b.n	8003e5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d06:	897b      	ldrh	r3, [r7, #10]
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d14:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d18:	6a3a      	ldr	r2, [r7, #32]
 8003d1a:	4952      	ldr	r1, [pc, #328]	; (8003e64 <I2C_RequestMemoryRead+0x1cc>)
 8003d1c:	68f8      	ldr	r0, [r7, #12]
 8003d1e:	f000 f8fa 	bl	8003f16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d001      	beq.n	8003d2c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e097      	b.n	8003e5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	617b      	str	r3, [r7, #20]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	617b      	str	r3, [r7, #20]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	617b      	str	r3, [r7, #20]
 8003d40:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d44:	6a39      	ldr	r1, [r7, #32]
 8003d46:	68f8      	ldr	r0, [r7, #12]
 8003d48:	f000 f964 	bl	8004014 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00d      	beq.n	8003d6e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d56:	2b04      	cmp	r3, #4
 8003d58:	d107      	bne.n	8003d6a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d68:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e076      	b.n	8003e5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d6e:	88fb      	ldrh	r3, [r7, #6]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d105      	bne.n	8003d80 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d74:	893b      	ldrh	r3, [r7, #8]
 8003d76:	b2da      	uxtb	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	611a      	str	r2, [r3, #16]
 8003d7e:	e021      	b.n	8003dc4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d80:	893b      	ldrh	r3, [r7, #8]
 8003d82:	0a1b      	lsrs	r3, r3, #8
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	b2da      	uxtb	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d90:	6a39      	ldr	r1, [r7, #32]
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	f000 f93e 	bl	8004014 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00d      	beq.n	8003dba <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da2:	2b04      	cmp	r3, #4
 8003da4:	d107      	bne.n	8003db6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003db4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e050      	b.n	8003e5c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003dba:	893b      	ldrh	r3, [r7, #8]
 8003dbc:	b2da      	uxtb	r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dc6:	6a39      	ldr	r1, [r7, #32]
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	f000 f923 	bl	8004014 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d00d      	beq.n	8003df0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd8:	2b04      	cmp	r3, #4
 8003dda:	d107      	bne.n	8003dec <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dea:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e035      	b.n	8003e5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dfe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e02:	9300      	str	r3, [sp, #0]
 8003e04:	6a3b      	ldr	r3, [r7, #32]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f000 f82b 	bl	8003e68 <I2C_WaitOnFlagUntilTimeout>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d00d      	beq.n	8003e34 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e26:	d103      	bne.n	8003e30 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e2e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e013      	b.n	8003e5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003e34:	897b      	ldrh	r3, [r7, #10]
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	f043 0301 	orr.w	r3, r3, #1
 8003e3c:	b2da      	uxtb	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e46:	6a3a      	ldr	r2, [r7, #32]
 8003e48:	4906      	ldr	r1, [pc, #24]	; (8003e64 <I2C_RequestMemoryRead+0x1cc>)
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	f000 f863 	bl	8003f16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d001      	beq.n	8003e5a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e000      	b.n	8003e5c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3718      	adds	r7, #24
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	00010002 	.word	0x00010002

08003e68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	603b      	str	r3, [r7, #0]
 8003e74:	4613      	mov	r3, r2
 8003e76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e78:	e025      	b.n	8003ec6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e80:	d021      	beq.n	8003ec6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e82:	f7fe fedb 	bl	8002c3c <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	683a      	ldr	r2, [r7, #0]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d302      	bcc.n	8003e98 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d116      	bne.n	8003ec6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2220      	movs	r2, #32
 8003ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb2:	f043 0220 	orr.w	r2, r3, #32
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e023      	b.n	8003f0e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	0c1b      	lsrs	r3, r3, #16
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d10d      	bne.n	8003eec <I2C_WaitOnFlagUntilTimeout+0x84>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	43da      	mvns	r2, r3
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	4013      	ands	r3, r2
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	bf0c      	ite	eq
 8003ee2:	2301      	moveq	r3, #1
 8003ee4:	2300      	movne	r3, #0
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	461a      	mov	r2, r3
 8003eea:	e00c      	b.n	8003f06 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	43da      	mvns	r2, r3
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	bf0c      	ite	eq
 8003efe:	2301      	moveq	r3, #1
 8003f00:	2300      	movne	r3, #0
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	461a      	mov	r2, r3
 8003f06:	79fb      	ldrb	r3, [r7, #7]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d0b6      	beq.n	8003e7a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3710      	adds	r7, #16
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003f16:	b580      	push	{r7, lr}
 8003f18:	b084      	sub	sp, #16
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	60f8      	str	r0, [r7, #12]
 8003f1e:	60b9      	str	r1, [r7, #8]
 8003f20:	607a      	str	r2, [r7, #4]
 8003f22:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f24:	e051      	b.n	8003fca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	695b      	ldr	r3, [r3, #20]
 8003f2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f34:	d123      	bne.n	8003f7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f44:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f4e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2220      	movs	r2, #32
 8003f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6a:	f043 0204 	orr.w	r2, r3, #4
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e046      	b.n	800400c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f84:	d021      	beq.n	8003fca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f86:	f7fe fe59 	bl	8002c3c <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d302      	bcc.n	8003f9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d116      	bne.n	8003fca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2220      	movs	r2, #32
 8003fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb6:	f043 0220 	orr.w	r2, r3, #32
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e020      	b.n	800400c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	0c1b      	lsrs	r3, r3, #16
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d10c      	bne.n	8003fee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	695b      	ldr	r3, [r3, #20]
 8003fda:	43da      	mvns	r2, r3
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	4013      	ands	r3, r2
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	bf14      	ite	ne
 8003fe6:	2301      	movne	r3, #1
 8003fe8:	2300      	moveq	r3, #0
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	e00b      	b.n	8004006 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	43da      	mvns	r2, r3
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	bf14      	ite	ne
 8004000:	2301      	movne	r3, #1
 8004002:	2300      	moveq	r3, #0
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2b00      	cmp	r3, #0
 8004008:	d18d      	bne.n	8003f26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800400a:	2300      	movs	r3, #0
}
 800400c:	4618      	mov	r0, r3
 800400e:	3710      	adds	r7, #16
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004020:	e02d      	b.n	800407e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004022:	68f8      	ldr	r0, [r7, #12]
 8004024:	f000 f8ce 	bl	80041c4 <I2C_IsAcknowledgeFailed>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d001      	beq.n	8004032 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e02d      	b.n	800408e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004038:	d021      	beq.n	800407e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800403a:	f7fe fdff 	bl	8002c3c <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	68ba      	ldr	r2, [r7, #8]
 8004046:	429a      	cmp	r2, r3
 8004048:	d302      	bcc.n	8004050 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d116      	bne.n	800407e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2200      	movs	r2, #0
 8004054:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2220      	movs	r2, #32
 800405a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406a:	f043 0220 	orr.w	r2, r3, #32
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e007      	b.n	800408e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	695b      	ldr	r3, [r3, #20]
 8004084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004088:	2b80      	cmp	r3, #128	; 0x80
 800408a:	d1ca      	bne.n	8004022 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004096:	b580      	push	{r7, lr}
 8004098:	b084      	sub	sp, #16
 800409a:	af00      	add	r7, sp, #0
 800409c:	60f8      	str	r0, [r7, #12]
 800409e:	60b9      	str	r1, [r7, #8]
 80040a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040a2:	e02d      	b.n	8004100 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	f000 f88d 	bl	80041c4 <I2C_IsAcknowledgeFailed>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d001      	beq.n	80040b4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e02d      	b.n	8004110 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ba:	d021      	beq.n	8004100 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040bc:	f7fe fdbe 	bl	8002c3c <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	68ba      	ldr	r2, [r7, #8]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d302      	bcc.n	80040d2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d116      	bne.n	8004100 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2220      	movs	r2, #32
 80040dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ec:	f043 0220 	orr.w	r2, r3, #32
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e007      	b.n	8004110 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	f003 0304 	and.w	r3, r3, #4
 800410a:	2b04      	cmp	r3, #4
 800410c:	d1ca      	bne.n	80040a4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3710      	adds	r7, #16
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004124:	e042      	b.n	80041ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	695b      	ldr	r3, [r3, #20]
 800412c:	f003 0310 	and.w	r3, r3, #16
 8004130:	2b10      	cmp	r3, #16
 8004132:	d119      	bne.n	8004168 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f06f 0210 	mvn.w	r2, #16
 800413c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2220      	movs	r2, #32
 8004148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e029      	b.n	80041bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004168:	f7fe fd68 	bl	8002c3c <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	68ba      	ldr	r2, [r7, #8]
 8004174:	429a      	cmp	r2, r3
 8004176:	d302      	bcc.n	800417e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d116      	bne.n	80041ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2220      	movs	r2, #32
 8004188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004198:	f043 0220 	orr.w	r2, r3, #32
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e007      	b.n	80041bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b6:	2b40      	cmp	r3, #64	; 0x40
 80041b8:	d1b5      	bne.n	8004126 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3710      	adds	r7, #16
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041da:	d11b      	bne.n	8004214 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041e4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2220      	movs	r2, #32
 80041f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004200:	f043 0204 	orr.w	r2, r3, #4
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e000      	b.n	8004216 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	370c      	adds	r7, #12
 800421a:	46bd      	mov	sp, r7
 800421c:	bc80      	pop	{r7}
 800421e:	4770      	bx	lr

08004220 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d101      	bne.n	8004232 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e26c      	b.n	800470c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b00      	cmp	r3, #0
 800423c:	f000 8087 	beq.w	800434e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004240:	4b92      	ldr	r3, [pc, #584]	; (800448c <HAL_RCC_OscConfig+0x26c>)
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f003 030c 	and.w	r3, r3, #12
 8004248:	2b04      	cmp	r3, #4
 800424a:	d00c      	beq.n	8004266 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800424c:	4b8f      	ldr	r3, [pc, #572]	; (800448c <HAL_RCC_OscConfig+0x26c>)
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f003 030c 	and.w	r3, r3, #12
 8004254:	2b08      	cmp	r3, #8
 8004256:	d112      	bne.n	800427e <HAL_RCC_OscConfig+0x5e>
 8004258:	4b8c      	ldr	r3, [pc, #560]	; (800448c <HAL_RCC_OscConfig+0x26c>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004264:	d10b      	bne.n	800427e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004266:	4b89      	ldr	r3, [pc, #548]	; (800448c <HAL_RCC_OscConfig+0x26c>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d06c      	beq.n	800434c <HAL_RCC_OscConfig+0x12c>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d168      	bne.n	800434c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e246      	b.n	800470c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004286:	d106      	bne.n	8004296 <HAL_RCC_OscConfig+0x76>
 8004288:	4b80      	ldr	r3, [pc, #512]	; (800448c <HAL_RCC_OscConfig+0x26c>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a7f      	ldr	r2, [pc, #508]	; (800448c <HAL_RCC_OscConfig+0x26c>)
 800428e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004292:	6013      	str	r3, [r2, #0]
 8004294:	e02e      	b.n	80042f4 <HAL_RCC_OscConfig+0xd4>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d10c      	bne.n	80042b8 <HAL_RCC_OscConfig+0x98>
 800429e:	4b7b      	ldr	r3, [pc, #492]	; (800448c <HAL_RCC_OscConfig+0x26c>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a7a      	ldr	r2, [pc, #488]	; (800448c <HAL_RCC_OscConfig+0x26c>)
 80042a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042a8:	6013      	str	r3, [r2, #0]
 80042aa:	4b78      	ldr	r3, [pc, #480]	; (800448c <HAL_RCC_OscConfig+0x26c>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a77      	ldr	r2, [pc, #476]	; (800448c <HAL_RCC_OscConfig+0x26c>)
 80042b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042b4:	6013      	str	r3, [r2, #0]
 80042b6:	e01d      	b.n	80042f4 <HAL_RCC_OscConfig+0xd4>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042c0:	d10c      	bne.n	80042dc <HAL_RCC_OscConfig+0xbc>
 80042c2:	4b72      	ldr	r3, [pc, #456]	; (800448c <HAL_RCC_OscConfig+0x26c>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a71      	ldr	r2, [pc, #452]	; (800448c <HAL_RCC_OscConfig+0x26c>)
 80042c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042cc:	6013      	str	r3, [r2, #0]
 80042ce:	4b6f      	ldr	r3, [pc, #444]	; (800448c <HAL_RCC_OscConfig+0x26c>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a6e      	ldr	r2, [pc, #440]	; (800448c <HAL_RCC_OscConfig+0x26c>)
 80042d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042d8:	6013      	str	r3, [r2, #0]
 80042da:	e00b      	b.n	80042f4 <HAL_RCC_OscConfig+0xd4>
 80042dc:	4b6b      	ldr	r3, [pc, #428]	; (800448c <HAL_RCC_OscConfig+0x26c>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a6a      	ldr	r2, [pc, #424]	; (800448c <HAL_RCC_OscConfig+0x26c>)
 80042e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042e6:	6013      	str	r3, [r2, #0]
 80042e8:	4b68      	ldr	r3, [pc, #416]	; (800448c <HAL_RCC_OscConfig+0x26c>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a67      	ldr	r2, [pc, #412]	; (800448c <HAL_RCC_OscConfig+0x26c>)
 80042ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d013      	beq.n	8004324 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042fc:	f7fe fc9e 	bl	8002c3c <HAL_GetTick>
 8004300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004302:	e008      	b.n	8004316 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004304:	f7fe fc9a 	bl	8002c3c <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	2b64      	cmp	r3, #100	; 0x64
 8004310:	d901      	bls.n	8004316 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e1fa      	b.n	800470c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004316:	4b5d      	ldr	r3, [pc, #372]	; (800448c <HAL_RCC_OscConfig+0x26c>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d0f0      	beq.n	8004304 <HAL_RCC_OscConfig+0xe4>
 8004322:	e014      	b.n	800434e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004324:	f7fe fc8a 	bl	8002c3c <HAL_GetTick>
 8004328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800432a:	e008      	b.n	800433e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800432c:	f7fe fc86 	bl	8002c3c <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	2b64      	cmp	r3, #100	; 0x64
 8004338:	d901      	bls.n	800433e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e1e6      	b.n	800470c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800433e:	4b53      	ldr	r3, [pc, #332]	; (800448c <HAL_RCC_OscConfig+0x26c>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1f0      	bne.n	800432c <HAL_RCC_OscConfig+0x10c>
 800434a:	e000      	b.n	800434e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800434c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0302 	and.w	r3, r3, #2
 8004356:	2b00      	cmp	r3, #0
 8004358:	d063      	beq.n	8004422 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800435a:	4b4c      	ldr	r3, [pc, #304]	; (800448c <HAL_RCC_OscConfig+0x26c>)
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f003 030c 	and.w	r3, r3, #12
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00b      	beq.n	800437e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004366:	4b49      	ldr	r3, [pc, #292]	; (800448c <HAL_RCC_OscConfig+0x26c>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f003 030c 	and.w	r3, r3, #12
 800436e:	2b08      	cmp	r3, #8
 8004370:	d11c      	bne.n	80043ac <HAL_RCC_OscConfig+0x18c>
 8004372:	4b46      	ldr	r3, [pc, #280]	; (800448c <HAL_RCC_OscConfig+0x26c>)
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d116      	bne.n	80043ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800437e:	4b43      	ldr	r3, [pc, #268]	; (800448c <HAL_RCC_OscConfig+0x26c>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d005      	beq.n	8004396 <HAL_RCC_OscConfig+0x176>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d001      	beq.n	8004396 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e1ba      	b.n	800470c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004396:	4b3d      	ldr	r3, [pc, #244]	; (800448c <HAL_RCC_OscConfig+0x26c>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	00db      	lsls	r3, r3, #3
 80043a4:	4939      	ldr	r1, [pc, #228]	; (800448c <HAL_RCC_OscConfig+0x26c>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043aa:	e03a      	b.n	8004422 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	691b      	ldr	r3, [r3, #16]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d020      	beq.n	80043f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043b4:	4b36      	ldr	r3, [pc, #216]	; (8004490 <HAL_RCC_OscConfig+0x270>)
 80043b6:	2201      	movs	r2, #1
 80043b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ba:	f7fe fc3f 	bl	8002c3c <HAL_GetTick>
 80043be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043c0:	e008      	b.n	80043d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043c2:	f7fe fc3b 	bl	8002c3c <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d901      	bls.n	80043d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e19b      	b.n	800470c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043d4:	4b2d      	ldr	r3, [pc, #180]	; (800448c <HAL_RCC_OscConfig+0x26c>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0302 	and.w	r3, r3, #2
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d0f0      	beq.n	80043c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043e0:	4b2a      	ldr	r3, [pc, #168]	; (800448c <HAL_RCC_OscConfig+0x26c>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	695b      	ldr	r3, [r3, #20]
 80043ec:	00db      	lsls	r3, r3, #3
 80043ee:	4927      	ldr	r1, [pc, #156]	; (800448c <HAL_RCC_OscConfig+0x26c>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	600b      	str	r3, [r1, #0]
 80043f4:	e015      	b.n	8004422 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043f6:	4b26      	ldr	r3, [pc, #152]	; (8004490 <HAL_RCC_OscConfig+0x270>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043fc:	f7fe fc1e 	bl	8002c3c <HAL_GetTick>
 8004400:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004402:	e008      	b.n	8004416 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004404:	f7fe fc1a 	bl	8002c3c <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b02      	cmp	r3, #2
 8004410:	d901      	bls.n	8004416 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e17a      	b.n	800470c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004416:	4b1d      	ldr	r3, [pc, #116]	; (800448c <HAL_RCC_OscConfig+0x26c>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1f0      	bne.n	8004404 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0308 	and.w	r3, r3, #8
 800442a:	2b00      	cmp	r3, #0
 800442c:	d03a      	beq.n	80044a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d019      	beq.n	800446a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004436:	4b17      	ldr	r3, [pc, #92]	; (8004494 <HAL_RCC_OscConfig+0x274>)
 8004438:	2201      	movs	r2, #1
 800443a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800443c:	f7fe fbfe 	bl	8002c3c <HAL_GetTick>
 8004440:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004442:	e008      	b.n	8004456 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004444:	f7fe fbfa 	bl	8002c3c <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b02      	cmp	r3, #2
 8004450:	d901      	bls.n	8004456 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e15a      	b.n	800470c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004456:	4b0d      	ldr	r3, [pc, #52]	; (800448c <HAL_RCC_OscConfig+0x26c>)
 8004458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d0f0      	beq.n	8004444 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004462:	2001      	movs	r0, #1
 8004464:	f000 fad8 	bl	8004a18 <RCC_Delay>
 8004468:	e01c      	b.n	80044a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800446a:	4b0a      	ldr	r3, [pc, #40]	; (8004494 <HAL_RCC_OscConfig+0x274>)
 800446c:	2200      	movs	r2, #0
 800446e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004470:	f7fe fbe4 	bl	8002c3c <HAL_GetTick>
 8004474:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004476:	e00f      	b.n	8004498 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004478:	f7fe fbe0 	bl	8002c3c <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	2b02      	cmp	r3, #2
 8004484:	d908      	bls.n	8004498 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e140      	b.n	800470c <HAL_RCC_OscConfig+0x4ec>
 800448a:	bf00      	nop
 800448c:	40021000 	.word	0x40021000
 8004490:	42420000 	.word	0x42420000
 8004494:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004498:	4b9e      	ldr	r3, [pc, #632]	; (8004714 <HAL_RCC_OscConfig+0x4f4>)
 800449a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449c:	f003 0302 	and.w	r3, r3, #2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1e9      	bne.n	8004478 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0304 	and.w	r3, r3, #4
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	f000 80a6 	beq.w	80045fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044b2:	2300      	movs	r3, #0
 80044b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044b6:	4b97      	ldr	r3, [pc, #604]	; (8004714 <HAL_RCC_OscConfig+0x4f4>)
 80044b8:	69db      	ldr	r3, [r3, #28]
 80044ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10d      	bne.n	80044de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044c2:	4b94      	ldr	r3, [pc, #592]	; (8004714 <HAL_RCC_OscConfig+0x4f4>)
 80044c4:	69db      	ldr	r3, [r3, #28]
 80044c6:	4a93      	ldr	r2, [pc, #588]	; (8004714 <HAL_RCC_OscConfig+0x4f4>)
 80044c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044cc:	61d3      	str	r3, [r2, #28]
 80044ce:	4b91      	ldr	r3, [pc, #580]	; (8004714 <HAL_RCC_OscConfig+0x4f4>)
 80044d0:	69db      	ldr	r3, [r3, #28]
 80044d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044d6:	60bb      	str	r3, [r7, #8]
 80044d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044da:	2301      	movs	r3, #1
 80044dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044de:	4b8e      	ldr	r3, [pc, #568]	; (8004718 <HAL_RCC_OscConfig+0x4f8>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d118      	bne.n	800451c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044ea:	4b8b      	ldr	r3, [pc, #556]	; (8004718 <HAL_RCC_OscConfig+0x4f8>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a8a      	ldr	r2, [pc, #552]	; (8004718 <HAL_RCC_OscConfig+0x4f8>)
 80044f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044f6:	f7fe fba1 	bl	8002c3c <HAL_GetTick>
 80044fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044fc:	e008      	b.n	8004510 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044fe:	f7fe fb9d 	bl	8002c3c <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	2b64      	cmp	r3, #100	; 0x64
 800450a:	d901      	bls.n	8004510 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e0fd      	b.n	800470c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004510:	4b81      	ldr	r3, [pc, #516]	; (8004718 <HAL_RCC_OscConfig+0x4f8>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004518:	2b00      	cmp	r3, #0
 800451a:	d0f0      	beq.n	80044fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	2b01      	cmp	r3, #1
 8004522:	d106      	bne.n	8004532 <HAL_RCC_OscConfig+0x312>
 8004524:	4b7b      	ldr	r3, [pc, #492]	; (8004714 <HAL_RCC_OscConfig+0x4f4>)
 8004526:	6a1b      	ldr	r3, [r3, #32]
 8004528:	4a7a      	ldr	r2, [pc, #488]	; (8004714 <HAL_RCC_OscConfig+0x4f4>)
 800452a:	f043 0301 	orr.w	r3, r3, #1
 800452e:	6213      	str	r3, [r2, #32]
 8004530:	e02d      	b.n	800458e <HAL_RCC_OscConfig+0x36e>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10c      	bne.n	8004554 <HAL_RCC_OscConfig+0x334>
 800453a:	4b76      	ldr	r3, [pc, #472]	; (8004714 <HAL_RCC_OscConfig+0x4f4>)
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	4a75      	ldr	r2, [pc, #468]	; (8004714 <HAL_RCC_OscConfig+0x4f4>)
 8004540:	f023 0301 	bic.w	r3, r3, #1
 8004544:	6213      	str	r3, [r2, #32]
 8004546:	4b73      	ldr	r3, [pc, #460]	; (8004714 <HAL_RCC_OscConfig+0x4f4>)
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	4a72      	ldr	r2, [pc, #456]	; (8004714 <HAL_RCC_OscConfig+0x4f4>)
 800454c:	f023 0304 	bic.w	r3, r3, #4
 8004550:	6213      	str	r3, [r2, #32]
 8004552:	e01c      	b.n	800458e <HAL_RCC_OscConfig+0x36e>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	2b05      	cmp	r3, #5
 800455a:	d10c      	bne.n	8004576 <HAL_RCC_OscConfig+0x356>
 800455c:	4b6d      	ldr	r3, [pc, #436]	; (8004714 <HAL_RCC_OscConfig+0x4f4>)
 800455e:	6a1b      	ldr	r3, [r3, #32]
 8004560:	4a6c      	ldr	r2, [pc, #432]	; (8004714 <HAL_RCC_OscConfig+0x4f4>)
 8004562:	f043 0304 	orr.w	r3, r3, #4
 8004566:	6213      	str	r3, [r2, #32]
 8004568:	4b6a      	ldr	r3, [pc, #424]	; (8004714 <HAL_RCC_OscConfig+0x4f4>)
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	4a69      	ldr	r2, [pc, #420]	; (8004714 <HAL_RCC_OscConfig+0x4f4>)
 800456e:	f043 0301 	orr.w	r3, r3, #1
 8004572:	6213      	str	r3, [r2, #32]
 8004574:	e00b      	b.n	800458e <HAL_RCC_OscConfig+0x36e>
 8004576:	4b67      	ldr	r3, [pc, #412]	; (8004714 <HAL_RCC_OscConfig+0x4f4>)
 8004578:	6a1b      	ldr	r3, [r3, #32]
 800457a:	4a66      	ldr	r2, [pc, #408]	; (8004714 <HAL_RCC_OscConfig+0x4f4>)
 800457c:	f023 0301 	bic.w	r3, r3, #1
 8004580:	6213      	str	r3, [r2, #32]
 8004582:	4b64      	ldr	r3, [pc, #400]	; (8004714 <HAL_RCC_OscConfig+0x4f4>)
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	4a63      	ldr	r2, [pc, #396]	; (8004714 <HAL_RCC_OscConfig+0x4f4>)
 8004588:	f023 0304 	bic.w	r3, r3, #4
 800458c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d015      	beq.n	80045c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004596:	f7fe fb51 	bl	8002c3c <HAL_GetTick>
 800459a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800459c:	e00a      	b.n	80045b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800459e:	f7fe fb4d 	bl	8002c3c <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d901      	bls.n	80045b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e0ab      	b.n	800470c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045b4:	4b57      	ldr	r3, [pc, #348]	; (8004714 <HAL_RCC_OscConfig+0x4f4>)
 80045b6:	6a1b      	ldr	r3, [r3, #32]
 80045b8:	f003 0302 	and.w	r3, r3, #2
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d0ee      	beq.n	800459e <HAL_RCC_OscConfig+0x37e>
 80045c0:	e014      	b.n	80045ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045c2:	f7fe fb3b 	bl	8002c3c <HAL_GetTick>
 80045c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045c8:	e00a      	b.n	80045e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ca:	f7fe fb37 	bl	8002c3c <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045d8:	4293      	cmp	r3, r2
 80045da:	d901      	bls.n	80045e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e095      	b.n	800470c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045e0:	4b4c      	ldr	r3, [pc, #304]	; (8004714 <HAL_RCC_OscConfig+0x4f4>)
 80045e2:	6a1b      	ldr	r3, [r3, #32]
 80045e4:	f003 0302 	and.w	r3, r3, #2
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1ee      	bne.n	80045ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80045ec:	7dfb      	ldrb	r3, [r7, #23]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d105      	bne.n	80045fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045f2:	4b48      	ldr	r3, [pc, #288]	; (8004714 <HAL_RCC_OscConfig+0x4f4>)
 80045f4:	69db      	ldr	r3, [r3, #28]
 80045f6:	4a47      	ldr	r2, [pc, #284]	; (8004714 <HAL_RCC_OscConfig+0x4f4>)
 80045f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	69db      	ldr	r3, [r3, #28]
 8004602:	2b00      	cmp	r3, #0
 8004604:	f000 8081 	beq.w	800470a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004608:	4b42      	ldr	r3, [pc, #264]	; (8004714 <HAL_RCC_OscConfig+0x4f4>)
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f003 030c 	and.w	r3, r3, #12
 8004610:	2b08      	cmp	r3, #8
 8004612:	d061      	beq.n	80046d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	69db      	ldr	r3, [r3, #28]
 8004618:	2b02      	cmp	r3, #2
 800461a:	d146      	bne.n	80046aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800461c:	4b3f      	ldr	r3, [pc, #252]	; (800471c <HAL_RCC_OscConfig+0x4fc>)
 800461e:	2200      	movs	r2, #0
 8004620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004622:	f7fe fb0b 	bl	8002c3c <HAL_GetTick>
 8004626:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004628:	e008      	b.n	800463c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800462a:	f7fe fb07 	bl	8002c3c <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	2b02      	cmp	r3, #2
 8004636:	d901      	bls.n	800463c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e067      	b.n	800470c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800463c:	4b35      	ldr	r3, [pc, #212]	; (8004714 <HAL_RCC_OscConfig+0x4f4>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d1f0      	bne.n	800462a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a1b      	ldr	r3, [r3, #32]
 800464c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004650:	d108      	bne.n	8004664 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004652:	4b30      	ldr	r3, [pc, #192]	; (8004714 <HAL_RCC_OscConfig+0x4f4>)
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	492d      	ldr	r1, [pc, #180]	; (8004714 <HAL_RCC_OscConfig+0x4f4>)
 8004660:	4313      	orrs	r3, r2
 8004662:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004664:	4b2b      	ldr	r3, [pc, #172]	; (8004714 <HAL_RCC_OscConfig+0x4f4>)
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a19      	ldr	r1, [r3, #32]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004674:	430b      	orrs	r3, r1
 8004676:	4927      	ldr	r1, [pc, #156]	; (8004714 <HAL_RCC_OscConfig+0x4f4>)
 8004678:	4313      	orrs	r3, r2
 800467a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800467c:	4b27      	ldr	r3, [pc, #156]	; (800471c <HAL_RCC_OscConfig+0x4fc>)
 800467e:	2201      	movs	r2, #1
 8004680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004682:	f7fe fadb 	bl	8002c3c <HAL_GetTick>
 8004686:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004688:	e008      	b.n	800469c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800468a:	f7fe fad7 	bl	8002c3c <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	2b02      	cmp	r3, #2
 8004696:	d901      	bls.n	800469c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e037      	b.n	800470c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800469c:	4b1d      	ldr	r3, [pc, #116]	; (8004714 <HAL_RCC_OscConfig+0x4f4>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d0f0      	beq.n	800468a <HAL_RCC_OscConfig+0x46a>
 80046a8:	e02f      	b.n	800470a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046aa:	4b1c      	ldr	r3, [pc, #112]	; (800471c <HAL_RCC_OscConfig+0x4fc>)
 80046ac:	2200      	movs	r2, #0
 80046ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b0:	f7fe fac4 	bl	8002c3c <HAL_GetTick>
 80046b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046b6:	e008      	b.n	80046ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046b8:	f7fe fac0 	bl	8002c3c <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e020      	b.n	800470c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046ca:	4b12      	ldr	r3, [pc, #72]	; (8004714 <HAL_RCC_OscConfig+0x4f4>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d1f0      	bne.n	80046b8 <HAL_RCC_OscConfig+0x498>
 80046d6:	e018      	b.n	800470a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	69db      	ldr	r3, [r3, #28]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d101      	bne.n	80046e4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e013      	b.n	800470c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80046e4:	4b0b      	ldr	r3, [pc, #44]	; (8004714 <HAL_RCC_OscConfig+0x4f4>)
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a1b      	ldr	r3, [r3, #32]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d106      	bne.n	8004706 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004702:	429a      	cmp	r2, r3
 8004704:	d001      	beq.n	800470a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e000      	b.n	800470c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800470a:	2300      	movs	r3, #0
}
 800470c:	4618      	mov	r0, r3
 800470e:	3718      	adds	r7, #24
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	40021000 	.word	0x40021000
 8004718:	40007000 	.word	0x40007000
 800471c:	42420060 	.word	0x42420060

08004720 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d101      	bne.n	8004734 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e0d0      	b.n	80048d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004734:	4b6a      	ldr	r3, [pc, #424]	; (80048e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0307 	and.w	r3, r3, #7
 800473c:	683a      	ldr	r2, [r7, #0]
 800473e:	429a      	cmp	r2, r3
 8004740:	d910      	bls.n	8004764 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004742:	4b67      	ldr	r3, [pc, #412]	; (80048e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f023 0207 	bic.w	r2, r3, #7
 800474a:	4965      	ldr	r1, [pc, #404]	; (80048e0 <HAL_RCC_ClockConfig+0x1c0>)
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	4313      	orrs	r3, r2
 8004750:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004752:	4b63      	ldr	r3, [pc, #396]	; (80048e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0307 	and.w	r3, r3, #7
 800475a:	683a      	ldr	r2, [r7, #0]
 800475c:	429a      	cmp	r2, r3
 800475e:	d001      	beq.n	8004764 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e0b8      	b.n	80048d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0302 	and.w	r3, r3, #2
 800476c:	2b00      	cmp	r3, #0
 800476e:	d020      	beq.n	80047b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0304 	and.w	r3, r3, #4
 8004778:	2b00      	cmp	r3, #0
 800477a:	d005      	beq.n	8004788 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800477c:	4b59      	ldr	r3, [pc, #356]	; (80048e4 <HAL_RCC_ClockConfig+0x1c4>)
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	4a58      	ldr	r2, [pc, #352]	; (80048e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004782:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004786:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0308 	and.w	r3, r3, #8
 8004790:	2b00      	cmp	r3, #0
 8004792:	d005      	beq.n	80047a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004794:	4b53      	ldr	r3, [pc, #332]	; (80048e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	4a52      	ldr	r2, [pc, #328]	; (80048e4 <HAL_RCC_ClockConfig+0x1c4>)
 800479a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800479e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047a0:	4b50      	ldr	r3, [pc, #320]	; (80048e4 <HAL_RCC_ClockConfig+0x1c4>)
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	494d      	ldr	r1, [pc, #308]	; (80048e4 <HAL_RCC_ClockConfig+0x1c4>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d040      	beq.n	8004840 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d107      	bne.n	80047d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047c6:	4b47      	ldr	r3, [pc, #284]	; (80048e4 <HAL_RCC_ClockConfig+0x1c4>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d115      	bne.n	80047fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e07f      	b.n	80048d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d107      	bne.n	80047ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047de:	4b41      	ldr	r3, [pc, #260]	; (80048e4 <HAL_RCC_ClockConfig+0x1c4>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d109      	bne.n	80047fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e073      	b.n	80048d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ee:	4b3d      	ldr	r3, [pc, #244]	; (80048e4 <HAL_RCC_ClockConfig+0x1c4>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0302 	and.w	r3, r3, #2
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d101      	bne.n	80047fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e06b      	b.n	80048d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047fe:	4b39      	ldr	r3, [pc, #228]	; (80048e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f023 0203 	bic.w	r2, r3, #3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	4936      	ldr	r1, [pc, #216]	; (80048e4 <HAL_RCC_ClockConfig+0x1c4>)
 800480c:	4313      	orrs	r3, r2
 800480e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004810:	f7fe fa14 	bl	8002c3c <HAL_GetTick>
 8004814:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004816:	e00a      	b.n	800482e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004818:	f7fe fa10 	bl	8002c3c <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	f241 3288 	movw	r2, #5000	; 0x1388
 8004826:	4293      	cmp	r3, r2
 8004828:	d901      	bls.n	800482e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e053      	b.n	80048d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800482e:	4b2d      	ldr	r3, [pc, #180]	; (80048e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f003 020c 	and.w	r2, r3, #12
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	429a      	cmp	r2, r3
 800483e:	d1eb      	bne.n	8004818 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004840:	4b27      	ldr	r3, [pc, #156]	; (80048e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0307 	and.w	r3, r3, #7
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	429a      	cmp	r2, r3
 800484c:	d210      	bcs.n	8004870 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800484e:	4b24      	ldr	r3, [pc, #144]	; (80048e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f023 0207 	bic.w	r2, r3, #7
 8004856:	4922      	ldr	r1, [pc, #136]	; (80048e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	4313      	orrs	r3, r2
 800485c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800485e:	4b20      	ldr	r3, [pc, #128]	; (80048e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0307 	and.w	r3, r3, #7
 8004866:	683a      	ldr	r2, [r7, #0]
 8004868:	429a      	cmp	r2, r3
 800486a:	d001      	beq.n	8004870 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e032      	b.n	80048d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0304 	and.w	r3, r3, #4
 8004878:	2b00      	cmp	r3, #0
 800487a:	d008      	beq.n	800488e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800487c:	4b19      	ldr	r3, [pc, #100]	; (80048e4 <HAL_RCC_ClockConfig+0x1c4>)
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	4916      	ldr	r1, [pc, #88]	; (80048e4 <HAL_RCC_ClockConfig+0x1c4>)
 800488a:	4313      	orrs	r3, r2
 800488c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0308 	and.w	r3, r3, #8
 8004896:	2b00      	cmp	r3, #0
 8004898:	d009      	beq.n	80048ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800489a:	4b12      	ldr	r3, [pc, #72]	; (80048e4 <HAL_RCC_ClockConfig+0x1c4>)
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	00db      	lsls	r3, r3, #3
 80048a8:	490e      	ldr	r1, [pc, #56]	; (80048e4 <HAL_RCC_ClockConfig+0x1c4>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048ae:	f000 f821 	bl	80048f4 <HAL_RCC_GetSysClockFreq>
 80048b2:	4602      	mov	r2, r0
 80048b4:	4b0b      	ldr	r3, [pc, #44]	; (80048e4 <HAL_RCC_ClockConfig+0x1c4>)
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	091b      	lsrs	r3, r3, #4
 80048ba:	f003 030f 	and.w	r3, r3, #15
 80048be:	490a      	ldr	r1, [pc, #40]	; (80048e8 <HAL_RCC_ClockConfig+0x1c8>)
 80048c0:	5ccb      	ldrb	r3, [r1, r3]
 80048c2:	fa22 f303 	lsr.w	r3, r2, r3
 80048c6:	4a09      	ldr	r2, [pc, #36]	; (80048ec <HAL_RCC_ClockConfig+0x1cc>)
 80048c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80048ca:	4b09      	ldr	r3, [pc, #36]	; (80048f0 <HAL_RCC_ClockConfig+0x1d0>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7fe f972 	bl	8002bb8 <HAL_InitTick>

  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3710      	adds	r7, #16
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	40022000 	.word	0x40022000
 80048e4:	40021000 	.word	0x40021000
 80048e8:	08008ae4 	.word	0x08008ae4
 80048ec:	20000000 	.word	0x20000000
 80048f0:	20000004 	.word	0x20000004

080048f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048f4:	b490      	push	{r4, r7}
 80048f6:	b08a      	sub	sp, #40	; 0x28
 80048f8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80048fa:	4b2a      	ldr	r3, [pc, #168]	; (80049a4 <HAL_RCC_GetSysClockFreq+0xb0>)
 80048fc:	1d3c      	adds	r4, r7, #4
 80048fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004900:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004904:	f240 2301 	movw	r3, #513	; 0x201
 8004908:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800490a:	2300      	movs	r3, #0
 800490c:	61fb      	str	r3, [r7, #28]
 800490e:	2300      	movs	r3, #0
 8004910:	61bb      	str	r3, [r7, #24]
 8004912:	2300      	movs	r3, #0
 8004914:	627b      	str	r3, [r7, #36]	; 0x24
 8004916:	2300      	movs	r3, #0
 8004918:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800491a:	2300      	movs	r3, #0
 800491c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800491e:	4b22      	ldr	r3, [pc, #136]	; (80049a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	f003 030c 	and.w	r3, r3, #12
 800492a:	2b04      	cmp	r3, #4
 800492c:	d002      	beq.n	8004934 <HAL_RCC_GetSysClockFreq+0x40>
 800492e:	2b08      	cmp	r3, #8
 8004930:	d003      	beq.n	800493a <HAL_RCC_GetSysClockFreq+0x46>
 8004932:	e02d      	b.n	8004990 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004934:	4b1d      	ldr	r3, [pc, #116]	; (80049ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8004936:	623b      	str	r3, [r7, #32]
      break;
 8004938:	e02d      	b.n	8004996 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	0c9b      	lsrs	r3, r3, #18
 800493e:	f003 030f 	and.w	r3, r3, #15
 8004942:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004946:	4413      	add	r3, r2
 8004948:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800494c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d013      	beq.n	8004980 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004958:	4b13      	ldr	r3, [pc, #76]	; (80049a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	0c5b      	lsrs	r3, r3, #17
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004966:	4413      	add	r3, r2
 8004968:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800496c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	4a0e      	ldr	r2, [pc, #56]	; (80049ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8004972:	fb02 f203 	mul.w	r2, r2, r3
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	fbb2 f3f3 	udiv	r3, r2, r3
 800497c:	627b      	str	r3, [r7, #36]	; 0x24
 800497e:	e004      	b.n	800498a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	4a0b      	ldr	r2, [pc, #44]	; (80049b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004984:	fb02 f303 	mul.w	r3, r2, r3
 8004988:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800498a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498c:	623b      	str	r3, [r7, #32]
      break;
 800498e:	e002      	b.n	8004996 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004990:	4b06      	ldr	r3, [pc, #24]	; (80049ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8004992:	623b      	str	r3, [r7, #32]
      break;
 8004994:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004996:	6a3b      	ldr	r3, [r7, #32]
}
 8004998:	4618      	mov	r0, r3
 800499a:	3728      	adds	r7, #40	; 0x28
 800499c:	46bd      	mov	sp, r7
 800499e:	bc90      	pop	{r4, r7}
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	08008aa0 	.word	0x08008aa0
 80049a8:	40021000 	.word	0x40021000
 80049ac:	007a1200 	.word	0x007a1200
 80049b0:	003d0900 	.word	0x003d0900

080049b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049b4:	b480      	push	{r7}
 80049b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049b8:	4b02      	ldr	r3, [pc, #8]	; (80049c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80049ba:	681b      	ldr	r3, [r3, #0]
}
 80049bc:	4618      	mov	r0, r3
 80049be:	46bd      	mov	sp, r7
 80049c0:	bc80      	pop	{r7}
 80049c2:	4770      	bx	lr
 80049c4:	20000000 	.word	0x20000000

080049c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80049cc:	f7ff fff2 	bl	80049b4 <HAL_RCC_GetHCLKFreq>
 80049d0:	4602      	mov	r2, r0
 80049d2:	4b05      	ldr	r3, [pc, #20]	; (80049e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	0a1b      	lsrs	r3, r3, #8
 80049d8:	f003 0307 	and.w	r3, r3, #7
 80049dc:	4903      	ldr	r1, [pc, #12]	; (80049ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80049de:	5ccb      	ldrb	r3, [r1, r3]
 80049e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	40021000 	.word	0x40021000
 80049ec:	08008af4 	.word	0x08008af4

080049f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80049f4:	f7ff ffde 	bl	80049b4 <HAL_RCC_GetHCLKFreq>
 80049f8:	4602      	mov	r2, r0
 80049fa:	4b05      	ldr	r3, [pc, #20]	; (8004a10 <HAL_RCC_GetPCLK2Freq+0x20>)
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	0adb      	lsrs	r3, r3, #11
 8004a00:	f003 0307 	and.w	r3, r3, #7
 8004a04:	4903      	ldr	r1, [pc, #12]	; (8004a14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a06:	5ccb      	ldrb	r3, [r1, r3]
 8004a08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	40021000 	.word	0x40021000
 8004a14:	08008af4 	.word	0x08008af4

08004a18 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a20:	4b0a      	ldr	r3, [pc, #40]	; (8004a4c <RCC_Delay+0x34>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a0a      	ldr	r2, [pc, #40]	; (8004a50 <RCC_Delay+0x38>)
 8004a26:	fba2 2303 	umull	r2, r3, r2, r3
 8004a2a:	0a5b      	lsrs	r3, r3, #9
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	fb02 f303 	mul.w	r3, r2, r3
 8004a32:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004a34:	bf00      	nop
  }
  while (Delay --);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	1e5a      	subs	r2, r3, #1
 8004a3a:	60fa      	str	r2, [r7, #12]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d1f9      	bne.n	8004a34 <RCC_Delay+0x1c>
}
 8004a40:	bf00      	nop
 8004a42:	bf00      	nop
 8004a44:	3714      	adds	r7, #20
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bc80      	pop	{r7}
 8004a4a:	4770      	bx	lr
 8004a4c:	20000000 	.word	0x20000000
 8004a50:	10624dd3 	.word	0x10624dd3

08004a54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d101      	bne.n	8004a66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e041      	b.n	8004aea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d106      	bne.n	8004a80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f7fd fed4 	bl	8002828 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2202      	movs	r2, #2
 8004a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	3304      	adds	r3, #4
 8004a90:	4619      	mov	r1, r3
 8004a92:	4610      	mov	r0, r2
 8004a94:	f000 fe98 	bl	80057c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3708      	adds	r7, #8
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
	...

08004af4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b085      	sub	sp, #20
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d001      	beq.n	8004b0c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e032      	b.n	8004b72 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2202      	movs	r2, #2
 8004b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a18      	ldr	r2, [pc, #96]	; (8004b7c <HAL_TIM_Base_Start+0x88>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d00e      	beq.n	8004b3c <HAL_TIM_Base_Start+0x48>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b26:	d009      	beq.n	8004b3c <HAL_TIM_Base_Start+0x48>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a14      	ldr	r2, [pc, #80]	; (8004b80 <HAL_TIM_Base_Start+0x8c>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d004      	beq.n	8004b3c <HAL_TIM_Base_Start+0x48>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a13      	ldr	r2, [pc, #76]	; (8004b84 <HAL_TIM_Base_Start+0x90>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d111      	bne.n	8004b60 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	f003 0307 	and.w	r3, r3, #7
 8004b46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2b06      	cmp	r3, #6
 8004b4c:	d010      	beq.n	8004b70 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f042 0201 	orr.w	r2, r2, #1
 8004b5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b5e:	e007      	b.n	8004b70 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f042 0201 	orr.w	r2, r2, #1
 8004b6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3714      	adds	r7, #20
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bc80      	pop	{r7}
 8004b7a:	4770      	bx	lr
 8004b7c:	40012c00 	.word	0x40012c00
 8004b80:	40000400 	.word	0x40000400
 8004b84:	40000800 	.word	0x40000800

08004b88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d001      	beq.n	8004ba0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e03a      	b.n	8004c16 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2202      	movs	r2, #2
 8004ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68da      	ldr	r2, [r3, #12]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f042 0201 	orr.w	r2, r2, #1
 8004bb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a18      	ldr	r2, [pc, #96]	; (8004c20 <HAL_TIM_Base_Start_IT+0x98>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d00e      	beq.n	8004be0 <HAL_TIM_Base_Start_IT+0x58>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bca:	d009      	beq.n	8004be0 <HAL_TIM_Base_Start_IT+0x58>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a14      	ldr	r2, [pc, #80]	; (8004c24 <HAL_TIM_Base_Start_IT+0x9c>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d004      	beq.n	8004be0 <HAL_TIM_Base_Start_IT+0x58>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a13      	ldr	r2, [pc, #76]	; (8004c28 <HAL_TIM_Base_Start_IT+0xa0>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d111      	bne.n	8004c04 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f003 0307 	and.w	r3, r3, #7
 8004bea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2b06      	cmp	r3, #6
 8004bf0:	d010      	beq.n	8004c14 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f042 0201 	orr.w	r2, r2, #1
 8004c00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c02:	e007      	b.n	8004c14 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f042 0201 	orr.w	r2, r2, #1
 8004c12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3714      	adds	r7, #20
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bc80      	pop	{r7}
 8004c1e:	4770      	bx	lr
 8004c20:	40012c00 	.word	0x40012c00
 8004c24:	40000400 	.word	0x40000400
 8004c28:	40000800 	.word	0x40000800

08004c2c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d101      	bne.n	8004c3e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e041      	b.n	8004cc2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d106      	bne.n	8004c58 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f7fd fdca 	bl	80027ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2202      	movs	r2, #2
 8004c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	3304      	adds	r3, #4
 8004c68:	4619      	mov	r1, r3
 8004c6a:	4610      	mov	r0, r2
 8004c6c:	f000 fdac 	bl	80057c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3708      	adds	r7, #8
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
	...

08004ccc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d109      	bne.n	8004cf0 <HAL_TIM_PWM_Start+0x24>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	bf14      	ite	ne
 8004ce8:	2301      	movne	r3, #1
 8004cea:	2300      	moveq	r3, #0
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	e022      	b.n	8004d36 <HAL_TIM_PWM_Start+0x6a>
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	2b04      	cmp	r3, #4
 8004cf4:	d109      	bne.n	8004d0a <HAL_TIM_PWM_Start+0x3e>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	bf14      	ite	ne
 8004d02:	2301      	movne	r3, #1
 8004d04:	2300      	moveq	r3, #0
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	e015      	b.n	8004d36 <HAL_TIM_PWM_Start+0x6a>
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	2b08      	cmp	r3, #8
 8004d0e:	d109      	bne.n	8004d24 <HAL_TIM_PWM_Start+0x58>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	bf14      	ite	ne
 8004d1c:	2301      	movne	r3, #1
 8004d1e:	2300      	moveq	r3, #0
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	e008      	b.n	8004d36 <HAL_TIM_PWM_Start+0x6a>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	bf14      	ite	ne
 8004d30:	2301      	movne	r3, #1
 8004d32:	2300      	moveq	r3, #0
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d001      	beq.n	8004d3e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e05e      	b.n	8004dfc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d104      	bne.n	8004d4e <HAL_TIM_PWM_Start+0x82>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2202      	movs	r2, #2
 8004d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d4c:	e013      	b.n	8004d76 <HAL_TIM_PWM_Start+0xaa>
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	2b04      	cmp	r3, #4
 8004d52:	d104      	bne.n	8004d5e <HAL_TIM_PWM_Start+0x92>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2202      	movs	r2, #2
 8004d58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d5c:	e00b      	b.n	8004d76 <HAL_TIM_PWM_Start+0xaa>
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	2b08      	cmp	r3, #8
 8004d62:	d104      	bne.n	8004d6e <HAL_TIM_PWM_Start+0xa2>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2202      	movs	r2, #2
 8004d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d6c:	e003      	b.n	8004d76 <HAL_TIM_PWM_Start+0xaa>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2202      	movs	r2, #2
 8004d72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	6839      	ldr	r1, [r7, #0]
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f001 f8af 	bl	8005ee2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a1e      	ldr	r2, [pc, #120]	; (8004e04 <HAL_TIM_PWM_Start+0x138>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d107      	bne.n	8004d9e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d9c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a18      	ldr	r2, [pc, #96]	; (8004e04 <HAL_TIM_PWM_Start+0x138>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d00e      	beq.n	8004dc6 <HAL_TIM_PWM_Start+0xfa>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004db0:	d009      	beq.n	8004dc6 <HAL_TIM_PWM_Start+0xfa>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a14      	ldr	r2, [pc, #80]	; (8004e08 <HAL_TIM_PWM_Start+0x13c>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d004      	beq.n	8004dc6 <HAL_TIM_PWM_Start+0xfa>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a12      	ldr	r2, [pc, #72]	; (8004e0c <HAL_TIM_PWM_Start+0x140>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d111      	bne.n	8004dea <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	f003 0307 	and.w	r3, r3, #7
 8004dd0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2b06      	cmp	r3, #6
 8004dd6:	d010      	beq.n	8004dfa <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f042 0201 	orr.w	r2, r2, #1
 8004de6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004de8:	e007      	b.n	8004dfa <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f042 0201 	orr.w	r2, r2, #1
 8004df8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3710      	adds	r7, #16
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	40012c00 	.word	0x40012c00
 8004e08:	40000400 	.word	0x40000400
 8004e0c:	40000800 	.word	0x40000800

08004e10 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d101      	bne.n	8004e22 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e041      	b.n	8004ea6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d106      	bne.n	8004e3c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 f839 	bl	8004eae <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2202      	movs	r2, #2
 8004e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	3304      	adds	r3, #4
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	4610      	mov	r0, r2
 8004e50:	f000 fcba 	bl	80057c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3708      	adds	r7, #8
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004eae:	b480      	push	{r7}
 8004eb0:	b083      	sub	sp, #12
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004eb6:	bf00      	nop
 8004eb8:	370c      	adds	r7, #12
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bc80      	pop	{r7}
 8004ebe:	4770      	bx	lr

08004ec0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d104      	bne.n	8004eda <HAL_TIM_IC_Start_IT+0x1a>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	e013      	b.n	8004f02 <HAL_TIM_IC_Start_IT+0x42>
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	2b04      	cmp	r3, #4
 8004ede:	d104      	bne.n	8004eea <HAL_TIM_IC_Start_IT+0x2a>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	e00b      	b.n	8004f02 <HAL_TIM_IC_Start_IT+0x42>
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	2b08      	cmp	r3, #8
 8004eee:	d104      	bne.n	8004efa <HAL_TIM_IC_Start_IT+0x3a>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	e003      	b.n	8004f02 <HAL_TIM_IC_Start_IT+0x42>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d104      	bne.n	8004f14 <HAL_TIM_IC_Start_IT+0x54>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	e013      	b.n	8004f3c <HAL_TIM_IC_Start_IT+0x7c>
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	2b04      	cmp	r3, #4
 8004f18:	d104      	bne.n	8004f24 <HAL_TIM_IC_Start_IT+0x64>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	e00b      	b.n	8004f3c <HAL_TIM_IC_Start_IT+0x7c>
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	2b08      	cmp	r3, #8
 8004f28:	d104      	bne.n	8004f34 <HAL_TIM_IC_Start_IT+0x74>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	e003      	b.n	8004f3c <HAL_TIM_IC_Start_IT+0x7c>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f3e:	7bfb      	ldrb	r3, [r7, #15]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d102      	bne.n	8004f4a <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f44:	7bbb      	ldrb	r3, [r7, #14]
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d001      	beq.n	8004f4e <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e0b3      	b.n	80050b6 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d104      	bne.n	8004f5e <HAL_TIM_IC_Start_IT+0x9e>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2202      	movs	r2, #2
 8004f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f5c:	e013      	b.n	8004f86 <HAL_TIM_IC_Start_IT+0xc6>
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	2b04      	cmp	r3, #4
 8004f62:	d104      	bne.n	8004f6e <HAL_TIM_IC_Start_IT+0xae>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2202      	movs	r2, #2
 8004f68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f6c:	e00b      	b.n	8004f86 <HAL_TIM_IC_Start_IT+0xc6>
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	2b08      	cmp	r3, #8
 8004f72:	d104      	bne.n	8004f7e <HAL_TIM_IC_Start_IT+0xbe>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2202      	movs	r2, #2
 8004f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f7c:	e003      	b.n	8004f86 <HAL_TIM_IC_Start_IT+0xc6>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2202      	movs	r2, #2
 8004f82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d104      	bne.n	8004f96 <HAL_TIM_IC_Start_IT+0xd6>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2202      	movs	r2, #2
 8004f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f94:	e013      	b.n	8004fbe <HAL_TIM_IC_Start_IT+0xfe>
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	2b04      	cmp	r3, #4
 8004f9a:	d104      	bne.n	8004fa6 <HAL_TIM_IC_Start_IT+0xe6>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2202      	movs	r2, #2
 8004fa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fa4:	e00b      	b.n	8004fbe <HAL_TIM_IC_Start_IT+0xfe>
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	2b08      	cmp	r3, #8
 8004faa:	d104      	bne.n	8004fb6 <HAL_TIM_IC_Start_IT+0xf6>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2202      	movs	r2, #2
 8004fb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fb4:	e003      	b.n	8004fbe <HAL_TIM_IC_Start_IT+0xfe>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2202      	movs	r2, #2
 8004fba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	2b0c      	cmp	r3, #12
 8004fc2:	d841      	bhi.n	8005048 <HAL_TIM_IC_Start_IT+0x188>
 8004fc4:	a201      	add	r2, pc, #4	; (adr r2, 8004fcc <HAL_TIM_IC_Start_IT+0x10c>)
 8004fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fca:	bf00      	nop
 8004fcc:	08005001 	.word	0x08005001
 8004fd0:	08005049 	.word	0x08005049
 8004fd4:	08005049 	.word	0x08005049
 8004fd8:	08005049 	.word	0x08005049
 8004fdc:	08005013 	.word	0x08005013
 8004fe0:	08005049 	.word	0x08005049
 8004fe4:	08005049 	.word	0x08005049
 8004fe8:	08005049 	.word	0x08005049
 8004fec:	08005025 	.word	0x08005025
 8004ff0:	08005049 	.word	0x08005049
 8004ff4:	08005049 	.word	0x08005049
 8004ff8:	08005049 	.word	0x08005049
 8004ffc:	08005037 	.word	0x08005037
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68da      	ldr	r2, [r3, #12]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f042 0202 	orr.w	r2, r2, #2
 800500e:	60da      	str	r2, [r3, #12]
      break;
 8005010:	e01b      	b.n	800504a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68da      	ldr	r2, [r3, #12]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f042 0204 	orr.w	r2, r2, #4
 8005020:	60da      	str	r2, [r3, #12]
      break;
 8005022:	e012      	b.n	800504a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68da      	ldr	r2, [r3, #12]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f042 0208 	orr.w	r2, r2, #8
 8005032:	60da      	str	r2, [r3, #12]
      break;
 8005034:	e009      	b.n	800504a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68da      	ldr	r2, [r3, #12]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f042 0210 	orr.w	r2, r2, #16
 8005044:	60da      	str	r2, [r3, #12]
      break;
 8005046:	e000      	b.n	800504a <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8005048:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2201      	movs	r2, #1
 8005050:	6839      	ldr	r1, [r7, #0]
 8005052:	4618      	mov	r0, r3
 8005054:	f000 ff45 	bl	8005ee2 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a18      	ldr	r2, [pc, #96]	; (80050c0 <HAL_TIM_IC_Start_IT+0x200>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d00e      	beq.n	8005080 <HAL_TIM_IC_Start_IT+0x1c0>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800506a:	d009      	beq.n	8005080 <HAL_TIM_IC_Start_IT+0x1c0>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a14      	ldr	r2, [pc, #80]	; (80050c4 <HAL_TIM_IC_Start_IT+0x204>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d004      	beq.n	8005080 <HAL_TIM_IC_Start_IT+0x1c0>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a13      	ldr	r2, [pc, #76]	; (80050c8 <HAL_TIM_IC_Start_IT+0x208>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d111      	bne.n	80050a4 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	f003 0307 	and.w	r3, r3, #7
 800508a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	2b06      	cmp	r3, #6
 8005090:	d010      	beq.n	80050b4 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f042 0201 	orr.w	r2, r2, #1
 80050a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050a2:	e007      	b.n	80050b4 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f042 0201 	orr.w	r2, r2, #1
 80050b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3710      	adds	r7, #16
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	40012c00 	.word	0x40012c00
 80050c4:	40000400 	.word	0x40000400
 80050c8:	40000800 	.word	0x40000800

080050cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	f003 0302 	and.w	r3, r3, #2
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d122      	bne.n	8005128 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	f003 0302 	and.w	r3, r3, #2
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	d11b      	bne.n	8005128 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f06f 0202 	mvn.w	r2, #2
 80050f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2201      	movs	r2, #1
 80050fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	f003 0303 	and.w	r3, r3, #3
 800510a:	2b00      	cmp	r3, #0
 800510c:	d003      	beq.n	8005116 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f7fd f812 	bl	8002138 <HAL_TIM_IC_CaptureCallback>
 8005114:	e005      	b.n	8005122 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 fb3a 	bl	8005790 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 fb40 	bl	80057a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	f003 0304 	and.w	r3, r3, #4
 8005132:	2b04      	cmp	r3, #4
 8005134:	d122      	bne.n	800517c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	f003 0304 	and.w	r3, r3, #4
 8005140:	2b04      	cmp	r3, #4
 8005142:	d11b      	bne.n	800517c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f06f 0204 	mvn.w	r2, #4
 800514c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2202      	movs	r2, #2
 8005152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800515e:	2b00      	cmp	r3, #0
 8005160:	d003      	beq.n	800516a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f7fc ffe8 	bl	8002138 <HAL_TIM_IC_CaptureCallback>
 8005168:	e005      	b.n	8005176 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 fb10 	bl	8005790 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 fb16 	bl	80057a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	f003 0308 	and.w	r3, r3, #8
 8005186:	2b08      	cmp	r3, #8
 8005188:	d122      	bne.n	80051d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	f003 0308 	and.w	r3, r3, #8
 8005194:	2b08      	cmp	r3, #8
 8005196:	d11b      	bne.n	80051d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f06f 0208 	mvn.w	r2, #8
 80051a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2204      	movs	r2, #4
 80051a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	69db      	ldr	r3, [r3, #28]
 80051ae:	f003 0303 	and.w	r3, r3, #3
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d003      	beq.n	80051be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f7fc ffbe 	bl	8002138 <HAL_TIM_IC_CaptureCallback>
 80051bc:	e005      	b.n	80051ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 fae6 	bl	8005790 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f000 faec 	bl	80057a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	f003 0310 	and.w	r3, r3, #16
 80051da:	2b10      	cmp	r3, #16
 80051dc:	d122      	bne.n	8005224 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	f003 0310 	and.w	r3, r3, #16
 80051e8:	2b10      	cmp	r3, #16
 80051ea:	d11b      	bne.n	8005224 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f06f 0210 	mvn.w	r2, #16
 80051f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2208      	movs	r2, #8
 80051fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	69db      	ldr	r3, [r3, #28]
 8005202:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005206:	2b00      	cmp	r3, #0
 8005208:	d003      	beq.n	8005212 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f7fc ff94 	bl	8002138 <HAL_TIM_IC_CaptureCallback>
 8005210:	e005      	b.n	800521e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 fabc 	bl	8005790 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 fac2 	bl	80057a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	f003 0301 	and.w	r3, r3, #1
 800522e:	2b01      	cmp	r3, #1
 8005230:	d10e      	bne.n	8005250 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	f003 0301 	and.w	r3, r3, #1
 800523c:	2b01      	cmp	r3, #1
 800523e:	d107      	bne.n	8005250 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f06f 0201 	mvn.w	r2, #1
 8005248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f7fc fda4 	bl	8001d98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800525a:	2b80      	cmp	r3, #128	; 0x80
 800525c:	d10e      	bne.n	800527c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005268:	2b80      	cmp	r3, #128	; 0x80
 800526a:	d107      	bne.n	800527c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 ff10 	bl	800609c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005286:	2b40      	cmp	r3, #64	; 0x40
 8005288:	d10e      	bne.n	80052a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005294:	2b40      	cmp	r3, #64	; 0x40
 8005296:	d107      	bne.n	80052a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 fa86 	bl	80057b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	f003 0320 	and.w	r3, r3, #32
 80052b2:	2b20      	cmp	r3, #32
 80052b4:	d10e      	bne.n	80052d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	f003 0320 	and.w	r3, r3, #32
 80052c0:	2b20      	cmp	r3, #32
 80052c2:	d107      	bne.n	80052d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f06f 0220 	mvn.w	r2, #32
 80052cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 fedb 	bl	800608a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052d4:	bf00      	nop
 80052d6:	3708      	adds	r7, #8
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	60b9      	str	r1, [r7, #8]
 80052e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d101      	bne.n	80052f6 <HAL_TIM_IC_ConfigChannel+0x1a>
 80052f2:	2302      	movs	r3, #2
 80052f4:	e082      	b.n	80053fc <HAL_TIM_IC_ConfigChannel+0x120>
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2201      	movs	r2, #1
 80052fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d11b      	bne.n	800533c <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6818      	ldr	r0, [r3, #0]
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	6819      	ldr	r1, [r3, #0]
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	685a      	ldr	r2, [r3, #4]
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	f000 fc42 	bl	8005b9c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	699a      	ldr	r2, [r3, #24]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f022 020c 	bic.w	r2, r2, #12
 8005326:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6999      	ldr	r1, [r3, #24]
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	689a      	ldr	r2, [r3, #8]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	430a      	orrs	r2, r1
 8005338:	619a      	str	r2, [r3, #24]
 800533a:	e05a      	b.n	80053f2 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2b04      	cmp	r3, #4
 8005340:	d11c      	bne.n	800537c <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6818      	ldr	r0, [r3, #0]
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	6819      	ldr	r1, [r3, #0]
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	685a      	ldr	r2, [r3, #4]
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	f000 fcab 	bl	8005cac <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	699a      	ldr	r2, [r3, #24]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005364:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	6999      	ldr	r1, [r3, #24]
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	021a      	lsls	r2, r3, #8
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	430a      	orrs	r2, r1
 8005378:	619a      	str	r2, [r3, #24]
 800537a:	e03a      	b.n	80053f2 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2b08      	cmp	r3, #8
 8005380:	d11b      	bne.n	80053ba <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6818      	ldr	r0, [r3, #0]
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	6819      	ldr	r1, [r3, #0]
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	685a      	ldr	r2, [r3, #4]
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	f000 fcf6 	bl	8005d82 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	69da      	ldr	r2, [r3, #28]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f022 020c 	bic.w	r2, r2, #12
 80053a4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	69d9      	ldr	r1, [r3, #28]
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	689a      	ldr	r2, [r3, #8]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	430a      	orrs	r2, r1
 80053b6:	61da      	str	r2, [r3, #28]
 80053b8:	e01b      	b.n	80053f2 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6818      	ldr	r0, [r3, #0]
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	6819      	ldr	r1, [r3, #0]
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	685a      	ldr	r2, [r3, #4]
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	f000 fd15 	bl	8005df8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	69da      	ldr	r2, [r3, #28]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80053dc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	69d9      	ldr	r1, [r3, #28]
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	021a      	lsls	r2, r3, #8
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	430a      	orrs	r2, r1
 80053f0:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3710      	adds	r7, #16
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005416:	2b01      	cmp	r3, #1
 8005418:	d101      	bne.n	800541e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800541a:	2302      	movs	r3, #2
 800541c:	e0ac      	b.n	8005578 <HAL_TIM_PWM_ConfigChannel+0x174>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2201      	movs	r2, #1
 8005422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2b0c      	cmp	r3, #12
 800542a:	f200 809f 	bhi.w	800556c <HAL_TIM_PWM_ConfigChannel+0x168>
 800542e:	a201      	add	r2, pc, #4	; (adr r2, 8005434 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005434:	08005469 	.word	0x08005469
 8005438:	0800556d 	.word	0x0800556d
 800543c:	0800556d 	.word	0x0800556d
 8005440:	0800556d 	.word	0x0800556d
 8005444:	080054a9 	.word	0x080054a9
 8005448:	0800556d 	.word	0x0800556d
 800544c:	0800556d 	.word	0x0800556d
 8005450:	0800556d 	.word	0x0800556d
 8005454:	080054eb 	.word	0x080054eb
 8005458:	0800556d 	.word	0x0800556d
 800545c:	0800556d 	.word	0x0800556d
 8005460:	0800556d 	.word	0x0800556d
 8005464:	0800552b 	.word	0x0800552b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68b9      	ldr	r1, [r7, #8]
 800546e:	4618      	mov	r0, r3
 8005470:	f000 fa0c 	bl	800588c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	699a      	ldr	r2, [r3, #24]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f042 0208 	orr.w	r2, r2, #8
 8005482:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	699a      	ldr	r2, [r3, #24]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f022 0204 	bic.w	r2, r2, #4
 8005492:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	6999      	ldr	r1, [r3, #24]
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	691a      	ldr	r2, [r3, #16]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	430a      	orrs	r2, r1
 80054a4:	619a      	str	r2, [r3, #24]
      break;
 80054a6:	e062      	b.n	800556e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68b9      	ldr	r1, [r7, #8]
 80054ae:	4618      	mov	r0, r3
 80054b0:	f000 fa52 	bl	8005958 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	699a      	ldr	r2, [r3, #24]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	699a      	ldr	r2, [r3, #24]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	6999      	ldr	r1, [r3, #24]
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	021a      	lsls	r2, r3, #8
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	430a      	orrs	r2, r1
 80054e6:	619a      	str	r2, [r3, #24]
      break;
 80054e8:	e041      	b.n	800556e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68b9      	ldr	r1, [r7, #8]
 80054f0:	4618      	mov	r0, r3
 80054f2:	f000 fa9b 	bl	8005a2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	69da      	ldr	r2, [r3, #28]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f042 0208 	orr.w	r2, r2, #8
 8005504:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	69da      	ldr	r2, [r3, #28]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f022 0204 	bic.w	r2, r2, #4
 8005514:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	69d9      	ldr	r1, [r3, #28]
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	691a      	ldr	r2, [r3, #16]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	430a      	orrs	r2, r1
 8005526:	61da      	str	r2, [r3, #28]
      break;
 8005528:	e021      	b.n	800556e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68b9      	ldr	r1, [r7, #8]
 8005530:	4618      	mov	r0, r3
 8005532:	f000 fae5 	bl	8005b00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	69da      	ldr	r2, [r3, #28]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005544:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	69da      	ldr	r2, [r3, #28]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005554:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	69d9      	ldr	r1, [r3, #28]
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	691b      	ldr	r3, [r3, #16]
 8005560:	021a      	lsls	r2, r3, #8
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	430a      	orrs	r2, r1
 8005568:	61da      	str	r2, [r3, #28]
      break;
 800556a:	e000      	b.n	800556e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800556c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	3710      	adds	r7, #16
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005590:	2b01      	cmp	r3, #1
 8005592:	d101      	bne.n	8005598 <HAL_TIM_ConfigClockSource+0x18>
 8005594:	2302      	movs	r3, #2
 8005596:	e0b3      	b.n	8005700 <HAL_TIM_ConfigClockSource+0x180>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2202      	movs	r2, #2
 80055a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80055b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055be:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055d0:	d03e      	beq.n	8005650 <HAL_TIM_ConfigClockSource+0xd0>
 80055d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055d6:	f200 8087 	bhi.w	80056e8 <HAL_TIM_ConfigClockSource+0x168>
 80055da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055de:	f000 8085 	beq.w	80056ec <HAL_TIM_ConfigClockSource+0x16c>
 80055e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055e6:	d87f      	bhi.n	80056e8 <HAL_TIM_ConfigClockSource+0x168>
 80055e8:	2b70      	cmp	r3, #112	; 0x70
 80055ea:	d01a      	beq.n	8005622 <HAL_TIM_ConfigClockSource+0xa2>
 80055ec:	2b70      	cmp	r3, #112	; 0x70
 80055ee:	d87b      	bhi.n	80056e8 <HAL_TIM_ConfigClockSource+0x168>
 80055f0:	2b60      	cmp	r3, #96	; 0x60
 80055f2:	d050      	beq.n	8005696 <HAL_TIM_ConfigClockSource+0x116>
 80055f4:	2b60      	cmp	r3, #96	; 0x60
 80055f6:	d877      	bhi.n	80056e8 <HAL_TIM_ConfigClockSource+0x168>
 80055f8:	2b50      	cmp	r3, #80	; 0x50
 80055fa:	d03c      	beq.n	8005676 <HAL_TIM_ConfigClockSource+0xf6>
 80055fc:	2b50      	cmp	r3, #80	; 0x50
 80055fe:	d873      	bhi.n	80056e8 <HAL_TIM_ConfigClockSource+0x168>
 8005600:	2b40      	cmp	r3, #64	; 0x40
 8005602:	d058      	beq.n	80056b6 <HAL_TIM_ConfigClockSource+0x136>
 8005604:	2b40      	cmp	r3, #64	; 0x40
 8005606:	d86f      	bhi.n	80056e8 <HAL_TIM_ConfigClockSource+0x168>
 8005608:	2b30      	cmp	r3, #48	; 0x30
 800560a:	d064      	beq.n	80056d6 <HAL_TIM_ConfigClockSource+0x156>
 800560c:	2b30      	cmp	r3, #48	; 0x30
 800560e:	d86b      	bhi.n	80056e8 <HAL_TIM_ConfigClockSource+0x168>
 8005610:	2b20      	cmp	r3, #32
 8005612:	d060      	beq.n	80056d6 <HAL_TIM_ConfigClockSource+0x156>
 8005614:	2b20      	cmp	r3, #32
 8005616:	d867      	bhi.n	80056e8 <HAL_TIM_ConfigClockSource+0x168>
 8005618:	2b00      	cmp	r3, #0
 800561a:	d05c      	beq.n	80056d6 <HAL_TIM_ConfigClockSource+0x156>
 800561c:	2b10      	cmp	r3, #16
 800561e:	d05a      	beq.n	80056d6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005620:	e062      	b.n	80056e8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6818      	ldr	r0, [r3, #0]
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	6899      	ldr	r1, [r3, #8]
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	685a      	ldr	r2, [r3, #4]
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	f000 fc37 	bl	8005ea4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005644:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	609a      	str	r2, [r3, #8]
      break;
 800564e:	e04e      	b.n	80056ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6818      	ldr	r0, [r3, #0]
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	6899      	ldr	r1, [r3, #8]
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	685a      	ldr	r2, [r3, #4]
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	f000 fc20 	bl	8005ea4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	689a      	ldr	r2, [r3, #8]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005672:	609a      	str	r2, [r3, #8]
      break;
 8005674:	e03b      	b.n	80056ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6818      	ldr	r0, [r3, #0]
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	6859      	ldr	r1, [r3, #4]
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	461a      	mov	r2, r3
 8005684:	f000 fae4 	bl	8005c50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2150      	movs	r1, #80	; 0x50
 800568e:	4618      	mov	r0, r3
 8005690:	f000 fbee 	bl	8005e70 <TIM_ITRx_SetConfig>
      break;
 8005694:	e02b      	b.n	80056ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6818      	ldr	r0, [r3, #0]
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	6859      	ldr	r1, [r3, #4]
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	461a      	mov	r2, r3
 80056a4:	f000 fb3e 	bl	8005d24 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2160      	movs	r1, #96	; 0x60
 80056ae:	4618      	mov	r0, r3
 80056b0:	f000 fbde 	bl	8005e70 <TIM_ITRx_SetConfig>
      break;
 80056b4:	e01b      	b.n	80056ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6818      	ldr	r0, [r3, #0]
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	6859      	ldr	r1, [r3, #4]
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	461a      	mov	r2, r3
 80056c4:	f000 fac4 	bl	8005c50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2140      	movs	r1, #64	; 0x40
 80056ce:	4618      	mov	r0, r3
 80056d0:	f000 fbce 	bl	8005e70 <TIM_ITRx_SetConfig>
      break;
 80056d4:	e00b      	b.n	80056ee <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4619      	mov	r1, r3
 80056e0:	4610      	mov	r0, r2
 80056e2:	f000 fbc5 	bl	8005e70 <TIM_ITRx_SetConfig>
        break;
 80056e6:	e002      	b.n	80056ee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80056e8:	bf00      	nop
 80056ea:	e000      	b.n	80056ee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80056ec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2201      	movs	r2, #1
 80056f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056fe:	2300      	movs	r3, #0
}
 8005700:	4618      	mov	r0, r3
 8005702:	3710      	adds	r7, #16
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005708:	b480      	push	{r7}
 800570a:	b085      	sub	sp, #20
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005712:	2300      	movs	r3, #0
 8005714:	60fb      	str	r3, [r7, #12]
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	2b0c      	cmp	r3, #12
 800571a:	d831      	bhi.n	8005780 <HAL_TIM_ReadCapturedValue+0x78>
 800571c:	a201      	add	r2, pc, #4	; (adr r2, 8005724 <HAL_TIM_ReadCapturedValue+0x1c>)
 800571e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005722:	bf00      	nop
 8005724:	08005759 	.word	0x08005759
 8005728:	08005781 	.word	0x08005781
 800572c:	08005781 	.word	0x08005781
 8005730:	08005781 	.word	0x08005781
 8005734:	08005763 	.word	0x08005763
 8005738:	08005781 	.word	0x08005781
 800573c:	08005781 	.word	0x08005781
 8005740:	08005781 	.word	0x08005781
 8005744:	0800576d 	.word	0x0800576d
 8005748:	08005781 	.word	0x08005781
 800574c:	08005781 	.word	0x08005781
 8005750:	08005781 	.word	0x08005781
 8005754:	08005777 	.word	0x08005777
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800575e:	60fb      	str	r3, [r7, #12]

      break;
 8005760:	e00f      	b.n	8005782 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005768:	60fb      	str	r3, [r7, #12]

      break;
 800576a:	e00a      	b.n	8005782 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005772:	60fb      	str	r3, [r7, #12]

      break;
 8005774:	e005      	b.n	8005782 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577c:	60fb      	str	r3, [r7, #12]

      break;
 800577e:	e000      	b.n	8005782 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005780:	bf00      	nop
  }

  return tmpreg;
 8005782:	68fb      	ldr	r3, [r7, #12]
}
 8005784:	4618      	mov	r0, r3
 8005786:	3714      	adds	r7, #20
 8005788:	46bd      	mov	sp, r7
 800578a:	bc80      	pop	{r7}
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop

08005790 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005798:	bf00      	nop
 800579a:	370c      	adds	r7, #12
 800579c:	46bd      	mov	sp, r7
 800579e:	bc80      	pop	{r7}
 80057a0:	4770      	bx	lr

080057a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057a2:	b480      	push	{r7}
 80057a4:	b083      	sub	sp, #12
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057aa:	bf00      	nop
 80057ac:	370c      	adds	r7, #12
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bc80      	pop	{r7}
 80057b2:	4770      	bx	lr

080057b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057bc:	bf00      	nop
 80057be:	370c      	adds	r7, #12
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bc80      	pop	{r7}
 80057c4:	4770      	bx	lr
	...

080057c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a29      	ldr	r2, [pc, #164]	; (8005880 <TIM_Base_SetConfig+0xb8>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d00b      	beq.n	80057f8 <TIM_Base_SetConfig+0x30>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057e6:	d007      	beq.n	80057f8 <TIM_Base_SetConfig+0x30>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a26      	ldr	r2, [pc, #152]	; (8005884 <TIM_Base_SetConfig+0xbc>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d003      	beq.n	80057f8 <TIM_Base_SetConfig+0x30>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a25      	ldr	r2, [pc, #148]	; (8005888 <TIM_Base_SetConfig+0xc0>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d108      	bne.n	800580a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	4313      	orrs	r3, r2
 8005808:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a1c      	ldr	r2, [pc, #112]	; (8005880 <TIM_Base_SetConfig+0xb8>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d00b      	beq.n	800582a <TIM_Base_SetConfig+0x62>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005818:	d007      	beq.n	800582a <TIM_Base_SetConfig+0x62>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a19      	ldr	r2, [pc, #100]	; (8005884 <TIM_Base_SetConfig+0xbc>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d003      	beq.n	800582a <TIM_Base_SetConfig+0x62>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a18      	ldr	r2, [pc, #96]	; (8005888 <TIM_Base_SetConfig+0xc0>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d108      	bne.n	800583c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005830:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	4313      	orrs	r3, r2
 800583a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	695b      	ldr	r3, [r3, #20]
 8005846:	4313      	orrs	r3, r2
 8005848:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	689a      	ldr	r2, [r3, #8]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a07      	ldr	r2, [pc, #28]	; (8005880 <TIM_Base_SetConfig+0xb8>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d103      	bne.n	8005870 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	691a      	ldr	r2, [r3, #16]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	615a      	str	r2, [r3, #20]
}
 8005876:	bf00      	nop
 8005878:	3714      	adds	r7, #20
 800587a:	46bd      	mov	sp, r7
 800587c:	bc80      	pop	{r7}
 800587e:	4770      	bx	lr
 8005880:	40012c00 	.word	0x40012c00
 8005884:	40000400 	.word	0x40000400
 8005888:	40000800 	.word	0x40000800

0800588c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800588c:	b480      	push	{r7}
 800588e:	b087      	sub	sp, #28
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a1b      	ldr	r3, [r3, #32]
 800589a:	f023 0201 	bic.w	r2, r3, #1
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a1b      	ldr	r3, [r3, #32]
 80058a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	699b      	ldr	r3, [r3, #24]
 80058b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f023 0303 	bic.w	r3, r3, #3
 80058c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	f023 0302 	bic.w	r3, r3, #2
 80058d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	697a      	ldr	r2, [r7, #20]
 80058dc:	4313      	orrs	r3, r2
 80058de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a1c      	ldr	r2, [pc, #112]	; (8005954 <TIM_OC1_SetConfig+0xc8>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d10c      	bne.n	8005902 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	f023 0308 	bic.w	r3, r3, #8
 80058ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	697a      	ldr	r2, [r7, #20]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	f023 0304 	bic.w	r3, r3, #4
 8005900:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a13      	ldr	r2, [pc, #76]	; (8005954 <TIM_OC1_SetConfig+0xc8>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d111      	bne.n	800592e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005910:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005918:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	695b      	ldr	r3, [r3, #20]
 800591e:	693a      	ldr	r2, [r7, #16]
 8005920:	4313      	orrs	r3, r2
 8005922:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	699b      	ldr	r3, [r3, #24]
 8005928:	693a      	ldr	r2, [r7, #16]
 800592a:	4313      	orrs	r3, r2
 800592c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	693a      	ldr	r2, [r7, #16]
 8005932:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	685a      	ldr	r2, [r3, #4]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	697a      	ldr	r2, [r7, #20]
 8005946:	621a      	str	r2, [r3, #32]
}
 8005948:	bf00      	nop
 800594a:	371c      	adds	r7, #28
 800594c:	46bd      	mov	sp, r7
 800594e:	bc80      	pop	{r7}
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	40012c00 	.word	0x40012c00

08005958 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005958:	b480      	push	{r7}
 800595a:	b087      	sub	sp, #28
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a1b      	ldr	r3, [r3, #32]
 8005966:	f023 0210 	bic.w	r2, r3, #16
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a1b      	ldr	r3, [r3, #32]
 8005972:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	699b      	ldr	r3, [r3, #24]
 800597e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800598e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	021b      	lsls	r3, r3, #8
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	4313      	orrs	r3, r2
 800599a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	f023 0320 	bic.w	r3, r3, #32
 80059a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	011b      	lsls	r3, r3, #4
 80059aa:	697a      	ldr	r2, [r7, #20]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a1d      	ldr	r2, [pc, #116]	; (8005a28 <TIM_OC2_SetConfig+0xd0>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d10d      	bne.n	80059d4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	011b      	lsls	r3, r3, #4
 80059c6:	697a      	ldr	r2, [r7, #20]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4a14      	ldr	r2, [pc, #80]	; (8005a28 <TIM_OC2_SetConfig+0xd0>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d113      	bne.n	8005a04 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	695b      	ldr	r3, [r3, #20]
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	693a      	ldr	r2, [r7, #16]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	699b      	ldr	r3, [r3, #24]
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	693a      	ldr	r2, [r7, #16]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	693a      	ldr	r2, [r7, #16]
 8005a08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	685a      	ldr	r2, [r3, #4]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	697a      	ldr	r2, [r7, #20]
 8005a1c:	621a      	str	r2, [r3, #32]
}
 8005a1e:	bf00      	nop
 8005a20:	371c      	adds	r7, #28
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bc80      	pop	{r7}
 8005a26:	4770      	bx	lr
 8005a28:	40012c00 	.word	0x40012c00

08005a2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b087      	sub	sp, #28
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a1b      	ldr	r3, [r3, #32]
 8005a3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a1b      	ldr	r3, [r3, #32]
 8005a46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	69db      	ldr	r3, [r3, #28]
 8005a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f023 0303 	bic.w	r3, r3, #3
 8005a62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	021b      	lsls	r3, r3, #8
 8005a7c:	697a      	ldr	r2, [r7, #20]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a1d      	ldr	r2, [pc, #116]	; (8005afc <TIM_OC3_SetConfig+0xd0>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d10d      	bne.n	8005aa6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	021b      	lsls	r3, r3, #8
 8005a98:	697a      	ldr	r2, [r7, #20]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005aa4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a14      	ldr	r2, [pc, #80]	; (8005afc <TIM_OC3_SetConfig+0xd0>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d113      	bne.n	8005ad6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ab4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005abc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	695b      	ldr	r3, [r3, #20]
 8005ac2:	011b      	lsls	r3, r3, #4
 8005ac4:	693a      	ldr	r2, [r7, #16]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	699b      	ldr	r3, [r3, #24]
 8005ace:	011b      	lsls	r3, r3, #4
 8005ad0:	693a      	ldr	r2, [r7, #16]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	693a      	ldr	r2, [r7, #16]
 8005ada:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	685a      	ldr	r2, [r3, #4]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	697a      	ldr	r2, [r7, #20]
 8005aee:	621a      	str	r2, [r3, #32]
}
 8005af0:	bf00      	nop
 8005af2:	371c      	adds	r7, #28
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bc80      	pop	{r7}
 8005af8:	4770      	bx	lr
 8005afa:	bf00      	nop
 8005afc:	40012c00 	.word	0x40012c00

08005b00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b087      	sub	sp, #28
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a1b      	ldr	r3, [r3, #32]
 8005b0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a1b      	ldr	r3, [r3, #32]
 8005b1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	69db      	ldr	r3, [r3, #28]
 8005b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	021b      	lsls	r3, r3, #8
 8005b3e:	68fa      	ldr	r2, [r7, #12]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	031b      	lsls	r3, r3, #12
 8005b52:	693a      	ldr	r2, [r7, #16]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a0f      	ldr	r2, [pc, #60]	; (8005b98 <TIM_OC4_SetConfig+0x98>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d109      	bne.n	8005b74 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	695b      	ldr	r3, [r3, #20]
 8005b6c:	019b      	lsls	r3, r3, #6
 8005b6e:	697a      	ldr	r2, [r7, #20]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	685a      	ldr	r2, [r3, #4]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	693a      	ldr	r2, [r7, #16]
 8005b8c:	621a      	str	r2, [r3, #32]
}
 8005b8e:	bf00      	nop
 8005b90:	371c      	adds	r7, #28
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bc80      	pop	{r7}
 8005b96:	4770      	bx	lr
 8005b98:	40012c00 	.word	0x40012c00

08005b9c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b087      	sub	sp, #28
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	607a      	str	r2, [r7, #4]
 8005ba8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	6a1b      	ldr	r3, [r3, #32]
 8005bae:	f023 0201 	bic.w	r2, r3, #1
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	699b      	ldr	r3, [r3, #24]
 8005bba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6a1b      	ldr	r3, [r3, #32]
 8005bc0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	4a1f      	ldr	r2, [pc, #124]	; (8005c44 <TIM_TI1_SetConfig+0xa8>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d00b      	beq.n	8005be2 <TIM_TI1_SetConfig+0x46>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bd0:	d007      	beq.n	8005be2 <TIM_TI1_SetConfig+0x46>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	4a1c      	ldr	r2, [pc, #112]	; (8005c48 <TIM_TI1_SetConfig+0xac>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d003      	beq.n	8005be2 <TIM_TI1_SetConfig+0x46>
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	4a1b      	ldr	r2, [pc, #108]	; (8005c4c <TIM_TI1_SetConfig+0xb0>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d101      	bne.n	8005be6 <TIM_TI1_SetConfig+0x4a>
 8005be2:	2301      	movs	r3, #1
 8005be4:	e000      	b.n	8005be8 <TIM_TI1_SetConfig+0x4c>
 8005be6:	2300      	movs	r3, #0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d008      	beq.n	8005bfe <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	f023 0303 	bic.w	r3, r3, #3
 8005bf2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005bf4:	697a      	ldr	r2, [r7, #20]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	617b      	str	r3, [r7, #20]
 8005bfc:	e003      	b.n	8005c06 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	f043 0301 	orr.w	r3, r3, #1
 8005c04:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	011b      	lsls	r3, r3, #4
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	697a      	ldr	r2, [r7, #20]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	f023 030a 	bic.w	r3, r3, #10
 8005c20:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	f003 030a 	and.w	r3, r3, #10
 8005c28:	693a      	ldr	r2, [r7, #16]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	697a      	ldr	r2, [r7, #20]
 8005c32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	693a      	ldr	r2, [r7, #16]
 8005c38:	621a      	str	r2, [r3, #32]
}
 8005c3a:	bf00      	nop
 8005c3c:	371c      	adds	r7, #28
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bc80      	pop	{r7}
 8005c42:	4770      	bx	lr
 8005c44:	40012c00 	.word	0x40012c00
 8005c48:	40000400 	.word	0x40000400
 8005c4c:	40000800 	.word	0x40000800

08005c50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b087      	sub	sp, #28
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6a1b      	ldr	r3, [r3, #32]
 8005c60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	6a1b      	ldr	r3, [r3, #32]
 8005c66:	f023 0201 	bic.w	r2, r3, #1
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	699b      	ldr	r3, [r3, #24]
 8005c72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	011b      	lsls	r3, r3, #4
 8005c80:	693a      	ldr	r2, [r7, #16]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	f023 030a 	bic.w	r3, r3, #10
 8005c8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c8e:	697a      	ldr	r2, [r7, #20]
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	693a      	ldr	r2, [r7, #16]
 8005c9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	697a      	ldr	r2, [r7, #20]
 8005ca0:	621a      	str	r2, [r3, #32]
}
 8005ca2:	bf00      	nop
 8005ca4:	371c      	adds	r7, #28
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bc80      	pop	{r7}
 8005caa:	4770      	bx	lr

08005cac <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b087      	sub	sp, #28
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	607a      	str	r2, [r7, #4]
 8005cb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6a1b      	ldr	r3, [r3, #32]
 8005cbe:	f023 0210 	bic.w	r2, r3, #16
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	699b      	ldr	r3, [r3, #24]
 8005cca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6a1b      	ldr	r3, [r3, #32]
 8005cd0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cd8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	021b      	lsls	r3, r3, #8
 8005cde:	697a      	ldr	r2, [r7, #20]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005cea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	031b      	lsls	r3, r3, #12
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	697a      	ldr	r2, [r7, #20]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005cfe:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	011b      	lsls	r3, r3, #4
 8005d04:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005d08:	693a      	ldr	r2, [r7, #16]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	697a      	ldr	r2, [r7, #20]
 8005d12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	693a      	ldr	r2, [r7, #16]
 8005d18:	621a      	str	r2, [r3, #32]
}
 8005d1a:	bf00      	nop
 8005d1c:	371c      	adds	r7, #28
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bc80      	pop	{r7}
 8005d22:	4770      	bx	lr

08005d24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b087      	sub	sp, #28
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6a1b      	ldr	r3, [r3, #32]
 8005d34:	f023 0210 	bic.w	r2, r3, #16
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	699b      	ldr	r3, [r3, #24]
 8005d40:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d4e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	031b      	lsls	r3, r3, #12
 8005d54:	697a      	ldr	r2, [r7, #20]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d60:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	011b      	lsls	r3, r3, #4
 8005d66:	693a      	ldr	r2, [r7, #16]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	697a      	ldr	r2, [r7, #20]
 8005d70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	693a      	ldr	r2, [r7, #16]
 8005d76:	621a      	str	r2, [r3, #32]
}
 8005d78:	bf00      	nop
 8005d7a:	371c      	adds	r7, #28
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bc80      	pop	{r7}
 8005d80:	4770      	bx	lr

08005d82 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005d82:	b480      	push	{r7}
 8005d84:	b087      	sub	sp, #28
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	60f8      	str	r0, [r7, #12]
 8005d8a:	60b9      	str	r1, [r7, #8]
 8005d8c:	607a      	str	r2, [r7, #4]
 8005d8e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6a1b      	ldr	r3, [r3, #32]
 8005d94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	69db      	ldr	r3, [r3, #28]
 8005da0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6a1b      	ldr	r3, [r3, #32]
 8005da6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	f023 0303 	bic.w	r3, r3, #3
 8005dae:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005db0:	697a      	ldr	r2, [r7, #20]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005dbe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	011b      	lsls	r3, r3, #4
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	697a      	ldr	r2, [r7, #20]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005dd2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	021b      	lsls	r3, r3, #8
 8005dd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ddc:	693a      	ldr	r2, [r7, #16]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	697a      	ldr	r2, [r7, #20]
 8005de6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	693a      	ldr	r2, [r7, #16]
 8005dec:	621a      	str	r2, [r3, #32]
}
 8005dee:	bf00      	nop
 8005df0:	371c      	adds	r7, #28
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bc80      	pop	{r7}
 8005df6:	4770      	bx	lr

08005df8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b087      	sub	sp, #28
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	607a      	str	r2, [r7, #4]
 8005e04:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6a1b      	ldr	r3, [r3, #32]
 8005e0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	69db      	ldr	r3, [r3, #28]
 8005e16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6a1b      	ldr	r3, [r3, #32]
 8005e1c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e24:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	021b      	lsls	r3, r3, #8
 8005e2a:	697a      	ldr	r2, [r7, #20]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e36:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	031b      	lsls	r3, r3, #12
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	697a      	ldr	r2, [r7, #20]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e4a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	031b      	lsls	r3, r3, #12
 8005e50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e54:	693a      	ldr	r2, [r7, #16]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	693a      	ldr	r2, [r7, #16]
 8005e64:	621a      	str	r2, [r3, #32]
}
 8005e66:	bf00      	nop
 8005e68:	371c      	adds	r7, #28
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bc80      	pop	{r7}
 8005e6e:	4770      	bx	lr

08005e70 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b085      	sub	sp, #20
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e86:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e88:	683a      	ldr	r2, [r7, #0]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	f043 0307 	orr.w	r3, r3, #7
 8005e92:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	609a      	str	r2, [r3, #8]
}
 8005e9a:	bf00      	nop
 8005e9c:	3714      	adds	r7, #20
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bc80      	pop	{r7}
 8005ea2:	4770      	bx	lr

08005ea4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b087      	sub	sp, #28
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	607a      	str	r2, [r7, #4]
 8005eb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ebe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	021a      	lsls	r2, r3, #8
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	431a      	orrs	r2, r3
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	697a      	ldr	r2, [r7, #20]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	697a      	ldr	r2, [r7, #20]
 8005ed6:	609a      	str	r2, [r3, #8]
}
 8005ed8:	bf00      	nop
 8005eda:	371c      	adds	r7, #28
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bc80      	pop	{r7}
 8005ee0:	4770      	bx	lr

08005ee2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ee2:	b480      	push	{r7}
 8005ee4:	b087      	sub	sp, #28
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	60f8      	str	r0, [r7, #12]
 8005eea:	60b9      	str	r1, [r7, #8]
 8005eec:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	f003 031f 	and.w	r3, r3, #31
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8005efa:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6a1a      	ldr	r2, [r3, #32]
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	43db      	mvns	r3, r3
 8005f04:	401a      	ands	r2, r3
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6a1a      	ldr	r2, [r3, #32]
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	f003 031f 	and.w	r3, r3, #31
 8005f14:	6879      	ldr	r1, [r7, #4]
 8005f16:	fa01 f303 	lsl.w	r3, r1, r3
 8005f1a:	431a      	orrs	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	621a      	str	r2, [r3, #32]
}
 8005f20:	bf00      	nop
 8005f22:	371c      	adds	r7, #28
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bc80      	pop	{r7}
 8005f28:	4770      	bx	lr
	...

08005f2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b085      	sub	sp, #20
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d101      	bne.n	8005f44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f40:	2302      	movs	r3, #2
 8005f42:	e046      	b.n	8005fd2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2202      	movs	r2, #2
 8005f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a16      	ldr	r2, [pc, #88]	; (8005fdc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d00e      	beq.n	8005fa6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f90:	d009      	beq.n	8005fa6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a12      	ldr	r2, [pc, #72]	; (8005fe0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d004      	beq.n	8005fa6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a10      	ldr	r2, [pc, #64]	; (8005fe4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d10c      	bne.n	8005fc0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	68ba      	ldr	r2, [r7, #8]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68ba      	ldr	r2, [r7, #8]
 8005fbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3714      	adds	r7, #20
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bc80      	pop	{r7}
 8005fda:	4770      	bx	lr
 8005fdc:	40012c00 	.word	0x40012c00
 8005fe0:	40000400 	.word	0x40000400
 8005fe4:	40000800 	.word	0x40000800

08005fe8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d101      	bne.n	8006004 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006000:	2302      	movs	r3, #2
 8006002:	e03d      	b.n	8006080 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	4313      	orrs	r3, r2
 8006018:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	4313      	orrs	r3, r2
 8006026:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	4313      	orrs	r3, r2
 8006034:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4313      	orrs	r3, r2
 8006042:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	4313      	orrs	r3, r2
 8006050:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	695b      	ldr	r3, [r3, #20]
 800605c:	4313      	orrs	r3, r2
 800605e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	69db      	ldr	r3, [r3, #28]
 800606a:	4313      	orrs	r3, r2
 800606c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	68fa      	ldr	r2, [r7, #12]
 8006074:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800607e:	2300      	movs	r3, #0
}
 8006080:	4618      	mov	r0, r3
 8006082:	3714      	adds	r7, #20
 8006084:	46bd      	mov	sp, r7
 8006086:	bc80      	pop	{r7}
 8006088:	4770      	bx	lr

0800608a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800608a:	b480      	push	{r7}
 800608c:	b083      	sub	sp, #12
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006092:	bf00      	nop
 8006094:	370c      	adds	r7, #12
 8006096:	46bd      	mov	sp, r7
 8006098:	bc80      	pop	{r7}
 800609a:	4770      	bx	lr

0800609c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80060a4:	bf00      	nop
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bc80      	pop	{r7}
 80060ac:	4770      	bx	lr

080060ae <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b082      	sub	sp, #8
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d101      	bne.n	80060c0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	e03f      	b.n	8006140 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d106      	bne.n	80060da <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f7fc fc4f 	bl	8002978 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2224      	movs	r2, #36	; 0x24
 80060de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68da      	ldr	r2, [r3, #12]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060f0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 f904 	bl	8006300 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	691a      	ldr	r2, [r3, #16]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006106:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	695a      	ldr	r2, [r3, #20]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006116:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68da      	ldr	r2, [r3, #12]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006126:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2220      	movs	r2, #32
 8006132:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2220      	movs	r2, #32
 800613a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	3708      	adds	r7, #8
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b08a      	sub	sp, #40	; 0x28
 800614c:	af02      	add	r7, sp, #8
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	603b      	str	r3, [r7, #0]
 8006154:	4613      	mov	r3, r2
 8006156:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006158:	2300      	movs	r3, #0
 800615a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006162:	b2db      	uxtb	r3, r3
 8006164:	2b20      	cmp	r3, #32
 8006166:	d17c      	bne.n	8006262 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d002      	beq.n	8006174 <HAL_UART_Transmit+0x2c>
 800616e:	88fb      	ldrh	r3, [r7, #6]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d101      	bne.n	8006178 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	e075      	b.n	8006264 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800617e:	2b01      	cmp	r3, #1
 8006180:	d101      	bne.n	8006186 <HAL_UART_Transmit+0x3e>
 8006182:	2302      	movs	r3, #2
 8006184:	e06e      	b.n	8006264 <HAL_UART_Transmit+0x11c>
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2201      	movs	r2, #1
 800618a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2200      	movs	r2, #0
 8006192:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2221      	movs	r2, #33	; 0x21
 8006198:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800619c:	f7fc fd4e 	bl	8002c3c <HAL_GetTick>
 80061a0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	88fa      	ldrh	r2, [r7, #6]
 80061a6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	88fa      	ldrh	r2, [r7, #6]
 80061ac:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061b6:	d108      	bne.n	80061ca <HAL_UART_Transmit+0x82>
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	691b      	ldr	r3, [r3, #16]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d104      	bne.n	80061ca <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80061c0:	2300      	movs	r3, #0
 80061c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	61bb      	str	r3, [r7, #24]
 80061c8:	e003      	b.n	80061d2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061ce:	2300      	movs	r3, #0
 80061d0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80061da:	e02a      	b.n	8006232 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	9300      	str	r3, [sp, #0]
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	2200      	movs	r2, #0
 80061e4:	2180      	movs	r1, #128	; 0x80
 80061e6:	68f8      	ldr	r0, [r7, #12]
 80061e8:	f000 f840 	bl	800626c <UART_WaitOnFlagUntilTimeout>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d001      	beq.n	80061f6 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80061f2:	2303      	movs	r3, #3
 80061f4:	e036      	b.n	8006264 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d10b      	bne.n	8006214 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061fc:	69bb      	ldr	r3, [r7, #24]
 80061fe:	881b      	ldrh	r3, [r3, #0]
 8006200:	461a      	mov	r2, r3
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800620a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	3302      	adds	r3, #2
 8006210:	61bb      	str	r3, [r7, #24]
 8006212:	e007      	b.n	8006224 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	781a      	ldrb	r2, [r3, #0]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	3301      	adds	r3, #1
 8006222:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006228:	b29b      	uxth	r3, r3
 800622a:	3b01      	subs	r3, #1
 800622c:	b29a      	uxth	r2, r3
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006236:	b29b      	uxth	r3, r3
 8006238:	2b00      	cmp	r3, #0
 800623a:	d1cf      	bne.n	80061dc <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	9300      	str	r3, [sp, #0]
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	2200      	movs	r2, #0
 8006244:	2140      	movs	r1, #64	; 0x40
 8006246:	68f8      	ldr	r0, [r7, #12]
 8006248:	f000 f810 	bl	800626c <UART_WaitOnFlagUntilTimeout>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d001      	beq.n	8006256 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006252:	2303      	movs	r3, #3
 8006254:	e006      	b.n	8006264 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2220      	movs	r2, #32
 800625a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800625e:	2300      	movs	r3, #0
 8006260:	e000      	b.n	8006264 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006262:	2302      	movs	r3, #2
  }
}
 8006264:	4618      	mov	r0, r3
 8006266:	3720      	adds	r7, #32
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	603b      	str	r3, [r7, #0]
 8006278:	4613      	mov	r3, r2
 800627a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800627c:	e02c      	b.n	80062d8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006284:	d028      	beq.n	80062d8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d007      	beq.n	800629c <UART_WaitOnFlagUntilTimeout+0x30>
 800628c:	f7fc fcd6 	bl	8002c3c <HAL_GetTick>
 8006290:	4602      	mov	r2, r0
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	1ad3      	subs	r3, r2, r3
 8006296:	69ba      	ldr	r2, [r7, #24]
 8006298:	429a      	cmp	r2, r3
 800629a:	d21d      	bcs.n	80062d8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68da      	ldr	r2, [r3, #12]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80062aa:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	695a      	ldr	r2, [r3, #20]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f022 0201 	bic.w	r2, r2, #1
 80062ba:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2220      	movs	r2, #32
 80062c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2220      	movs	r2, #32
 80062c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80062d4:	2303      	movs	r3, #3
 80062d6:	e00f      	b.n	80062f8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	4013      	ands	r3, r2
 80062e2:	68ba      	ldr	r2, [r7, #8]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	bf0c      	ite	eq
 80062e8:	2301      	moveq	r3, #1
 80062ea:	2300      	movne	r3, #0
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	461a      	mov	r2, r3
 80062f0:	79fb      	ldrb	r3, [r7, #7]
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d0c3      	beq.n	800627e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80062f6:	2300      	movs	r3, #0
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3710      	adds	r7, #16
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}

08006300 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	68da      	ldr	r2, [r3, #12]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	430a      	orrs	r2, r1
 800631c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	689a      	ldr	r2, [r3, #8]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	431a      	orrs	r2, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	695b      	ldr	r3, [r3, #20]
 800632c:	4313      	orrs	r3, r2
 800632e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800633a:	f023 030c 	bic.w	r3, r3, #12
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	6812      	ldr	r2, [r2, #0]
 8006342:	68b9      	ldr	r1, [r7, #8]
 8006344:	430b      	orrs	r3, r1
 8006346:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	695b      	ldr	r3, [r3, #20]
 800634e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	699a      	ldr	r2, [r3, #24]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	430a      	orrs	r2, r1
 800635c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a2c      	ldr	r2, [pc, #176]	; (8006414 <UART_SetConfig+0x114>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d103      	bne.n	8006370 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006368:	f7fe fb42 	bl	80049f0 <HAL_RCC_GetPCLK2Freq>
 800636c:	60f8      	str	r0, [r7, #12]
 800636e:	e002      	b.n	8006376 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006370:	f7fe fb2a 	bl	80049c8 <HAL_RCC_GetPCLK1Freq>
 8006374:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	4613      	mov	r3, r2
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	4413      	add	r3, r2
 800637e:	009a      	lsls	r2, r3, #2
 8006380:	441a      	add	r2, r3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	fbb2 f3f3 	udiv	r3, r2, r3
 800638c:	4a22      	ldr	r2, [pc, #136]	; (8006418 <UART_SetConfig+0x118>)
 800638e:	fba2 2303 	umull	r2, r3, r2, r3
 8006392:	095b      	lsrs	r3, r3, #5
 8006394:	0119      	lsls	r1, r3, #4
 8006396:	68fa      	ldr	r2, [r7, #12]
 8006398:	4613      	mov	r3, r2
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	4413      	add	r3, r2
 800639e:	009a      	lsls	r2, r3, #2
 80063a0:	441a      	add	r2, r3
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80063ac:	4b1a      	ldr	r3, [pc, #104]	; (8006418 <UART_SetConfig+0x118>)
 80063ae:	fba3 0302 	umull	r0, r3, r3, r2
 80063b2:	095b      	lsrs	r3, r3, #5
 80063b4:	2064      	movs	r0, #100	; 0x64
 80063b6:	fb00 f303 	mul.w	r3, r0, r3
 80063ba:	1ad3      	subs	r3, r2, r3
 80063bc:	011b      	lsls	r3, r3, #4
 80063be:	3332      	adds	r3, #50	; 0x32
 80063c0:	4a15      	ldr	r2, [pc, #84]	; (8006418 <UART_SetConfig+0x118>)
 80063c2:	fba2 2303 	umull	r2, r3, r2, r3
 80063c6:	095b      	lsrs	r3, r3, #5
 80063c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063cc:	4419      	add	r1, r3
 80063ce:	68fa      	ldr	r2, [r7, #12]
 80063d0:	4613      	mov	r3, r2
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	4413      	add	r3, r2
 80063d6:	009a      	lsls	r2, r3, #2
 80063d8:	441a      	add	r2, r3
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80063e4:	4b0c      	ldr	r3, [pc, #48]	; (8006418 <UART_SetConfig+0x118>)
 80063e6:	fba3 0302 	umull	r0, r3, r3, r2
 80063ea:	095b      	lsrs	r3, r3, #5
 80063ec:	2064      	movs	r0, #100	; 0x64
 80063ee:	fb00 f303 	mul.w	r3, r0, r3
 80063f2:	1ad3      	subs	r3, r2, r3
 80063f4:	011b      	lsls	r3, r3, #4
 80063f6:	3332      	adds	r3, #50	; 0x32
 80063f8:	4a07      	ldr	r2, [pc, #28]	; (8006418 <UART_SetConfig+0x118>)
 80063fa:	fba2 2303 	umull	r2, r3, r2, r3
 80063fe:	095b      	lsrs	r3, r3, #5
 8006400:	f003 020f 	and.w	r2, r3, #15
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	440a      	add	r2, r1
 800640a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800640c:	bf00      	nop
 800640e:	3710      	adds	r7, #16
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}
 8006414:	40013800 	.word	0x40013800
 8006418:	51eb851f 	.word	0x51eb851f
 800641c:	00000000 	.word	0x00000000

08006420 <_ZN10ControllerC1Ev>:
    float angles[3];
    float rates[3];
    float bias[3];
};

Controller::Controller() {}
 8006420:	b580      	push	{r7, lr}
 8006422:	b082      	sub	sp, #8
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4a3b      	ldr	r2, [pc, #236]	; (8006518 <_ZN10ControllerC1Ev+0xf8>)
 800642c:	651a      	str	r2, [r3, #80]	; 0x50
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a3a      	ldr	r2, [pc, #232]	; (800651c <_ZN10ControllerC1Ev+0xfc>)
 8006432:	655a      	str	r2, [r3, #84]	; 0x54
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	22c8      	movs	r2, #200	; 0xc8
 8006438:	659a      	str	r2, [r3, #88]	; 0x58
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800643e:	4618      	mov	r0, r3
 8006440:	f7fa fc0e 	bl	8000c60 <__aeabi_i2f>
 8006444:	4603      	mov	r3, r0
 8006446:	4619      	mov	r1, r3
 8006448:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800644c:	f7fa fd10 	bl	8000e70 <__aeabi_fdiv>
 8006450:	4603      	mov	r3, r0
 8006452:	461a      	mov	r2, r3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	65da      	str	r2, [r3, #92]	; 0x5c
 8006458:	6879      	ldr	r1, [r7, #4]
 800645a:	a32b      	add	r3, pc, #172	; (adr r3, 8006508 <_ZN10ControllerC1Ev+0xe8>)
 800645c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006460:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 8006464:	6879      	ldr	r1, [r7, #4]
 8006466:	f04f 0200 	mov.w	r2, #0
 800646a:	f04f 0300 	mov.w	r3, #0
 800646e:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8006472:	6879      	ldr	r1, [r7, #4]
 8006474:	f04f 0200 	mov.w	r2, #0
 8006478:	f04f 0300 	mov.w	r3, #0
 800647c:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8006486:	6879      	ldr	r1, [r7, #4]
 8006488:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8006492:	6879      	ldr	r1, [r7, #4]
 8006494:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 800649e:	6879      	ldr	r1, [r7, #4]
 80064a0:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
 80064a4:	6879      	ldr	r1, [r7, #4]
 80064a6:	f04f 0200 	mov.w	r2, #0
 80064aa:	4b1d      	ldr	r3, [pc, #116]	; (8006520 <_ZN10ControllerC1Ev+0x100>)
 80064ac:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064b4:	4618      	mov	r0, r3
 80064b6:	f7f9 ff9d 	bl	80003f4 <__aeabi_i2d>
 80064ba:	a315      	add	r3, pc, #84	; (adr r3, 8006510 <_ZN10ControllerC1Ev+0xf0>)
 80064bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c0:	f7fa f802 	bl	80004c8 <__aeabi_dmul>
 80064c4:	4602      	mov	r2, r0
 80064c6:	460b      	mov	r3, r1
 80064c8:	4610      	mov	r0, r2
 80064ca:	4619      	mov	r1, r3
 80064cc:	f7fa fabe 	bl	8000a4c <__aeabi_d2f>
 80064d0:	4602      	mov	r2, r0
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	33d0      	adds	r3, #208	; 0xd0
 80064dc:	4618      	mov	r0, r3
 80064de:	f001 fa8d 	bl	80079fc <_ZN3PIDC1Ev>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80064e8:	4618      	mov	r0, r3
 80064ea:	f001 fa87 	bl	80079fc <_ZN3PIDC1Ev>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 80064f4:	4618      	mov	r0, r3
 80064f6:	f001 fa81 	bl	80079fc <_ZN3PIDC1Ev>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4618      	mov	r0, r3
 80064fe:	3708      	adds	r7, #8
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}
 8006504:	f3af 8000 	nop.w
 8006508:	66666666 	.word	0x66666666
 800650c:	3fd66666 	.word	0x3fd66666
 8006510:	3126e979 	.word	0x3126e979
 8006514:	3f9cac08 	.word	0x3f9cac08
 8006518:	44c1c000 	.word	0x44c1c000
 800651c:	42654ca3 	.word	0x42654ca3
 8006520:	400c0000 	.word	0x400c0000

08006524 <_ZN10Controller3RunE5stateS0_i>:

std::vector<double> Controller::Run (struct state state, struct state state_des, int thr) {
 8006524:	b082      	sub	sp, #8
 8006526:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800652a:	b09f      	sub	sp, #124	; 0x7c
 800652c:	af08      	add	r7, sp, #32
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8006536:	e881 000c 	stmia.w	r1, {r2, r3}
        //printf("\ngyroX: %.2f",gyro[0]);
        //printf("\naccX: %.2f",acc[0]);
        
        roll  = state.angles[0];
 800653a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800653e:	4618      	mov	r0, r3
 8006540:	f7f9 ff6a 	bl	8000418 <__aeabi_f2d>
 8006544:	4602      	mov	r2, r0
 8006546:	460b      	mov	r3, r1
 8006548:	68b9      	ldr	r1, [r7, #8]
 800654a:	e9c1 2304 	strd	r2, r3, [r1, #16]
        pitch = state.angles[1];
 800654e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006552:	4618      	mov	r0, r3
 8006554:	f7f9 ff60 	bl	8000418 <__aeabi_f2d>
 8006558:	4602      	mov	r2, r0
 800655a:	460b      	mov	r3, r1
 800655c:	68b9      	ldr	r1, [r7, #8]
 800655e:	e9c1 2306 	strd	r2, r3, [r1, #24]
        yaw    = state.angles[2];
 8006562:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006566:	4618      	mov	r0, r3
 8006568:	f7f9 ff56 	bl	8000418 <__aeabi_f2d>
 800656c:	4602      	mov	r2, r0
 800656e:	460b      	mov	r3, r1
 8006570:	68b9      	ldr	r1, [r7, #8]
 8006572:	e9c1 2308 	strd	r2, r3, [r1, #32]
        //printf("\nroll: %.2f",roll);
        //printf("\npitch: %.2f",pitch);

        roll_rate  = state.rates[0];
 8006576:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800657a:	4618      	mov	r0, r3
 800657c:	f7f9 ff4c 	bl	8000418 <__aeabi_f2d>
 8006580:	4602      	mov	r2, r0
 8006582:	460b      	mov	r3, r1
 8006584:	68b9      	ldr	r1, [r7, #8]
 8006586:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
        pitch_rate = state.rates[1];
 800658a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800658e:	4618      	mov	r0, r3
 8006590:	f7f9 ff42 	bl	8000418 <__aeabi_f2d>
 8006594:	4602      	mov	r2, r0
 8006596:	460b      	mov	r3, r1
 8006598:	68b9      	ldr	r1, [r7, #8]
 800659a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
        yaw_rate   = state.rates[2];
 800659e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80065a2:	4618      	mov	r0, r3
 80065a4:	f7f9 ff38 	bl	8000418 <__aeabi_f2d>
 80065a8:	4602      	mov	r2, r0
 80065aa:	460b      	mov	r3, r1
 80065ac:	68b9      	ldr	r1, [r7, #8]
 80065ae:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

        roll_bias = state.bias[0];
 80065b2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	605a      	str	r2, [r3, #4]
        pitch_bias = state.bias[1];
 80065ba:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	601a      	str	r2, [r3, #0]
        yaw_bias = state.bias[2];
 80065c2:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	609a      	str	r2, [r3, #8]
        
        float roll_des     = state_des.angles[0];
 80065ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80065ce:	657b      	str	r3, [r7, #84]	; 0x54
        float pitch_des 	 = state_des.angles[1];
 80065d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80065d4:	653b      	str	r3, [r7, #80]	; 0x50
        float yaw_rate_des = state_des.rates[2];
 80065d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80065da:	64fb      	str	r3, [r7, #76]	; 0x4c

    roll_rate_des = pid_roll.P_Angle(roll_des,roll, Kp_angle);
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	f103 06d0 	add.w	r6, r3, #208	; 0xd0
 80065e2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80065e4:	f7f9 ff18 	bl	8000418 <__aeabi_f2d>
 80065e8:	4680      	mov	r8, r0
 80065ea:	4689      	mov	r9, r1
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80065f8:	4618      	mov	r0, r3
 80065fa:	f7f9 ff0d 	bl	8000418 <__aeabi_f2d>
 80065fe:	4602      	mov	r2, r0
 8006600:	460b      	mov	r3, r1
 8006602:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006606:	e9cd 4500 	strd	r4, r5, [sp]
 800660a:	4642      	mov	r2, r8
 800660c:	464b      	mov	r3, r9
 800660e:	4630      	mov	r0, r6
 8006610:	f001 fa24 	bl	8007a5c <_ZN3PID7P_AngleEddd>
 8006614:	4602      	mov	r2, r0
 8006616:	460b      	mov	r3, r1
 8006618:	4610      	mov	r0, r2
 800661a:	4619      	mov	r1, r3
 800661c:	f7fa fa16 	bl	8000a4c <__aeabi_d2f>
 8006620:	4602      	mov	r2, r0
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    pitch_rate_des = pid_pitch.P_Angle(pitch_des,pitch, Kp_angle);
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	f503 76a0 	add.w	r6, r3, #320	; 0x140
 800662e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006630:	f7f9 fef2 	bl	8000418 <__aeabi_f2d>
 8006634:	4680      	mov	r8, r0
 8006636:	4689      	mov	r9, r1
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006644:	4618      	mov	r0, r3
 8006646:	f7f9 fee7 	bl	8000418 <__aeabi_f2d>
 800664a:	4602      	mov	r2, r0
 800664c:	460b      	mov	r3, r1
 800664e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006652:	e9cd 4500 	strd	r4, r5, [sp]
 8006656:	4642      	mov	r2, r8
 8006658:	464b      	mov	r3, r9
 800665a:	4630      	mov	r0, r6
 800665c:	f001 f9fe 	bl	8007a5c <_ZN3PID7P_AngleEddd>
 8006660:	4602      	mov	r2, r0
 8006662:	460b      	mov	r3, r1
 8006664:	4610      	mov	r0, r2
 8006666:	4619      	mov	r1, r3
 8006668:	f7fa f9f0 	bl	8000a4c <__aeabi_d2f>
 800666c:	4602      	mov	r2, r0
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
/*
    //printf("\nroll_rate_des: %.2f",roll_rate_des);
    //printf("\npitch_rate_des: %.2f",pitch_rate_des);
    //printf("\nyaw_rate_des: %.2f",yaw_rate_des);
*/  //printf("\nroll_rate_des: %.2f",roll_rate_des);
    pd_roll  = pid_roll.PD_Rate(roll_rate_des,roll_rate, Kp_roll, Ki_roll, Kd_roll);
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	33d0      	adds	r3, #208	; 0xd0
 8006678:	607b      	str	r3, [r7, #4]
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8006680:	4618      	mov	r0, r3
 8006682:	f7f9 fec9 	bl	8000418 <__aeabi_f2d>
 8006686:	4682      	mov	sl, r0
 8006688:	468b      	mov	fp, r1
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8006690:	68b9      	ldr	r1, [r7, #8]
 8006692:	e9d1 0118 	ldrd	r0, r1, [r1, #96]	; 0x60
 8006696:	68bc      	ldr	r4, [r7, #8]
 8006698:	f104 0568 	add.w	r5, r4, #104	; 0x68
 800669c:	e9d5 4500 	ldrd	r4, r5, [r5]
 80066a0:	68be      	ldr	r6, [r7, #8]
 80066a2:	e9d6 891c 	ldrd	r8, r9, [r6, #112]	; 0x70
 80066a6:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80066aa:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80066ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066b2:	e9cd 2300 	strd	r2, r3, [sp]
 80066b6:	4652      	mov	r2, sl
 80066b8:	465b      	mov	r3, fp
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f001 f9f0 	bl	8007aa0 <_ZN3PID7PD_RateEddddd>
 80066c0:	4602      	mov	r2, r0
 80066c2:	460b      	mov	r3, r1
 80066c4:	68b9      	ldr	r1, [r7, #8]
 80066c6:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0
    //printf("\npitch_rate_des: %.2f",pitch_rate_des);
    pd_pitch = pid_pitch.PD_Rate(pitch_rate_des,pitch_rate,Kp_pitch,Ki_pitch,Kd_pitch);
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80066d0:	607b      	str	r3, [r7, #4]
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80066d8:	4618      	mov	r0, r3
 80066da:	f7f9 fe9d 	bl	8000418 <__aeabi_f2d>
 80066de:	4682      	mov	sl, r0
 80066e0:	468b      	mov	fp, r1
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80066e8:	68b9      	ldr	r1, [r7, #8]
 80066ea:	e9d1 011e 	ldrd	r0, r1, [r1, #120]	; 0x78
 80066ee:	68bc      	ldr	r4, [r7, #8]
 80066f0:	f104 0580 	add.w	r5, r4, #128	; 0x80
 80066f4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80066f8:	68be      	ldr	r6, [r7, #8]
 80066fa:	e9d6 8922 	ldrd	r8, r9, [r6, #136]	; 0x88
 80066fe:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8006702:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8006706:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800670a:	e9cd 2300 	strd	r2, r3, [sp]
 800670e:	4652      	mov	r2, sl
 8006710:	465b      	mov	r3, fp
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f001 f9c4 	bl	8007aa0 <_ZN3PID7PD_RateEddddd>
 8006718:	4602      	mov	r2, r0
 800671a:	460b      	mov	r3, r1
 800671c:	68b9      	ldr	r1, [r7, #8]
 800671e:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
    p_yaw    = pid_yaw.P_Rate_Yaw(yaw_rate_des,yaw_rate,Kp_yaw);
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	f503 76d8 	add.w	r6, r3, #432	; 0x1b0
 8006728:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800672a:	f7f9 fe75 	bl	8000418 <__aeabi_f2d>
 800672e:	4604      	mov	r4, r0
 8006730:	460d      	mov	r5, r1
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8006738:	68b9      	ldr	r1, [r7, #8]
 800673a:	e9d1 0124 	ldrd	r0, r1, [r1, #144]	; 0x90
 800673e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006742:	e9cd 2300 	strd	r2, r3, [sp]
 8006746:	4622      	mov	r2, r4
 8006748:	462b      	mov	r3, r5
 800674a:	4630      	mov	r0, r6
 800674c:	f001 fae7 	bl	8007d1e <_ZN3PID10P_Rate_YawEddd>
 8006750:	4602      	mov	r2, r0
 8006752:	460b      	mov	r3, r1
 8006754:	68b9      	ldr	r1, [r7, #8]
 8006756:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
    //printf("\npd_pitch: %.2f",pd_pitch);
    //printf("\np_yaw: %.2f",p_yaw);

    ////printf("\nst: %.3f",st);

    thr = pid_roll.Sat(thr, 1800, 1000);
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	f103 04d0 	add.w	r4, r3, #208	; 0xd0
 8006760:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8006764:	f7f9 fe46 	bl	80003f4 <__aeabi_i2d>
 8006768:	4602      	mov	r2, r0
 800676a:	460b      	mov	r3, r1
 800676c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006770:	9101      	str	r1, [sp, #4]
 8006772:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 8006776:	9100      	str	r1, [sp, #0]
 8006778:	4620      	mov	r0, r4
 800677a:	f001 fb75 	bl	8007e68 <_ZN3PID3SatEdii>
 800677e:	4602      	mov	r2, r0
 8006780:	460b      	mov	r3, r1
 8006782:	4610      	mov	r0, r2
 8006784:	4619      	mov	r1, r3
 8006786:	f7fa f939 	bl	80009fc <__aeabi_d2iz>
 800678a:	4603      	mov	r3, r0
 800678c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

    int pwm1 = thr + pd_pitch - pd_roll  - p_yaw;
 8006790:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8006794:	f7f9 fe2e 	bl	80003f4 <__aeabi_i2d>
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 800679e:	f7f9 fcdd 	bl	800015c <__adddf3>
 80067a2:	4602      	mov	r2, r0
 80067a4:	460b      	mov	r3, r1
 80067a6:	4610      	mov	r0, r2
 80067a8:	4619      	mov	r1, r3
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	; 0xb0
 80067b0:	f7f9 fcd2 	bl	8000158 <__aeabi_dsub>
 80067b4:	4602      	mov	r2, r0
 80067b6:	460b      	mov	r3, r1
 80067b8:	4610      	mov	r0, r2
 80067ba:	4619      	mov	r1, r3
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	; 0xc0
 80067c2:	f7f9 fcc9 	bl	8000158 <__aeabi_dsub>
 80067c6:	4602      	mov	r2, r0
 80067c8:	460b      	mov	r3, r1
 80067ca:	4610      	mov	r0, r2
 80067cc:	4619      	mov	r1, r3
 80067ce:	f7fa f915 	bl	80009fc <__aeabi_d2iz>
 80067d2:	4603      	mov	r3, r0
 80067d4:	64bb      	str	r3, [r7, #72]	; 0x48
    int pwm2 = thr - pd_pitch + pd_roll  - p_yaw ;
 80067d6:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80067da:	f7f9 fe0b 	bl	80003f4 <__aeabi_i2d>
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 80067e4:	f7f9 fcb8 	bl	8000158 <__aeabi_dsub>
 80067e8:	4602      	mov	r2, r0
 80067ea:	460b      	mov	r3, r1
 80067ec:	4610      	mov	r0, r2
 80067ee:	4619      	mov	r1, r3
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	; 0xb0
 80067f6:	f7f9 fcb1 	bl	800015c <__adddf3>
 80067fa:	4602      	mov	r2, r0
 80067fc:	460b      	mov	r3, r1
 80067fe:	4610      	mov	r0, r2
 8006800:	4619      	mov	r1, r3
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	; 0xc0
 8006808:	f7f9 fca6 	bl	8000158 <__aeabi_dsub>
 800680c:	4602      	mov	r2, r0
 800680e:	460b      	mov	r3, r1
 8006810:	4610      	mov	r0, r2
 8006812:	4619      	mov	r1, r3
 8006814:	f7fa f8f2 	bl	80009fc <__aeabi_d2iz>
 8006818:	4603      	mov	r3, r0
 800681a:	647b      	str	r3, [r7, #68]	; 0x44
    int pwm3 = thr + pd_pitch + pd_roll  + p_yaw ;
 800681c:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8006820:	f7f9 fde8 	bl	80003f4 <__aeabi_i2d>
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 800682a:	f7f9 fc97 	bl	800015c <__adddf3>
 800682e:	4602      	mov	r2, r0
 8006830:	460b      	mov	r3, r1
 8006832:	4610      	mov	r0, r2
 8006834:	4619      	mov	r1, r3
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	; 0xb0
 800683c:	f7f9 fc8e 	bl	800015c <__adddf3>
 8006840:	4602      	mov	r2, r0
 8006842:	460b      	mov	r3, r1
 8006844:	4610      	mov	r0, r2
 8006846:	4619      	mov	r1, r3
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	; 0xc0
 800684e:	f7f9 fc85 	bl	800015c <__adddf3>
 8006852:	4602      	mov	r2, r0
 8006854:	460b      	mov	r3, r1
 8006856:	4610      	mov	r0, r2
 8006858:	4619      	mov	r1, r3
 800685a:	f7fa f8cf 	bl	80009fc <__aeabi_d2iz>
 800685e:	4603      	mov	r3, r0
 8006860:	643b      	str	r3, [r7, #64]	; 0x40
    int pwm4 = thr - pd_pitch - pd_roll  + p_yaw ;
 8006862:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8006866:	f7f9 fdc5 	bl	80003f4 <__aeabi_i2d>
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 8006870:	f7f9 fc72 	bl	8000158 <__aeabi_dsub>
 8006874:	4602      	mov	r2, r0
 8006876:	460b      	mov	r3, r1
 8006878:	4610      	mov	r0, r2
 800687a:	4619      	mov	r1, r3
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	; 0xb0
 8006882:	f7f9 fc69 	bl	8000158 <__aeabi_dsub>
 8006886:	4602      	mov	r2, r0
 8006888:	460b      	mov	r3, r1
 800688a:	4610      	mov	r0, r2
 800688c:	4619      	mov	r1, r3
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	; 0xc0
 8006894:	f7f9 fc62 	bl	800015c <__adddf3>
 8006898:	4602      	mov	r2, r0
 800689a:	460b      	mov	r3, r1
 800689c:	4610      	mov	r0, r2
 800689e:	4619      	mov	r1, r3
 80068a0:	f7fa f8ac 	bl	80009fc <__aeabi_d2iz>
 80068a4:	4603      	mov	r3, r0
 80068a6:	63fb      	str	r3, [r7, #60]	; 0x3c


    //Saturate pwm values
    pwm1 = (int)pid_roll.Sat(pwm1,PWM_UPPER,PWM_LOWER,thr);
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	f103 04d0 	add.w	r4, r3, #208	; 0xd0
 80068ae:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80068b0:	f7f9 fda0 	bl	80003f4 <__aeabi_i2d>
 80068b4:	4602      	mov	r2, r0
 80068b6:	460b      	mov	r3, r1
 80068b8:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80068bc:	9102      	str	r1, [sp, #8]
 80068be:	f240 414c 	movw	r1, #1100	; 0x44c
 80068c2:	9101      	str	r1, [sp, #4]
 80068c4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80068c8:	9100      	str	r1, [sp, #0]
 80068ca:	4620      	mov	r0, r4
 80068cc:	f001 fa86 	bl	8007ddc <_ZN3PID3SatEdiii>
 80068d0:	4602      	mov	r2, r0
 80068d2:	460b      	mov	r3, r1
 80068d4:	4610      	mov	r0, r2
 80068d6:	4619      	mov	r1, r3
 80068d8:	f7fa f890 	bl	80009fc <__aeabi_d2iz>
 80068dc:	4603      	mov	r3, r0
 80068de:	64bb      	str	r3, [r7, #72]	; 0x48
    pwm2 = (int)pid_roll.Sat(pwm2,PWM_UPPER,PWM_LOWER,thr);
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	f103 04d0 	add.w	r4, r3, #208	; 0xd0
 80068e6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80068e8:	f7f9 fd84 	bl	80003f4 <__aeabi_i2d>
 80068ec:	4602      	mov	r2, r0
 80068ee:	460b      	mov	r3, r1
 80068f0:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80068f4:	9102      	str	r1, [sp, #8]
 80068f6:	f240 414c 	movw	r1, #1100	; 0x44c
 80068fa:	9101      	str	r1, [sp, #4]
 80068fc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006900:	9100      	str	r1, [sp, #0]
 8006902:	4620      	mov	r0, r4
 8006904:	f001 fa6a 	bl	8007ddc <_ZN3PID3SatEdiii>
 8006908:	4602      	mov	r2, r0
 800690a:	460b      	mov	r3, r1
 800690c:	4610      	mov	r0, r2
 800690e:	4619      	mov	r1, r3
 8006910:	f7fa f874 	bl	80009fc <__aeabi_d2iz>
 8006914:	4603      	mov	r3, r0
 8006916:	647b      	str	r3, [r7, #68]	; 0x44
    pwm3 = (int)pid_roll.Sat(pwm3,PWM_UPPER,PWM_LOWER,thr);
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	f103 04d0 	add.w	r4, r3, #208	; 0xd0
 800691e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8006920:	f7f9 fd68 	bl	80003f4 <__aeabi_i2d>
 8006924:	4602      	mov	r2, r0
 8006926:	460b      	mov	r3, r1
 8006928:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800692c:	9102      	str	r1, [sp, #8]
 800692e:	f240 414c 	movw	r1, #1100	; 0x44c
 8006932:	9101      	str	r1, [sp, #4]
 8006934:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006938:	9100      	str	r1, [sp, #0]
 800693a:	4620      	mov	r0, r4
 800693c:	f001 fa4e 	bl	8007ddc <_ZN3PID3SatEdiii>
 8006940:	4602      	mov	r2, r0
 8006942:	460b      	mov	r3, r1
 8006944:	4610      	mov	r0, r2
 8006946:	4619      	mov	r1, r3
 8006948:	f7fa f858 	bl	80009fc <__aeabi_d2iz>
 800694c:	4603      	mov	r3, r0
 800694e:	643b      	str	r3, [r7, #64]	; 0x40
    pwm4 = (int)pid_roll.Sat(pwm4,PWM_UPPER,PWM_LOWER,thr);
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	f103 04d0 	add.w	r4, r3, #208	; 0xd0
 8006956:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006958:	f7f9 fd4c 	bl	80003f4 <__aeabi_i2d>
 800695c:	4602      	mov	r2, r0
 800695e:	460b      	mov	r3, r1
 8006960:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8006964:	9102      	str	r1, [sp, #8]
 8006966:	f240 414c 	movw	r1, #1100	; 0x44c
 800696a:	9101      	str	r1, [sp, #4]
 800696c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006970:	9100      	str	r1, [sp, #0]
 8006972:	4620      	mov	r0, r4
 8006974:	f001 fa32 	bl	8007ddc <_ZN3PID3SatEdiii>
 8006978:	4602      	mov	r2, r0
 800697a:	460b      	mov	r3, r1
 800697c:	4610      	mov	r0, r2
 800697e:	4619      	mov	r1, r3
 8006980:	f7fa f83c 	bl	80009fc <__aeabi_d2iz>
 8006984:	4603      	mov	r3, r0
 8006986:	63fb      	str	r3, [r7, #60]	; 0x3c

    //Convert pwm to motor speed 
    w1 = pid_roll.pwm2mot(pwm1, 1);
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	33d0      	adds	r3, #208	; 0xd0
 800698c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800698e:	b291      	uxth	r1, r2
 8006990:	2201      	movs	r2, #1
 8006992:	4618      	mov	r0, r3
 8006994:	f001 faf2 	bl	8007f7c <_ZN3PID7pwm2motEti>
 8006998:	4602      	mov	r2, r0
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	641a      	str	r2, [r3, #64]	; 0x40
    w2 = pid_roll.pwm2mot(pwm2, 1);
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	33d0      	adds	r3, #208	; 0xd0
 80069a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069a4:	b291      	uxth	r1, r2
 80069a6:	2201      	movs	r2, #1
 80069a8:	4618      	mov	r0, r3
 80069aa:	f001 fae7 	bl	8007f7c <_ZN3PID7pwm2motEti>
 80069ae:	4602      	mov	r2, r0
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	645a      	str	r2, [r3, #68]	; 0x44
    w3 = pid_roll.pwm2mot(pwm3,-1);
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	33d0      	adds	r3, #208	; 0xd0
 80069b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80069ba:	b291      	uxth	r1, r2
 80069bc:	f04f 32ff 	mov.w	r2, #4294967295
 80069c0:	4618      	mov	r0, r3
 80069c2:	f001 fadb 	bl	8007f7c <_ZN3PID7pwm2motEti>
 80069c6:	4602      	mov	r2, r0
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	649a      	str	r2, [r3, #72]	; 0x48
    w4 = pid_roll.pwm2mot(pwm4,-1);
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	33d0      	adds	r3, #208	; 0xd0
 80069d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80069d2:	b291      	uxth	r1, r2
 80069d4:	f04f 32ff 	mov.w	r2, #4294967295
 80069d8:	4618      	mov	r0, r3
 80069da:	f001 facf 	bl	8007f7c <_ZN3PID7pwm2motEti>
 80069de:	4602      	mov	r2, r0
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	64da      	str	r2, [r3, #76]	; 0x4c


    std::vector<double> controller_output = 	{w1,w2,w3,w4};
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e8:	4618      	mov	r0, r3
 80069ea:	f7f9 fd15 	bl	8000418 <__aeabi_f2d>
 80069ee:	4602      	mov	r2, r0
 80069f0:	460b      	mov	r3, r1
 80069f2:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069fa:	4618      	mov	r0, r3
 80069fc:	f7f9 fd0c 	bl	8000418 <__aeabi_f2d>
 8006a00:	4602      	mov	r2, r0
 8006a02:	460b      	mov	r3, r1
 8006a04:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f7f9 fd03 	bl	8000418 <__aeabi_f2d>
 8006a12:	4602      	mov	r2, r0
 8006a14:	460b      	mov	r3, r1
 8006a16:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f7f9 fcfa 	bl	8000418 <__aeabi_f2d>
 8006a24:	4602      	mov	r2, r0
 8006a26:	460b      	mov	r3, r1
 8006a28:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8006a2c:	f107 0318 	add.w	r3, r7, #24
 8006a30:	613b      	str	r3, [r7, #16]
 8006a32:	2304      	movs	r3, #4
 8006a34:	617b      	str	r3, [r7, #20]
 8006a36:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f7fb fc86 	bl	800234c <_ZNSaIdEC1Ev>
 8006a40:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006a44:	f107 0210 	add.w	r2, r7, #16
 8006a48:	ca06      	ldmia	r2, {r1, r2}
 8006a4a:	68f8      	ldr	r0, [r7, #12]
 8006a4c:	f000 f837 	bl	8006abe <_ZNSt6vectorIdSaIdEEC1ESt16initializer_listIdERKS0_>
 8006a50:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006a54:	4618      	mov	r0, r3
 8006a56:	f7fb fc24 	bl	80022a2 <_ZNSaIdED1Ev>
    controller_output_pwm[0] = pwm1;
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a5e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    controller_output_pwm[1] = pwm2;
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a66:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    controller_output_pwm[2] = pwm3;
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a6e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    controller_output_pwm[3] = pwm4;
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006a76:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

    return controller_output;
 8006a7a:	bf00      	nop
}
 8006a7c:	68f8      	ldr	r0, [r7, #12]
 8006a7e:	375c      	adds	r7, #92	; 0x5c
 8006a80:	46bd      	mov	sp, r7
 8006a82:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a86:	b002      	add	sp, #8
 8006a88:	4770      	bx	lr

08006a8a <_ZN10ControllerD1Ev>:

Controller::~Controller() {}
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b082      	sub	sp, #8
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f001 fab7 	bl	800800c <_ZN3PIDD1Ev>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f001 fab1 	bl	800800c <_ZN3PIDD1Ev>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	33d0      	adds	r3, #208	; 0xd0
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f001 faac 	bl	800800c <_ZN3PIDD1Ev>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3708      	adds	r7, #8
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}

08006abe <_ZNSt6vectorIdSaIdEEC1ESt16initializer_listIdERKS0_>:
      vector(initializer_list<value_type> __l,
 8006abe:	b5b0      	push	{r4, r5, r7, lr}
 8006ac0:	b086      	sub	sp, #24
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	60f8      	str	r0, [r7, #12]
 8006ac6:	1d38      	adds	r0, r7, #4
 8006ac8:	e880 0006 	stmia.w	r0, {r1, r2}
 8006acc:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6839      	ldr	r1, [r7, #0]
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f7fb fd77 	bl	80025c6 <_ZNSt12_Vector_baseIdSaIdEEC1ERKS0_>
	_M_range_initialize(__l.begin(), __l.end(),
 8006ad8:	1d3b      	adds	r3, r7, #4
 8006ada:	4618      	mov	r0, r3
 8006adc:	f000 f810 	bl	8006b00 <_ZNKSt16initializer_listIdE5beginEv>
 8006ae0:	4604      	mov	r4, r0
 8006ae2:	1d3b      	adds	r3, r7, #4
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f000 f816 	bl	8006b16 <_ZNKSt16initializer_listIdE3endEv>
 8006aea:	4602      	mov	r2, r0
 8006aec:	462b      	mov	r3, r5
 8006aee:	4621      	mov	r1, r4
 8006af0:	68f8      	ldr	r0, [r7, #12]
 8006af2:	f000 f822 	bl	8006b3a <_ZNSt6vectorIdSaIdEE19_M_range_initializeIPKdEEvT_S5_St20forward_iterator_tag>
      }
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	4618      	mov	r0, r3
 8006afa:	3718      	adds	r7, #24
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bdb0      	pop	{r4, r5, r7, pc}

08006b00 <_ZNKSt16initializer_listIdE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	370c      	adds	r7, #12
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bc80      	pop	{r7}
 8006b14:	4770      	bx	lr

08006b16 <_ZNKSt16initializer_listIdE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8006b16:	b590      	push	{r4, r7, lr}
 8006b18:	b083      	sub	sp, #12
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f7ff ffee 	bl	8006b00 <_ZNKSt16initializer_listIdE5beginEv>
 8006b24:	4604      	mov	r4, r0
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 f840 	bl	8006bac <_ZNKSt16initializer_listIdE4sizeEv>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	00db      	lsls	r3, r3, #3
 8006b30:	4423      	add	r3, r4
 8006b32:	4618      	mov	r0, r3
 8006b34:	370c      	adds	r7, #12
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd90      	pop	{r4, r7, pc}

08006b3a <_ZNSt6vectorIdSaIdEE19_M_range_initializeIPKdEEvT_S5_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 8006b3a:	b590      	push	{r4, r7, lr}
 8006b3c:	b087      	sub	sp, #28
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	60f8      	str	r0, [r7, #12]
 8006b42:	60b9      	str	r1, [r7, #8]
 8006b44:	607a      	str	r2, [r7, #4]
 8006b46:	703b      	strb	r3, [r7, #0]
	  const size_type __n = std::distance(__first, __last);
 8006b48:	6879      	ldr	r1, [r7, #4]
 8006b4a:	68b8      	ldr	r0, [r7, #8]
 8006b4c:	f000 f839 	bl	8006bc2 <_ZSt8distanceIPKdENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 8006b50:	4603      	mov	r3, r0
 8006b52:	617b      	str	r3, [r7, #20]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8006b54:	68fc      	ldr	r4, [r7, #12]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f7fb fc33 	bl	80023c4 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	4619      	mov	r1, r3
 8006b62:	6978      	ldr	r0, [r7, #20]
 8006b64:	f000 f842 	bl	8006bec <_ZNSt6vectorIdSaIdEE17_S_check_init_lenEjRKS0_>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	4620      	mov	r0, r4
 8006b6e:	f000 f865 	bl	8006c3c <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEj>
 8006b72:	4602      	mov	r2, r0
	  this->_M_impl._M_start
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	00db      	lsls	r3, r3, #3
 8006b80:	441a      	add	r2, r3
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	609a      	str	r2, [r3, #8]
	    std::__uninitialized_copy_a(__first, __last,
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f7fb fc19 	bl	80023c4 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8006b92:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 8006b94:	4622      	mov	r2, r4
 8006b96:	6879      	ldr	r1, [r7, #4]
 8006b98:	68b8      	ldr	r0, [r7, #8]
 8006b9a:	f000 f863 	bl	8006c64 <_ZSt22__uninitialized_copy_aIPKdPddET0_T_S4_S3_RSaIT1_E>
 8006b9e:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	605a      	str	r2, [r3, #4]
	}
 8006ba4:	bf00      	nop
 8006ba6:	371c      	adds	r7, #28
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd90      	pop	{r4, r7, pc}

08006bac <_ZNKSt16initializer_listIdE4sizeEv>:
      size() const noexcept { return _M_len; }
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	4618      	mov	r0, r3
 8006bba:	370c      	adds	r7, #12
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bc80      	pop	{r7}
 8006bc0:	4770      	bx	lr

08006bc2 <_ZSt8distanceIPKdENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8006bc2:	b5b0      	push	{r4, r5, r7, lr}
 8006bc4:	b084      	sub	sp, #16
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
 8006bca:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8006bcc:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8006bce:	1d3b      	adds	r3, r7, #4
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f000 f858 	bl	8006c86 <_ZSt19__iterator_categoryIPKdENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 8006bd6:	462a      	mov	r2, r5
 8006bd8:	6839      	ldr	r1, [r7, #0]
 8006bda:	4620      	mov	r0, r4
 8006bdc:	f000 f85c 	bl	8006c98 <_ZSt10__distanceIPKdENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 8006be0:	4603      	mov	r3, r0
    }
 8006be2:	4618      	mov	r0, r3
 8006be4:	3710      	adds	r7, #16
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006bec <_ZNSt6vectorIdSaIdEE17_S_check_init_lenEjRKS0_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 8006bec:	b590      	push	{r4, r7, lr}
 8006bee:	b085      	sub	sp, #20
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8006bf6:	f107 030c 	add.w	r3, r7, #12
 8006bfa:	6839      	ldr	r1, [r7, #0]
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f7fb fcd4 	bl	80025aa <_ZNSaIdEC1ERKS_>
 8006c02:	f107 030c 	add.w	r3, r7, #12
 8006c06:	4618      	mov	r0, r3
 8006c08:	f000 f855 	bl	8006cb6 <_ZNSt6vectorIdSaIdEE11_S_max_sizeERKS0_>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4293      	cmp	r3, r2
 8006c12:	bf8c      	ite	hi
 8006c14:	2301      	movhi	r3, #1
 8006c16:	2300      	movls	r3, #0
 8006c18:	b2dc      	uxtb	r4, r3
 8006c1a:	f107 030c 	add.w	r3, r7, #12
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f7fb fb3f 	bl	80022a2 <_ZNSaIdED1Ev>
 8006c24:	2c00      	cmp	r4, #0
 8006c26:	d002      	beq.n	8006c2e <_ZNSt6vectorIdSaIdEE17_S_check_init_lenEjRKS0_+0x42>
	  __throw_length_error(
 8006c28:	4803      	ldr	r0, [pc, #12]	; (8006c38 <_ZNSt6vectorIdSaIdEE17_S_check_init_lenEjRKS0_+0x4c>)
 8006c2a:	f001 fa0f 	bl	800804c <_ZSt20__throw_length_errorPKc>
	return __n;
 8006c2e:	687b      	ldr	r3, [r7, #4]
      }
 8006c30:	4618      	mov	r0, r3
 8006c32:	3714      	adds	r7, #20
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd90      	pop	{r4, r7, pc}
 8006c38:	08008ab0 	.word	0x08008ab0

08006c3c <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d006      	beq.n	8006c5a <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEj+0x1e>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6839      	ldr	r1, [r7, #0]
 8006c50:	4618      	mov	r0, r3
 8006c52:	f000 f84a 	bl	8006cea <_ZNSt16allocator_traitsISaIdEE8allocateERS0_j>
 8006c56:	4603      	mov	r3, r0
 8006c58:	e000      	b.n	8006c5c <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEj+0x20>
 8006c5a:	2300      	movs	r3, #0
      }
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3708      	adds	r7, #8
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <_ZSt22__uninitialized_copy_aIPKdPddET0_T_S4_S3_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	60b9      	str	r1, [r7, #8]
 8006c6e:	607a      	str	r2, [r7, #4]
 8006c70:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	68b9      	ldr	r1, [r7, #8]
 8006c76:	68f8      	ldr	r0, [r7, #12]
 8006c78:	f000 f846 	bl	8006d08 <_ZSt18uninitialized_copyIPKdPdET0_T_S4_S3_>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3710      	adds	r7, #16
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}

08006c86 <_ZSt19__iterator_categoryIPKdENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8006c86:	b480      	push	{r7}
 8006c88:	b083      	sub	sp, #12
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8006c8e:	4618      	mov	r0, r3
 8006c90:	370c      	adds	r7, #12
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bc80      	pop	{r7}
 8006c96:	4770      	bx	lr

08006c98 <_ZSt10__distanceIPKdENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8006c98:	b480      	push	{r7}
 8006c9a:	b085      	sub	sp, #20
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8006ca4:	68ba      	ldr	r2, [r7, #8]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	1ad3      	subs	r3, r2, r3
 8006caa:	10db      	asrs	r3, r3, #3
    }
 8006cac:	4618      	mov	r0, r3
 8006cae:	3714      	adds	r7, #20
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bc80      	pop	{r7}
 8006cb4:	4770      	bx	lr

08006cb6 <_ZNSt6vectorIdSaIdEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8006cb6:	b580      	push	{r7, lr}
 8006cb8:	b084      	sub	sp, #16
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8006cbe:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8006cc2:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 f831 	bl	8006d2c <_ZNSt16allocator_traitsISaIdEE8max_sizeERKS0_>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8006cce:	f107 0208 	add.w	r2, r7, #8
 8006cd2:	f107 030c 	add.w	r3, r7, #12
 8006cd6:	4611      	mov	r1, r2
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f000 f833 	bl	8006d44 <_ZSt3minIjERKT_S2_S2_>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	681b      	ldr	r3, [r3, #0]
      }
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3710      	adds	r7, #16
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}

08006cea <_ZNSt16allocator_traitsISaIdEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8006cea:	b580      	push	{r7, lr}
 8006cec:	b082      	sub	sp, #8
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
 8006cf2:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	6839      	ldr	r1, [r7, #0]
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f000 f836 	bl	8006d6a <_ZN9__gnu_cxx13new_allocatorIdE8allocateEjPKv>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	4618      	mov	r0, r3
 8006d02:	3708      	adds	r7, #8
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <_ZSt18uninitialized_copyIPKdPdET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b086      	sub	sp, #24
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	60b9      	str	r1, [r7, #8]
 8006d12:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8006d14:	2301      	movs	r3, #1
 8006d16:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	68b9      	ldr	r1, [r7, #8]
 8006d1c:	68f8      	ldr	r0, [r7, #12]
 8006d1e:	f000 f842 	bl	8006da6 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKdPdEET0_T_S6_S5_>
 8006d22:	4603      	mov	r3, r0
    }
 8006d24:	4618      	mov	r0, r3
 8006d26:	3718      	adds	r7, #24
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <_ZNSt16allocator_traitsISaIdEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a) noexcept
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b082      	sub	sp, #8
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f000 f846 	bl	8006dc6 <_ZNK9__gnu_cxx13new_allocatorIdE8max_sizeEv>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3708      	adds	r7, #8
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <_ZSt3minIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8006d44:	b480      	push	{r7}
 8006d46:	b083      	sub	sp, #12
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d201      	bcs.n	8006d5e <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	e000      	b.n	8006d60 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8006d5e:	687b      	ldr	r3, [r7, #4]
    }
 8006d60:	4618      	mov	r0, r3
 8006d62:	370c      	adds	r7, #12
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bc80      	pop	{r7}
 8006d68:	4770      	bx	lr

08006d6a <_ZN9__gnu_cxx13new_allocatorIdE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b084      	sub	sp, #16
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	60f8      	str	r0, [r7, #12]
 8006d72:	60b9      	str	r1, [r7, #8]
 8006d74:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8006d76:	68f8      	ldr	r0, [r7, #12]
 8006d78:	f000 f825 	bl	8006dc6 <_ZNK9__gnu_cxx13new_allocatorIdE8max_sizeEv>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	4293      	cmp	r3, r2
 8006d82:	bf8c      	ite	hi
 8006d84:	2301      	movhi	r3, #1
 8006d86:	2300      	movls	r3, #0
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d001      	beq.n	8006d92 <_ZN9__gnu_cxx13new_allocatorIdE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8006d8e:	f001 f95a 	bl	8008046 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	00db      	lsls	r3, r3, #3
 8006d96:	4618      	mov	r0, r3
 8006d98:	f001 f944 	bl	8008024 <_Znwj>
 8006d9c:	4603      	mov	r3, r0
      }
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3710      	adds	r7, #16
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}

08006da6 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKdPdEET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8006da6:	b580      	push	{r7, lr}
 8006da8:	b084      	sub	sp, #16
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	60f8      	str	r0, [r7, #12]
 8006dae:	60b9      	str	r1, [r7, #8]
 8006db0:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	68b9      	ldr	r1, [r7, #8]
 8006db6:	68f8      	ldr	r0, [r7, #12]
 8006db8:	f000 f810 	bl	8006ddc <_ZSt4copyIPKdPdET0_T_S4_S3_>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3710      	adds	r7, #16
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}

08006dc6 <_ZNK9__gnu_cxx13new_allocatorIdE8max_sizeEv>:

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8006dc6:	b480      	push	{r7}
 8006dc8:	b083      	sub	sp, #12
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8006dce:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
#else
	return size_t(-1) / sizeof(_Tp);
#endif
      }
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	370c      	adds	r7, #12
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bc80      	pop	{r7}
 8006dda:	4770      	bx	lr

08006ddc <_ZSt4copyIPKdPdET0_T_S4_S3_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8006ddc:	b590      	push	{r4, r7, lr}
 8006dde:	b085      	sub	sp, #20
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a2<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8006de8:	68f8      	ldr	r0, [r7, #12]
 8006dea:	f000 f80f 	bl	8006e0c <_ZSt12__miter_baseIPKdET_S2_>
 8006dee:	4604      	mov	r4, r0
 8006df0:	68b8      	ldr	r0, [r7, #8]
 8006df2:	f000 f80b 	bl	8006e0c <_ZSt12__miter_baseIPKdET_S2_>
 8006df6:	4603      	mov	r3, r0
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	4620      	mov	r0, r4
 8006dfe:	f000 f80f 	bl	8006e20 <_ZSt14__copy_move_a2ILb0EPKdPdET1_T0_S4_S3_>
 8006e02:	4603      	mov	r3, r0
    }
 8006e04:	4618      	mov	r0, r3
 8006e06:	3714      	adds	r7, #20
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd90      	pop	{r4, r7, pc}

08006e0c <_ZSt12__miter_baseIPKdET_S2_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
    { return __it; }
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	4618      	mov	r0, r3
 8006e18:	370c      	adds	r7, #12
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bc80      	pop	{r7}
 8006e1e:	4770      	bx	lr

08006e20 <_ZSt14__copy_move_a2ILb0EPKdPdET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8006e20:	b5b0      	push	{r4, r5, r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	60f8      	str	r0, [r7, #12]
 8006e28:	60b9      	str	r1, [r7, #8]
 8006e2a:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8006e2c:	68f8      	ldr	r0, [r7, #12]
 8006e2e:	f000 f81a 	bl	8006e66 <_ZSt12__niter_baseIPKdET_S2_>
 8006e32:	4604      	mov	r4, r0
 8006e34:	68b8      	ldr	r0, [r7, #8]
 8006e36:	f000 f816 	bl	8006e66 <_ZSt12__niter_baseIPKdET_S2_>
 8006e3a:	4605      	mov	r5, r0
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f000 f81b 	bl	8006e7a <_ZSt12__niter_baseIPdET_S1_>
 8006e44:	4603      	mov	r3, r0
 8006e46:	461a      	mov	r2, r3
 8006e48:	4629      	mov	r1, r5
 8006e4a:	4620      	mov	r0, r4
 8006e4c:	f000 f81f 	bl	8006e8e <_ZSt13__copy_move_aILb0EPKdPdET1_T0_S4_S3_>
 8006e50:	4602      	mov	r2, r0
 8006e52:	1d3b      	adds	r3, r7, #4
 8006e54:	4611      	mov	r1, r2
 8006e56:	4618      	mov	r0, r3
 8006e58:	f000 f82b 	bl	8006eb2 <_ZSt12__niter_wrapIPdET_RKS1_S1_>
 8006e5c:	4603      	mov	r3, r0
    }
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3710      	adds	r7, #16
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bdb0      	pop	{r4, r5, r7, pc}

08006e66 <_ZSt12__niter_baseIPKdET_S2_>:
    __niter_base(_Iterator __it)
 8006e66:	b480      	push	{r7}
 8006e68:	b083      	sub	sp, #12
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
    { return __it; }
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	4618      	mov	r0, r3
 8006e72:	370c      	adds	r7, #12
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bc80      	pop	{r7}
 8006e78:	4770      	bx	lr

08006e7a <_ZSt12__niter_baseIPdET_S1_>:
    __niter_base(_Iterator __it)
 8006e7a:	b480      	push	{r7}
 8006e7c:	b083      	sub	sp, #12
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
    { return __it; }
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4618      	mov	r0, r3
 8006e86:	370c      	adds	r7, #12
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bc80      	pop	{r7}
 8006e8c:	4770      	bx	lr

08006e8e <_ZSt13__copy_move_aILb0EPKdPdET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8006e8e:	b580      	push	{r7, lr}
 8006e90:	b086      	sub	sp, #24
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	60f8      	str	r0, [r7, #12]
 8006e96:	60b9      	str	r1, [r7, #8]
 8006e98:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	68b9      	ldr	r1, [r7, #8]
 8006ea2:	68f8      	ldr	r0, [r7, #12]
 8006ea4:	f000 f810 	bl	8006ec8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_>
 8006ea8:	4603      	mov	r3, r0
    }
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3718      	adds	r7, #24
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}

08006eb2 <_ZSt12__niter_wrapIPdET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8006eb2:	b480      	push	{r7}
 8006eb4:	b083      	sub	sp, #12
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
 8006eba:	6039      	str	r1, [r7, #0]
    { return __res; }
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	370c      	adds	r7, #12
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bc80      	pop	{r7}
 8006ec6:	4770      	bx	lr

08006ec8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b086      	sub	sp, #24
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	60f8      	str	r0, [r7, #12]
 8006ed0:	60b9      	str	r1, [r7, #8]
 8006ed2:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8006ed4:	68ba      	ldr	r2, [r7, #8]
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	1ad3      	subs	r3, r2, r3
 8006eda:	10db      	asrs	r3, r3, #3
 8006edc:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d006      	beq.n	8006ef2 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	00db      	lsls	r3, r3, #3
 8006ee8:	461a      	mov	r2, r3
 8006eea:	68f9      	ldr	r1, [r7, #12]
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f001 fc9f 	bl	8008830 <memmove>
	  return __result + _Num;
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	00db      	lsls	r3, r3, #3
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	4413      	add	r3, r2
	}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3718      	adds	r7, #24
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	0000      	movs	r0, r0
 8006f04:	0000      	movs	r0, r0
	...

08006f08 <_ZN15Kalman_FiltresiC1Ev>:
#include "Kalman.hpp"
#include <math.h>


Kalman_Filtresi::Kalman_Filtresi()  {
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6879      	ldr	r1, [r7, #4]
 8006f12:	a31f      	add	r3, pc, #124	; (adr r3, 8006f90 <_ZN15Kalman_FiltresiC1Ev+0x88>)
 8006f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f18:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8006f1c:	6879      	ldr	r1, [r7, #4]
 8006f1e:	a31c      	add	r3, pc, #112	; (adr r3, 8006f90 <_ZN15Kalman_FiltresiC1Ev+0x88>)
 8006f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f24:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
 8006f28:	6879      	ldr	r1, [r7, #4]
 8006f2a:	a319      	add	r3, pc, #100	; (adr r3, 8006f90 <_ZN15Kalman_FiltresiC1Ev+0x88>)
 8006f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f30:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
 8006f34:	6879      	ldr	r1, [r7, #4]
 8006f36:	a316      	add	r3, pc, #88	; (adr r3, 8006f90 <_ZN15Kalman_FiltresiC1Ev+0x88>)
 8006f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f3c:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
 8006f40:	6879      	ldr	r1, [r7, #4]
 8006f42:	f04f 0200 	mov.w	r2, #0
 8006f46:	4b14      	ldr	r3, [pc, #80]	; (8006f98 <_ZN15Kalman_FiltresiC1Ev+0x90>)
 8006f48:	e9c1 2336 	strd	r2, r3, [r1, #216]	; 0xd8
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	4a13      	ldr	r2, [pc, #76]	; (8006f9c <_ZN15Kalman_FiltresiC1Ev+0x94>)
 8006f50:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	22c8      	movs	r2, #200	; 0xc8
 8006f58:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006f62:	4618      	mov	r0, r3
 8006f64:	f7f9 fe7c 	bl	8000c60 <__aeabi_i2f>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006f70:	f7f9 ff7e 	bl	8000e70 <__aeabi_fdiv>
 8006f74:	4603      	mov	r3, r0
 8006f76:	4618      	mov	r0, r3
 8006f78:	f7f9 fa4e 	bl	8000418 <__aeabi_f2d>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	460b      	mov	r3, r1
 8006f80:	6879      	ldr	r1, [r7, #4]
 8006f82:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8

}
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3708      	adds	r7, #8
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}
 8006f90:	47ae147b 	.word	0x47ae147b
 8006f94:	3f847ae1 	.word	0x3f847ae1
 8006f98:	3ff80000 	.word	0x3ff80000
 8006f9c:	42654ca3 	.word	0x42654ca3

08006fa0 <_ZN15Kalman_Filtresi3RunEPfS0_>:
	y_prev = y;

	return y;
}

void Kalman_Filtresi::Run(float gyro[3], float acc[3]) {
 8006fa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fa4:	b090      	sub	sp, #64	; 0x40
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	61f8      	str	r0, [r7, #28]
 8006faa:	61b9      	str	r1, [r7, #24]
 8006fac:	617a      	str	r2, [r7, #20]

  float accX = acc[0]; 
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  float accY = acc[1];
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	63bb      	str	r3, [r7, #56]	; 0x38
  float accZ = acc[2];
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	637b      	str	r3, [r7, #52]	; 0x34

  float gyroX = gyro[0]; 
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	633b      	str	r3, [r7, #48]	; 0x30
  float gyroY = gyro[1];
 8006fc6:	69bb      	ldr	r3, [r7, #24]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	62fb      	str	r3, [r7, #44]	; 0x2c
  float gyroZ = gyro[2];
 8006fcc:	69bb      	ldr	r3, [r7, #24]
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	62bb      	str	r3, [r7, #40]	; 0x28

    //---IMU KİSMİ----
    //=================================
  float acctop=sqrt(accX*accX+accY*accY+accZ*accZ);
 8006fd2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006fd4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006fd6:	f7f9 fe97 	bl	8000d08 <__aeabi_fmul>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	461c      	mov	r4, r3
 8006fde:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006fe0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006fe2:	f7f9 fe91 	bl	8000d08 <__aeabi_fmul>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	4619      	mov	r1, r3
 8006fea:	4620      	mov	r0, r4
 8006fec:	f7f9 fd84 	bl	8000af8 <__addsf3>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	461c      	mov	r4, r3
 8006ff4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006ff6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006ff8:	f7f9 fe86 	bl	8000d08 <__aeabi_fmul>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	4619      	mov	r1, r3
 8007000:	4620      	mov	r0, r4
 8007002:	f7f9 fd79 	bl	8000af8 <__addsf3>
 8007006:	4603      	mov	r3, r0
 8007008:	4618      	mov	r0, r3
 800700a:	f7fa f88b 	bl	8001124 <_ZSt4sqrtf>
 800700e:	6278      	str	r0, [r7, #36]	; 0x24

  pitch_acc =  asin(accX/acctop)*rad2deg + PITCH_OFFSET;
 8007010:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007012:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007014:	f7f9 ff2c 	bl	8000e70 <__aeabi_fdiv>
 8007018:	4603      	mov	r3, r0
 800701a:	4618      	mov	r0, r3
 800701c:	f7fa f876 	bl	800110c <_ZSt4asinf>
 8007020:	4602      	mov	r2, r0
 8007022:	69fb      	ldr	r3, [r7, #28]
 8007024:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007028:	4619      	mov	r1, r3
 800702a:	4610      	mov	r0, r2
 800702c:	f7f9 fe6c 	bl	8000d08 <__aeabi_fmul>
 8007030:	4603      	mov	r3, r0
 8007032:	49bd      	ldr	r1, [pc, #756]	; (8007328 <_ZN15Kalman_Filtresi3RunEPfS0_+0x388>)
 8007034:	4618      	mov	r0, r3
 8007036:	f7f9 fd5d 	bl	8000af4 <__aeabi_fsub>
 800703a:	4603      	mov	r3, r0
 800703c:	461a      	mov	r2, r3
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
  roll_acc  =  asin(accY/acctop)*rad2deg + ROLL_OFFSET;
 8007044:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007046:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007048:	f7f9 ff12 	bl	8000e70 <__aeabi_fdiv>
 800704c:	4603      	mov	r3, r0
 800704e:	4618      	mov	r0, r3
 8007050:	f7fa f85c 	bl	800110c <_ZSt4asinf>
 8007054:	4602      	mov	r2, r0
 8007056:	69fb      	ldr	r3, [r7, #28]
 8007058:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800705c:	4619      	mov	r1, r3
 800705e:	4610      	mov	r0, r2
 8007060:	f7f9 fe52 	bl	8000d08 <__aeabi_fmul>
 8007064:	4603      	mov	r3, r0
 8007066:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800706a:	4618      	mov	r0, r3
 800706c:	f7f9 fd44 	bl	8000af8 <__addsf3>
 8007070:	4603      	mov	r3, r0
 8007072:	461a      	mov	r2, r3
 8007074:	69fb      	ldr	r3, [r7, #28]
 8007076:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

  //pitch_acc = lpf(pitch_acc);
  //roll_acc = lpf(roll_acc);


  pitch_gyro = gyroY * st;
 800707a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800707c:	f7f9 f9cc 	bl	8000418 <__aeabi_f2d>
 8007080:	69fb      	ldr	r3, [r7, #28]
 8007082:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8007086:	f7f9 fa1f 	bl	80004c8 <__aeabi_dmul>
 800708a:	4602      	mov	r2, r0
 800708c:	460b      	mov	r3, r1
 800708e:	4610      	mov	r0, r2
 8007090:	4619      	mov	r1, r3
 8007092:	f7f9 fcdb 	bl	8000a4c <__aeabi_d2f>
 8007096:	4602      	mov	r2, r0
 8007098:	69fb      	ldr	r3, [r7, #28]
 800709a:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
  roll_gyro =  gyroX * st;
 800709e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80070a0:	f7f9 f9ba 	bl	8000418 <__aeabi_f2d>
 80070a4:	69fb      	ldr	r3, [r7, #28]
 80070a6:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 80070aa:	f7f9 fa0d 	bl	80004c8 <__aeabi_dmul>
 80070ae:	4602      	mov	r2, r0
 80070b0:	460b      	mov	r3, r1
 80070b2:	4610      	mov	r0, r2
 80070b4:	4619      	mov	r1, r3
 80070b6:	f7f9 fcc9 	bl	8000a4c <__aeabi_d2f>
 80070ba:	4602      	mov	r2, r0
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    attitude.pitch_acc = pitch_acc;
    attitude.yaw_acc = yaw_acc;
    //printf("\npitc_acc: %.2f", pitch_acc);
  #endif
    
    if(gyro_ready) {
 80070c2:	69fb      	ldr	r3, [r7, #28]
 80070c4:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	f000 83c4 	beq.w	8007856 <_ZN15Kalman_Filtresi3RunEPfS0_+0x8b6>

    pitch_comp=(pitch_gyro+pitch_eski)*0.998+pitch_acc*0.002;	//Tümleyen filtre
 80070ce:	69fb      	ldr	r3, [r7, #28]
 80070d0:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80070da:	4619      	mov	r1, r3
 80070dc:	4610      	mov	r0, r2
 80070de:	f7f9 fd0b 	bl	8000af8 <__addsf3>
 80070e2:	4603      	mov	r3, r0
 80070e4:	4618      	mov	r0, r3
 80070e6:	f7f9 f997 	bl	8000418 <__aeabi_f2d>
 80070ea:	a38b      	add	r3, pc, #556	; (adr r3, 8007318 <_ZN15Kalman_Filtresi3RunEPfS0_+0x378>)
 80070ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f0:	f7f9 f9ea 	bl	80004c8 <__aeabi_dmul>
 80070f4:	4602      	mov	r2, r0
 80070f6:	460b      	mov	r3, r1
 80070f8:	4614      	mov	r4, r2
 80070fa:	461d      	mov	r5, r3
 80070fc:	69fb      	ldr	r3, [r7, #28]
 80070fe:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8007102:	4618      	mov	r0, r3
 8007104:	f7f9 f988 	bl	8000418 <__aeabi_f2d>
 8007108:	a385      	add	r3, pc, #532	; (adr r3, 8007320 <_ZN15Kalman_Filtresi3RunEPfS0_+0x380>)
 800710a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800710e:	f7f9 f9db 	bl	80004c8 <__aeabi_dmul>
 8007112:	4602      	mov	r2, r0
 8007114:	460b      	mov	r3, r1
 8007116:	4620      	mov	r0, r4
 8007118:	4629      	mov	r1, r5
 800711a:	f7f9 f81f 	bl	800015c <__adddf3>
 800711e:	4602      	mov	r2, r0
 8007120:	460b      	mov	r3, r1
 8007122:	4610      	mov	r0, r2
 8007124:	4619      	mov	r1, r3
 8007126:	f7f9 fc91 	bl	8000a4c <__aeabi_d2f>
 800712a:	4602      	mov	r2, r0
 800712c:	69fb      	ldr	r3, [r7, #28]
 800712e:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    roll_comp =(roll_gyro+roll_eski)*0.998+roll_acc*0.002;		//Tümleyen filtre
 8007132:	69fb      	ldr	r3, [r7, #28]
 8007134:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8007138:	69fb      	ldr	r3, [r7, #28]
 800713a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800713e:	4619      	mov	r1, r3
 8007140:	4610      	mov	r0, r2
 8007142:	f7f9 fcd9 	bl	8000af8 <__addsf3>
 8007146:	4603      	mov	r3, r0
 8007148:	4618      	mov	r0, r3
 800714a:	f7f9 f965 	bl	8000418 <__aeabi_f2d>
 800714e:	a372      	add	r3, pc, #456	; (adr r3, 8007318 <_ZN15Kalman_Filtresi3RunEPfS0_+0x378>)
 8007150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007154:	f7f9 f9b8 	bl	80004c8 <__aeabi_dmul>
 8007158:	4602      	mov	r2, r0
 800715a:	460b      	mov	r3, r1
 800715c:	4614      	mov	r4, r2
 800715e:	461d      	mov	r5, r3
 8007160:	69fb      	ldr	r3, [r7, #28]
 8007162:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8007166:	4618      	mov	r0, r3
 8007168:	f7f9 f956 	bl	8000418 <__aeabi_f2d>
 800716c:	a36c      	add	r3, pc, #432	; (adr r3, 8007320 <_ZN15Kalman_Filtresi3RunEPfS0_+0x380>)
 800716e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007172:	f7f9 f9a9 	bl	80004c8 <__aeabi_dmul>
 8007176:	4602      	mov	r2, r0
 8007178:	460b      	mov	r3, r1
 800717a:	4620      	mov	r0, r4
 800717c:	4629      	mov	r1, r5
 800717e:	f7f8 ffed 	bl	800015c <__adddf3>
 8007182:	4602      	mov	r2, r0
 8007184:	460b      	mov	r3, r1
 8007186:	4610      	mov	r0, r2
 8007188:	4619      	mov	r1, r3
 800718a:	f7f9 fc5f 	bl	8000a4c <__aeabi_d2f>
 800718e:	4602      	mov	r2, r0
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140

  //Pitch angle
	//**Tahmin**
	pitch = pitch  - pitch_bias*st + gyroY*st;
 8007196:	69fb      	ldr	r3, [r7, #28]
 8007198:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800719c:	69fb      	ldr	r3, [r7, #28]
 800719e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a0:	4618      	mov	r0, r3
 80071a2:	f7f9 f939 	bl	8000418 <__aeabi_f2d>
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 80071ac:	f7f9 f98c 	bl	80004c8 <__aeabi_dmul>
 80071b0:	4602      	mov	r2, r0
 80071b2:	460b      	mov	r3, r1
 80071b4:	4620      	mov	r0, r4
 80071b6:	4629      	mov	r1, r5
 80071b8:	f7f8 ffce 	bl	8000158 <__aeabi_dsub>
 80071bc:	4602      	mov	r2, r0
 80071be:	460b      	mov	r3, r1
 80071c0:	4614      	mov	r4, r2
 80071c2:	461d      	mov	r5, r3
 80071c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80071c6:	f7f9 f927 	bl	8000418 <__aeabi_f2d>
 80071ca:	69fb      	ldr	r3, [r7, #28]
 80071cc:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 80071d0:	f7f9 f97a 	bl	80004c8 <__aeabi_dmul>
 80071d4:	4602      	mov	r2, r0
 80071d6:	460b      	mov	r3, r1
 80071d8:	4620      	mov	r0, r4
 80071da:	4629      	mov	r1, r5
 80071dc:	f7f8 ffbe 	bl	800015c <__adddf3>
 80071e0:	4602      	mov	r2, r0
 80071e2:	460b      	mov	r3, r1
 80071e4:	69f9      	ldr	r1, [r7, #28]
 80071e6:	e9c1 2302 	strd	r2, r3, [r1, #8]
	S11_m_pitch = 2*sa_p+st*st*sb_p; S12_m_pitch=-st*sb_p;
 80071ea:	69fb      	ldr	r3, [r7, #28]
 80071ec:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 80071f0:	4602      	mov	r2, r0
 80071f2:	460b      	mov	r3, r1
 80071f4:	f7f8 ffb2 	bl	800015c <__adddf3>
 80071f8:	4602      	mov	r2, r0
 80071fa:	460b      	mov	r3, r1
 80071fc:	4614      	mov	r4, r2
 80071fe:	461d      	mov	r5, r3
 8007200:	69fb      	ldr	r3, [r7, #28]
 8007202:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	; 0xe8
 8007206:	69fb      	ldr	r3, [r7, #28]
 8007208:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 800720c:	f7f9 f95c 	bl	80004c8 <__aeabi_dmul>
 8007210:	4602      	mov	r2, r0
 8007212:	460b      	mov	r3, r1
 8007214:	4610      	mov	r0, r2
 8007216:	4619      	mov	r1, r3
 8007218:	69fb      	ldr	r3, [r7, #28]
 800721a:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800721e:	f7f9 f953 	bl	80004c8 <__aeabi_dmul>
 8007222:	4602      	mov	r2, r0
 8007224:	460b      	mov	r3, r1
 8007226:	4620      	mov	r0, r4
 8007228:	4629      	mov	r1, r5
 800722a:	f7f8 ff97 	bl	800015c <__adddf3>
 800722e:	4602      	mov	r2, r0
 8007230:	460b      	mov	r3, r1
 8007232:	4610      	mov	r0, r2
 8007234:	4619      	mov	r1, r3
 8007236:	f7f9 fc09 	bl	8000a4c <__aeabi_d2f>
 800723a:	4602      	mov	r2, r0
 800723c:	69fb      	ldr	r3, [r7, #28]
 800723e:	63da      	str	r2, [r3, #60]	; 0x3c
 8007240:	69fb      	ldr	r3, [r7, #28]
 8007242:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8007246:	4692      	mov	sl, r2
 8007248:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 800724c:	69fb      	ldr	r3, [r7, #28]
 800724e:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8007252:	4650      	mov	r0, sl
 8007254:	4659      	mov	r1, fp
 8007256:	f7f9 f937 	bl	80004c8 <__aeabi_dmul>
 800725a:	4602      	mov	r2, r0
 800725c:	460b      	mov	r3, r1
 800725e:	4610      	mov	r0, r2
 8007260:	4619      	mov	r1, r3
 8007262:	f7f9 fbf3 	bl	8000a4c <__aeabi_d2f>
 8007266:	4602      	mov	r2, r0
 8007268:	69fb      	ldr	r3, [r7, #28]
 800726a:	641a      	str	r2, [r3, #64]	; 0x40
	S21_m_pitch = -st*sb_p; 	   S22_m_pitch=2*sb_p;
 800726c:	69fb      	ldr	r3, [r7, #28]
 800726e:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8007272:	4690      	mov	r8, r2
 8007274:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8007278:	69fb      	ldr	r3, [r7, #28]
 800727a:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800727e:	4640      	mov	r0, r8
 8007280:	4649      	mov	r1, r9
 8007282:	f7f9 f921 	bl	80004c8 <__aeabi_dmul>
 8007286:	4602      	mov	r2, r0
 8007288:	460b      	mov	r3, r1
 800728a:	4610      	mov	r0, r2
 800728c:	4619      	mov	r1, r3
 800728e:	f7f9 fbdd 	bl	8000a4c <__aeabi_d2f>
 8007292:	4602      	mov	r2, r0
 8007294:	69fb      	ldr	r3, [r7, #28]
 8007296:	645a      	str	r2, [r3, #68]	; 0x44
 8007298:	69fb      	ldr	r3, [r7, #28]
 800729a:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 800729e:	4602      	mov	r2, r0
 80072a0:	460b      	mov	r3, r1
 80072a2:	f7f8 ff5b 	bl	800015c <__adddf3>
 80072a6:	4602      	mov	r2, r0
 80072a8:	460b      	mov	r3, r1
 80072aa:	4610      	mov	r0, r2
 80072ac:	4619      	mov	r1, r3
 80072ae:	f7f9 fbcd 	bl	8000a4c <__aeabi_d2f>
 80072b2:	4602      	mov	r2, r0
 80072b4:	69fb      	ldr	r3, [r7, #28]
 80072b6:	649a      	str	r2, [r3, #72]	; 0x48

	//**Düzeltme**
	Kt11_pitch = S11_m_pitch / (S11_m_pitch+Q);
 80072b8:	69fb      	ldr	r3, [r7, #28]
 80072ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072bc:	4618      	mov	r0, r3
 80072be:	f7f9 f8ab 	bl	8000418 <__aeabi_f2d>
 80072c2:	4604      	mov	r4, r0
 80072c4:	460d      	mov	r5, r1
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072ca:	4618      	mov	r0, r3
 80072cc:	f7f9 f8a4 	bl	8000418 <__aeabi_f2d>
 80072d0:	69fb      	ldr	r3, [r7, #28]
 80072d2:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 80072d6:	f7f8 ff41 	bl	800015c <__adddf3>
 80072da:	4602      	mov	r2, r0
 80072dc:	460b      	mov	r3, r1
 80072de:	4620      	mov	r0, r4
 80072e0:	4629      	mov	r1, r5
 80072e2:	f7f9 fa1b 	bl	800071c <__aeabi_ddiv>
 80072e6:	4602      	mov	r2, r0
 80072e8:	460b      	mov	r3, r1
 80072ea:	4610      	mov	r0, r2
 80072ec:	4619      	mov	r1, r3
 80072ee:	f7f9 fbad 	bl	8000a4c <__aeabi_d2f>
 80072f2:	4602      	mov	r2, r0
 80072f4:	69fb      	ldr	r3, [r7, #28]
 80072f6:	65da      	str	r2, [r3, #92]	; 0x5c
	Kt21_pitch = S21_m_pitch / (S21_m_pitch+Q);
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072fc:	4618      	mov	r0, r3
 80072fe:	f7f9 f88b 	bl	8000418 <__aeabi_f2d>
 8007302:	4604      	mov	r4, r0
 8007304:	460d      	mov	r5, r1
 8007306:	69fb      	ldr	r3, [r7, #28]
 8007308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800730a:	4618      	mov	r0, r3
 800730c:	f7f9 f884 	bl	8000418 <__aeabi_f2d>
 8007310:	69fb      	ldr	r3, [r7, #28]
 8007312:	e00b      	b.n	800732c <_ZN15Kalman_Filtresi3RunEPfS0_+0x38c>
 8007314:	f3af 8000 	nop.w
 8007318:	b22d0e56 	.word	0xb22d0e56
 800731c:	3fefef9d 	.word	0x3fefef9d
 8007320:	d2f1a9fc 	.word	0xd2f1a9fc
 8007324:	3f60624d 	.word	0x3f60624d
 8007328:	40a00000 	.word	0x40a00000
 800732c:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 8007330:	f7f8 ff14 	bl	800015c <__adddf3>
 8007334:	4602      	mov	r2, r0
 8007336:	460b      	mov	r3, r1
 8007338:	4620      	mov	r0, r4
 800733a:	4629      	mov	r1, r5
 800733c:	f7f9 f9ee 	bl	800071c <__aeabi_ddiv>
 8007340:	4602      	mov	r2, r0
 8007342:	460b      	mov	r3, r1
 8007344:	4610      	mov	r0, r2
 8007346:	4619      	mov	r1, r3
 8007348:	f7f9 fb80 	bl	8000a4c <__aeabi_d2f>
 800734c:	4602      	mov	r2, r0
 800734e:	69fb      	ldr	r3, [r7, #28]
 8007350:	661a      	str	r2, [r3, #96]	; 0x60

	pitch = pitch - Kt11_pitch*(pitch-pitch_acc);
 8007352:	69fb      	ldr	r3, [r7, #28]
 8007354:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8007358:	69fb      	ldr	r3, [r7, #28]
 800735a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800735c:	4618      	mov	r0, r3
 800735e:	f7f9 f85b 	bl	8000418 <__aeabi_f2d>
 8007362:	4682      	mov	sl, r0
 8007364:	468b      	mov	fp, r1
 8007366:	69fb      	ldr	r3, [r7, #28]
 8007368:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800736c:	69fb      	ldr	r3, [r7, #28]
 800736e:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8007372:	4618      	mov	r0, r3
 8007374:	f7f9 f850 	bl	8000418 <__aeabi_f2d>
 8007378:	4602      	mov	r2, r0
 800737a:	460b      	mov	r3, r1
 800737c:	4620      	mov	r0, r4
 800737e:	4629      	mov	r1, r5
 8007380:	f7f8 feea 	bl	8000158 <__aeabi_dsub>
 8007384:	4602      	mov	r2, r0
 8007386:	460b      	mov	r3, r1
 8007388:	4650      	mov	r0, sl
 800738a:	4659      	mov	r1, fp
 800738c:	f7f9 f89c 	bl	80004c8 <__aeabi_dmul>
 8007390:	4602      	mov	r2, r0
 8007392:	460b      	mov	r3, r1
 8007394:	4640      	mov	r0, r8
 8007396:	4649      	mov	r1, r9
 8007398:	f7f8 fede 	bl	8000158 <__aeabi_dsub>
 800739c:	4602      	mov	r2, r0
 800739e:	460b      	mov	r3, r1
 80073a0:	69f9      	ldr	r1, [r7, #28]
 80073a2:	e9c1 2302 	strd	r2, r3, [r1, #8]
	pitch_bias = pitch_bias - Kt21_pitch*(pitch-pitch_acc);
 80073a6:	69fb      	ldr	r3, [r7, #28]
 80073a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073aa:	4618      	mov	r0, r3
 80073ac:	f7f9 f834 	bl	8000418 <__aeabi_f2d>
 80073b0:	4680      	mov	r8, r0
 80073b2:	4689      	mov	r9, r1
 80073b4:	69fb      	ldr	r3, [r7, #28]
 80073b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073b8:	4618      	mov	r0, r3
 80073ba:	f7f9 f82d 	bl	8000418 <__aeabi_f2d>
 80073be:	4682      	mov	sl, r0
 80073c0:	468b      	mov	fp, r1
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80073c8:	69fb      	ldr	r3, [r7, #28]
 80073ca:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 80073ce:	4618      	mov	r0, r3
 80073d0:	f7f9 f822 	bl	8000418 <__aeabi_f2d>
 80073d4:	4602      	mov	r2, r0
 80073d6:	460b      	mov	r3, r1
 80073d8:	4620      	mov	r0, r4
 80073da:	4629      	mov	r1, r5
 80073dc:	f7f8 febc 	bl	8000158 <__aeabi_dsub>
 80073e0:	4602      	mov	r2, r0
 80073e2:	460b      	mov	r3, r1
 80073e4:	4650      	mov	r0, sl
 80073e6:	4659      	mov	r1, fp
 80073e8:	f7f9 f86e 	bl	80004c8 <__aeabi_dmul>
 80073ec:	4602      	mov	r2, r0
 80073ee:	460b      	mov	r3, r1
 80073f0:	4640      	mov	r0, r8
 80073f2:	4649      	mov	r1, r9
 80073f4:	f7f8 feb0 	bl	8000158 <__aeabi_dsub>
 80073f8:	4602      	mov	r2, r0
 80073fa:	460b      	mov	r3, r1
 80073fc:	4610      	mov	r0, r2
 80073fe:	4619      	mov	r1, r3
 8007400:	f7f9 fb24 	bl	8000a4c <__aeabi_d2f>
 8007404:	4602      	mov	r2, r0
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	631a      	str	r2, [r3, #48]	; 0x30

	S11_p_pitch = -S11_m_pitch*(Kt11_pitch-1);  S12_p_pitch = -S12_m_pitch*(Kt11_pitch-1);
 800740a:	69fb      	ldr	r3, [r7, #28]
 800740c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800740e:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8007412:	69fb      	ldr	r3, [r7, #28]
 8007414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007416:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800741a:	4618      	mov	r0, r3
 800741c:	f7f9 fb6a 	bl	8000af4 <__aeabi_fsub>
 8007420:	4603      	mov	r3, r0
 8007422:	4619      	mov	r1, r3
 8007424:	4620      	mov	r0, r4
 8007426:	f7f9 fc6f 	bl	8000d08 <__aeabi_fmul>
 800742a:	4603      	mov	r3, r0
 800742c:	461a      	mov	r2, r3
 800742e:	69fb      	ldr	r3, [r7, #28]
 8007430:	64da      	str	r2, [r3, #76]	; 0x4c
 8007432:	69fb      	ldr	r3, [r7, #28]
 8007434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007436:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800743a:	69fb      	ldr	r3, [r7, #28]
 800743c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800743e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8007442:	4618      	mov	r0, r3
 8007444:	f7f9 fb56 	bl	8000af4 <__aeabi_fsub>
 8007448:	4603      	mov	r3, r0
 800744a:	4619      	mov	r1, r3
 800744c:	4620      	mov	r0, r4
 800744e:	f7f9 fc5b 	bl	8000d08 <__aeabi_fmul>
 8007452:	4603      	mov	r3, r0
 8007454:	461a      	mov	r2, r3
 8007456:	69fb      	ldr	r3, [r7, #28]
 8007458:	651a      	str	r2, [r3, #80]	; 0x50
	S21_p_pitch = S21_m_pitch-S11_m_pitch*Kt21_pitch; S22_p_pitch = S22_m_pitch-S12_m_pitch*Kt21_pitch;
 800745a:	69fb      	ldr	r3, [r7, #28]
 800745c:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 800745e:	69fb      	ldr	r3, [r7, #28]
 8007460:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007462:	69fb      	ldr	r3, [r7, #28]
 8007464:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007466:	4619      	mov	r1, r3
 8007468:	4610      	mov	r0, r2
 800746a:	f7f9 fc4d 	bl	8000d08 <__aeabi_fmul>
 800746e:	4603      	mov	r3, r0
 8007470:	4619      	mov	r1, r3
 8007472:	4620      	mov	r0, r4
 8007474:	f7f9 fb3e 	bl	8000af4 <__aeabi_fsub>
 8007478:	4603      	mov	r3, r0
 800747a:	461a      	mov	r2, r3
 800747c:	69fb      	ldr	r3, [r7, #28]
 800747e:	655a      	str	r2, [r3, #84]	; 0x54
 8007480:	69fb      	ldr	r3, [r7, #28]
 8007482:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8007484:	69fb      	ldr	r3, [r7, #28]
 8007486:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007488:	69fb      	ldr	r3, [r7, #28]
 800748a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800748c:	4619      	mov	r1, r3
 800748e:	4610      	mov	r0, r2
 8007490:	f7f9 fc3a 	bl	8000d08 <__aeabi_fmul>
 8007494:	4603      	mov	r3, r0
 8007496:	4619      	mov	r1, r3
 8007498:	4620      	mov	r0, r4
 800749a:	f7f9 fb2b 	bl	8000af4 <__aeabi_fsub>
 800749e:	4603      	mov	r3, r0
 80074a0:	461a      	mov	r2, r3
 80074a2:	69fb      	ldr	r3, [r7, #28]
 80074a4:	659a      	str	r2, [r3, #88]	; 0x58

	S11_m_pitch = S11_p_pitch; S12_m_pitch = S12_p_pitch; S21_m_pitch = S21_p_pitch; S22_m_pitch = S22_p_pitch; 
 80074a6:	69fb      	ldr	r3, [r7, #28]
 80074a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	63da      	str	r2, [r3, #60]	; 0x3c
 80074ae:	69fb      	ldr	r3, [r7, #28]
 80074b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80074b2:	69fb      	ldr	r3, [r7, #28]
 80074b4:	641a      	str	r2, [r3, #64]	; 0x40
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074ba:	69fb      	ldr	r3, [r7, #28]
 80074bc:	645a      	str	r2, [r3, #68]	; 0x44
 80074be:	69fb      	ldr	r3, [r7, #28]
 80074c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80074c2:	69fb      	ldr	r3, [r7, #28]
 80074c4:	649a      	str	r2, [r3, #72]	; 0x48

  pitch_rate = gyroY;
 80074c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80074c8:	f7f8 ffa6 	bl	8000418 <__aeabi_f2d>
 80074cc:	4602      	mov	r2, r0
 80074ce:	460b      	mov	r3, r1
 80074d0:	69f9      	ldr	r1, [r7, #28]
 80074d2:	e9c1 2308 	strd	r2, r3, [r1, #32]
    //=================================

  //Roll angle
	//**Tahmin**
	roll = roll - roll_bias*st + gyroX*st;
 80074d6:	69fb      	ldr	r3, [r7, #28]
 80074d8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80074dc:	69fb      	ldr	r3, [r7, #28]
 80074de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074e0:	4618      	mov	r0, r3
 80074e2:	f7f8 ff99 	bl	8000418 <__aeabi_f2d>
 80074e6:	69fb      	ldr	r3, [r7, #28]
 80074e8:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 80074ec:	f7f8 ffec 	bl	80004c8 <__aeabi_dmul>
 80074f0:	4602      	mov	r2, r0
 80074f2:	460b      	mov	r3, r1
 80074f4:	4620      	mov	r0, r4
 80074f6:	4629      	mov	r1, r5
 80074f8:	f7f8 fe2e 	bl	8000158 <__aeabi_dsub>
 80074fc:	4602      	mov	r2, r0
 80074fe:	460b      	mov	r3, r1
 8007500:	4614      	mov	r4, r2
 8007502:	461d      	mov	r5, r3
 8007504:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007506:	f7f8 ff87 	bl	8000418 <__aeabi_f2d>
 800750a:	69fb      	ldr	r3, [r7, #28]
 800750c:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8007510:	f7f8 ffda 	bl	80004c8 <__aeabi_dmul>
 8007514:	4602      	mov	r2, r0
 8007516:	460b      	mov	r3, r1
 8007518:	4620      	mov	r0, r4
 800751a:	4629      	mov	r1, r5
 800751c:	f7f8 fe1e 	bl	800015c <__adddf3>
 8007520:	4602      	mov	r2, r0
 8007522:	460b      	mov	r3, r1
 8007524:	69f9      	ldr	r1, [r7, #28]
 8007526:	e9c1 2300 	strd	r2, r3, [r1]
	S11_m_roll = 2*sa+st*st*sb; S12_m_roll=-st*sb;
 800752a:	69fb      	ldr	r3, [r7, #28]
 800752c:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8007530:	4602      	mov	r2, r0
 8007532:	460b      	mov	r3, r1
 8007534:	f7f8 fe12 	bl	800015c <__adddf3>
 8007538:	4602      	mov	r2, r0
 800753a:	460b      	mov	r3, r1
 800753c:	4614      	mov	r4, r2
 800753e:	461d      	mov	r5, r3
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	; 0xe8
 8007546:	69fb      	ldr	r3, [r7, #28]
 8007548:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 800754c:	f7f8 ffbc 	bl	80004c8 <__aeabi_dmul>
 8007550:	4602      	mov	r2, r0
 8007552:	460b      	mov	r3, r1
 8007554:	4610      	mov	r0, r2
 8007556:	4619      	mov	r1, r3
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 800755e:	f7f8 ffb3 	bl	80004c8 <__aeabi_dmul>
 8007562:	4602      	mov	r2, r0
 8007564:	460b      	mov	r3, r1
 8007566:	4620      	mov	r0, r4
 8007568:	4629      	mov	r1, r5
 800756a:	f7f8 fdf7 	bl	800015c <__adddf3>
 800756e:	4602      	mov	r2, r0
 8007570:	460b      	mov	r3, r1
 8007572:	4610      	mov	r0, r2
 8007574:	4619      	mov	r1, r3
 8007576:	f7f9 fa69 	bl	8000a4c <__aeabi_d2f>
 800757a:	4602      	mov	r2, r0
 800757c:	69fb      	ldr	r3, [r7, #28]
 800757e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8007582:	69fb      	ldr	r3, [r7, #28]
 8007584:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8007588:	60ba      	str	r2, [r7, #8]
 800758a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800758e:	60fb      	str	r3, [r7, #12]
 8007590:	69fb      	ldr	r3, [r7, #28]
 8007592:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8007596:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800759a:	f7f8 ff95 	bl	80004c8 <__aeabi_dmul>
 800759e:	4602      	mov	r2, r0
 80075a0:	460b      	mov	r3, r1
 80075a2:	4610      	mov	r0, r2
 80075a4:	4619      	mov	r1, r3
 80075a6:	f7f9 fa51 	bl	8000a4c <__aeabi_d2f>
 80075aa:	4602      	mov	r2, r0
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	S21_m_roll = -st*sb; 	   S22_m_roll=2*sb;
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 80075b8:	603a      	str	r2, [r7, #0]
 80075ba:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80075be:	607b      	str	r3, [r7, #4]
 80075c0:	69fb      	ldr	r3, [r7, #28]
 80075c2:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80075c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80075ca:	f7f8 ff7d 	bl	80004c8 <__aeabi_dmul>
 80075ce:	4602      	mov	r2, r0
 80075d0:	460b      	mov	r3, r1
 80075d2:	4610      	mov	r0, r2
 80075d4:	4619      	mov	r1, r3
 80075d6:	f7f9 fa39 	bl	8000a4c <__aeabi_d2f>
 80075da:	4602      	mov	r2, r0
 80075dc:	69fb      	ldr	r3, [r7, #28]
 80075de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80075e2:	69fb      	ldr	r3, [r7, #28]
 80075e4:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 80075e8:	4602      	mov	r2, r0
 80075ea:	460b      	mov	r3, r1
 80075ec:	f7f8 fdb6 	bl	800015c <__adddf3>
 80075f0:	4602      	mov	r2, r0
 80075f2:	460b      	mov	r3, r1
 80075f4:	4610      	mov	r0, r2
 80075f6:	4619      	mov	r1, r3
 80075f8:	f7f9 fa28 	bl	8000a4c <__aeabi_d2f>
 80075fc:	4602      	mov	r2, r0
 80075fe:	69fb      	ldr	r3, [r7, #28]
 8007600:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

	//**Düzeltme**
	Kt11_roll = S11_m_roll / (S11_m_roll+Q);
 8007604:	69fb      	ldr	r3, [r7, #28]
 8007606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800760a:	4618      	mov	r0, r3
 800760c:	f7f8 ff04 	bl	8000418 <__aeabi_f2d>
 8007610:	4604      	mov	r4, r0
 8007612:	460d      	mov	r5, r1
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800761a:	4618      	mov	r0, r3
 800761c:	f7f8 fefc 	bl	8000418 <__aeabi_f2d>
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 8007626:	f7f8 fd99 	bl	800015c <__adddf3>
 800762a:	4602      	mov	r2, r0
 800762c:	460b      	mov	r3, r1
 800762e:	4620      	mov	r0, r4
 8007630:	4629      	mov	r1, r5
 8007632:	f7f9 f873 	bl	800071c <__aeabi_ddiv>
 8007636:	4602      	mov	r2, r0
 8007638:	460b      	mov	r3, r1
 800763a:	4610      	mov	r0, r2
 800763c:	4619      	mov	r1, r3
 800763e:	f7f9 fa05 	bl	8000a4c <__aeabi_d2f>
 8007642:	4602      	mov	r2, r0
 8007644:	69fb      	ldr	r3, [r7, #28]
 8007646:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	Kt21_roll = S21_m_roll / (S21_m_roll+Q);
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007650:	4618      	mov	r0, r3
 8007652:	f7f8 fee1 	bl	8000418 <__aeabi_f2d>
 8007656:	4604      	mov	r4, r0
 8007658:	460d      	mov	r5, r1
 800765a:	69fb      	ldr	r3, [r7, #28]
 800765c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007660:	4618      	mov	r0, r3
 8007662:	f7f8 fed9 	bl	8000418 <__aeabi_f2d>
 8007666:	69fb      	ldr	r3, [r7, #28]
 8007668:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 800766c:	f7f8 fd76 	bl	800015c <__adddf3>
 8007670:	4602      	mov	r2, r0
 8007672:	460b      	mov	r3, r1
 8007674:	4620      	mov	r0, r4
 8007676:	4629      	mov	r1, r5
 8007678:	f7f9 f850 	bl	800071c <__aeabi_ddiv>
 800767c:	4602      	mov	r2, r0
 800767e:	460b      	mov	r3, r1
 8007680:	4610      	mov	r0, r2
 8007682:	4619      	mov	r1, r3
 8007684:	f7f9 f9e2 	bl	8000a4c <__aeabi_d2f>
 8007688:	4602      	mov	r2, r0
 800768a:	69fb      	ldr	r3, [r7, #28]
 800768c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

	roll = roll - Kt11_roll*(roll-roll_acc);
 8007690:	69fb      	ldr	r3, [r7, #28]
 8007692:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007696:	69fb      	ldr	r3, [r7, #28]
 8007698:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800769c:	4618      	mov	r0, r3
 800769e:	f7f8 febb 	bl	8000418 <__aeabi_f2d>
 80076a2:	4682      	mov	sl, r0
 80076a4:	468b      	mov	fp, r1
 80076a6:	69fb      	ldr	r3, [r7, #28]
 80076a8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80076b2:	4618      	mov	r0, r3
 80076b4:	f7f8 feb0 	bl	8000418 <__aeabi_f2d>
 80076b8:	4602      	mov	r2, r0
 80076ba:	460b      	mov	r3, r1
 80076bc:	4640      	mov	r0, r8
 80076be:	4649      	mov	r1, r9
 80076c0:	f7f8 fd4a 	bl	8000158 <__aeabi_dsub>
 80076c4:	4602      	mov	r2, r0
 80076c6:	460b      	mov	r3, r1
 80076c8:	4650      	mov	r0, sl
 80076ca:	4659      	mov	r1, fp
 80076cc:	f7f8 fefc 	bl	80004c8 <__aeabi_dmul>
 80076d0:	4602      	mov	r2, r0
 80076d2:	460b      	mov	r3, r1
 80076d4:	4620      	mov	r0, r4
 80076d6:	4629      	mov	r1, r5
 80076d8:	f7f8 fd3e 	bl	8000158 <__aeabi_dsub>
 80076dc:	4602      	mov	r2, r0
 80076de:	460b      	mov	r3, r1
 80076e0:	69f9      	ldr	r1, [r7, #28]
 80076e2:	e9c1 2300 	strd	r2, r3, [r1]
	roll_bias = roll_bias - Kt21_roll*(roll-roll_acc);
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076ea:	4618      	mov	r0, r3
 80076ec:	f7f8 fe94 	bl	8000418 <__aeabi_f2d>
 80076f0:	4680      	mov	r8, r0
 80076f2:	4689      	mov	r9, r1
 80076f4:	69fb      	ldr	r3, [r7, #28]
 80076f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80076fa:	4618      	mov	r0, r3
 80076fc:	f7f8 fe8c 	bl	8000418 <__aeabi_f2d>
 8007700:	4682      	mov	sl, r0
 8007702:	468b      	mov	fp, r1
 8007704:	69fb      	ldr	r3, [r7, #28]
 8007706:	e9d3 4500 	ldrd	r4, r5, [r3]
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8007710:	4618      	mov	r0, r3
 8007712:	f7f8 fe81 	bl	8000418 <__aeabi_f2d>
 8007716:	4602      	mov	r2, r0
 8007718:	460b      	mov	r3, r1
 800771a:	4620      	mov	r0, r4
 800771c:	4629      	mov	r1, r5
 800771e:	f7f8 fd1b 	bl	8000158 <__aeabi_dsub>
 8007722:	4602      	mov	r2, r0
 8007724:	460b      	mov	r3, r1
 8007726:	4650      	mov	r0, sl
 8007728:	4659      	mov	r1, fp
 800772a:	f7f8 fecd 	bl	80004c8 <__aeabi_dmul>
 800772e:	4602      	mov	r2, r0
 8007730:	460b      	mov	r3, r1
 8007732:	4640      	mov	r0, r8
 8007734:	4649      	mov	r1, r9
 8007736:	f7f8 fd0f 	bl	8000158 <__aeabi_dsub>
 800773a:	4602      	mov	r2, r0
 800773c:	460b      	mov	r3, r1
 800773e:	4610      	mov	r0, r2
 8007740:	4619      	mov	r1, r3
 8007742:	f7f9 f983 	bl	8000a4c <__aeabi_d2f>
 8007746:	4602      	mov	r2, r0
 8007748:	69fb      	ldr	r3, [r7, #28]
 800774a:	635a      	str	r2, [r3, #52]	; 0x34

	S11_p_roll = -S11_m_roll*(Kt11_roll-1);  S12_p_roll = -S12_m_roll*(Kt11_roll-1);
 800774c:	69fb      	ldr	r3, [r7, #28]
 800774e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007752:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8007756:	69fb      	ldr	r3, [r7, #28]
 8007758:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800775c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8007760:	4618      	mov	r0, r3
 8007762:	f7f9 f9c7 	bl	8000af4 <__aeabi_fsub>
 8007766:	4603      	mov	r3, r0
 8007768:	4619      	mov	r1, r3
 800776a:	4620      	mov	r0, r4
 800776c:	f7f9 facc 	bl	8000d08 <__aeabi_fmul>
 8007770:	4603      	mov	r3, r0
 8007772:	461a      	mov	r2, r3
 8007774:	69fb      	ldr	r3, [r7, #28]
 8007776:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800777a:	69fb      	ldr	r3, [r7, #28]
 800777c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007780:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8007784:	69fb      	ldr	r3, [r7, #28]
 8007786:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800778a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800778e:	4618      	mov	r0, r3
 8007790:	f7f9 f9b0 	bl	8000af4 <__aeabi_fsub>
 8007794:	4603      	mov	r3, r0
 8007796:	4619      	mov	r1, r3
 8007798:	4620      	mov	r0, r4
 800779a:	f7f9 fab5 	bl	8000d08 <__aeabi_fmul>
 800779e:	4603      	mov	r3, r0
 80077a0:	461a      	mov	r2, r3
 80077a2:	69fb      	ldr	r3, [r7, #28]
 80077a4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	S21_p_roll = S21_m_roll-S11_m_roll*Kt21_roll; S22_p_roll = S22_m_roll-S12_m_roll*Kt21_roll;
 80077a8:	69fb      	ldr	r3, [r7, #28]
 80077aa:	f8d3 4090 	ldr.w	r4, [r3, #144]	; 0x90
 80077ae:	69fb      	ldr	r3, [r7, #28]
 80077b0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80077b4:	69fb      	ldr	r3, [r7, #28]
 80077b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80077ba:	4619      	mov	r1, r3
 80077bc:	4610      	mov	r0, r2
 80077be:	f7f9 faa3 	bl	8000d08 <__aeabi_fmul>
 80077c2:	4603      	mov	r3, r0
 80077c4:	4619      	mov	r1, r3
 80077c6:	4620      	mov	r0, r4
 80077c8:	f7f9 f994 	bl	8000af4 <__aeabi_fsub>
 80077cc:	4603      	mov	r3, r0
 80077ce:	461a      	mov	r2, r3
 80077d0:	69fb      	ldr	r3, [r7, #28]
 80077d2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 80077d6:	69fb      	ldr	r3, [r7, #28]
 80077d8:	f8d3 4094 	ldr.w	r4, [r3, #148]	; 0x94
 80077dc:	69fb      	ldr	r3, [r7, #28]
 80077de:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80077e2:	69fb      	ldr	r3, [r7, #28]
 80077e4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80077e8:	4619      	mov	r1, r3
 80077ea:	4610      	mov	r0, r2
 80077ec:	f7f9 fa8c 	bl	8000d08 <__aeabi_fmul>
 80077f0:	4603      	mov	r3, r0
 80077f2:	4619      	mov	r1, r3
 80077f4:	4620      	mov	r0, r4
 80077f6:	f7f9 f97d 	bl	8000af4 <__aeabi_fsub>
 80077fa:	4603      	mov	r3, r0
 80077fc:	461a      	mov	r2, r3
 80077fe:	69fb      	ldr	r3, [r7, #28]
 8007800:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	S11_m_roll = S11_p_roll; S12_m_roll = S12_p_roll; S21_m_roll = S21_p_roll; S22_m_roll = S22_p_roll; 
 8007804:	69fb      	ldr	r3, [r7, #28]
 8007806:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800780a:	69fb      	ldr	r3, [r7, #28]
 800780c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8007810:	69fb      	ldr	r3, [r7, #28]
 8007812:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8007816:	69fb      	ldr	r3, [r7, #28]
 8007818:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800781c:	69fb      	ldr	r3, [r7, #28]
 800781e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8007822:	69fb      	ldr	r3, [r7, #28]
 8007824:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8007828:	69fb      	ldr	r3, [r7, #28]
 800782a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800782e:	69fb      	ldr	r3, [r7, #28]
 8007830:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  roll_rate = gyroX;
 8007834:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007836:	f7f8 fdef 	bl	8000418 <__aeabi_f2d>
 800783a:	4602      	mov	r2, r0
 800783c:	460b      	mov	r3, r1
 800783e:	69f9      	ldr	r1, [r7, #28]
 8007840:	e9c1 2306 	strd	r2, r3, [r1, #24]

	S11_p_yaw = -S11_m_yaw*(Kt11_yaw-1);  S12_p_yaw = -S12_m_yaw*(Kt11_yaw-1);
	S21_p_yaw = S21_m_yaw-S11_m_yaw*Kt21_yaw; S22_p_yaw = S22_m_yaw-S12_m_yaw*Kt21_yaw;

	S11_m_yaw = S11_p_yaw; S12_m_yaw = S12_p_yaw; S21_m_yaw = S21_p_yaw; S22_m_yaw = S22_p_yaw; */
  yaw_rate = gyroZ;
 8007844:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007846:	f7f8 fde7 	bl	8000418 <__aeabi_f2d>
 800784a:	4602      	mov	r2, r0
 800784c:	460b      	mov	r3, r1
 800784e:	69f9      	ldr	r1, [r7, #28]
 8007850:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 8007854:	e025      	b.n	80078a2 <_ZN15Kalman_Filtresi3RunEPfS0_+0x902>
    //=================================

    }

    else {
    	roll = roll_acc;
 8007856:	69fb      	ldr	r3, [r7, #28]
 8007858:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800785c:	4618      	mov	r0, r3
 800785e:	f7f8 fddb 	bl	8000418 <__aeabi_f2d>
 8007862:	4602      	mov	r2, r0
 8007864:	460b      	mov	r3, r1
 8007866:	69f9      	ldr	r1, [r7, #28]
 8007868:	e9c1 2300 	strd	r2, r3, [r1]
    	pitch = pitch_acc;
 800786c:	69fb      	ldr	r3, [r7, #28]
 800786e:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8007872:	4618      	mov	r0, r3
 8007874:	f7f8 fdd0 	bl	8000418 <__aeabi_f2d>
 8007878:	4602      	mov	r2, r0
 800787a:	460b      	mov	r3, r1
 800787c:	69f9      	ldr	r1, [r7, #28]
 800787e:	e9c1 2302 	strd	r2, r3, [r1, #8]

    	roll_comp  = roll_acc;
 8007882:	69fb      	ldr	r3, [r7, #28]
 8007884:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 8007888:	69fb      	ldr	r3, [r7, #28]
 800788a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    	pitch_comp = pitch_acc;
 800788e:	69fb      	ldr	r3, [r7, #28]
 8007890:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 8007894:	69fb      	ldr	r3, [r7, #28]
 8007896:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c

    	gyro_ready = true;
 800789a:	69fb      	ldr	r3, [r7, #28]
 800789c:	2201      	movs	r2, #1
 800789e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    }

	pitch_eski=pitch_comp;
 80078a2:	69fb      	ldr	r3, [r7, #28]
 80078a4:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 80078a8:	69fb      	ldr	r3, [r7, #28]
 80078aa:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	roll_eski=roll_comp;
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80078b4:	69fb      	ldr	r3, [r7, #28]
 80078b6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

    state.angles[0] = roll_comp;
 80078ba:	69fb      	ldr	r3, [r7, #28]
 80078bc:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80078c0:	69fb      	ldr	r3, [r7, #28]
 80078c2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    state.angles[1] = pitch_comp;
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 80078cc:	69fb      	ldr	r3, [r7, #28]
 80078ce:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    state.angles[2] = yaw;
 80078d2:	69fb      	ldr	r3, [r7, #28]
 80078d4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80078d8:	4610      	mov	r0, r2
 80078da:	4619      	mov	r1, r3
 80078dc:	f7f9 f8b6 	bl	8000a4c <__aeabi_d2f>
 80078e0:	4602      	mov	r2, r0
 80078e2:	69fb      	ldr	r3, [r7, #28]
 80078e4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

    state.rates[0] = roll_rate;
 80078e8:	69fb      	ldr	r3, [r7, #28]
 80078ea:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80078ee:	4610      	mov	r0, r2
 80078f0:	4619      	mov	r1, r3
 80078f2:	f7f9 f8ab 	bl	8000a4c <__aeabi_d2f>
 80078f6:	4602      	mov	r2, r0
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    state.rates[1] = pitch_rate;
 80078fe:	69fb      	ldr	r3, [r7, #28]
 8007900:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007904:	4610      	mov	r0, r2
 8007906:	4619      	mov	r1, r3
 8007908:	f7f9 f8a0 	bl	8000a4c <__aeabi_d2f>
 800790c:	4602      	mov	r2, r0
 800790e:	69fb      	ldr	r3, [r7, #28]
 8007910:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    state.rates[2] = yaw_rate;
 8007914:	69fb      	ldr	r3, [r7, #28]
 8007916:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800791a:	4610      	mov	r0, r2
 800791c:	4619      	mov	r1, r3
 800791e:	f7f9 f895 	bl	8000a4c <__aeabi_d2f>
 8007922:	4602      	mov	r2, r0
 8007924:	69fb      	ldr	r3, [r7, #28]
 8007926:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

    state.bias[0] = roll_bias;
 800792a:	69fb      	ldr	r3, [r7, #28]
 800792c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800792e:	69fb      	ldr	r3, [r7, #28]
 8007930:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    state.bias[1] = pitch_bias;
 8007934:	69fb      	ldr	r3, [r7, #28]
 8007936:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007938:	69fb      	ldr	r3, [r7, #28]
 800793a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    state.bias[2] = yaw_bias;
 800793e:	69fb      	ldr	r3, [r7, #28]
 8007940:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007942:	69fb      	ldr	r3, [r7, #28]
 8007944:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124

}
 8007948:	bf00      	nop
 800794a:	3740      	adds	r7, #64	; 0x40
 800794c:	46bd      	mov	sp, r7
 800794e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007952:	bf00      	nop

08007954 <_ZN15Kalman_FiltresiD1Ev>:

Kalman_Filtresi::~Kalman_Filtresi() {}
 8007954:	b480      	push	{r7}
 8007956:	b083      	sub	sp, #12
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	4618      	mov	r0, r3
 8007960:	370c      	adds	r7, #12
 8007962:	46bd      	mov	sp, r7
 8007964:	bc80      	pop	{r7}
 8007966:	4770      	bx	lr

08007968 <_ZN13LowPassFilterC1Eff>:

LowPassFilter::LowPassFilter():
	output(0),
	ePow(0){}

LowPassFilter::LowPassFilter(float iCutOffFrequency, float iDeltaTime):
 8007968:	b5b0      	push	{r4, r5, r7, lr}
 800796a:	b084      	sub	sp, #16
 800796c:	af00      	add	r7, sp, #0
 800796e:	60f8      	str	r0, [r7, #12]
 8007970:	60b9      	str	r1, [r7, #8]
 8007972:	607a      	str	r2, [r7, #4]
	output(0),
	ePow(1-exp(-iDeltaTime * 2 * M_PI * iCutOffFrequency))
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f04f 0200 	mov.w	r2, #0
 800797a:	601a      	str	r2, [r3, #0]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007982:	4619      	mov	r1, r3
 8007984:	4618      	mov	r0, r3
 8007986:	f7f9 f8b7 	bl	8000af8 <__addsf3>
 800798a:	4603      	mov	r3, r0
 800798c:	4618      	mov	r0, r3
 800798e:	f7f8 fd43 	bl	8000418 <__aeabi_f2d>
 8007992:	a317      	add	r3, pc, #92	; (adr r3, 80079f0 <_ZN13LowPassFilterC1Eff+0x88>)
 8007994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007998:	f7f8 fd96 	bl	80004c8 <__aeabi_dmul>
 800799c:	4602      	mov	r2, r0
 800799e:	460b      	mov	r3, r1
 80079a0:	4614      	mov	r4, r2
 80079a2:	461d      	mov	r5, r3
 80079a4:	68b8      	ldr	r0, [r7, #8]
 80079a6:	f7f8 fd37 	bl	8000418 <__aeabi_f2d>
 80079aa:	4602      	mov	r2, r0
 80079ac:	460b      	mov	r3, r1
 80079ae:	4620      	mov	r0, r4
 80079b0:	4629      	mov	r1, r5
 80079b2:	f7f8 fd89 	bl	80004c8 <__aeabi_dmul>
 80079b6:	4602      	mov	r2, r0
 80079b8:	460b      	mov	r3, r1
 80079ba:	4610      	mov	r0, r2
 80079bc:	4619      	mov	r1, r3
 80079be:	f000 fb53 	bl	8008068 <exp>
 80079c2:	4602      	mov	r2, r0
 80079c4:	460b      	mov	r3, r1
 80079c6:	f04f 0000 	mov.w	r0, #0
 80079ca:	490b      	ldr	r1, [pc, #44]	; (80079f8 <_ZN13LowPassFilterC1Eff+0x90>)
 80079cc:	f7f8 fbc4 	bl	8000158 <__aeabi_dsub>
 80079d0:	4602      	mov	r2, r0
 80079d2:	460b      	mov	r3, r1
 80079d4:	4610      	mov	r0, r2
 80079d6:	4619      	mov	r1, r3
 80079d8:	f7f9 f838 	bl	8000a4c <__aeabi_d2f>
 80079dc:	4602      	mov	r2, r0
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	605a      	str	r2, [r3, #4]
	if(iCutOffFrequency <= 0){
		std::cout << "Warning: A LowPassFilter instance has been configured with 0 Hz as cut-off frequency.";
		ePow = 0;
	}
	#endif
}
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	4618      	mov	r0, r3
 80079e6:	3710      	adds	r7, #16
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bdb0      	pop	{r4, r5, r7, pc}
 80079ec:	f3af 8000 	nop.w
 80079f0:	54442d18 	.word	0x54442d18
 80079f4:	400921fb 	.word	0x400921fb
 80079f8:	3ff00000 	.word	0x3ff00000

080079fc <_ZN3PIDC1Ev>:
#include "PID.hpp"

PID::PID(): lpf(LP_FILTER_CUT_FREQ,st) {};
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b082      	sub	sp, #8
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	4a13      	ldr	r2, [pc, #76]	; (8007a54 <_ZN3PIDC1Ev+0x58>)
 8007a08:	601a      	str	r2, [r3, #0]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	4a12      	ldr	r2, [pc, #72]	; (8007a58 <_ZN3PIDC1Ev+0x5c>)
 8007a0e:	605a      	str	r2, [r3, #4]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	22c8      	movs	r2, #200	; 0xc8
 8007a14:	609a      	str	r2, [r3, #8]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f7f9 f920 	bl	8000c60 <__aeabi_i2f>
 8007a20:	4603      	mov	r3, r0
 8007a22:	4619      	mov	r1, r3
 8007a24:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007a28:	f7f9 fa22 	bl	8000e70 <__aeabi_fdiv>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	461a      	mov	r2, r3
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	60da      	str	r2, [r3, #12]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f103 0018 	add.w	r0, r3, #24
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	68db      	ldr	r3, [r3, #12]
 8007a3e:	461a      	mov	r2, r3
 8007a40:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8007a44:	f7ff ff90 	bl	8007968 <_ZN13LowPassFilterC1Eff>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3708      	adds	r7, #8
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	bf00      	nop
 8007a54:	42f00000 	.word	0x42f00000
 8007a58:	c2f00000 	.word	0xc2f00000

08007a5c <_ZN3PID7P_AngleEddd>:

double PID::P_Angle(double alpha_des, double alpha, double Kp_angle) {
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b088      	sub	sp, #32
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	60f8      	str	r0, [r7, #12]
 8007a64:	e9c7 2300 	strd	r2, r3, [r7]
	double P;
	double e = alpha_des - alpha;
 8007a68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007a6c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a70:	f7f8 fb72 	bl	8000158 <__aeabi_dsub>
 8007a74:	4602      	mov	r2, r0
 8007a76:	460b      	mov	r3, r1
 8007a78:	e9c7 2306 	strd	r2, r3, [r7, #24]
	P = Kp_angle*e;
 8007a7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a80:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007a84:	f7f8 fd20 	bl	80004c8 <__aeabi_dmul>
 8007a88:	4602      	mov	r2, r0
 8007a8a:	460b      	mov	r3, r1
 8007a8c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    return P;
 8007a90:	e9d7 2304 	ldrd	r2, r3, [r7, #16]

}
 8007a94:	4610      	mov	r0, r2
 8007a96:	4619      	mov	r1, r3
 8007a98:	3720      	adds	r7, #32
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
	...

08007aa0 <_ZN3PID7PD_RateEddddd>:


double PID::PD_Rate(double alpha_dot_des, double alpha_dot, double Kp, double Ki, double Kd) {
 8007aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007aa2:	b089      	sub	sp, #36	; 0x24
 8007aa4:	af02      	add	r7, sp, #8
 8007aa6:	60f8      	str	r0, [r7, #12]
 8007aa8:	e9c7 2300 	strd	r2, r3, [r7]

	e_roll = alpha_dot_des - alpha_dot;
 8007aac:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007ab0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ab4:	f7f8 fb50 	bl	8000158 <__aeabi_dsub>
 8007ab8:	4602      	mov	r2, r0
 8007aba:	460b      	mov	r3, r1
 8007abc:	4610      	mov	r0, r2
 8007abe:	4619      	mov	r1, r3
 8007ac0:	f7f8 ffc4 	bl	8000a4c <__aeabi_d2f>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	621a      	str	r2, [r3, #32]
  double e_roll_int = e_roll;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	6a1b      	ldr	r3, [r3, #32]
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f7f8 fca2 	bl	8000418 <__aeabi_f2d>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	e9c7 2304 	strd	r2, r3, [r7, #16]

  if((int)pd_roll_buf != (int)pd_roll_sat_buf) {
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	691b      	ldr	r3, [r3, #16]
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f7f9 faed 	bl	80010c0 <__aeabi_f2iz>
 8007ae6:	4604      	mov	r4, r0
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aec:	4618      	mov	r0, r3
 8007aee:	f7f9 fae7 	bl	80010c0 <__aeabi_f2iz>
 8007af2:	4603      	mov	r3, r0
 8007af4:	429c      	cmp	r4, r3
 8007af6:	d02b      	beq.n	8007b50 <_ZN3PID7PD_RateEddddd+0xb0>
    if(sgn(e_roll) == sgn(pd_roll_sat_buf)) {
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	6a1b      	ldr	r3, [r3, #32]
 8007afc:	4618      	mov	r0, r3
 8007afe:	f7f8 fc8b 	bl	8000418 <__aeabi_f2d>
 8007b02:	4602      	mov	r2, r0
 8007b04:	460b      	mov	r3, r1
 8007b06:	68f8      	ldr	r0, [r7, #12]
 8007b08:	f000 f936 	bl	8007d78 <_ZN3PID3sgnEd>
 8007b0c:	4604      	mov	r4, r0
 8007b0e:	460d      	mov	r5, r1
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b14:	4618      	mov	r0, r3
 8007b16:	f7f8 fc7f 	bl	8000418 <__aeabi_f2d>
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	460b      	mov	r3, r1
 8007b1e:	68f8      	ldr	r0, [r7, #12]
 8007b20:	f000 f92a 	bl	8007d78 <_ZN3PID3sgnEd>
 8007b24:	4602      	mov	r2, r0
 8007b26:	460b      	mov	r3, r1
 8007b28:	2101      	movs	r1, #1
 8007b2a:	460e      	mov	r6, r1
 8007b2c:	4620      	mov	r0, r4
 8007b2e:	4629      	mov	r1, r5
 8007b30:	f7f8 ff32 	bl	8000998 <__aeabi_dcmpeq>
 8007b34:	4603      	mov	r3, r0
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d101      	bne.n	8007b3e <_ZN3PID7PD_RateEddddd+0x9e>
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	461e      	mov	r6, r3
 8007b3e:	b2f3      	uxtb	r3, r6
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d005      	beq.n	8007b50 <_ZN3PID7PD_RateEddddd+0xb0>
      e_roll_int = 0;
 8007b44:	f04f 0200 	mov.w	r2, #0
 8007b48:	f04f 0300 	mov.w	r3, #0
 8007b4c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    }
  }

  	de_filt = N * (e_roll - de_int);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	6a1a      	ldr	r2, [r3, #32]
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b58:	4619      	mov	r1, r3
 8007b5a:	4610      	mov	r0, r2
 8007b5c:	f7f8 ffca 	bl	8000af4 <__aeabi_fsub>
 8007b60:	4603      	mov	r3, r0
 8007b62:	4618      	mov	r0, r3
 8007b64:	f7f8 fc58 	bl	8000418 <__aeabi_f2d>
 8007b68:	a35f      	add	r3, pc, #380	; (adr r3, 8007ce8 <_ZN3PID7PD_RateEddddd+0x248>)
 8007b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b6e:	f7f8 fcab 	bl	80004c8 <__aeabi_dmul>
 8007b72:	4602      	mov	r2, r0
 8007b74:	460b      	mov	r3, r1
 8007b76:	4610      	mov	r0, r2
 8007b78:	4619      	mov	r1, r3
 8007b7a:	f7f8 ff67 	bl	8000a4c <__aeabi_d2f>
 8007b7e:	4602      	mov	r2, r0
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	645a      	str	r2, [r3, #68]	; 0x44
  	de_int += de_filt*st;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	68db      	ldr	r3, [r3, #12]
 8007b90:	4619      	mov	r1, r3
 8007b92:	4610      	mov	r0, r2
 8007b94:	f7f9 f8b8 	bl	8000d08 <__aeabi_fmul>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	4620      	mov	r0, r4
 8007b9e:	f7f8 ffab 	bl	8000af8 <__addsf3>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	461a      	mov	r2, r3
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	649a      	str	r2, [r3, #72]	; 0x48

	de = e_roll - e_eski_roll;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	6a1a      	ldr	r2, [r3, #32]
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	4610      	mov	r0, r2
 8007bb6:	f7f8 ff9d 	bl	8000af4 <__aeabi_fsub>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	641a      	str	r2, [r3, #64]	; 0x40
	e_eski_roll = e_roll;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	6a1a      	ldr	r2, [r3, #32]
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	629a      	str	r2, [r3, #40]	; 0x28

  ie_roll += e_roll_int*st;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f7f8 fc22 	bl	8000418 <__aeabi_f2d>
 8007bd4:	4604      	mov	r4, r0
 8007bd6:	460d      	mov	r5, r1
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	68db      	ldr	r3, [r3, #12]
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f7f8 fc1b 	bl	8000418 <__aeabi_f2d>
 8007be2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007be6:	f7f8 fc6f 	bl	80004c8 <__aeabi_dmul>
 8007bea:	4602      	mov	r2, r0
 8007bec:	460b      	mov	r3, r1
 8007bee:	4620      	mov	r0, r4
 8007bf0:	4629      	mov	r1, r5
 8007bf2:	f7f8 fab3 	bl	800015c <__adddf3>
 8007bf6:	4602      	mov	r2, r0
 8007bf8:	460b      	mov	r3, r1
 8007bfa:	4610      	mov	r0, r2
 8007bfc:	4619      	mov	r1, r3
 8007bfe:	f7f8 ff25 	bl	8000a4c <__aeabi_d2f>
 8007c02:	4602      	mov	r2, r0
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	631a      	str	r2, [r3, #48]	; 0x30

  ie_roll_sat = ie_roll;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	639a      	str	r2, [r3, #56]	; 0x38
	

	P = Kp*e_roll; D = Kd*de; I = Ki * ie_roll_sat;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	6a1b      	ldr	r3, [r3, #32]
 8007c14:	4618      	mov	r0, r3
 8007c16:	f7f8 fbff 	bl	8000418 <__aeabi_f2d>
 8007c1a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007c1e:	f7f8 fc53 	bl	80004c8 <__aeabi_dmul>
 8007c22:	4602      	mov	r2, r0
 8007c24:	460b      	mov	r3, r1
 8007c26:	68f9      	ldr	r1, [r7, #12]
 8007c28:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c30:	4618      	mov	r0, r3
 8007c32:	f7f8 fbf1 	bl	8000418 <__aeabi_f2d>
 8007c36:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007c3a:	f7f8 fc45 	bl	80004c8 <__aeabi_dmul>
 8007c3e:	4602      	mov	r2, r0
 8007c40:	460b      	mov	r3, r1
 8007c42:	68f9      	ldr	r1, [r7, #12]
 8007c44:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f7f8 fbe3 	bl	8000418 <__aeabi_f2d>
 8007c52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007c56:	f7f8 fc37 	bl	80004c8 <__aeabi_dmul>
 8007c5a:	4602      	mov	r2, r0
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	68f9      	ldr	r1, [r7, #12]
 8007c60:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	//D = lpf.update(D);
	pd = P + I + D;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8007c70:	f7f8 fa74 	bl	800015c <__adddf3>
 8007c74:	4602      	mov	r2, r0
 8007c76:	460b      	mov	r3, r1
 8007c78:	4610      	mov	r0, r2
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8007c82:	f7f8 fa6b 	bl	800015c <__adddf3>
 8007c86:	4602      	mov	r2, r0
 8007c88:	460b      	mov	r3, r1
 8007c8a:	68f9      	ldr	r1, [r7, #12]
 8007c8c:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
  	pd_roll_buf = pd;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8007c96:	4610      	mov	r0, r2
 8007c98:	4619      	mov	r1, r3
 8007c9a:	f7f8 fed7 	bl	8000a4c <__aeabi_d2f>
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	611a      	str	r2, [r3, #16]
	pd  = Sat(pd,  300, -300);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8007caa:	4911      	ldr	r1, [pc, #68]	; (8007cf0 <_ZN3PID7PD_RateEddddd+0x250>)
 8007cac:	9101      	str	r1, [sp, #4]
 8007cae:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8007cb2:	9100      	str	r1, [sp, #0]
 8007cb4:	68f8      	ldr	r0, [r7, #12]
 8007cb6:	f000 f8d7 	bl	8007e68 <_ZN3PID3SatEdii>
 8007cba:	4602      	mov	r2, r0
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	68f9      	ldr	r1, [r7, #12]
 8007cc0:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	pd_roll_sat_buf = pd;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8007cca:	4610      	mov	r0, r2
 8007ccc:	4619      	mov	r1, r3
 8007cce:	f7f8 febd 	bl	8000a4c <__aeabi_d2f>
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	63da      	str	r2, [r3, #60]	; 0x3c
    return pd;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68

}
 8007cde:	4610      	mov	r0, r2
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	371c      	adds	r7, #28
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ce8:	cccccccd 	.word	0xcccccccd
 8007cec:	40678ccc 	.word	0x40678ccc
 8007cf0:	fffffed4 	.word	0xfffffed4

08007cf4 <_ZN3PID5resetEv>:

void PID::reset() {
 8007cf4:	b480      	push	{r7}
 8007cf6:	b083      	sub	sp, #12
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
	ie_roll_sat = 0;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f04f 0200 	mov.w	r2, #0
 8007d02:	639a      	str	r2, [r3, #56]	; 0x38
	de_filt = 0;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f04f 0200 	mov.w	r2, #0
 8007d0a:	645a      	str	r2, [r3, #68]	; 0x44
	de_int = 0;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f04f 0200 	mov.w	r2, #0
 8007d12:	649a      	str	r2, [r3, #72]	; 0x48
}
 8007d14:	bf00      	nop
 8007d16:	370c      	adds	r7, #12
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bc80      	pop	{r7}
 8007d1c:	4770      	bx	lr

08007d1e <_ZN3PID10P_Rate_YawEddd>:


double PID::P_Rate_Yaw(double alpha_dot_des, double alpha_dot, double Kp) {
 8007d1e:	b580      	push	{r7, lr}
 8007d20:	b08a      	sub	sp, #40	; 0x28
 8007d22:	af02      	add	r7, sp, #8
 8007d24:	60f8      	str	r0, [r7, #12]
 8007d26:	e9c7 2300 	strd	r2, r3, [r7]
	double P;
	double e_yaw = alpha_dot_des - alpha_dot;	
 8007d2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007d2e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d32:	f7f8 fa11 	bl	8000158 <__aeabi_dsub>
 8007d36:	4602      	mov	r2, r0
 8007d38:	460b      	mov	r3, r1
 8007d3a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	P = Kp*e_yaw;
 8007d3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d42:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007d46:	f7f8 fbbf 	bl	80004c8 <__aeabi_dmul>
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	460b      	mov	r3, r1
 8007d4e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	P    = Sat(P,    150, -150);
 8007d52:	f06f 0395 	mvn.w	r3, #149	; 0x95
 8007d56:	9301      	str	r3, [sp, #4]
 8007d58:	2396      	movs	r3, #150	; 0x96
 8007d5a:	9300      	str	r3, [sp, #0]
 8007d5c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007d60:	68f8      	ldr	r0, [r7, #12]
 8007d62:	f000 f881 	bl	8007e68 <_ZN3PID3SatEdii>
 8007d66:	e9c7 0104 	strd	r0, r1, [r7, #16]

    return P;
 8007d6a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]

}
 8007d6e:	4610      	mov	r0, r2
 8007d70:	4619      	mov	r1, r3
 8007d72:	3720      	adds	r7, #32
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <_ZN3PID3sgnEd>:

double PID::sgn(double v) {
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b084      	sub	sp, #16
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	60f8      	str	r0, [r7, #12]
 8007d80:	e9c7 2300 	strd	r2, r3, [r7]
  if (v < 0) return -1;
 8007d84:	f04f 0200 	mov.w	r2, #0
 8007d88:	f04f 0300 	mov.w	r3, #0
 8007d8c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d90:	f7f8 fe0c 	bl	80009ac <__aeabi_dcmplt>
 8007d94:	4603      	mov	r3, r0
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d003      	beq.n	8007da2 <_ZN3PID3sgnEd+0x2a>
 8007d9a:	f04f 0200 	mov.w	r2, #0
 8007d9e:	4b0d      	ldr	r3, [pc, #52]	; (8007dd4 <_ZN3PID3sgnEd+0x5c>)
 8007da0:	e012      	b.n	8007dc8 <_ZN3PID3sgnEd+0x50>
  if (v > 0) return 1;
 8007da2:	f04f 0200 	mov.w	r2, #0
 8007da6:	f04f 0300 	mov.w	r3, #0
 8007daa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007dae:	f7f8 fe1b 	bl	80009e8 <__aeabi_dcmpgt>
 8007db2:	4603      	mov	r3, r0
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d003      	beq.n	8007dc0 <_ZN3PID3sgnEd+0x48>
 8007db8:	f04f 0200 	mov.w	r2, #0
 8007dbc:	4b06      	ldr	r3, [pc, #24]	; (8007dd8 <_ZN3PID3sgnEd+0x60>)
 8007dbe:	e003      	b.n	8007dc8 <_ZN3PID3sgnEd+0x50>
  return 0;
 8007dc0:	f04f 0200 	mov.w	r2, #0
 8007dc4:	f04f 0300 	mov.w	r3, #0
}
 8007dc8:	4610      	mov	r0, r2
 8007dca:	4619      	mov	r1, r3
 8007dcc:	3710      	adds	r7, #16
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}
 8007dd2:	bf00      	nop
 8007dd4:	bff00000 	.word	0xbff00000
 8007dd8:	3ff00000 	.word	0x3ff00000

08007ddc <_ZN3PID3SatEdiii>:

 double PID::Sat(double pwm, int max, int min, int thr) {
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b086      	sub	sp, #24
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	60f8      	str	r0, [r7, #12]
 8007de4:	e9c7 2300 	strd	r2, r3, [r7]
	double pwm_out;

	if(thr > 1020) {
 8007de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dea:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 8007dee:	dd2c      	ble.n	8007e4a <_ZN3PID3SatEdiii+0x6e>
		if(pwm > max) {
 8007df0:	6a38      	ldr	r0, [r7, #32]
 8007df2:	f7f8 faff 	bl	80003f4 <__aeabi_i2d>
 8007df6:	4602      	mov	r2, r0
 8007df8:	460b      	mov	r3, r1
 8007dfa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007dfe:	f7f8 fdf3 	bl	80009e8 <__aeabi_dcmpgt>
 8007e02:	4603      	mov	r3, r0
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d007      	beq.n	8007e18 <_ZN3PID3SatEdiii+0x3c>
			pwm_out = max;
 8007e08:	6a38      	ldr	r0, [r7, #32]
 8007e0a:	f7f8 faf3 	bl	80003f4 <__aeabi_i2d>
 8007e0e:	4602      	mov	r2, r0
 8007e10:	460b      	mov	r3, r1
 8007e12:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8007e16:	e01d      	b.n	8007e54 <_ZN3PID3SatEdiii+0x78>
		}

		else if (pwm < min) {
 8007e18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007e1a:	f7f8 faeb 	bl	80003f4 <__aeabi_i2d>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	460b      	mov	r3, r1
 8007e22:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e26:	f7f8 fdc1 	bl	80009ac <__aeabi_dcmplt>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d007      	beq.n	8007e40 <_ZN3PID3SatEdiii+0x64>
			pwm_out = min;
 8007e30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007e32:	f7f8 fadf 	bl	80003f4 <__aeabi_i2d>
 8007e36:	4602      	mov	r2, r0
 8007e38:	460b      	mov	r3, r1
 8007e3a:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8007e3e:	e009      	b.n	8007e54 <_ZN3PID3SatEdiii+0x78>
		}

		else {
			pwm_out = pwm;
 8007e40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e44:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8007e48:	e004      	b.n	8007e54 <_ZN3PID3SatEdiii+0x78>


	}

	else {
		pwm_out = 1000;
 8007e4a:	f04f 0200 	mov.w	r2, #0
 8007e4e:	4b05      	ldr	r3, [pc, #20]	; (8007e64 <_ZN3PID3SatEdiii+0x88>)
 8007e50:	e9c7 2304 	strd	r2, r3, [r7, #16]
	}
	return pwm_out;
 8007e54:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8007e58:	4610      	mov	r0, r2
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	3718      	adds	r7, #24
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	bf00      	nop
 8007e64:	408f4000 	.word	0x408f4000

08007e68 <_ZN3PID3SatEdii>:

 double PID::Sat(double pwm, int max, int min) {
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b086      	sub	sp, #24
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	60f8      	str	r0, [r7, #12]
 8007e70:	e9c7 2300 	strd	r2, r3, [r7]
	double pwm_out;

		if(pwm > max) {
 8007e74:	6a38      	ldr	r0, [r7, #32]
 8007e76:	f7f8 fabd 	bl	80003f4 <__aeabi_i2d>
 8007e7a:	4602      	mov	r2, r0
 8007e7c:	460b      	mov	r3, r1
 8007e7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e82:	f7f8 fdb1 	bl	80009e8 <__aeabi_dcmpgt>
 8007e86:	4603      	mov	r3, r0
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d007      	beq.n	8007e9c <_ZN3PID3SatEdii+0x34>
			pwm_out = max;
 8007e8c:	6a38      	ldr	r0, [r7, #32]
 8007e8e:	f7f8 fab1 	bl	80003f4 <__aeabi_i2d>
 8007e92:	4602      	mov	r2, r0
 8007e94:	460b      	mov	r3, r1
 8007e96:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8007e9a:	e017      	b.n	8007ecc <_ZN3PID3SatEdii+0x64>
		}

		else if (pwm < min) {
 8007e9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007e9e:	f7f8 faa9 	bl	80003f4 <__aeabi_i2d>
 8007ea2:	4602      	mov	r2, r0
 8007ea4:	460b      	mov	r3, r1
 8007ea6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007eaa:	f7f8 fd7f 	bl	80009ac <__aeabi_dcmplt>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d007      	beq.n	8007ec4 <_ZN3PID3SatEdii+0x5c>
			pwm_out = min;
 8007eb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007eb6:	f7f8 fa9d 	bl	80003f4 <__aeabi_i2d>
 8007eba:	4602      	mov	r2, r0
 8007ebc:	460b      	mov	r3, r1
 8007ebe:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8007ec2:	e003      	b.n	8007ecc <_ZN3PID3SatEdii+0x64>
		}

		else {
			pwm_out = pwm;
 8007ec4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ec8:	e9c7 2304 	strd	r2, r3, [r7, #16]
		}




	return pwm_out;
 8007ecc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8007ed0:	4610      	mov	r0, r2
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	3718      	adds	r7, #24
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}

08007eda <_ZN3PID7pwm2angEt>:

float PID::pwm2ang(unsigned short int pwm) {
 8007eda:	b580      	push	{r7, lr}
 8007edc:	b086      	sub	sp, #24
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	6078      	str	r0, [r7, #4]
 8007ee2:	460b      	mov	r3, r1
 8007ee4:	807b      	strh	r3, [r7, #2]
	int in_min  = 1000;
 8007ee6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007eea:	617b      	str	r3, [r7, #20]
	int in_max  = 2000;
 8007eec:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8007ef0:	613b      	str	r3, [r7, #16]
	int out_min = -30;
 8007ef2:	f06f 031d 	mvn.w	r3, #29
 8007ef6:	60fb      	str	r3, [r7, #12]
	int out_max  = 30;
 8007ef8:	231e      	movs	r3, #30
 8007efa:	60bb      	str	r3, [r7, #8]

	return (pwm - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8007efc:	887a      	ldrh	r2, [r7, #2]
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	1ad3      	subs	r3, r2, r3
 8007f02:	68b9      	ldr	r1, [r7, #8]
 8007f04:	68fa      	ldr	r2, [r7, #12]
 8007f06:	1a8a      	subs	r2, r1, r2
 8007f08:	fb02 f203 	mul.w	r2, r2, r3
 8007f0c:	6939      	ldr	r1, [r7, #16]
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	1acb      	subs	r3, r1, r3
 8007f12:	fb92 f2f3 	sdiv	r2, r2, r3
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	4413      	add	r3, r2
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f7f8 fea0 	bl	8000c60 <__aeabi_i2f>
 8007f20:	4603      	mov	r3, r0
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3718      	adds	r7, #24
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}

08007f2a <_ZN3PID8pwm2rateEt>:

float PID::pwm2rate(unsigned short int pwm) {
 8007f2a:	b580      	push	{r7, lr}
 8007f2c:	b086      	sub	sp, #24
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
 8007f32:	460b      	mov	r3, r1
 8007f34:	807b      	strh	r3, [r7, #2]
	int in_min  = 1000;
 8007f36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007f3a:	617b      	str	r3, [r7, #20]
	int in_max  = 2000;
 8007f3c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8007f40:	613b      	str	r3, [r7, #16]
	int out_min = -100;
 8007f42:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8007f46:	60fb      	str	r3, [r7, #12]
	int out_max  = 100;
 8007f48:	2364      	movs	r3, #100	; 0x64
 8007f4a:	60bb      	str	r3, [r7, #8]

	return -1 * ((pwm - in_min) * (out_max - out_min) / (in_max - in_min) + out_min);
 8007f4c:	887a      	ldrh	r2, [r7, #2]
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	1ad3      	subs	r3, r2, r3
 8007f52:	68b9      	ldr	r1, [r7, #8]
 8007f54:	68fa      	ldr	r2, [r7, #12]
 8007f56:	1a8a      	subs	r2, r1, r2
 8007f58:	fb02 f203 	mul.w	r2, r2, r3
 8007f5c:	6939      	ldr	r1, [r7, #16]
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	1acb      	subs	r3, r1, r3
 8007f62:	fb92 f2f3 	sdiv	r2, r2, r3
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	4413      	add	r3, r2
 8007f6a:	425b      	negs	r3, r3
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f7f8 fe77 	bl	8000c60 <__aeabi_i2f>
 8007f72:	4603      	mov	r3, r0
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3718      	adds	r7, #24
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}

08007f7c <_ZN3PID7pwm2motEti>:

//Convert pwm to motor speed for simulation
float PID::pwm2mot(unsigned short int pwm, int dir) {
 8007f7c:	b590      	push	{r4, r7, lr}
 8007f7e:	b089      	sub	sp, #36	; 0x24
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	60f8      	str	r0, [r7, #12]
 8007f84:	460b      	mov	r3, r1
 8007f86:	607a      	str	r2, [r7, #4]
 8007f88:	817b      	strh	r3, [r7, #10]
	float in_min  = 1000;
 8007f8a:	4b1d      	ldr	r3, [pc, #116]	; (8008000 <_ZN3PID7pwm2motEti+0x84>)
 8007f8c:	61fb      	str	r3, [r7, #28]
	float in_max  = 2000;
 8007f8e:	4b1d      	ldr	r3, [pc, #116]	; (8008004 <_ZN3PID7pwm2motEti+0x88>)
 8007f90:	61bb      	str	r3, [r7, #24]
	float out_min = 0;
 8007f92:	f04f 0300 	mov.w	r3, #0
 8007f96:	617b      	str	r3, [r7, #20]
	float out_max  = 1326;
 8007f98:	4b1b      	ldr	r3, [pc, #108]	; (8008008 <_ZN3PID7pwm2motEti+0x8c>)
 8007f9a:	613b      	str	r3, [r7, #16]

	return (float)(dir) * ((float)pwm - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f7f8 fe5f 	bl	8000c60 <__aeabi_i2f>
 8007fa2:	4604      	mov	r4, r0
 8007fa4:	897b      	ldrh	r3, [r7, #10]
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f7f8 fe56 	bl	8000c58 <__aeabi_ui2f>
 8007fac:	4603      	mov	r3, r0
 8007fae:	69f9      	ldr	r1, [r7, #28]
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f7f8 fd9f 	bl	8000af4 <__aeabi_fsub>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	4619      	mov	r1, r3
 8007fba:	4620      	mov	r0, r4
 8007fbc:	f7f8 fea4 	bl	8000d08 <__aeabi_fmul>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	461c      	mov	r4, r3
 8007fc4:	6979      	ldr	r1, [r7, #20]
 8007fc6:	6938      	ldr	r0, [r7, #16]
 8007fc8:	f7f8 fd94 	bl	8000af4 <__aeabi_fsub>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	4619      	mov	r1, r3
 8007fd0:	4620      	mov	r0, r4
 8007fd2:	f7f8 fe99 	bl	8000d08 <__aeabi_fmul>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	461c      	mov	r4, r3
 8007fda:	69f9      	ldr	r1, [r7, #28]
 8007fdc:	69b8      	ldr	r0, [r7, #24]
 8007fde:	f7f8 fd89 	bl	8000af4 <__aeabi_fsub>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	4620      	mov	r0, r4
 8007fe8:	f7f8 ff42 	bl	8000e70 <__aeabi_fdiv>
 8007fec:	4603      	mov	r3, r0
 8007fee:	6979      	ldr	r1, [r7, #20]
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f7f8 fd81 	bl	8000af8 <__addsf3>
 8007ff6:	4603      	mov	r3, r0
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3724      	adds	r7, #36	; 0x24
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd90      	pop	{r4, r7, pc}
 8008000:	447a0000 	.word	0x447a0000
 8008004:	44fa0000 	.word	0x44fa0000
 8008008:	44a5c000 	.word	0x44a5c000

0800800c <_ZN3PIDD1Ev>:

PID::~PID() {};
 800800c:	b480      	push	{r7}
 800800e:	b083      	sub	sp, #12
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	4618      	mov	r0, r3
 8008018:	370c      	adds	r7, #12
 800801a:	46bd      	mov	sp, r7
 800801c:	bc80      	pop	{r7}
 800801e:	4770      	bx	lr

08008020 <_ZdlPv>:
 8008020:	f000 bbf0 	b.w	8008804 <free>

08008024 <_Znwj>:
 8008024:	2801      	cmp	r0, #1
 8008026:	bf38      	it	cc
 8008028:	2001      	movcc	r0, #1
 800802a:	b510      	push	{r4, lr}
 800802c:	4604      	mov	r4, r0
 800802e:	4620      	mov	r0, r4
 8008030:	f000 fbe0 	bl	80087f4 <malloc>
 8008034:	b930      	cbnz	r0, 8008044 <_Znwj+0x20>
 8008036:	f000 f80d 	bl	8008054 <_ZSt15get_new_handlerv>
 800803a:	b908      	cbnz	r0, 8008040 <_Znwj+0x1c>
 800803c:	f000 fba8 	bl	8008790 <abort>
 8008040:	4780      	blx	r0
 8008042:	e7f4      	b.n	800802e <_Znwj+0xa>
 8008044:	bd10      	pop	{r4, pc}

08008046 <_ZSt17__throw_bad_allocv>:
 8008046:	b508      	push	{r3, lr}
 8008048:	f000 fba2 	bl	8008790 <abort>

0800804c <_ZSt20__throw_length_errorPKc>:
 800804c:	b508      	push	{r3, lr}
 800804e:	f000 fb9f 	bl	8008790 <abort>
	...

08008054 <_ZSt15get_new_handlerv>:
 8008054:	4b02      	ldr	r3, [pc, #8]	; (8008060 <_ZSt15get_new_handlerv+0xc>)
 8008056:	6818      	ldr	r0, [r3, #0]
 8008058:	f3bf 8f5b 	dmb	ish
 800805c:	4770      	bx	lr
 800805e:	bf00      	nop
 8008060:	200007dc 	.word	0x200007dc
 8008064:	00000000 	.word	0x00000000

08008068 <exp>:
 8008068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800806a:	4606      	mov	r6, r0
 800806c:	460f      	mov	r7, r1
 800806e:	f000 f883 	bl	8008178 <__ieee754_exp>
 8008072:	4b1b      	ldr	r3, [pc, #108]	; (80080e0 <exp+0x78>)
 8008074:	4604      	mov	r4, r0
 8008076:	f993 3000 	ldrsb.w	r3, [r3]
 800807a:	460d      	mov	r5, r1
 800807c:	3301      	adds	r3, #1
 800807e:	d012      	beq.n	80080a6 <exp+0x3e>
 8008080:	4630      	mov	r0, r6
 8008082:	4639      	mov	r1, r7
 8008084:	f000 fb77 	bl	8008776 <finite>
 8008088:	b168      	cbz	r0, 80080a6 <exp+0x3e>
 800808a:	a311      	add	r3, pc, #68	; (adr r3, 80080d0 <exp+0x68>)
 800808c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008090:	4630      	mov	r0, r6
 8008092:	4639      	mov	r1, r7
 8008094:	f7f8 fca8 	bl	80009e8 <__aeabi_dcmpgt>
 8008098:	b140      	cbz	r0, 80080ac <exp+0x44>
 800809a:	f000 fb81 	bl	80087a0 <__errno>
 800809e:	2322      	movs	r3, #34	; 0x22
 80080a0:	2400      	movs	r4, #0
 80080a2:	4d10      	ldr	r5, [pc, #64]	; (80080e4 <exp+0x7c>)
 80080a4:	6003      	str	r3, [r0, #0]
 80080a6:	4620      	mov	r0, r4
 80080a8:	4629      	mov	r1, r5
 80080aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080ac:	4630      	mov	r0, r6
 80080ae:	a30a      	add	r3, pc, #40	; (adr r3, 80080d8 <exp+0x70>)
 80080b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b4:	4639      	mov	r1, r7
 80080b6:	f7f8 fc79 	bl	80009ac <__aeabi_dcmplt>
 80080ba:	2800      	cmp	r0, #0
 80080bc:	d0f3      	beq.n	80080a6 <exp+0x3e>
 80080be:	f000 fb6f 	bl	80087a0 <__errno>
 80080c2:	2322      	movs	r3, #34	; 0x22
 80080c4:	2400      	movs	r4, #0
 80080c6:	2500      	movs	r5, #0
 80080c8:	6003      	str	r3, [r0, #0]
 80080ca:	e7ec      	b.n	80080a6 <exp+0x3e>
 80080cc:	f3af 8000 	nop.w
 80080d0:	fefa39ef 	.word	0xfefa39ef
 80080d4:	40862e42 	.word	0x40862e42
 80080d8:	d52d3051 	.word	0xd52d3051
 80080dc:	c0874910 	.word	0xc0874910
 80080e0:	20000009 	.word	0x20000009
 80080e4:	7ff00000 	.word	0x7ff00000

080080e8 <asinf>:
 80080e8:	b538      	push	{r3, r4, r5, lr}
 80080ea:	4604      	mov	r4, r0
 80080ec:	f000 f9ae 	bl	800844c <__ieee754_asinf>
 80080f0:	4b0e      	ldr	r3, [pc, #56]	; (800812c <asinf+0x44>)
 80080f2:	4605      	mov	r5, r0
 80080f4:	f993 3000 	ldrsb.w	r3, [r3]
 80080f8:	3301      	adds	r3, #1
 80080fa:	d015      	beq.n	8008128 <asinf+0x40>
 80080fc:	4621      	mov	r1, r4
 80080fe:	4620      	mov	r0, r4
 8008100:	f7f8 ffc8 	bl	8001094 <__aeabi_fcmpun>
 8008104:	b980      	cbnz	r0, 8008128 <asinf+0x40>
 8008106:	4620      	mov	r0, r4
 8008108:	f000 fb3b 	bl	8008782 <fabsf>
 800810c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008110:	f7f8 ffb6 	bl	8001080 <__aeabi_fcmpgt>
 8008114:	b140      	cbz	r0, 8008128 <asinf+0x40>
 8008116:	f000 fb43 	bl	80087a0 <__errno>
 800811a:	2321      	movs	r3, #33	; 0x21
 800811c:	6003      	str	r3, [r0, #0]
 800811e:	4804      	ldr	r0, [pc, #16]	; (8008130 <asinf+0x48>)
 8008120:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008124:	f000 bb30 	b.w	8008788 <nanf>
 8008128:	4628      	mov	r0, r5
 800812a:	bd38      	pop	{r3, r4, r5, pc}
 800812c:	20000009 	.word	0x20000009
 8008130:	08008afc 	.word	0x08008afc

08008134 <sqrtf>:
 8008134:	b538      	push	{r3, r4, r5, lr}
 8008136:	4605      	mov	r5, r0
 8008138:	f000 facc 	bl	80086d4 <__ieee754_sqrtf>
 800813c:	4b0d      	ldr	r3, [pc, #52]	; (8008174 <sqrtf+0x40>)
 800813e:	4604      	mov	r4, r0
 8008140:	f993 3000 	ldrsb.w	r3, [r3]
 8008144:	3301      	adds	r3, #1
 8008146:	d012      	beq.n	800816e <sqrtf+0x3a>
 8008148:	4629      	mov	r1, r5
 800814a:	4628      	mov	r0, r5
 800814c:	f7f8 ffa2 	bl	8001094 <__aeabi_fcmpun>
 8008150:	b968      	cbnz	r0, 800816e <sqrtf+0x3a>
 8008152:	2100      	movs	r1, #0
 8008154:	4628      	mov	r0, r5
 8008156:	f7f8 ff75 	bl	8001044 <__aeabi_fcmplt>
 800815a:	b140      	cbz	r0, 800816e <sqrtf+0x3a>
 800815c:	f000 fb20 	bl	80087a0 <__errno>
 8008160:	2321      	movs	r3, #33	; 0x21
 8008162:	2100      	movs	r1, #0
 8008164:	6003      	str	r3, [r0, #0]
 8008166:	4608      	mov	r0, r1
 8008168:	f7f8 fe82 	bl	8000e70 <__aeabi_fdiv>
 800816c:	4604      	mov	r4, r0
 800816e:	4620      	mov	r0, r4
 8008170:	bd38      	pop	{r3, r4, r5, pc}
 8008172:	bf00      	nop
 8008174:	20000009 	.word	0x20000009

08008178 <__ieee754_exp>:
 8008178:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800817c:	4faa      	ldr	r7, [pc, #680]	; (8008428 <__ieee754_exp+0x2b0>)
 800817e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008182:	42bb      	cmp	r3, r7
 8008184:	4605      	mov	r5, r0
 8008186:	460c      	mov	r4, r1
 8008188:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 800818c:	d92f      	bls.n	80081ee <__ieee754_exp+0x76>
 800818e:	4fa7      	ldr	r7, [pc, #668]	; (800842c <__ieee754_exp+0x2b4>)
 8008190:	42bb      	cmp	r3, r7
 8008192:	d911      	bls.n	80081b8 <__ieee754_exp+0x40>
 8008194:	4603      	mov	r3, r0
 8008196:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800819a:	4313      	orrs	r3, r2
 800819c:	d006      	beq.n	80081ac <__ieee754_exp+0x34>
 800819e:	4602      	mov	r2, r0
 80081a0:	460b      	mov	r3, r1
 80081a2:	f7f7 ffdb 	bl	800015c <__adddf3>
 80081a6:	4605      	mov	r5, r0
 80081a8:	460c      	mov	r4, r1
 80081aa:	e000      	b.n	80081ae <__ieee754_exp+0x36>
 80081ac:	b9e6      	cbnz	r6, 80081e8 <__ieee754_exp+0x70>
 80081ae:	4628      	mov	r0, r5
 80081b0:	4621      	mov	r1, r4
 80081b2:	b004      	add	sp, #16
 80081b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081b8:	a385      	add	r3, pc, #532	; (adr r3, 80083d0 <__ieee754_exp+0x258>)
 80081ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081be:	f7f8 fc13 	bl	80009e8 <__aeabi_dcmpgt>
 80081c2:	b138      	cbz	r0, 80081d4 <__ieee754_exp+0x5c>
 80081c4:	a384      	add	r3, pc, #528	; (adr r3, 80083d8 <__ieee754_exp+0x260>)
 80081c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ca:	4610      	mov	r0, r2
 80081cc:	4619      	mov	r1, r3
 80081ce:	f7f8 f97b 	bl	80004c8 <__aeabi_dmul>
 80081d2:	e7e8      	b.n	80081a6 <__ieee754_exp+0x2e>
 80081d4:	4628      	mov	r0, r5
 80081d6:	a382      	add	r3, pc, #520	; (adr r3, 80083e0 <__ieee754_exp+0x268>)
 80081d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081dc:	4621      	mov	r1, r4
 80081de:	f7f8 fbe5 	bl	80009ac <__aeabi_dcmplt>
 80081e2:	2800      	cmp	r0, #0
 80081e4:	f000 8082 	beq.w	80082ec <__ieee754_exp+0x174>
 80081e8:	2500      	movs	r5, #0
 80081ea:	462c      	mov	r4, r5
 80081ec:	e7df      	b.n	80081ae <__ieee754_exp+0x36>
 80081ee:	4a90      	ldr	r2, [pc, #576]	; (8008430 <__ieee754_exp+0x2b8>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	f240 80a7 	bls.w	8008344 <__ieee754_exp+0x1cc>
 80081f6:	4a8f      	ldr	r2, [pc, #572]	; (8008434 <__ieee754_exp+0x2bc>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d877      	bhi.n	80082ec <__ieee754_exp+0x174>
 80081fc:	4b8e      	ldr	r3, [pc, #568]	; (8008438 <__ieee754_exp+0x2c0>)
 80081fe:	00f4      	lsls	r4, r6, #3
 8008200:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008208:	f7f7 ffa6 	bl	8000158 <__aeabi_dsub>
 800820c:	4680      	mov	r8, r0
 800820e:	4689      	mov	r9, r1
 8008210:	4b8a      	ldr	r3, [pc, #552]	; (800843c <__ieee754_exp+0x2c4>)
 8008212:	f1c6 0a01 	rsb	sl, r6, #1
 8008216:	4423      	add	r3, r4
 8008218:	e9d3 3400 	ldrd	r3, r4, [r3]
 800821c:	e9cd 3400 	strd	r3, r4, [sp]
 8008220:	ebaa 0a06 	sub.w	sl, sl, r6
 8008224:	4640      	mov	r0, r8
 8008226:	e9dd 2300 	ldrd	r2, r3, [sp]
 800822a:	4649      	mov	r1, r9
 800822c:	f7f7 ff94 	bl	8000158 <__aeabi_dsub>
 8008230:	4605      	mov	r5, r0
 8008232:	460c      	mov	r4, r1
 8008234:	462a      	mov	r2, r5
 8008236:	4623      	mov	r3, r4
 8008238:	4628      	mov	r0, r5
 800823a:	4621      	mov	r1, r4
 800823c:	f7f8 f944 	bl	80004c8 <__aeabi_dmul>
 8008240:	a369      	add	r3, pc, #420	; (adr r3, 80083e8 <__ieee754_exp+0x270>)
 8008242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008246:	4606      	mov	r6, r0
 8008248:	460f      	mov	r7, r1
 800824a:	f7f8 f93d 	bl	80004c8 <__aeabi_dmul>
 800824e:	a368      	add	r3, pc, #416	; (adr r3, 80083f0 <__ieee754_exp+0x278>)
 8008250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008254:	f7f7 ff80 	bl	8000158 <__aeabi_dsub>
 8008258:	4632      	mov	r2, r6
 800825a:	463b      	mov	r3, r7
 800825c:	f7f8 f934 	bl	80004c8 <__aeabi_dmul>
 8008260:	a365      	add	r3, pc, #404	; (adr r3, 80083f8 <__ieee754_exp+0x280>)
 8008262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008266:	f7f7 ff79 	bl	800015c <__adddf3>
 800826a:	4632      	mov	r2, r6
 800826c:	463b      	mov	r3, r7
 800826e:	f7f8 f92b 	bl	80004c8 <__aeabi_dmul>
 8008272:	a363      	add	r3, pc, #396	; (adr r3, 8008400 <__ieee754_exp+0x288>)
 8008274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008278:	f7f7 ff6e 	bl	8000158 <__aeabi_dsub>
 800827c:	4632      	mov	r2, r6
 800827e:	463b      	mov	r3, r7
 8008280:	f7f8 f922 	bl	80004c8 <__aeabi_dmul>
 8008284:	a360      	add	r3, pc, #384	; (adr r3, 8008408 <__ieee754_exp+0x290>)
 8008286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800828a:	f7f7 ff67 	bl	800015c <__adddf3>
 800828e:	4632      	mov	r2, r6
 8008290:	463b      	mov	r3, r7
 8008292:	f7f8 f919 	bl	80004c8 <__aeabi_dmul>
 8008296:	4602      	mov	r2, r0
 8008298:	460b      	mov	r3, r1
 800829a:	4628      	mov	r0, r5
 800829c:	4621      	mov	r1, r4
 800829e:	f7f7 ff5b 	bl	8000158 <__aeabi_dsub>
 80082a2:	4602      	mov	r2, r0
 80082a4:	460b      	mov	r3, r1
 80082a6:	4606      	mov	r6, r0
 80082a8:	460f      	mov	r7, r1
 80082aa:	4628      	mov	r0, r5
 80082ac:	4621      	mov	r1, r4
 80082ae:	f7f8 f90b 	bl	80004c8 <__aeabi_dmul>
 80082b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082b6:	f1ba 0f00 	cmp.w	sl, #0
 80082ba:	d15a      	bne.n	8008372 <__ieee754_exp+0x1fa>
 80082bc:	2200      	movs	r2, #0
 80082be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80082c2:	4630      	mov	r0, r6
 80082c4:	4639      	mov	r1, r7
 80082c6:	f7f7 ff47 	bl	8000158 <__aeabi_dsub>
 80082ca:	4602      	mov	r2, r0
 80082cc:	460b      	mov	r3, r1
 80082ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082d2:	f7f8 fa23 	bl	800071c <__aeabi_ddiv>
 80082d6:	462a      	mov	r2, r5
 80082d8:	4623      	mov	r3, r4
 80082da:	f7f7 ff3d 	bl	8000158 <__aeabi_dsub>
 80082de:	4602      	mov	r2, r0
 80082e0:	460b      	mov	r3, r1
 80082e2:	2000      	movs	r0, #0
 80082e4:	4956      	ldr	r1, [pc, #344]	; (8008440 <__ieee754_exp+0x2c8>)
 80082e6:	f7f7 ff37 	bl	8000158 <__aeabi_dsub>
 80082ea:	e75c      	b.n	80081a6 <__ieee754_exp+0x2e>
 80082ec:	4855      	ldr	r0, [pc, #340]	; (8008444 <__ieee754_exp+0x2cc>)
 80082ee:	a348      	add	r3, pc, #288	; (adr r3, 8008410 <__ieee754_exp+0x298>)
 80082f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f4:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 80082f8:	4621      	mov	r1, r4
 80082fa:	4628      	mov	r0, r5
 80082fc:	f7f8 f8e4 	bl	80004c8 <__aeabi_dmul>
 8008300:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008304:	f7f7 ff2a 	bl	800015c <__adddf3>
 8008308:	f7f8 fb78 	bl	80009fc <__aeabi_d2iz>
 800830c:	4682      	mov	sl, r0
 800830e:	f7f8 f871 	bl	80003f4 <__aeabi_i2d>
 8008312:	a341      	add	r3, pc, #260	; (adr r3, 8008418 <__ieee754_exp+0x2a0>)
 8008314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008318:	4606      	mov	r6, r0
 800831a:	460f      	mov	r7, r1
 800831c:	f7f8 f8d4 	bl	80004c8 <__aeabi_dmul>
 8008320:	4602      	mov	r2, r0
 8008322:	460b      	mov	r3, r1
 8008324:	4628      	mov	r0, r5
 8008326:	4621      	mov	r1, r4
 8008328:	f7f7 ff16 	bl	8000158 <__aeabi_dsub>
 800832c:	a33c      	add	r3, pc, #240	; (adr r3, 8008420 <__ieee754_exp+0x2a8>)
 800832e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008332:	4680      	mov	r8, r0
 8008334:	4689      	mov	r9, r1
 8008336:	4630      	mov	r0, r6
 8008338:	4639      	mov	r1, r7
 800833a:	f7f8 f8c5 	bl	80004c8 <__aeabi_dmul>
 800833e:	e9cd 0100 	strd	r0, r1, [sp]
 8008342:	e76f      	b.n	8008224 <__ieee754_exp+0xac>
 8008344:	4a40      	ldr	r2, [pc, #256]	; (8008448 <__ieee754_exp+0x2d0>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d80e      	bhi.n	8008368 <__ieee754_exp+0x1f0>
 800834a:	a323      	add	r3, pc, #140	; (adr r3, 80083d8 <__ieee754_exp+0x260>)
 800834c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008350:	f7f7 ff04 	bl	800015c <__adddf3>
 8008354:	2200      	movs	r2, #0
 8008356:	4b3a      	ldr	r3, [pc, #232]	; (8008440 <__ieee754_exp+0x2c8>)
 8008358:	f7f8 fb46 	bl	80009e8 <__aeabi_dcmpgt>
 800835c:	b138      	cbz	r0, 800836e <__ieee754_exp+0x1f6>
 800835e:	2200      	movs	r2, #0
 8008360:	4628      	mov	r0, r5
 8008362:	4621      	mov	r1, r4
 8008364:	4b36      	ldr	r3, [pc, #216]	; (8008440 <__ieee754_exp+0x2c8>)
 8008366:	e71c      	b.n	80081a2 <__ieee754_exp+0x2a>
 8008368:	f04f 0a00 	mov.w	sl, #0
 800836c:	e762      	b.n	8008234 <__ieee754_exp+0xbc>
 800836e:	4682      	mov	sl, r0
 8008370:	e760      	b.n	8008234 <__ieee754_exp+0xbc>
 8008372:	4632      	mov	r2, r6
 8008374:	463b      	mov	r3, r7
 8008376:	2000      	movs	r0, #0
 8008378:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800837c:	f7f7 feec 	bl	8000158 <__aeabi_dsub>
 8008380:	4602      	mov	r2, r0
 8008382:	460b      	mov	r3, r1
 8008384:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008388:	f7f8 f9c8 	bl	800071c <__aeabi_ddiv>
 800838c:	4602      	mov	r2, r0
 800838e:	460b      	mov	r3, r1
 8008390:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008394:	f7f7 fee0 	bl	8000158 <__aeabi_dsub>
 8008398:	4642      	mov	r2, r8
 800839a:	464b      	mov	r3, r9
 800839c:	f7f7 fedc 	bl	8000158 <__aeabi_dsub>
 80083a0:	4602      	mov	r2, r0
 80083a2:	460b      	mov	r3, r1
 80083a4:	2000      	movs	r0, #0
 80083a6:	4926      	ldr	r1, [pc, #152]	; (8008440 <__ieee754_exp+0x2c8>)
 80083a8:	f7f7 fed6 	bl	8000158 <__aeabi_dsub>
 80083ac:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 80083b0:	4592      	cmp	sl, r2
 80083b2:	db02      	blt.n	80083ba <__ieee754_exp+0x242>
 80083b4:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80083b8:	e6f5      	b.n	80081a6 <__ieee754_exp+0x2e>
 80083ba:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 80083be:	2200      	movs	r2, #0
 80083c0:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 80083c4:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80083c8:	e701      	b.n	80081ce <__ieee754_exp+0x56>
 80083ca:	bf00      	nop
 80083cc:	f3af 8000 	nop.w
 80083d0:	fefa39ef 	.word	0xfefa39ef
 80083d4:	40862e42 	.word	0x40862e42
 80083d8:	8800759c 	.word	0x8800759c
 80083dc:	7e37e43c 	.word	0x7e37e43c
 80083e0:	d52d3051 	.word	0xd52d3051
 80083e4:	c0874910 	.word	0xc0874910
 80083e8:	72bea4d0 	.word	0x72bea4d0
 80083ec:	3e663769 	.word	0x3e663769
 80083f0:	c5d26bf1 	.word	0xc5d26bf1
 80083f4:	3ebbbd41 	.word	0x3ebbbd41
 80083f8:	af25de2c 	.word	0xaf25de2c
 80083fc:	3f11566a 	.word	0x3f11566a
 8008400:	16bebd93 	.word	0x16bebd93
 8008404:	3f66c16c 	.word	0x3f66c16c
 8008408:	5555553e 	.word	0x5555553e
 800840c:	3fc55555 	.word	0x3fc55555
 8008410:	652b82fe 	.word	0x652b82fe
 8008414:	3ff71547 	.word	0x3ff71547
 8008418:	fee00000 	.word	0xfee00000
 800841c:	3fe62e42 	.word	0x3fe62e42
 8008420:	35793c76 	.word	0x35793c76
 8008424:	3dea39ef 	.word	0x3dea39ef
 8008428:	40862e41 	.word	0x40862e41
 800842c:	7fefffff 	.word	0x7fefffff
 8008430:	3fd62e42 	.word	0x3fd62e42
 8008434:	3ff0a2b1 	.word	0x3ff0a2b1
 8008438:	08008b10 	.word	0x08008b10
 800843c:	08008b20 	.word	0x08008b20
 8008440:	3ff00000 	.word	0x3ff00000
 8008444:	08008b00 	.word	0x08008b00
 8008448:	3e2fffff 	.word	0x3e2fffff

0800844c <__ieee754_asinf>:
 800844c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008450:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 8008454:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8008458:	4604      	mov	r4, r0
 800845a:	4605      	mov	r5, r0
 800845c:	d10c      	bne.n	8008478 <__ieee754_asinf+0x2c>
 800845e:	498d      	ldr	r1, [pc, #564]	; (8008694 <__ieee754_asinf+0x248>)
 8008460:	f7f8 fc52 	bl	8000d08 <__aeabi_fmul>
 8008464:	498c      	ldr	r1, [pc, #560]	; (8008698 <__ieee754_asinf+0x24c>)
 8008466:	4605      	mov	r5, r0
 8008468:	4620      	mov	r0, r4
 800846a:	f7f8 fc4d 	bl	8000d08 <__aeabi_fmul>
 800846e:	4601      	mov	r1, r0
 8008470:	4628      	mov	r0, r5
 8008472:	f7f8 fb41 	bl	8000af8 <__addsf3>
 8008476:	e006      	b.n	8008486 <__ieee754_asinf+0x3a>
 8008478:	dd07      	ble.n	800848a <__ieee754_asinf+0x3e>
 800847a:	4601      	mov	r1, r0
 800847c:	f7f8 fb3a 	bl	8000af4 <__aeabi_fsub>
 8008480:	4601      	mov	r1, r0
 8008482:	f7f8 fcf5 	bl	8000e70 <__aeabi_fdiv>
 8008486:	4604      	mov	r4, r0
 8008488:	e00e      	b.n	80084a8 <__ieee754_asinf+0x5c>
 800848a:	f1b8 5f7c 	cmp.w	r8, #1056964608	; 0x3f000000
 800848e:	da58      	bge.n	8008542 <__ieee754_asinf+0xf6>
 8008490:	f1b8 5f48 	cmp.w	r8, #838860800	; 0x32000000
 8008494:	da0b      	bge.n	80084ae <__ieee754_asinf+0x62>
 8008496:	4981      	ldr	r1, [pc, #516]	; (800869c <__ieee754_asinf+0x250>)
 8008498:	f7f8 fb2e 	bl	8000af8 <__addsf3>
 800849c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80084a0:	f7f8 fdee 	bl	8001080 <__aeabi_fcmpgt>
 80084a4:	2800      	cmp	r0, #0
 80084a6:	d04c      	beq.n	8008542 <__ieee754_asinf+0xf6>
 80084a8:	4620      	mov	r0, r4
 80084aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084ae:	4601      	mov	r1, r0
 80084b0:	f7f8 fc2a 	bl	8000d08 <__aeabi_fmul>
 80084b4:	4605      	mov	r5, r0
 80084b6:	497a      	ldr	r1, [pc, #488]	; (80086a0 <__ieee754_asinf+0x254>)
 80084b8:	f7f8 fc26 	bl	8000d08 <__aeabi_fmul>
 80084bc:	4979      	ldr	r1, [pc, #484]	; (80086a4 <__ieee754_asinf+0x258>)
 80084be:	f7f8 fb1b 	bl	8000af8 <__addsf3>
 80084c2:	4629      	mov	r1, r5
 80084c4:	f7f8 fc20 	bl	8000d08 <__aeabi_fmul>
 80084c8:	4977      	ldr	r1, [pc, #476]	; (80086a8 <__ieee754_asinf+0x25c>)
 80084ca:	f7f8 fb13 	bl	8000af4 <__aeabi_fsub>
 80084ce:	4629      	mov	r1, r5
 80084d0:	f7f8 fc1a 	bl	8000d08 <__aeabi_fmul>
 80084d4:	4975      	ldr	r1, [pc, #468]	; (80086ac <__ieee754_asinf+0x260>)
 80084d6:	f7f8 fb0f 	bl	8000af8 <__addsf3>
 80084da:	4629      	mov	r1, r5
 80084dc:	f7f8 fc14 	bl	8000d08 <__aeabi_fmul>
 80084e0:	4973      	ldr	r1, [pc, #460]	; (80086b0 <__ieee754_asinf+0x264>)
 80084e2:	f7f8 fb07 	bl	8000af4 <__aeabi_fsub>
 80084e6:	4629      	mov	r1, r5
 80084e8:	f7f8 fc0e 	bl	8000d08 <__aeabi_fmul>
 80084ec:	4971      	ldr	r1, [pc, #452]	; (80086b4 <__ieee754_asinf+0x268>)
 80084ee:	f7f8 fb03 	bl	8000af8 <__addsf3>
 80084f2:	4629      	mov	r1, r5
 80084f4:	f7f8 fc08 	bl	8000d08 <__aeabi_fmul>
 80084f8:	496f      	ldr	r1, [pc, #444]	; (80086b8 <__ieee754_asinf+0x26c>)
 80084fa:	4606      	mov	r6, r0
 80084fc:	4628      	mov	r0, r5
 80084fe:	f7f8 fc03 	bl	8000d08 <__aeabi_fmul>
 8008502:	496e      	ldr	r1, [pc, #440]	; (80086bc <__ieee754_asinf+0x270>)
 8008504:	f7f8 faf6 	bl	8000af4 <__aeabi_fsub>
 8008508:	4629      	mov	r1, r5
 800850a:	f7f8 fbfd 	bl	8000d08 <__aeabi_fmul>
 800850e:	496c      	ldr	r1, [pc, #432]	; (80086c0 <__ieee754_asinf+0x274>)
 8008510:	f7f8 faf2 	bl	8000af8 <__addsf3>
 8008514:	4629      	mov	r1, r5
 8008516:	f7f8 fbf7 	bl	8000d08 <__aeabi_fmul>
 800851a:	496a      	ldr	r1, [pc, #424]	; (80086c4 <__ieee754_asinf+0x278>)
 800851c:	f7f8 faea 	bl	8000af4 <__aeabi_fsub>
 8008520:	4629      	mov	r1, r5
 8008522:	f7f8 fbf1 	bl	8000d08 <__aeabi_fmul>
 8008526:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800852a:	f7f8 fae5 	bl	8000af8 <__addsf3>
 800852e:	4601      	mov	r1, r0
 8008530:	4630      	mov	r0, r6
 8008532:	f7f8 fc9d 	bl	8000e70 <__aeabi_fdiv>
 8008536:	4621      	mov	r1, r4
 8008538:	f7f8 fbe6 	bl	8000d08 <__aeabi_fmul>
 800853c:	4601      	mov	r1, r0
 800853e:	4620      	mov	r0, r4
 8008540:	e797      	b.n	8008472 <__ieee754_asinf+0x26>
 8008542:	4620      	mov	r0, r4
 8008544:	f000 f91d 	bl	8008782 <fabsf>
 8008548:	4601      	mov	r1, r0
 800854a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800854e:	f7f8 fad1 	bl	8000af4 <__aeabi_fsub>
 8008552:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8008556:	f7f8 fbd7 	bl	8000d08 <__aeabi_fmul>
 800855a:	4606      	mov	r6, r0
 800855c:	4950      	ldr	r1, [pc, #320]	; (80086a0 <__ieee754_asinf+0x254>)
 800855e:	f7f8 fbd3 	bl	8000d08 <__aeabi_fmul>
 8008562:	4950      	ldr	r1, [pc, #320]	; (80086a4 <__ieee754_asinf+0x258>)
 8008564:	f7f8 fac8 	bl	8000af8 <__addsf3>
 8008568:	4631      	mov	r1, r6
 800856a:	f7f8 fbcd 	bl	8000d08 <__aeabi_fmul>
 800856e:	494e      	ldr	r1, [pc, #312]	; (80086a8 <__ieee754_asinf+0x25c>)
 8008570:	f7f8 fac0 	bl	8000af4 <__aeabi_fsub>
 8008574:	4631      	mov	r1, r6
 8008576:	f7f8 fbc7 	bl	8000d08 <__aeabi_fmul>
 800857a:	494c      	ldr	r1, [pc, #304]	; (80086ac <__ieee754_asinf+0x260>)
 800857c:	f7f8 fabc 	bl	8000af8 <__addsf3>
 8008580:	4631      	mov	r1, r6
 8008582:	f7f8 fbc1 	bl	8000d08 <__aeabi_fmul>
 8008586:	494a      	ldr	r1, [pc, #296]	; (80086b0 <__ieee754_asinf+0x264>)
 8008588:	f7f8 fab4 	bl	8000af4 <__aeabi_fsub>
 800858c:	4631      	mov	r1, r6
 800858e:	f7f8 fbbb 	bl	8000d08 <__aeabi_fmul>
 8008592:	4948      	ldr	r1, [pc, #288]	; (80086b4 <__ieee754_asinf+0x268>)
 8008594:	f7f8 fab0 	bl	8000af8 <__addsf3>
 8008598:	4631      	mov	r1, r6
 800859a:	f7f8 fbb5 	bl	8000d08 <__aeabi_fmul>
 800859e:	4946      	ldr	r1, [pc, #280]	; (80086b8 <__ieee754_asinf+0x26c>)
 80085a0:	4681      	mov	r9, r0
 80085a2:	4630      	mov	r0, r6
 80085a4:	f7f8 fbb0 	bl	8000d08 <__aeabi_fmul>
 80085a8:	4944      	ldr	r1, [pc, #272]	; (80086bc <__ieee754_asinf+0x270>)
 80085aa:	f7f8 faa3 	bl	8000af4 <__aeabi_fsub>
 80085ae:	4631      	mov	r1, r6
 80085b0:	f7f8 fbaa 	bl	8000d08 <__aeabi_fmul>
 80085b4:	4942      	ldr	r1, [pc, #264]	; (80086c0 <__ieee754_asinf+0x274>)
 80085b6:	f7f8 fa9f 	bl	8000af8 <__addsf3>
 80085ba:	4631      	mov	r1, r6
 80085bc:	f7f8 fba4 	bl	8000d08 <__aeabi_fmul>
 80085c0:	4940      	ldr	r1, [pc, #256]	; (80086c4 <__ieee754_asinf+0x278>)
 80085c2:	f7f8 fa97 	bl	8000af4 <__aeabi_fsub>
 80085c6:	4631      	mov	r1, r6
 80085c8:	f7f8 fb9e 	bl	8000d08 <__aeabi_fmul>
 80085cc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80085d0:	f7f8 fa92 	bl	8000af8 <__addsf3>
 80085d4:	4682      	mov	sl, r0
 80085d6:	4630      	mov	r0, r6
 80085d8:	f000 f87c 	bl	80086d4 <__ieee754_sqrtf>
 80085dc:	4b3a      	ldr	r3, [pc, #232]	; (80086c8 <__ieee754_asinf+0x27c>)
 80085de:	4607      	mov	r7, r0
 80085e0:	4598      	cmp	r8, r3
 80085e2:	dd1a      	ble.n	800861a <__ieee754_asinf+0x1ce>
 80085e4:	4651      	mov	r1, sl
 80085e6:	4648      	mov	r0, r9
 80085e8:	f7f8 fc42 	bl	8000e70 <__aeabi_fdiv>
 80085ec:	4639      	mov	r1, r7
 80085ee:	f7f8 fb8b 	bl	8000d08 <__aeabi_fmul>
 80085f2:	4639      	mov	r1, r7
 80085f4:	f7f8 fa80 	bl	8000af8 <__addsf3>
 80085f8:	4601      	mov	r1, r0
 80085fa:	f7f8 fa7d 	bl	8000af8 <__addsf3>
 80085fe:	4933      	ldr	r1, [pc, #204]	; (80086cc <__ieee754_asinf+0x280>)
 8008600:	f7f8 fa7a 	bl	8000af8 <__addsf3>
 8008604:	4601      	mov	r1, r0
 8008606:	4823      	ldr	r0, [pc, #140]	; (8008694 <__ieee754_asinf+0x248>)
 8008608:	f7f8 fa74 	bl	8000af4 <__aeabi_fsub>
 800860c:	2d00      	cmp	r5, #0
 800860e:	4604      	mov	r4, r0
 8008610:	f73f af4a 	bgt.w	80084a8 <__ieee754_asinf+0x5c>
 8008614:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8008618:	e735      	b.n	8008486 <__ieee754_asinf+0x3a>
 800861a:	4601      	mov	r1, r0
 800861c:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 8008620:	f7f8 fa6a 	bl	8000af8 <__addsf3>
 8008624:	4651      	mov	r1, sl
 8008626:	4604      	mov	r4, r0
 8008628:	4648      	mov	r0, r9
 800862a:	f7f8 fc21 	bl	8000e70 <__aeabi_fdiv>
 800862e:	4601      	mov	r1, r0
 8008630:	4620      	mov	r0, r4
 8008632:	f7f8 fb69 	bl	8000d08 <__aeabi_fmul>
 8008636:	f028 080f 	bic.w	r8, r8, #15
 800863a:	4681      	mov	r9, r0
 800863c:	4641      	mov	r1, r8
 800863e:	4640      	mov	r0, r8
 8008640:	f7f8 fb62 	bl	8000d08 <__aeabi_fmul>
 8008644:	4601      	mov	r1, r0
 8008646:	4630      	mov	r0, r6
 8008648:	f7f8 fa54 	bl	8000af4 <__aeabi_fsub>
 800864c:	4641      	mov	r1, r8
 800864e:	4604      	mov	r4, r0
 8008650:	4638      	mov	r0, r7
 8008652:	f7f8 fa51 	bl	8000af8 <__addsf3>
 8008656:	4601      	mov	r1, r0
 8008658:	4620      	mov	r0, r4
 800865a:	f7f8 fc09 	bl	8000e70 <__aeabi_fdiv>
 800865e:	4601      	mov	r1, r0
 8008660:	f7f8 fa4a 	bl	8000af8 <__addsf3>
 8008664:	4601      	mov	r1, r0
 8008666:	480c      	ldr	r0, [pc, #48]	; (8008698 <__ieee754_asinf+0x24c>)
 8008668:	f7f8 fa44 	bl	8000af4 <__aeabi_fsub>
 800866c:	4601      	mov	r1, r0
 800866e:	4648      	mov	r0, r9
 8008670:	f7f8 fa40 	bl	8000af4 <__aeabi_fsub>
 8008674:	4641      	mov	r1, r8
 8008676:	4604      	mov	r4, r0
 8008678:	4640      	mov	r0, r8
 800867a:	f7f8 fa3d 	bl	8000af8 <__addsf3>
 800867e:	4601      	mov	r1, r0
 8008680:	4813      	ldr	r0, [pc, #76]	; (80086d0 <__ieee754_asinf+0x284>)
 8008682:	f7f8 fa37 	bl	8000af4 <__aeabi_fsub>
 8008686:	4601      	mov	r1, r0
 8008688:	4620      	mov	r0, r4
 800868a:	f7f8 fa33 	bl	8000af4 <__aeabi_fsub>
 800868e:	4601      	mov	r1, r0
 8008690:	480f      	ldr	r0, [pc, #60]	; (80086d0 <__ieee754_asinf+0x284>)
 8008692:	e7b9      	b.n	8008608 <__ieee754_asinf+0x1bc>
 8008694:	3fc90fdb 	.word	0x3fc90fdb
 8008698:	b33bbd2e 	.word	0xb33bbd2e
 800869c:	7149f2ca 	.word	0x7149f2ca
 80086a0:	3811ef08 	.word	0x3811ef08
 80086a4:	3a4f7f04 	.word	0x3a4f7f04
 80086a8:	3d241146 	.word	0x3d241146
 80086ac:	3e4e0aa8 	.word	0x3e4e0aa8
 80086b0:	3ea6b090 	.word	0x3ea6b090
 80086b4:	3e2aaaab 	.word	0x3e2aaaab
 80086b8:	3d9dc62e 	.word	0x3d9dc62e
 80086bc:	3f303361 	.word	0x3f303361
 80086c0:	4001572d 	.word	0x4001572d
 80086c4:	4019d139 	.word	0x4019d139
 80086c8:	3f799999 	.word	0x3f799999
 80086cc:	333bbd2e 	.word	0x333bbd2e
 80086d0:	3f490fdb 	.word	0x3f490fdb

080086d4 <__ieee754_sqrtf>:
 80086d4:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 80086d8:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80086dc:	b570      	push	{r4, r5, r6, lr}
 80086de:	4603      	mov	r3, r0
 80086e0:	4604      	mov	r4, r0
 80086e2:	d309      	bcc.n	80086f8 <__ieee754_sqrtf+0x24>
 80086e4:	4601      	mov	r1, r0
 80086e6:	f7f8 fb0f 	bl	8000d08 <__aeabi_fmul>
 80086ea:	4601      	mov	r1, r0
 80086ec:	4620      	mov	r0, r4
 80086ee:	f7f8 fa03 	bl	8000af8 <__addsf3>
 80086f2:	4604      	mov	r4, r0
 80086f4:	4620      	mov	r0, r4
 80086f6:	bd70      	pop	{r4, r5, r6, pc}
 80086f8:	2a00      	cmp	r2, #0
 80086fa:	d0fb      	beq.n	80086f4 <__ieee754_sqrtf+0x20>
 80086fc:	2800      	cmp	r0, #0
 80086fe:	da06      	bge.n	800870e <__ieee754_sqrtf+0x3a>
 8008700:	4601      	mov	r1, r0
 8008702:	f7f8 f9f7 	bl	8000af4 <__aeabi_fsub>
 8008706:	4601      	mov	r1, r0
 8008708:	f7f8 fbb2 	bl	8000e70 <__aeabi_fdiv>
 800870c:	e7f1      	b.n	80086f2 <__ieee754_sqrtf+0x1e>
 800870e:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 8008712:	ea4f 51e0 	mov.w	r1, r0, asr #23
 8008716:	d029      	beq.n	800876c <__ieee754_sqrtf+0x98>
 8008718:	f3c3 0216 	ubfx	r2, r3, #0, #23
 800871c:	07cb      	lsls	r3, r1, #31
 800871e:	f04f 0300 	mov.w	r3, #0
 8008722:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 8008726:	f04f 0419 	mov.w	r4, #25
 800872a:	461e      	mov	r6, r3
 800872c:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8008730:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8008734:	bf58      	it	pl
 8008736:	0052      	lslpl	r2, r2, #1
 8008738:	1040      	asrs	r0, r0, #1
 800873a:	0052      	lsls	r2, r2, #1
 800873c:	1875      	adds	r5, r6, r1
 800873e:	4295      	cmp	r5, r2
 8008740:	bfde      	ittt	le
 8008742:	186e      	addle	r6, r5, r1
 8008744:	1b52      	suble	r2, r2, r5
 8008746:	185b      	addle	r3, r3, r1
 8008748:	3c01      	subs	r4, #1
 800874a:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800874e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008752:	d1f3      	bne.n	800873c <__ieee754_sqrtf+0x68>
 8008754:	b112      	cbz	r2, 800875c <__ieee754_sqrtf+0x88>
 8008756:	3301      	adds	r3, #1
 8008758:	f023 0301 	bic.w	r3, r3, #1
 800875c:	105c      	asrs	r4, r3, #1
 800875e:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8008762:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 8008766:	e7c5      	b.n	80086f4 <__ieee754_sqrtf+0x20>
 8008768:	005b      	lsls	r3, r3, #1
 800876a:	3201      	adds	r2, #1
 800876c:	0218      	lsls	r0, r3, #8
 800876e:	d5fb      	bpl.n	8008768 <__ieee754_sqrtf+0x94>
 8008770:	3a01      	subs	r2, #1
 8008772:	1a89      	subs	r1, r1, r2
 8008774:	e7d0      	b.n	8008718 <__ieee754_sqrtf+0x44>

08008776 <finite>:
 8008776:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800877a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800877e:	0fc0      	lsrs	r0, r0, #31
 8008780:	4770      	bx	lr

08008782 <fabsf>:
 8008782:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008786:	4770      	bx	lr

08008788 <nanf>:
 8008788:	4800      	ldr	r0, [pc, #0]	; (800878c <nanf+0x4>)
 800878a:	4770      	bx	lr
 800878c:	7fc00000 	.word	0x7fc00000

08008790 <abort>:
 8008790:	2006      	movs	r0, #6
 8008792:	b508      	push	{r3, lr}
 8008794:	f000 f94c 	bl	8008a30 <raise>
 8008798:	2001      	movs	r0, #1
 800879a:	f7fa f98a 	bl	8002ab2 <_exit>
	...

080087a0 <__errno>:
 80087a0:	4b01      	ldr	r3, [pc, #4]	; (80087a8 <__errno+0x8>)
 80087a2:	6818      	ldr	r0, [r3, #0]
 80087a4:	4770      	bx	lr
 80087a6:	bf00      	nop
 80087a8:	2000000c 	.word	0x2000000c

080087ac <__libc_init_array>:
 80087ac:	b570      	push	{r4, r5, r6, lr}
 80087ae:	2600      	movs	r6, #0
 80087b0:	4d0c      	ldr	r5, [pc, #48]	; (80087e4 <__libc_init_array+0x38>)
 80087b2:	4c0d      	ldr	r4, [pc, #52]	; (80087e8 <__libc_init_array+0x3c>)
 80087b4:	1b64      	subs	r4, r4, r5
 80087b6:	10a4      	asrs	r4, r4, #2
 80087b8:	42a6      	cmp	r6, r4
 80087ba:	d109      	bne.n	80087d0 <__libc_init_array+0x24>
 80087bc:	f000 f962 	bl	8008a84 <_init>
 80087c0:	2600      	movs	r6, #0
 80087c2:	4d0a      	ldr	r5, [pc, #40]	; (80087ec <__libc_init_array+0x40>)
 80087c4:	4c0a      	ldr	r4, [pc, #40]	; (80087f0 <__libc_init_array+0x44>)
 80087c6:	1b64      	subs	r4, r4, r5
 80087c8:	10a4      	asrs	r4, r4, #2
 80087ca:	42a6      	cmp	r6, r4
 80087cc:	d105      	bne.n	80087da <__libc_init_array+0x2e>
 80087ce:	bd70      	pop	{r4, r5, r6, pc}
 80087d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80087d4:	4798      	blx	r3
 80087d6:	3601      	adds	r6, #1
 80087d8:	e7ee      	b.n	80087b8 <__libc_init_array+0xc>
 80087da:	f855 3b04 	ldr.w	r3, [r5], #4
 80087de:	4798      	blx	r3
 80087e0:	3601      	adds	r6, #1
 80087e2:	e7f2      	b.n	80087ca <__libc_init_array+0x1e>
 80087e4:	08008b90 	.word	0x08008b90
 80087e8:	08008b90 	.word	0x08008b90
 80087ec:	08008b90 	.word	0x08008b90
 80087f0:	08008b98 	.word	0x08008b98

080087f4 <malloc>:
 80087f4:	4b02      	ldr	r3, [pc, #8]	; (8008800 <malloc+0xc>)
 80087f6:	4601      	mov	r1, r0
 80087f8:	6818      	ldr	r0, [r3, #0]
 80087fa:	f000 b887 	b.w	800890c <_malloc_r>
 80087fe:	bf00      	nop
 8008800:	2000000c 	.word	0x2000000c

08008804 <free>:
 8008804:	4b02      	ldr	r3, [pc, #8]	; (8008810 <free+0xc>)
 8008806:	4601      	mov	r1, r0
 8008808:	6818      	ldr	r0, [r3, #0]
 800880a:	f000 b833 	b.w	8008874 <_free_r>
 800880e:	bf00      	nop
 8008810:	2000000c 	.word	0x2000000c

08008814 <memcpy>:
 8008814:	440a      	add	r2, r1
 8008816:	4291      	cmp	r1, r2
 8008818:	f100 33ff 	add.w	r3, r0, #4294967295
 800881c:	d100      	bne.n	8008820 <memcpy+0xc>
 800881e:	4770      	bx	lr
 8008820:	b510      	push	{r4, lr}
 8008822:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008826:	4291      	cmp	r1, r2
 8008828:	f803 4f01 	strb.w	r4, [r3, #1]!
 800882c:	d1f9      	bne.n	8008822 <memcpy+0xe>
 800882e:	bd10      	pop	{r4, pc}

08008830 <memmove>:
 8008830:	4288      	cmp	r0, r1
 8008832:	b510      	push	{r4, lr}
 8008834:	eb01 0402 	add.w	r4, r1, r2
 8008838:	d902      	bls.n	8008840 <memmove+0x10>
 800883a:	4284      	cmp	r4, r0
 800883c:	4623      	mov	r3, r4
 800883e:	d807      	bhi.n	8008850 <memmove+0x20>
 8008840:	1e43      	subs	r3, r0, #1
 8008842:	42a1      	cmp	r1, r4
 8008844:	d008      	beq.n	8008858 <memmove+0x28>
 8008846:	f811 2b01 	ldrb.w	r2, [r1], #1
 800884a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800884e:	e7f8      	b.n	8008842 <memmove+0x12>
 8008850:	4601      	mov	r1, r0
 8008852:	4402      	add	r2, r0
 8008854:	428a      	cmp	r2, r1
 8008856:	d100      	bne.n	800885a <memmove+0x2a>
 8008858:	bd10      	pop	{r4, pc}
 800885a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800885e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008862:	e7f7      	b.n	8008854 <memmove+0x24>

08008864 <memset>:
 8008864:	4603      	mov	r3, r0
 8008866:	4402      	add	r2, r0
 8008868:	4293      	cmp	r3, r2
 800886a:	d100      	bne.n	800886e <memset+0xa>
 800886c:	4770      	bx	lr
 800886e:	f803 1b01 	strb.w	r1, [r3], #1
 8008872:	e7f9      	b.n	8008868 <memset+0x4>

08008874 <_free_r>:
 8008874:	b538      	push	{r3, r4, r5, lr}
 8008876:	4605      	mov	r5, r0
 8008878:	2900      	cmp	r1, #0
 800887a:	d043      	beq.n	8008904 <_free_r+0x90>
 800887c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008880:	1f0c      	subs	r4, r1, #4
 8008882:	2b00      	cmp	r3, #0
 8008884:	bfb8      	it	lt
 8008886:	18e4      	addlt	r4, r4, r3
 8008888:	f000 f8f0 	bl	8008a6c <__malloc_lock>
 800888c:	4a1e      	ldr	r2, [pc, #120]	; (8008908 <_free_r+0x94>)
 800888e:	6813      	ldr	r3, [r2, #0]
 8008890:	4610      	mov	r0, r2
 8008892:	b933      	cbnz	r3, 80088a2 <_free_r+0x2e>
 8008894:	6063      	str	r3, [r4, #4]
 8008896:	6014      	str	r4, [r2, #0]
 8008898:	4628      	mov	r0, r5
 800889a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800889e:	f000 b8eb 	b.w	8008a78 <__malloc_unlock>
 80088a2:	42a3      	cmp	r3, r4
 80088a4:	d90a      	bls.n	80088bc <_free_r+0x48>
 80088a6:	6821      	ldr	r1, [r4, #0]
 80088a8:	1862      	adds	r2, r4, r1
 80088aa:	4293      	cmp	r3, r2
 80088ac:	bf01      	itttt	eq
 80088ae:	681a      	ldreq	r2, [r3, #0]
 80088b0:	685b      	ldreq	r3, [r3, #4]
 80088b2:	1852      	addeq	r2, r2, r1
 80088b4:	6022      	streq	r2, [r4, #0]
 80088b6:	6063      	str	r3, [r4, #4]
 80088b8:	6004      	str	r4, [r0, #0]
 80088ba:	e7ed      	b.n	8008898 <_free_r+0x24>
 80088bc:	461a      	mov	r2, r3
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	b10b      	cbz	r3, 80088c6 <_free_r+0x52>
 80088c2:	42a3      	cmp	r3, r4
 80088c4:	d9fa      	bls.n	80088bc <_free_r+0x48>
 80088c6:	6811      	ldr	r1, [r2, #0]
 80088c8:	1850      	adds	r0, r2, r1
 80088ca:	42a0      	cmp	r0, r4
 80088cc:	d10b      	bne.n	80088e6 <_free_r+0x72>
 80088ce:	6820      	ldr	r0, [r4, #0]
 80088d0:	4401      	add	r1, r0
 80088d2:	1850      	adds	r0, r2, r1
 80088d4:	4283      	cmp	r3, r0
 80088d6:	6011      	str	r1, [r2, #0]
 80088d8:	d1de      	bne.n	8008898 <_free_r+0x24>
 80088da:	6818      	ldr	r0, [r3, #0]
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	4401      	add	r1, r0
 80088e0:	6011      	str	r1, [r2, #0]
 80088e2:	6053      	str	r3, [r2, #4]
 80088e4:	e7d8      	b.n	8008898 <_free_r+0x24>
 80088e6:	d902      	bls.n	80088ee <_free_r+0x7a>
 80088e8:	230c      	movs	r3, #12
 80088ea:	602b      	str	r3, [r5, #0]
 80088ec:	e7d4      	b.n	8008898 <_free_r+0x24>
 80088ee:	6820      	ldr	r0, [r4, #0]
 80088f0:	1821      	adds	r1, r4, r0
 80088f2:	428b      	cmp	r3, r1
 80088f4:	bf01      	itttt	eq
 80088f6:	6819      	ldreq	r1, [r3, #0]
 80088f8:	685b      	ldreq	r3, [r3, #4]
 80088fa:	1809      	addeq	r1, r1, r0
 80088fc:	6021      	streq	r1, [r4, #0]
 80088fe:	6063      	str	r3, [r4, #4]
 8008900:	6054      	str	r4, [r2, #4]
 8008902:	e7c9      	b.n	8008898 <_free_r+0x24>
 8008904:	bd38      	pop	{r3, r4, r5, pc}
 8008906:	bf00      	nop
 8008908:	200007e0 	.word	0x200007e0

0800890c <_malloc_r>:
 800890c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800890e:	1ccd      	adds	r5, r1, #3
 8008910:	f025 0503 	bic.w	r5, r5, #3
 8008914:	3508      	adds	r5, #8
 8008916:	2d0c      	cmp	r5, #12
 8008918:	bf38      	it	cc
 800891a:	250c      	movcc	r5, #12
 800891c:	2d00      	cmp	r5, #0
 800891e:	4606      	mov	r6, r0
 8008920:	db01      	blt.n	8008926 <_malloc_r+0x1a>
 8008922:	42a9      	cmp	r1, r5
 8008924:	d903      	bls.n	800892e <_malloc_r+0x22>
 8008926:	230c      	movs	r3, #12
 8008928:	6033      	str	r3, [r6, #0]
 800892a:	2000      	movs	r0, #0
 800892c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800892e:	f000 f89d 	bl	8008a6c <__malloc_lock>
 8008932:	4921      	ldr	r1, [pc, #132]	; (80089b8 <_malloc_r+0xac>)
 8008934:	680a      	ldr	r2, [r1, #0]
 8008936:	4614      	mov	r4, r2
 8008938:	b99c      	cbnz	r4, 8008962 <_malloc_r+0x56>
 800893a:	4f20      	ldr	r7, [pc, #128]	; (80089bc <_malloc_r+0xb0>)
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	b923      	cbnz	r3, 800894a <_malloc_r+0x3e>
 8008940:	4621      	mov	r1, r4
 8008942:	4630      	mov	r0, r6
 8008944:	f000 f83c 	bl	80089c0 <_sbrk_r>
 8008948:	6038      	str	r0, [r7, #0]
 800894a:	4629      	mov	r1, r5
 800894c:	4630      	mov	r0, r6
 800894e:	f000 f837 	bl	80089c0 <_sbrk_r>
 8008952:	1c43      	adds	r3, r0, #1
 8008954:	d123      	bne.n	800899e <_malloc_r+0x92>
 8008956:	230c      	movs	r3, #12
 8008958:	4630      	mov	r0, r6
 800895a:	6033      	str	r3, [r6, #0]
 800895c:	f000 f88c 	bl	8008a78 <__malloc_unlock>
 8008960:	e7e3      	b.n	800892a <_malloc_r+0x1e>
 8008962:	6823      	ldr	r3, [r4, #0]
 8008964:	1b5b      	subs	r3, r3, r5
 8008966:	d417      	bmi.n	8008998 <_malloc_r+0x8c>
 8008968:	2b0b      	cmp	r3, #11
 800896a:	d903      	bls.n	8008974 <_malloc_r+0x68>
 800896c:	6023      	str	r3, [r4, #0]
 800896e:	441c      	add	r4, r3
 8008970:	6025      	str	r5, [r4, #0]
 8008972:	e004      	b.n	800897e <_malloc_r+0x72>
 8008974:	6863      	ldr	r3, [r4, #4]
 8008976:	42a2      	cmp	r2, r4
 8008978:	bf0c      	ite	eq
 800897a:	600b      	streq	r3, [r1, #0]
 800897c:	6053      	strne	r3, [r2, #4]
 800897e:	4630      	mov	r0, r6
 8008980:	f000 f87a 	bl	8008a78 <__malloc_unlock>
 8008984:	f104 000b 	add.w	r0, r4, #11
 8008988:	1d23      	adds	r3, r4, #4
 800898a:	f020 0007 	bic.w	r0, r0, #7
 800898e:	1ac2      	subs	r2, r0, r3
 8008990:	d0cc      	beq.n	800892c <_malloc_r+0x20>
 8008992:	1a1b      	subs	r3, r3, r0
 8008994:	50a3      	str	r3, [r4, r2]
 8008996:	e7c9      	b.n	800892c <_malloc_r+0x20>
 8008998:	4622      	mov	r2, r4
 800899a:	6864      	ldr	r4, [r4, #4]
 800899c:	e7cc      	b.n	8008938 <_malloc_r+0x2c>
 800899e:	1cc4      	adds	r4, r0, #3
 80089a0:	f024 0403 	bic.w	r4, r4, #3
 80089a4:	42a0      	cmp	r0, r4
 80089a6:	d0e3      	beq.n	8008970 <_malloc_r+0x64>
 80089a8:	1a21      	subs	r1, r4, r0
 80089aa:	4630      	mov	r0, r6
 80089ac:	f000 f808 	bl	80089c0 <_sbrk_r>
 80089b0:	3001      	adds	r0, #1
 80089b2:	d1dd      	bne.n	8008970 <_malloc_r+0x64>
 80089b4:	e7cf      	b.n	8008956 <_malloc_r+0x4a>
 80089b6:	bf00      	nop
 80089b8:	200007e0 	.word	0x200007e0
 80089bc:	200007e4 	.word	0x200007e4

080089c0 <_sbrk_r>:
 80089c0:	b538      	push	{r3, r4, r5, lr}
 80089c2:	2300      	movs	r3, #0
 80089c4:	4d05      	ldr	r5, [pc, #20]	; (80089dc <_sbrk_r+0x1c>)
 80089c6:	4604      	mov	r4, r0
 80089c8:	4608      	mov	r0, r1
 80089ca:	602b      	str	r3, [r5, #0]
 80089cc:	f7fa f87c 	bl	8002ac8 <_sbrk>
 80089d0:	1c43      	adds	r3, r0, #1
 80089d2:	d102      	bne.n	80089da <_sbrk_r+0x1a>
 80089d4:	682b      	ldr	r3, [r5, #0]
 80089d6:	b103      	cbz	r3, 80089da <_sbrk_r+0x1a>
 80089d8:	6023      	str	r3, [r4, #0]
 80089da:	bd38      	pop	{r3, r4, r5, pc}
 80089dc:	200007f8 	.word	0x200007f8

080089e0 <_raise_r>:
 80089e0:	291f      	cmp	r1, #31
 80089e2:	b538      	push	{r3, r4, r5, lr}
 80089e4:	4604      	mov	r4, r0
 80089e6:	460d      	mov	r5, r1
 80089e8:	d904      	bls.n	80089f4 <_raise_r+0x14>
 80089ea:	2316      	movs	r3, #22
 80089ec:	6003      	str	r3, [r0, #0]
 80089ee:	f04f 30ff 	mov.w	r0, #4294967295
 80089f2:	bd38      	pop	{r3, r4, r5, pc}
 80089f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80089f6:	b112      	cbz	r2, 80089fe <_raise_r+0x1e>
 80089f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80089fc:	b94b      	cbnz	r3, 8008a12 <_raise_r+0x32>
 80089fe:	4620      	mov	r0, r4
 8008a00:	f000 f830 	bl	8008a64 <_getpid_r>
 8008a04:	462a      	mov	r2, r5
 8008a06:	4601      	mov	r1, r0
 8008a08:	4620      	mov	r0, r4
 8008a0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a0e:	f000 b817 	b.w	8008a40 <_kill_r>
 8008a12:	2b01      	cmp	r3, #1
 8008a14:	d00a      	beq.n	8008a2c <_raise_r+0x4c>
 8008a16:	1c59      	adds	r1, r3, #1
 8008a18:	d103      	bne.n	8008a22 <_raise_r+0x42>
 8008a1a:	2316      	movs	r3, #22
 8008a1c:	6003      	str	r3, [r0, #0]
 8008a1e:	2001      	movs	r0, #1
 8008a20:	e7e7      	b.n	80089f2 <_raise_r+0x12>
 8008a22:	2400      	movs	r4, #0
 8008a24:	4628      	mov	r0, r5
 8008a26:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008a2a:	4798      	blx	r3
 8008a2c:	2000      	movs	r0, #0
 8008a2e:	e7e0      	b.n	80089f2 <_raise_r+0x12>

08008a30 <raise>:
 8008a30:	4b02      	ldr	r3, [pc, #8]	; (8008a3c <raise+0xc>)
 8008a32:	4601      	mov	r1, r0
 8008a34:	6818      	ldr	r0, [r3, #0]
 8008a36:	f7ff bfd3 	b.w	80089e0 <_raise_r>
 8008a3a:	bf00      	nop
 8008a3c:	2000000c 	.word	0x2000000c

08008a40 <_kill_r>:
 8008a40:	b538      	push	{r3, r4, r5, lr}
 8008a42:	2300      	movs	r3, #0
 8008a44:	4d06      	ldr	r5, [pc, #24]	; (8008a60 <_kill_r+0x20>)
 8008a46:	4604      	mov	r4, r0
 8008a48:	4608      	mov	r0, r1
 8008a4a:	4611      	mov	r1, r2
 8008a4c:	602b      	str	r3, [r5, #0]
 8008a4e:	f7fa f820 	bl	8002a92 <_kill>
 8008a52:	1c43      	adds	r3, r0, #1
 8008a54:	d102      	bne.n	8008a5c <_kill_r+0x1c>
 8008a56:	682b      	ldr	r3, [r5, #0]
 8008a58:	b103      	cbz	r3, 8008a5c <_kill_r+0x1c>
 8008a5a:	6023      	str	r3, [r4, #0]
 8008a5c:	bd38      	pop	{r3, r4, r5, pc}
 8008a5e:	bf00      	nop
 8008a60:	200007f8 	.word	0x200007f8

08008a64 <_getpid_r>:
 8008a64:	f7fa b80e 	b.w	8002a84 <_getpid>

08008a68 <__retarget_lock_acquire_recursive>:
 8008a68:	4770      	bx	lr

08008a6a <__retarget_lock_release_recursive>:
 8008a6a:	4770      	bx	lr

08008a6c <__malloc_lock>:
 8008a6c:	4801      	ldr	r0, [pc, #4]	; (8008a74 <__malloc_lock+0x8>)
 8008a6e:	f7ff bffb 	b.w	8008a68 <__retarget_lock_acquire_recursive>
 8008a72:	bf00      	nop
 8008a74:	200007f0 	.word	0x200007f0

08008a78 <__malloc_unlock>:
 8008a78:	4801      	ldr	r0, [pc, #4]	; (8008a80 <__malloc_unlock+0x8>)
 8008a7a:	f7ff bff6 	b.w	8008a6a <__retarget_lock_release_recursive>
 8008a7e:	bf00      	nop
 8008a80:	200007f0 	.word	0x200007f0

08008a84 <_init>:
 8008a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a86:	bf00      	nop
 8008a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a8a:	bc08      	pop	{r3}
 8008a8c:	469e      	mov	lr, r3
 8008a8e:	4770      	bx	lr

08008a90 <_fini>:
 8008a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a92:	bf00      	nop
 8008a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a96:	bc08      	pop	{r3}
 8008a98:	469e      	mov	lr, r3
 8008a9a:	4770      	bx	lr
